#Region "Imports"
Imports System.Data
Imports System.Data.SqlClient
Imports Microsoft.ApplicationBlocks.Data
Imports AtPar_BusinessRules_RemotingProxy
Imports System.IO
Imports System.Reflection
Imports log4net
Imports System.Configuration
Imports System.Xml
Imports System.Text
Imports System.Math
Imports System.Text.RegularExpressions
Imports System.ComponentModel
Imports System.AppDomain
Imports System.Web.Mail
Imports System.Threading
Imports System.DirectoryServices
Imports Microsoft.Practices.EnterpriseLibrary.Data.Sql
Imports Microsoft.Practices.EnterpriseLibrary.Data
Imports System.Collections
Imports System.Collections.Generic
#End Region

#Region "Bug Fix(s)"
'DK-0003911-13/05/2008
'DK-0004084-FEATURE-06/16/2008
'NB-0004241- 07/23/2008
'SM-0004566- 09/17/2008
'NB-0004668- 09/26/2008
'NB-0004678- 09/26/2008
'SM-0004532- 10/07/2008
'RK-0004907- 10/15/2008
'NB-0005074- 11/18/2008
'NB-0005154-12/23/2008
'NB-0005154-12/29/2008
'NB-0005526-01/31/2009
'NB-0005818,0005875 -03/05/2009
'NB-0005791 -03/05/2009
'NB-0005787 -03/05/2007
'DG-0006288 -04/15/2009
#End Region

#Region "AtparWebTrans Class Implementation"

Public Class AtPar_WebTrans
    Inherits AtPar_Application_Base
    Implements IAtpar_WebTrans
    Implements IDisposable


#Region "[ Variable Declaration ]"

    Private disposedValue As Boolean = False        ' To detect redundant calls

    'NB-0005154
    Public Const strLogConfigBackUpFileExtn As String = ".config.bak"
    Public Const strLogConfigFileExtn As String = ".config"
    Private AllOrgGrp As String = "All"
    Private adminProfile As String = "admin"

    Private Const CONST_HHT_WEB_ACCESS As String = "HHT and WEB Access"
    Private Const CONST_WEB_ACCESS As String = "WEB Access"
    Private Const CONST_HHT_ACCESS As String = "HHT Access"
    Private Const CONST_NO_ACCESS As String = " Profile Creation Failed, No HHT and Web Access"
    Private Const CONST_NO_MENU_ACCESS As String = "No Menu Access "
    Private Const CONST_MENUSEQ_NOT_NUMERIC As String = "Menu Sequence is not Numeric"
    Private Const CONST_MENUSEQ_IS_MANDATORY As String = "Menu Sequence is mandatory"
    Private Const CONST_MENUSEQ_NOT_VALID As String = "Sequence Number should be 0-99"
    Private Const CONST_SELECT_DEFAULT_DISPLAY_FIELD As String = "Minimum Default display fields have to be Selected"
    Private Const CONST_MANDATORY_FIELDS_MISSING As String = "Mandatory fields are missing"
    Private Const CONST_MANDATORY_TOGGLE_FIELD As String = "Mandatory Toggle field should be selected"
    Private Const CONST_NOT_VALID_DATA As String = "Order, Width, toggle Order should be numeric"
    Private Const CONST_PROFILE_CREATION_FAILED As String = "Profile creation failed"
    Private Const CONST_PROFILE_UPDATION_FAILED As String = "Profile updation failed"
    Private Const CONST_PROFILE_INVALID_DATA As String = "Profile Creation Failed, Invalid Data"
    Private Const CONST_PROFILE_CREATION_SUCCESS As String = "Profile created successfully "
    Private Const CONST_PROFILE_UPDATION_SUCCESS As String = "Profile updated successfully "
    Private Const CONST_INVALID_MENU_DATA As String = "MenuTemplate Id validation Failed - check MenuTemplate Error table"
    Private Const CONST_INVALID_SCREENDISPLAY_DATA As String = "ScreenDisplayTemplate Id validation Failed - check ScreenDisplay Error table"
    Private Const CONST_INVALID_PARAMETERS_DATA As String = "ParameterTemplate Id validation Failed - check Parameters Error table"
    Private Const CONST_PROFILETEMPLATEID_IS_MANDATORY As String = "Invalid ProfileTemplate Id in ProfileSetUp"
    Private Const CONST_SCREENTEMPLATEID_IS_MANDATORY As String = "Invalid ProfileScreenDisplayTemplate Id in ProfileScreenDisplay"
    Private Const CONST_MENUTEMPLATEID_IS_MANDATORY As String = "Invalid ProfileMenuTemplate Id in ProfileMenus"
    Private Const CONST_PARAMETERTEMPLATEID_IS_MANDATORY As String = "Invalid ProfileParameterTemplate Id in ProfileParameters"
    Private Const CONST_ERR_SEPARATOR As String = " - "
    Private Const CONST_ERR_COMMA_SEPARATOR As String = ", "
    Private Const CONST_SCREENDISPLAY_NOT_VALID As String = "Screen Display Order and Toggle order should be 0-99"
    Private Const CONST_SCREENDISPLAY_COLUMN_WIDTH As String = "Screen Display Column Width should be 0-9999"
    Private Const CONST_NO_ATPAR_ACCESS As String = "Cannot remove access of ATPAR product in Profile Setup for Admin Profile"
    Private Const CONST_NO_ATPAR_MENU_ACCESS As String = "Cannot remove the menu access of ATPAR product for Admin Profile "
    Private Const CONST_ATPAR_APPID = "0"
    Private Const CONST_ATPAR As String = "Atpar"
    Private Const CONST_NOT_VALID_PARAMETER As String = "Not a valid column parameter"
    Private Const CONST_MENU_CODE As String = "mt_atpar_configure_system_from_db.aspx"

    Private Shared ReadOnly log As log4net.ILog = LogManager.GetLogger(GetType(AtPar_WebTrans))
    Private sqlConnect As SqlConnection
    Dim br_AtParUtilities As AtPar_BusinessRules.Utilities

    ' nice label variables
    Public _strLblFileName As String = String.Empty
    Dim PNE As PocketNiceEngine.IEngine
    Dim pneOutput As PocketNiceEngine.IOutput
    Dim pneLabel As PocketNiceEngine.ILabel
    Private Const LabelFileNameSuffix As String = ".lvx"
#End Region


    ' IDisposable
    Protected Overridable Sub Dispose(ByVal disposing As Boolean)
        If Not Me.disposedValue Then
            If disposing Then
                ' TODO: free unmanaged resources when explicitly called
            End If

            ' TODO: free shared unmanaged resources
        End If
        Me.disposedValue = True
    End Sub

#Region " IDisposable Support "
    ' This code added by Visual Basic to correctly implement the disposable pattern.
    Public Sub Dispose() Implements IDisposable.Dispose
        ' Do not change this code.  Put cleanup code in Dispose(ByVal disposing As Boolean) above.
        Dispose(True)
        GC.SuppressFinalize(Me)
    End Sub


#End Region

  

    Sub New()
        log4net.ThreadContext.Properties(LOGPROPERTIES.PRODUCTNAME.ToString) = EnumApps.Init.ToString()
    End Sub

    ''' <summary>
    ''' To get Applications based on User ID
    ''' </summary>
    ''' <param name="pDSApps">DataSet Contains Applications of User</param>
    ''' <param name="pUserID">User ID</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function GetApps(ByRef pDSApps As DataSet, ByVal pUserID As String, ByVal pDeviceTokenEntry() As String) As Integer _
                   Implements IAtpar_WebTrans.GetApps

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserID
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strSQL As String = String.Empty

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            _strSQL = "SELECT APP_ID, APP_NAME FROM MT_ATPAR_APP"

            If log.IsInfoEnabled Then log.Info(_strSQL)

            pDSApps = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))

            If pDSApps.Tables(0).Rows.Count = 0 Then
                Return E_NORECORDFOUND
            Else
                Return ATPAR_OK
            End If
        Catch sqlex As SqlException
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the AppIDs " & vbCrLf & _
                                                                 " with the following SQL :" & _strSQL & vbCrLf & _
                                                                 " Exception is:" & sqlex.ToString & vbCrLf)
            Throw New Exception("GetApps Failed", sqlex)
            Return ATPAR_E_LOCALDBSELECTFAIL
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the AppIDs " & vbCrLf & _
                                                                " with the following SQL :" & _strSQL & vbCrLf & _
                                                                " Exception is:" & ex.ToString & vbCrLf)
            Throw New Exception("GetApps Failed", ex)
            Return E_SERVERERROR
        End Try

    End Function

    ''' <summary>
    ''' To get menus based on Applications ID & User ID
    ''' </summary>
    ''' <param name="pUserID">User ID</param>
    ''' <param name="pDsAppMenus">DataSet Contains Menus of Application ID</param>
    ''' <param name="pAppId">Application ID</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function GetAppMenus(ByVal pUserID As String, ByRef pDsAppMenus As DataSet, _
                                ByVal pAppId As Integer, ByVal pDeviceTokenEntry() As String) As Integer _
                                Implements IAtpar_WebTrans.GetAppMenus

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserID
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strSQL As String = String.Empty
        Dim _strEnterpriseSystem As String = String.Empty

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            _strEnterpriseSystem = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), CONFIGFILE.ERP_SYS_DETAILS.ToString(), ERP_SYS_DETAILS.ENTERPRISESYSTEM.ToString)
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to get the enterprise system name " _
                                                                & ex.ToString & ":" & vbCrLf)
            Return E_SERVERERROR
        End Try

        Try
            _strSQL = "SELECT A.APP_ID, A.APP_NAME, B.MENU_ID, B.MENU_SUB_GROUP, B.MENU_NAME," & _
                        "(SELECT AUDIT = CASE WHEN B.AUDIT='Y'" & _
                             "THEN 'True' ELSE 'False' END) AS UPDATE_DELETE FROM MT_ATPAR_APP A," & _
                             " MT_ATPAR_MENUS B WHERE A.APP_ID=B.APP_ID AND B.AUDIT<>'I' " & _
                             "AND B.ENTERPRISE_SYSTEM ='" & _strEnterpriseSystem & "'"

            If pAppId <> -1 Then
                _strSQL = _strSQL + " AND A.APP_ID=" & pAppId
            End If

            If log.IsInfoEnabled Then log.Info(_strSQL)

            pDsAppMenus = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))

            If pDsAppMenus.Tables(0).Rows.Count = 0 Then
                Return E_NORECORDFOUND
            Else
                Return ATPAR_OK
            End If
        Catch sqlex As SqlException
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the AppMenus " & vbCrLf & _
                                                                 " with the following SQL :" & _strSQL & vbCrLf & _
                                                                 " Exception is:" & sqlex.ToString & vbCrLf)
            Throw New Exception("GetAppMenus Failed", sqlex)
            Return ATPAR_E_LOCALDBSELECTFAIL
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the AppMenus " & vbCrLf & _
                                                                " with the following SQL :" & _strSQL & vbCrLf & _
                                                                " Exception is:" & ex.ToString & vbCrLf)
            Throw New Exception("GetAppMenus Failed", ex)
            Return E_SERVERERROR
        End Try

    End Function

    ''' <summary>
    ''' To save Audit Setup Info
    ''' </summary>
    ''' <param name="pStrUser">User</param>
    ''' <param name="pDsAudit">Audit info as Dataset</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function SaveAuditSetUpInfo(ByVal pDsAudit As DataSet, _
                                       ByVal pStrUser As String, _
                                       ByVal pDeviceTokenEntry() As String) As Integer _
                                       Implements IAtpar_WebTrans.SaveAuditSetUpInfo

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strSQL As String = String.Empty
        Dim _strEnterpriseSystem As String = String.Empty

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            _strEnterpriseSystem = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), CONFIGFILE.ERP_SYS_DETAILS.ToString(), ERP_SYS_DETAILS.ENTERPRISESYSTEM.ToString)
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to get the enterprise system name " _
                                                                & ex.ToString & ":" & vbCrLf)
            Return E_SERVERERROR
        End Try

        Try
            For i As Int16 = 0 To pDsAudit.Tables(0).Rows.Count - 1
                _strSQL = "UPDATE MT_ATPAR_MENUS SET AUDIT='" & pDsAudit.Tables(0).Rows(i).Item("AUDIT") & "'," & _
                " LAST_UPDATE_USER = '" & pStrUser & "', LAST_UPDATE_DATE=GETDATE() WHERE  APP_ID='" & _
                 "" & pDsAudit.Tables(0).Rows(i).Item("APP_ID") & "'AND MENU_ID='" & _
                 "" & pDsAudit.Tables(0).Rows(i).Item("MENU_ID") & "' " & _
                 "AND ENTERPRISE_SYSTEM = '" & _strEnterpriseSystem & "' "

                If log.IsInfoEnabled Then log.Info(_strSQL)

                m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL))
                SaveAuditSetUpInfo = ATPAR_OK
            Next
        Catch sqlex As SqlException
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to save audit setup " & vbCrLf & _
                                                                " with the following SQL :" & _strSQL & vbCrLf & _
                                                                " Exception is:" & sqlex.ToString & vbCrLf)
            Throw New Exception("SaveAuditSetUpnfo Failed", sqlex)
            Return ATPAR_E_LOCALDBSELECTFAIL
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to save audit setup " & vbCrLf & _
                                                                " with the following SQL :" & _strSQL & vbCrLf & _
                                                                " Exception is:" & ex.ToString & vbCrLf)
            Throw New Exception("SaveAuditSetUpnfo Failed", ex)
            Return E_SERVERERROR
        End Try

    End Function

    ''' <summary>
    ''' To get Org Group IDs
    ''' </summary>
    ''' <param name="pUserID">User ID</param>
    ''' <param name="pOrgGrpId">Org Group ID</param>
    ''' <param name="pName">Profile Name</param>
    ''' <param name="pDSOrgGrp">Org Group IDs as Dataset</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function GetOrgGrpIDs(ByVal pUserID As String, ByVal pOrgGrpId As String, _
                                 ByVal pName As String, ByRef pDSOrgGrp As DataSet, ByVal pDeviceTokenEntry() As String) As Long _
                                 Implements IAtpar_WebTrans.GetOrgGrpIDs

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserID
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Dim sqlParms() As SqlParameter

        'DK-0004084-FEATURE
        sqlParms = New SqlParameter(2) {}

        sqlParms(0) = New SqlParameter("@pOrgGrpID", SqlDbType.NVarChar)
        sqlParms(0).Value = pOrgGrpId

        sqlParms(1) = New SqlParameter("@pName", SqlDbType.NVarChar)
        sqlParms(1).Value = pName

        If log.IsInfoEnabled Then
            log.Info("Calling SP_GetOrgGrpID with the following syntax..")
            Dim _strSQL As String = "exec SP_GetOrgGrpID " & _
                                     "'" & sqlParms(0).Value & "', " & _
                                     "'" & sqlParms(1).Value & "' "
            log.Info(_strSQL)
        End If

        Try
            Dim _Cmd As SqlCommand
            Try
                _Cmd = New SqlCommand

                _Cmd.Connection = m_LocalDB.CreateConnection
                _Cmd.CommandType = CommandType.StoredProcedure
                _Cmd.CommandText = "SP_GetOrgGrpID"
                _Cmd.Parameters.Add(sqlParms(0))
                _Cmd.Parameters.Add(sqlParms(1))

                pDSOrgGrp = m_LocalDB.ExecuteDataSet(_Cmd)

            Catch sqlex As SqlException
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & vbCrLf & GetSQLExceptionMessageString(sqlex))
                Return ATPAR_E_LOCALDBSELECTFAIL
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal("E_SERVERERROR :" & ex.ToString)
                Return E_SERVERERROR
            Finally
                _Cmd.dispose()
            End Try

            GetOrgGrpIDs = ATPAR_OK

        Catch sqlex As SqlException
            If log.IsErrorEnabled Then log.Error(GetSQLExceptionMessageString(sqlex))
            Throw New Exception("GetOrgGrpIDs Failed", sqlex)
            Return ATPAR_E_LOCALDBSELECTFAIL
        Catch ex As Exception
            Throw New Exception("GetOrgGrpIDs Failed", ex)
            Return E_SERVERERROR
        End Try
    End Function

    ''' <summary>
    ''' To get all the Profile corresponding to User ID
    ''' </summary>
    ''' <param name="pUserID">User ID</param>
    ''' <param name="pDSProfiles">Profiles as Dataset</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function GetProfiles(ByVal pUserID As String, ByRef pDSProfiles As DataSet, ByVal pDeviceTokenEntry() As String) As Integer _
                                Implements IAtpar_WebTrans.GetProfiles

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserID
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strSQL As String = String.Empty

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            _strSQL = "SELECT PROFILE_ID, PROFILE_DESCRIPTION FROM MT_ATPAR_PROFILE"

            If log.IsInfoEnabled Then log.Info(_strSQL)

            pDSProfiles = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))

            GetProfiles = ATPAR_OK

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get profiles " & vbCrLf & _
                                                                   " with the following SQL :" & _strSQL & vbCrLf & _
                                                                   " Exception is:" & ex.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBSELECTFAIL
        End Try

    End Function

    ''' <summary>
    ''' To get Profile Users Info
    ''' </summary>
    ''' <param name="pUserID">User ID</param>
    ''' <param name="pUID">User ID</param>
    ''' <param name="pLdap">LDAP Role</param>
    ''' <param name="pFName">First Name</param>
    ''' <param name="pLOrg">LDAP Org Group ID</param>
    ''' <param name="pDSProfUserInfo">Profile User Info as Dataset</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function GetProfileUsersInfo(ByVal pUserID As String, ByVal pUID As String, _
                                        ByVal pLdap As String, ByVal pFName As String, _
                                        ByVal pLOrg As String, ByRef pDSProfUserInfo As DataSet, _
                                        ByVal pProfileID As String, ByVal pOrgGrpId As String, _
                                        ByVal pDeviceTokenEntry() As String) As Integer _
                                        Implements IAtpar_WebTrans.GetProfileUsersInfo

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserID
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim blnWhere As Boolean = False

        Dim _strSQL As String = String.Empty

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            'NB-0005526,0005791
            _strSQL = "SELECT A.FIRST_NAME +' '+ A.MIDDLE_INITIAL +' '+A.LAST_NAME + ' (' +  A.USER_ID + ')' AS USERNAME," & _
                    "A.LDAP_ROLE,A.USER_ID AS USER_ID, A.PROFILE_ID, B.ORG_GROUP_ID, A.PASSHASH, C.PASSHASH_REQUIRED FROM MT_ATPAR_USER A " & _
                    "LEFT OUTER JOIN MT_ATPAR_USER_ORG_GROUPS B ON  A.USER_ID = B.USER_ID " & _
                    " JOIN MT_ATPAR_USER_ACL C ON A.USER_ID = C.USER_ID AND C.ACCOUNT_DISABLED = 0 "

            If Not String.IsNullOrEmpty(pUID) Or _
              Not String.IsNullOrEmpty(pLdap) Or _
              Not String.IsNullOrEmpty(pFName) Or _
              Not String.IsNullOrEmpty(pLOrg) Or _
              (pProfileID <> adminProfile And pOrgGrpId <> AllOrgGrp) Or _
              (pProfileID <> adminProfile And pOrgGrpId = AllOrgGrp) Or _
              (pProfileID = adminProfile And pOrgGrpId <> AllOrgGrp) Then
                _strSQL = _strSQL & " WHERE "
            End If

            If pProfileID <> adminProfile And pOrgGrpId <> AllOrgGrp Then

                _strSQL = _strSQL & " B.ORG_GROUP_ID <> ('" & AllOrgGrp & "') AND " & _
                                    "A.PROFILE_ID <> '" & adminProfile & "'" & _
                                    "AND (B.ORG_GROUP_ID = '" & pOrgGrpId & "' OR B.ORG_GROUP_ID = '' ) "

                blnWhere = True
            ElseIf pProfileID <> adminProfile And pOrgGrpId = AllOrgGrp Then

                _strSQL = _strSQL & " A.PROFILE_ID <> '" & adminProfile & "' "

                blnWhere = True
            ElseIf pProfileID = adminProfile And pOrgGrpId <> AllOrgGrp Then

                _strSQL = _strSQL & " B.ORG_GROUP_ID <> ('" & AllOrgGrp & "') " & _
                                  "AND (B.ORG_GROUP_ID ='" & pOrgGrpId & "' OR B.ORG_GROUP_ID = '' ) "

                blnWhere = True
            End If

            If Not String.IsNullOrEmpty(pUID) Then
                If blnWhere Then
                    _strSQL = _strSQL & " AND A.USER_ID LIKE '" & pUID & "%' "
                Else
                    _strSQL = _strSQL & " A.USER_ID LIKE '" & pUID & "%' "
                End If
                blnWhere = True
            End If

            If Not String.IsNullOrEmpty(pLdap) Then
                If blnWhere Then
                    _strSQL = _strSQL & " AND A.LDAP_ROLE LIKE '" & pLdap & "%'"
                Else
                    _strSQL = _strSQL & " A.LDAP_ROLE LIKE '" & pLdap & "%'"
                End If
                blnWhere = True
            End If

            If Not String.IsNullOrEmpty(pFName) Then
                If blnWhere Then
                    _strSQL = _strSQL & " AND A.FIRST_NAME LIKE '" & pFName & "%'"
                Else
                    _strSQL = _strSQL & " A.FIRST_NAME LIKE '" & pFName & "%'"
                End If
                blnWhere = True
            End If

            If Not String.IsNullOrEmpty(pLOrg) Then
                If blnWhere Then
                    _strSQL = _strSQL & " AND A.LDAP_ORG LIKE '" & pLOrg & "%'"
                Else
                    _strSQL = _strSQL & " A.LDAP_ORG LIKE '" & pLOrg & "%'"
                End If
            End If

            If log.IsInfoEnabled Then log.Info(_strSQL)

            pDSProfUserInfo = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))

            If pDSProfUserInfo.Tables(0).Rows.Count = 0 Then
                GetProfileUsersInfo = E_NORECORDFOUND
            Else
                GetProfileUsersInfo = ATPAR_OK
            End If

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the profile user info " & vbCrLf & _
                                                                   " with the following SQL :" & _strSQL & vbCrLf & _
                                                                   " Exception is:" & ex.ToString & vbCrLf)
            GetProfileUsersInfo = ATPAR_E_LOCALDBSELECTFAIL
        End Try

    End Function

    ''' <summary>
    ''' To save Profile Users Info
    ''' </summary>
    ''' <param name="pDSProfUserInfo">Profile Users Info as Dataset</param>
    ''' <param name="pProfile">Profile ID</param>
    ''' <param name="pOrgGrp">Org Group ID</param>
    ''' <param name="pUID">User ID</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function SaveProfileUsersInfo(ByVal pDSProfUserInfo As DataSet, _
                                         ByVal pProfile As String, _
                                         ByVal pOrgGrp As String, _
                                         ByVal pUID As String, _
                                         ByVal pDeviceTokenEntry() As String) As Integer _
                                         Implements IAtpar_WebTrans.SaveProfileUsersInfo

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strSQL As String = String.Empty

        Dim intcnt As Integer
        Dim strProfile As String
        Dim strOrg As String
        Dim ds As New DataSet
        Dim dsData As New DataSet
        Dim intNoofRecords As Integer
        Dim _dsProfileParams As New DataSet
        Dim _strUserId As String
        Dim _strEnterpriseSystem As String = String.Empty

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            _strEnterpriseSystem = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), CONFIGFILE.ERP_SYS_DETAILS.ToString(), ERP_SYS_DETAILS.ENTERPRISESYSTEM.ToString)
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to get the enterprise system name " _
                                                                & ex.ToString & ":" & vbCrLf)
            Return E_SERVERERROR
        End Try

        Dim _trans As SqlTransaction
        sqlConnect = m_LocalDB.CreateConnection()
        sqlConnect.Open()
        _trans = sqlConnect.BeginTransaction()
        intNoofRecords = 0
        Try
         


            For intcnt = 0 To pDSProfUserInfo.Tables(0).Rows.Count - 1
                strProfile = pProfile
                _strSQL = String.Empty
                strOrg = pOrgGrp
                _strUserId = pDSProfUserInfo.Tables(0).Rows(intcnt).Item("USER_ID")

                If Not String.IsNullOrEmpty(pProfile) Then

                    _strSQL = "SELECT COUNT(APP_ID) FROM MT_ATPAR_PROFILE_APP_ACL WHERE PROFILE_ID ='" & pProfile & "'"
                    If log.IsInfoEnabled Then log.Info(methodBaseName & _strSQL)

                    Try
                        intNoofRecords = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(_strSQL), _trans)

                    Catch ex As Exception
                        _trans.Rollback()
                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the profile info " & vbCrLf & _
                                                                   " with the following SQL :" & _strSQL & vbCrLf & _
                                                                   " Exception is:" & ex.ToString & vbCrLf)
                        SaveProfileUsersInfo = ATPAR_E_LOCALDBSELECTFAIL
                        Exit Function
                    End Try
                    If intNoofRecords = 0 Then
                        _trans.rollback()
                        SaveProfileUsersInfo = ATPAR_E_NOPRODUCTS_FOR_PROFILE
                        Exit Function
                    Else

                        Try
                            _strSQL = "UPDATE MT_ATPAR_USER SET "

                            If pDSProfUserInfo.Tables(0).Rows(intcnt).Item("ASSIGN") = "N" Then
                                strProfile = String.Empty
                            ElseIf pDSProfUserInfo.Tables(0).Rows(intcnt).Item("ASSIGN") = "Y" Then
                                pProfile = strProfile
                            End If

                            _strSQL = _strSQL & "PROFILE_ID='" & strProfile & "',LAST_UPDATE_USER='" & pUID & "'," & _
                                              "LAST_UPDATE_DATE= getDate() WHERE " & _
                                              "USER_ID='" & pDSProfUserInfo.Tables(0).Rows(intcnt).Item("USER_ID") & "'"

                            If log.IsInfoEnabled Then log.Info(methodBaseName & _strSQL)

                            ds = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL), _trans)
                        Catch ex As Exception
                            _trans.Rollback()
                            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to update the profile info " & vbCrLf & _
                                                                  " with the following SQL :" & _strSQL & vbCrLf & _
                                                                  " Exception is:" & ex.ToString & vbCrLf)
                            SaveProfileUsersInfo = ATPAR_E_LOCALDBUPDATEFAIL
                            Exit Function
                        End Try

                        'To delete Profile user parameters  and inserting in User App Parameters table
                        Try
                            _strSQL = " DELETE FROM MT_ATPAR_USER_APP_PARAMETERS WHERE " & _
                                      " USER_ID = '" & pDSProfUserInfo.Tables(0).Rows(intcnt).Item("USER_ID") & "'"

                            If log.IsInfoEnabled Then log.Info(methodBaseName & _strSQL)

                            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), _trans)

                        Catch ex As Exception
                            _trans.Rollback()
                            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to delete the profile info " & vbCrLf & _
                                                                  " with the following SQL :" & _strSQL & vbCrLf & _
                                                                  " Exception is:" & ex.ToString & vbCrLf)
                            SaveProfileUsersInfo = ATPAR_E_LOCALDBDELETEFAIL
                            Exit Function
                        End Try

                        Try
                            _strSQL = String.Empty
                            _strSQL = " SELECT APP_ID, PARAMETER_ID, DEFAULT_VALUE AS PARAMETER_VALUE FROM MT_ATPAR_PARAM_MASTER " & _
                                      " WHERE PARAMETER_LEVEL='USER'" & _
                                      " AND ENTERPRISE_SYSTEM = '" & _strEnterpriseSystem & "' AND APP_ID IN (SELECT DISTINCT APP_ID FROM MT_ATPAR_PROFILE_APP_ACL " & _
                                      " WHERE (CLIENT_USER='Y' OR SERVER_USER='Y') AND PROFILE_ID = '" & strProfile & "')"

                            If log.IsInfoEnabled Then log.Info(methodBaseName & _strSQL)

                            _dsProfileParams = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL), _trans)
                        Catch ex As Exception
                            _trans.Rollback()
                            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the profile info " & vbCrLf & _
                                                                   " with the following SQL :" & _strSQL & vbCrLf & _
                                                                   " Exception is:" & ex.ToString & vbCrLf)
                            SaveProfileUsersInfo = ATPAR_E_LOCALDBSELECTFAIL
                            Exit Function
                        End Try

                        If _dsProfileParams.Tables.Count > 0 Then
                            For intProfileCount As Integer = 0 To _dsProfileParams.Tables(0).Rows.Count - 1
                                _strSQL = String.Empty
                                Try
                                    _strSQL = "INSERT INTO MT_ATPAR_USER_APP_PARAMETERS (APP_ID, USER_ID, PARAMETER_ID, PARAMETER_VALUE, " & _
                                                " LAST_UPDATE_DATE, LAST_UPDATE_USER, LAST_CLIENT_ADDRESS) " & _
                                                " VALUES('" & _dsProfileParams.Tables(0).Rows(intProfileCount).Item("APP_ID") & "', " & _
                                                " '" & _strUserId & "', " & _
                                                " '" & _dsProfileParams.Tables(0).Rows(intProfileCount).Item("PARAMETER_ID") & "'," & _
                                                " '" & _dsProfileParams.Tables(0).Rows(intProfileCount).Item("PARAMETER_VALUE") & "', " & _
                                                "GETDATE()," & _
                                                "''," & _
                                                "'')"
                                    If log.IsInfoEnabled Then log.Info(methodBaseName & _strSQL)
                                    m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), _trans)
                                Catch ex As Exception
                                    _trans.Rollback()
                                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to insert the profile info " & vbCrLf & _
                                                                                      " with the following SQL :" & _strSQL & vbCrLf & _
                                                                                      " Exception is:" & ex.ToString & vbCrLf)
                                    SaveProfileUsersInfo = ATPAR_E_LOCALDBINSERTFAIL
                                    Exit Function
                                End Try
                            Next
                        End If
                    End If

                End If ' If pProfile <> String.Empty Then

                Try
                    If Not String.IsNullOrEmpty(strOrg) Then

                        'HK-0003368-03/25/2008
                        _strSQL = " SELECT COUNT(USER_ID) FROM MT_ATPAR_USER_ORG_GROUPS WHERE USER_ID = " & _
                                 " '" & pDSProfUserInfo.Tables(0).Rows(intcnt).Item("USER_ID") & "' "

                        If log.IsInfoEnabled Then log.Info(methodBaseName & _strSQL)

                        intNoofRecords = 0
                        intNoofRecords = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(_strSQL), _trans)

                        If intNoofRecords > 0 Then

                            _strSQL = "UPDATE MT_ATPAR_USER_ORG_GROUPS SET "

                            If pDSProfUserInfo.Tables(0).Rows(intcnt).Item("ASSIGN") = "N" Then
                                strOrg = String.Empty
                            ElseIf pDSProfUserInfo.Tables(0).Rows(intcnt).Item("ASSIGN") = "Y" Then
                                pOrgGrp = strOrg
                            End If

                            _strSQL = _strSQL & "ORG_GROUP_ID='" & strOrg & "',LAST_UPDATE_USER='" & pUID & "'," & _
                                              "LAST_UPDATE_DATE= getDate() WHERE " & _
                                              "USER_ID='" & pDSProfUserInfo.Tables(0).Rows(intcnt).Item("USER_ID") & "'"

                            If log.IsInfoEnabled Then log.Info(methodBaseName & _strSQL)

                            dsData = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL), _trans)
                        Else
                            If pDSProfUserInfo.Tables(0).Rows(intcnt).Item("ASSIGN") = "N" Then
                                strOrg = String.Empty
                            ElseIf pDSProfUserInfo.Tables(0).Rows(intcnt).Item("ASSIGN") = "Y" Then
                                pOrgGrp = strOrg
                            End If

                            _strSQL = " INSERT INTO MT_ATPAR_USER_ORG_GROUPS (USER_ID,ORG_GROUP_ID,LAST_UPDATE_DATE," & _
                                     " LAST_UPDATE_USER) VALUES('" & pDSProfUserInfo.Tables(0).Rows(intcnt).Item("USER_ID") & "'," & _
                                     " '" & strOrg & "',GETDATE(),'" & pUID & "')"

                            If log.IsInfoEnabled Then log.Info(methodBaseName & _strSQL)

                            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), _trans)
                        End If
                    End If
                Catch ex As Exception
                    _trans.Rollback()
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to save the profile info " & vbCrLf & _
                                                                  " with the following SQL :" & _strSQL & vbCrLf & _
                                                                  " Exception is:" & ex.ToString & vbCrLf)
                    SaveProfileUsersInfo = ATPAR_E_LOCALDBUPDATEFAIL
                    Exit Function
                End Try
            Next
            _trans.Commit()
            SaveProfileUsersInfo = ATPAR_OK
        Catch ex As Exception
            _trans.Rollback()
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " call failed " & ex.ToString)
            SaveProfileUsersInfo = ATPAR_E_LOCALDBUPDATEFAIL
        Finally
            If sqlConnect.State <> ConnectionState.Closed Then
                sqlConnect.Close()
            End If
        End Try
    End Function

    ''' <summary>
    ''' To save Org Groups Info
    ''' </summary>
    ''' <param name="pOrgGrpId">Org Group ID</param>
    ''' <param name="pOrgGrpName">Org Group Name</param>
    ''' <param name="pPrvOrgId">Previous Org ID</param>
    ''' <param name="pUser">User ID</param>
    ''' <param name="pMode">Mode</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function SaveOrgGroupsInfo(ByVal pOrgGrpId As String, _
                                      ByVal pOrgGrpName As String, _
                                      ByVal pPrvOrgId As String, _
                                      ByVal pUser As String, _
                                      ByVal pMode As String, _
                                      ByVal pDeviceTokenEntry() As String) As Integer _
                                      Implements IAtpar_WebTrans.SaveOrgGroupsInfo

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strSQL As String = String.Empty

        Dim dsMasterParams As New DataSet
        Dim intCount As Integer

        pOrgGrpName = Replace(pOrgGrpName, "'", "''")
        Dim _strEnterpriseSystem As String = String.Empty

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            _strEnterpriseSystem = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), CONFIGFILE.ERP_SYS_DETAILS.ToString(), ERP_SYS_DETAILS.ENTERPRISESYSTEM.ToString)
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to get the enterprise system name " _
                                                                & ex.ToString & ":" & vbCrLf)
            Return E_SERVERERROR
        End Try

        sqlConnect = m_LocalDB.CreateConnection()
        sqlConnect.Open()
        Dim trans As SqlTransaction = sqlConnect.BeginTransaction()
        Try
            If pMode = "Add" Then
                _strSQL = "INSERT INTO MT_ATPAR_ORG_GROUPS(ORG_GROUP_ID,ORG_GROUP_NAME,LAST_UPDATE_DATE,LAST_UPDATE_USER)" & _
                        " VALUES('" & pOrgGrpId & "','" & pOrgGrpName & "',GETDATE(),'" & pUser & "') "
            ElseIf pMode = "Edit" Then
                _strSQL = " UPDATE MT_ATPAR_ORG_GROUPS SET ORG_GROUP_NAME='" & pOrgGrpName & "',LAST_UPDATE_DATE = " & _
                         "  GETDATE() ,LAST_UPDATE_USER = '" & pUser & "' WHERE ORG_GROUP_ID = '" & pPrvOrgId & "' "
            End If

            If log.IsInfoEnabled Then log.Info(_strSQL)

            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), trans)

            If pMode = "Add" Then
                _strSQL = String.Empty
                _strSQL = " SELECT APP_ID,PARAMETER_ID,DEFAULT_VALUE FROM MT_ATPAR_PARAM_MASTER" & _
                          " WHERE PARAMETER_LEVEL='Org' AND ENTERPRISE_SYSTEM = '" & _strEnterpriseSystem & "' "

                If log.IsInfoEnabled Then log.Info(_strSQL)

                dsMasterParams = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL), trans)

                For intCount = 0 To dsMasterParams.Tables(0).Rows.Count - 1
                    _strSQL = String.Empty
                    'RT 4353
                    If dsMasterParams.Tables(0).Rows(intCount).Item("PARAMETER_ID") = "CUSTOM_SQL_DESTLOCATION" Then
                        dsMasterParams.Tables(0).Rows(intCount).Item("DEFAULT_VALUE") = Replace(dsMasterParams.Tables(0).Rows(intCount).Item("DEFAULT_VALUE"), "'", "''")
                    End If
                    _strSQL = " INSERT INTO MT_ATPAR_ORG_GROUP_PARAMETERS(APP_ID,PARAMETER_ID,PARAMETER_VALUE, " & _
                          " ORG_GROUP_ID,LAST_UPDATE_DATE,LAST_UPDATE_USER) VALUES(" & dsMasterParams.Tables(0).Rows(intCount).Item("APP_ID") & "," & _
                          " '" & dsMasterParams.Tables(0).Rows(intCount).Item("PARAMETER_ID") & "'," & _
                          " '" & dsMasterParams.Tables(0).Rows(intCount).Item("DEFAULT_VALUE") & "','" & pOrgGrpId & "'," & _
                          " GETDATE(),'" & pUser & "')"

                    If log.IsInfoEnabled Then log.Info(_strSQL)

                    m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), trans)
                Next
            End If
            trans.Commit()
        Catch ex As SqlException
            trans.Rollback()
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to save the org info " & vbCrLf & _
                                                                  " with the following SQL :" & _strSQL & vbCrLf & _
                                                                  " Exception is:" & ex.ToString & vbCrLf)
            If ex.Number = 2627 Then
                Return ATPAR_E_PRIMARYKEYVOILATION
            Else
                Return ATPAR_E_LOCALDBINSERTFAIL
            End If
        Catch ex As Exception
            trans.Rollback()
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " call failed " & ex.ToString)
            Return E_SERVERERROR
        Finally
            If sqlConnect.State <> ConnectionState.Closed Then
                sqlConnect.Close()
            End If
        End Try

        SaveOrgGroupsInfo = ATPAR_OK

    End Function

    ''' <summary>
    ''' To get Application Parameters
    ''' </summary>
    ''' <param name="pUserID">User ID</param>
    ''' <param name="pAppId">Application ID</param>
    ''' <param name="pOrgGrpId">Org Group ID</param>
    ''' <param name="pDsAppParams">Application Parameters as Dataset</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function GetAppParameters(ByVal pUserID As String, ByVal pAppId As String, _
                                     ByVal pOrgGrpID As String, _
                                     ByRef pDsAppParams As DataSet, _
                                     ByVal pDeviceTokenEntry() As String) As Integer _
                                     Implements IAtpar_WebTrans.GetAppParameters

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserID
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strSQL As String = String.Empty
        Dim _strEnterpriseSystem As String = String.Empty

        Try
            _strEnterpriseSystem = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), CONFIGFILE.ERP_SYS_DETAILS.ToString(), ERP_SYS_DETAILS.ENTERPRISESYSTEM.ToString)
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to get the enterprise system" & _
                                                                  " value: Exception is : " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            Dim sqlParms() As SqlParameter

            sqlParms = New SqlParameter(3) {}

            sqlParms(0) = New SqlParameter("@pOrgGrpID", SqlDbType.NVarChar)
            sqlParms(0).Value = pOrgGrpID

            sqlParms(1) = New SqlParameter("@pAppID", SqlDbType.NVarChar)
            sqlParms(1).Value = pAppId

            sqlParms(2) = New SqlParameter("@pEnterpriseSystem", SqlDbType.NVarChar)
            sqlParms(2).Value = _strEnterpriseSystem

            Dim _Cmd As SqlCommand
            Try
                _Cmd = New SqlCommand

                _Cmd.Connection = m_LocalDB.CreateConnection
                _Cmd.CommandType = CommandType.StoredProcedure
                _Cmd.CommandText = "SP_GetProductParameters"
                _Cmd.Parameters.Add(sqlParms(0))
                _Cmd.Parameters.Add(sqlParms(1))
                _Cmd.Parameters.Add(sqlParms(2))

                If log.IsInfoEnabled Then log.Info(methodBaseName & " Getting the product parameters :" & _
                                                                      " exec SP_GetProductParameters " & _
                                                                      "'" & sqlParms(0).value & "', " & _
                                                                      "'" & sqlParms(1).value & "', " & _
                                                                      "'" & sqlParms(2).value & "' ")
                pDsAppParams = m_LocalDB.ExecuteDataSet(_Cmd)

            Catch sqlex As SqlException
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & vbCrLf & GetSQLExceptionMessageString(sqlex))
                Return ATPAR_E_LOCALDBSELECTFAIL
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal("E_SERVERERROR :" & ex.ToString)
                Return E_SERVERERROR
            Finally
                _Cmd.dispose()
            End Try

            If pDsAppParams.Tables(0).Rows.Count = 0 Then
                GetAppParameters = E_NORECORDFOUND
                Exit Function
            Else
                GetAppParameters = ATPAR_OK
            End If
        Catch sqlex As SqlException
            If log.IsErrorEnabled Then log.Error(GetSQLExceptionMessageString(sqlex))
            Throw New Exception("GetAppParameters Failed", sqlex)
            Return ATPAR_E_LOCALDBSELECTFAIL
        Catch ex As Exception
            Throw New Exception("GetAppParameters Failed", ex)
            Return E_SERVERERROR
        End Try

    End Function

    ''' <summary>
    ''' To save Application Parameters
    ''' </summary>
    ''' <param name="pOrgGrpId">Org Group ID</param>
    ''' <param name="pAppId">Application ID</param>
    ''' <param name="pUser">User ID</param>
    ''' <param name="pDsAppParams">Application Parameters as Dataset</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function SaveAppParameters(ByVal pOrgGrpId As String, _
                                      ByVal pAppId As String, _
                                      ByVal pUser As String, _
                                      ByVal pDsAppParams As DataSet, _
                                      ByVal pDeviceTokenEntry() As String) As Integer _
                                      Implements IAtpar_WebTrans.SaveAppParameters

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strSQL As String = String.Empty
        Dim _searchRow() As DataRow
        Dim _strSearch As String = String.Empty
        Dim _dsOrgParams As New DataSet

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            _strSQL = "SELECT PARAMETER_ID FROM MT_ATPAR_ORG_GROUP_PARAMETERS WHERE ORG_GROUP_ID = '" & pOrgGrpId & "' " & _
                      "AND APP_ID = '" & pAppId & "' "

            If log.IsInfoEnabled Then log.Info(methodBaseName & ":" & _strSQL)

            _dsOrgParams = m_LocalDB.ExecuteDataset(m_LocalDB.GetSqlStringCommand(_strSQL))

            For intCnt As Integer = 0 To pDsAppParams.Tables(0).Rows.Count - 1
                'NB-0004668
                ''SM-0004566
                'If pDsAppParams.Tables(0).Rows(intCnt).Item("PARAMETER_ID") = "CUSTOM_SQL_DESTLOCATION" Then
                '    pDsAppParams.Tables(0).Rows(intCnt).Item("PARAMETER_VALUE") = Replace(pDsAppParams.Tables(0).Rows(intCnt).Item("PARAMETER_VALUE"), "'", "''")
                'End If
                _strSQL = String.Empty

                _strSearch = String.Empty
                _searchRow = Nothing

                _strSearch = "PARAMETER_ID = '" & pDsAppParams.Tables(0).Rows(intCnt).Item("PARAMETER_ID") & "'"
                _searchRow = _dsOrgParams.Tables(0).Select(_strSearch)

                If _searchRow.Length > 0 Then

                    _strSQL = " UPDATE MT_ATPAR_ORG_GROUP_PARAMETERS SET PARAMETER_VALUE =  " & _
                            " '" & pDsAppParams.Tables(0).Rows(intCnt).Item("PARAMETER_VALUE") & "' " & _
                            " , LAST_UPDATE_DATE = GETDATE() ,LAST_UPDATE_USER = '" & pUser & "' " & _
                            "  WHERE ORG_GROUP_ID = '" & pOrgGrpId & "' AND  APP_ID = '" & pAppId & "' AND " & _
                            " PARAMETER_ID = '" & pDsAppParams.Tables(0).Rows(intCnt).Item("PARAMETER_ID") & "' "

                    If log.IsInfoEnabled Then log.Info(methodBaseName & ":" & _strSQL)

                    m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL))

                Else
                    _strSQL = "INSERT INTO MT_ATPAR_ORG_GROUP_PARAMETERS (ORG_GROUP_ID, APP_ID, PARAMETER_ID, " & _
                              "PARAMETER_VALUE, LAST_UPDATE_DATE, LAST_UPDATE_USER) " & _
                              "VALUES ('" & pOrgGrpId & "', '" & pAppId & "', '" & pDsAppParams.Tables(0).Rows(intCnt).Item("PARAMETER_ID") & "', " & _
                              "'" & pDsAppParams.Tables(0).Rows(intCnt).Item("PARAMETER_VALUE") & "', GETDATE(), '" & pUser & "') "


                    If log.IsInfoEnabled Then log.Info(methodBaseName & ":" & _strSQL)

                    m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL))
                End If
               

                SaveAppParameters = ATPAR_OK
            Next
        Catch sqlex As SqlException
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to save the app parameters info " & vbCrLf & _
                                                                  " with the following SQL :" & _strSQL & vbCrLf & _
                                                                  " Exception is:" & sqlex.ToString & vbCrLf)
            Throw New Exception("SaveAppParameters Failed", sqlex)
            Return ATPAR_E_LOCALDBSELECTFAIL
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to save the app parameters info " & vbCrLf & _
                                                                  " with the following SQL :" & _strSQL & vbCrLf & _
                                                                  " Exception is:" & ex.ToString & vbCrLf)
            Throw New Exception("SaveAppParameters Failed", ex)
            Return E_SERVERERROR
        End Try
    End Function

    ''' <summary>
    ''' To get Profile Info
    ''' </summary>
    ''' <param name="pUserID">User ID</param>
    ''' <param name="pOrgGrpId">Org Group ID</param>
    ''' <param name="pDsBUnit">Business Units as Dataset</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function SaveOrgGroupsBUnits(ByVal pUserID As String, ByVal pOrgGrpId As String, _
                                        ByVal pDsBUnit As DataSet, ByVal pDeviceTokenEntry() As String) As Integer _
                                        Implements IAtpar_WebTrans.SaveOrgGroupsBUnits


        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserID
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strSQL As String = String.Empty

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Dim intCount As Integer
        Try
            _strSQL = " DELETE FROM MT_ATPAR_ORG_GROUP_BUNITS WHERE ORG_GROUP_ID =  '" & pOrgGrpId & "'"

            If log.IsInfoEnabled Then log.Info(_strSQL)

            SaveOrgGroupsBUnits = m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL))

            For intCount = 0 To pDsBUnit.Tables(0).Rows.Count - 1
                With pDsBUnit.Tables(0).Rows(intCount)
                    'Checking for single quotes and replacing with '' if exists
                    If .Item("CHK_VALUE") = "1" Then
                        If InStr(.Item("BUSINESS_UNIT"), "'") > 0 Then
                            .Item("BUSINESS_UNIT") = Replace(.Item("BUSINESS_UNIT"), "'", "''")
                        End If
                        'SM-0005620
                        _strSQL = " INSERT INTO MT_ATPAR_ORG_GROUP_BUNITS(BUSINESS_UNIT,ORG_GROUP_ID,BU_TYPE,LAST_UPDATE_DATE,LAST_UPDATE_USERID) " & _
                                     " VALUES ('" & .Item("BUSINESS_UNIT") & "','" & pOrgGrpId & "','" & .Item("BU_TYPE") & "','" & System.DateTime.Now & "','" & pUserID & "' ) "

                        If log.IsInfoEnabled Then log.Info(_strSQL)

                        m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL))
                    End If
                End With
            Next
        Catch ex As SqlException
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to save the org group buints " & vbCrLf & _
                                                                  " with the following SQL :" & _strSQL & vbCrLf & _
                                                                  " Exception is:" & ex.ToString & vbCrLf)
            If ex.Number = 2627 Then
                Return ATPAR_E_PRIMARYKEYVOILATION
            End If
            Return ATPAR_E_LOCALDBINSERTFAIL
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to save the org group buints " & vbCrLf & _
                                                               " with the following SQL :" & _strSQL & vbCrLf & _
                                                               " Exception is:" & ex.ToString & vbCrLf)
            Return E_SERVERERROR
        End Try

        Return ATPAR_OK

    End Function

    ''' <summary>
    ''' To get Profile Info
    ''' </summary>
    ''' <param name="pUserID">User ID</param>
    ''' <param name="pDSProfileInfo">Profile Info as Dataset</param>
    ''' <param name="pProfileID">Profile ID</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function GetProfileInfo(ByVal pUserID As String, ByRef pDSProfileInfo As DataSet, _
                                   ByVal pProfileID As String, ByVal pDeviceTokenEntry() As String) As Integer _
                                   Implements IAtpar_WebTrans.GetProfileInfo

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserID
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strSQL As String = String.Empty
        Dim _strEnterpriseSystem As String = String.Empty

        Try
            _strEnterpriseSystem = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), CONFIGFILE.ERP_SYS_DETAILS.ToString(), ERP_SYS_DETAILS.ENTERPRISESYSTEM.ToString)
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to get the enterprise system" & _
                                                                  " value: Exception is : " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            Dim dsProfiles As DataSet
            Dim dsMenus As DataSet
            Dim dsParams As DataSet
            Dim dsScreenDisplay As DataSet
            Dim dsCount As DataSet
            Dim dtProfiles As New DataTable
            Dim dtMenus As New DataTable
            Dim dtParams As New DataTable
            Dim dtScreenDisplay As New DataTable
            Dim dtClientCount As New DataTable
            Dim dtServerCount As New DataTable
            Dim dtUserCount As New DataTable
            Dim sqlParms() As SqlParameter
            pDSProfileInfo = New DataSet

            Try
                _strSQL = "SELECT A.APP_ID, A.APP_NAME, B.CLIENT_USER, B.SERVER_USER FROM MT_ATPAR_APP A LEFT OUTER JOIN " & _
                                       "MT_ATPAR_PROFILE_APP_ACL B ON A.APP_ID = B.APP_ID AND B.PROFILE_ID='" & pProfileID & "'"

                If log.IsInfoEnabled Then log.Info(methodBaseName & " : " & _strSQL)

                dsProfiles = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get profile details " & vbCrLf & _
                                                                       " with the following SQL :" & _strSQL & vbCrLf & _
                                                                       " Exception is:" & ex.ToString & vbCrLf)
                Return E_SERVERERROR
            End Try

            dtProfiles = dsProfiles.Tables(0).Copy()
            dtProfiles.TableName = "PROFILES"

            'To get the app menus
            sqlParms = New SqlParameter(2) {}
            sqlParms(0) = New SqlParameter("@pProfileID", SqlDbType.NVarChar)
            sqlParms(0).Value = pProfileID
            sqlParms(1) = New SqlParameter("@pEnterpriseSystem", SqlDbType.NVarChar)
            sqlParms(1).Value = _strEnterpriseSystem

            If log.IsDebugEnabled Then log.Debug("sp_GetProfileAppMenus")

            Dim _Cmd As SqlCommand
            Try
                _Cmd = New SqlCommand

                _Cmd.Connection = m_LocalDB.CreateConnection
                _Cmd.CommandType = CommandType.StoredProcedure
                _Cmd.CommandText = "sp_GetProfileAppMenus"
                _Cmd.Parameters.Add(sqlParms(0))
                _Cmd.Parameters.Add(sqlParms(1))

                If log.IsInfoEnabled Then
                    log.Info("Calling sp_GetProfileAppMenus with the following syntax..")

                    Dim _strSQL1 As String = "EXEC sp_GetProfileAppMenus " & vbCrLf & _
                                             "@pProfileID = N'" & sqlParms(0).Value & "'" & vbCrLf & _
                                             "@pEnterpriseSystem = '" & sqlParms(1).Value & "'"


                    log.Info(_strSQL1)
                End If

                dsMenus = m_LocalDB.ExecuteDataSet(_Cmd)

            Catch sqlex As SqlException
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & vbCrLf & GetSQLExceptionMessageString(sqlex))
                Return ATPAR_E_LOCALDBSELECTFAIL
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal("E_SERVERERROR :" & ex.ToString)
                Return E_SERVERERROR
            Finally
                _Cmd.dispose()
            End Try

            dtMenus = dsMenus.Tables(0).Copy
            dtMenus.TableName = "MENUS"

            'To get the app Params
            sqlParms = New SqlParameter(2) {}
            sqlParms(0) = New SqlParameter("@pProfileID", SqlDbType.NVarChar)
            sqlParms(0).Value = pProfileID
            sqlParms(1) = New SqlParameter("@pEnterpriseSystem", SqlDbType.NVarChar)
            sqlParms(1).Value = _strEnterpriseSystem

            If log.IsInfoEnabled Then
                log.Info("Calling sp_GetProfileAppParameters with the following syntax..")

                Dim _strSQL1 As String = "EXEC sp_GetProfileAppParameters " & vbCrLf & _
                                         "@pProfileID = N'" & sqlParms(0).Value & "'" & vbCrLf & _
                                         "@pEnterpriseSystem = '" & sqlParms(1).Value & "'"

                log.Info(_strSQL1)
            End If

            Try
                _Cmd = New SqlCommand

                _Cmd.Connection = m_LocalDB.CreateConnection
                _Cmd.CommandType = CommandType.StoredProcedure
                _Cmd.CommandText = "sp_GetProfileAppParameters"
                _Cmd.Parameters.Add(sqlParms(0))
                _Cmd.Parameters.Add(sqlParms(1))

                If log.IsDebugEnabled Then log.Debug(methodBaseName & " exec sp_GetProfileAppParameters '" & sqlParms(0).Value & "', '" & sqlParms(1).Value & "' ")
                dsParams = m_LocalDB.ExecuteDataSet(_Cmd)

            Catch sqlex As SqlException
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & vbCrLf & GetSQLExceptionMessageString(sqlex))
                Return ATPAR_E_LOCALDBSELECTFAIL
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal("E_SERVERERROR :" & ex.ToString)
                Return E_SERVERERROR
            Finally
                _Cmd.dispose()
            End Try

            dtParams = dsParams.Tables(0).Copy
            dtParams.TableName = "PARAMS"

            'To get the Client Screens
            sqlParms = New SqlParameter(2) {}
            sqlParms(0) = New SqlParameter("@pProfileID", SqlDbType.NVarChar)
            sqlParms(0).Value = pProfileID
            sqlParms(1) = New SqlParameter("@pEnterpriseSystem", SqlDbType.NVarChar)
            sqlParms(1).Value = _strEnterpriseSystem

            If log.IsInfoEnabled Then
                log.Info("Calling sp_GetProfileScreenDisplay with the following syntax..")

                Dim _strSQL1 As String = "EXEC sp_GetProfileScreenDisplay " & vbCrLf & _
                                         "@pProfileID = N'" & sqlParms(0).Value & "'" & vbCrLf & _
                                         "@pEnterpriseSystem = '" & sqlParms(1).Value & "'"

                log.Info(_strSQL1)
            End If

            Try
                _Cmd = New SqlCommand

                _Cmd.Connection = m_LocalDB.CreateConnection
                _Cmd.CommandType = CommandType.StoredProcedure
                _Cmd.CommandText = "sp_GetProfileScreenDisplay"
                _Cmd.Parameters.Add(sqlParms(0))
                _Cmd.Parameters.Add(sqlParms(1))

                If log.IsDebugEnabled Then log.Debug(methodBaseName & " exec sp_GetProfileScreenDisplay '" & sqlParms(0).value & "', '" & sqlParms(1).value & "' ")
                dsScreenDisplay = m_LocalDB.ExecuteDataSet(_Cmd)

            Catch sqlex As SqlException
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & vbCrLf & GetSQLExceptionMessageString(sqlex))
                Return ATPAR_E_LOCALDBSELECTFAIL
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal("E_SERVERERROR :" & ex.ToString)
                Return E_SERVERERROR
            Finally
                _Cmd.dispose()
            End Try

            dtScreenDisplay = dsScreenDisplay.Tables(0).Copy
            dtScreenDisplay.TableName = "SCREENDISPLAY"

            'NB-0003880
            'To get the client,server,user counts
            sqlParms = New SqlParameter(1) {}

            If log.IsDebugEnabled Then log.Debug("SP_GetCounts")
            sqlParms(0) = New SqlParameter("@pProfileID", SqlDbType.NVarChar)

            sqlParms(0).Value = pProfileID


            Try
                _Cmd = New SqlCommand

                _Cmd.Connection = m_LocalDB.CreateConnection
                _Cmd.CommandType = CommandType.StoredProcedure
                _Cmd.CommandText = "SP_GetCounts"
                _Cmd.Parameters.Add(sqlParms(0))

                If log.IsInfoEnabled Then
                    log.Info("Calling SP_GetCounts with the following syntax..")

                    Dim _strSQL1 As String = "EXEC SP_GetCounts " & vbCrLf & _
                                              " @pProfileID = N'" & sqlParms(0).Value & "'"

                    log.Info(_strSQL1)
                End If
                dsCount = m_LocalDB.ExecuteDataSet(_Cmd)

            Catch sqlex As SqlException
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & vbCrLf & GetSQLExceptionMessageString(sqlex))
                Return ATPAR_E_LOCALDBSELECTFAIL
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal("E_SERVERERROR :" & ex.ToString)
                Return E_SERVERERROR
            Finally
                _Cmd.dispose()
            End Try

            dtClientCount = dsCount.Tables(0).Copy
            dtServerCount = dsCount.Tables(1).Copy
            dtUserCount = dsCount.Tables(2).Copy
            dtClientCount.TableName = "ClientCount"
            dtServerCount.TableName = "ServerCount"
            dtUserCount.TableName = "UserCount"

            pDSProfileInfo.Tables.Add(dtProfiles)
            pDSProfileInfo.Tables.Add(dtMenus)
            pDSProfileInfo.Tables.Add(dtParams)
            pDSProfileInfo.Tables.Add(dtScreenDisplay)
            pDSProfileInfo.Tables.Add(dtClientCount)
            pDSProfileInfo.Tables.Add(dtServerCount)
            pDSProfileInfo.Tables.Add(dtUserCount)

            GetProfileInfo = ATPAR_OK
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " call failed " & ex.ToString)
            GetProfileInfo = ATPAR_E_LOCALDBSELECTFAIL
        End Try

    End Function

    ''' <summary>
    ''' To save Profile Info
    ''' </summary>
    ''' <param name="pMode">Profile Mode</param>
    ''' <param name="pProfileID">Profile ID</param>
    ''' <param name="pProfileDescr">Profile Description</param>
    ''' <param name="pUserID">User ID</param>
    ''' <param name="pClientAddr">Client Address</param>
    ''' <param name="pDSProfile">Profile Info as Dataset</param>
    ''' <param name="pstrAlterProfileCtoS">Profile Alter</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function SaveProfileInfo(ByVal pMode As String, _
                                    ByVal pProfileID As String, _
                                    ByVal pProfileDescr As String, _
                                    ByVal pUserID As String, _
                                    ByVal pClientAddr As String, _
                                    ByVal pDSProfile As DataSet, _
                                    ByVal pstrAlterProfileCtoS As Boolean, _
                                    ByVal pDeviceTokenEntry() As String, _
                                    Optional ByVal pblnUserUpload As Boolean = False) As Integer _
                                    Implements IAtpar_WebTrans.SaveProfileInfo

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserID
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strSQL As String = String.Empty
        Dim trans As SqlTransaction
        Dim _Conn As SqlConnection
        Dim _strEnterpriseSystem As String = String.Empty

        'This is not good practice to initialize connection in function rather
        'than calling a common function which return connection instance.
        'Avoided writing a common function to eliminate team using this common function
        ' to get the connection instance for sql connection from which we are moving away
        ' towards Database Instance of Enterprise library for which we have common function
        ' GetLocalDBConnection

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            _strEnterpriseSystem = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), CONFIGFILE.ERP_SYS_DETAILS.ToString(), ERP_SYS_DETAILS.ENTERPRISESYSTEM.ToString)
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to get the enterprise system name " _
                                                                & ex.ToString & ":" & vbCrLf)
            Return E_SERVERERROR
        End Try

        Dim _strConnection As String
        _strConnection = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), CONFIGFILE.SYSTEMDBCONNECTION.ToString, CONFIGFILE.SYSTEMDBCONNECTION.ToString)

        _Conn = New SqlConnection(_strConnection)

        Try

            Dim intRecCnt As Integer
            Dim intRowCnt As Integer
            Dim intNoofRecords As Integer
            Dim strtblName As String
            Dim dsAppId As DataSet
            Dim strTogglefld, strToggletext, strToggleorder As String
            Dim sqlParms() As SqlParameter
            Dim strHashVal As String
            Dim dsUserid As DataSet
            Dim intCnt As Int16
            Dim strHash As String
            'NB-0004678
            Dim strEncHash As String
            Dim intUserExist As Int16
            ' sqlConnect.Open()
            _Conn.open()
            trans = _Conn.BeginTransaction()

            Dim strSqlString As String
            'NB-0003880
            'NB-0004678
            If pstrAlterProfileCtoS = True Then

                If log.IsDebugEnabled Then log.Debug(methodBaseName & ":Profile With server Access")
                _strSQL = "SELECT USER_ID FROM MT_ATPAR_USER WHERE PROFILE_ID='" & pProfileID & "'"

                If log.IsInfoEnabled Then log.Info(methodBaseName & ":" & _strSQL)
                Try
                    dsUserid = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL), trans)
                Catch ex As Exception
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get userid " & vbCrLf & _
                                                                 " with the following SQL :" & _strSQL & vbCrLf & _
                                                                 " Exception is:" & ex.ToString & vbCrLf)
                    trans.RollBack()
                    SaveProfileInfo = ATPAR_E_LOCALDBSELECTFAIL
                    Exit Function
                End Try


                For intCnt = 0 To dsUserid.Tables(0).Rows.Count - 1

                    strEncHash = CSHA256.ComputeHash(DEFAULT_EMPTY_PASSWORD & dsUserid.Tables(0).Rows(intCnt).Item("USER_ID").ToString())

                    _strSQL = String.Empty
                    _strSQL = "SELECT COUNT(USER_ID) FROM MT_ATPAR_USER WHERE PASSHASH='" & strEncHash & "'AND USER_ID='" & dsUserid.Tables(0).Rows(intCnt).Item("USER_ID").ToString() & "'"

                    If log.IsInfoEnabled Then log.Info(methodBaseName & ":" & _strSQL)

                    intUserExist = 0
                    Try
                        intUserExist = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(_strSQL), trans)
                    Catch ex As Exception
                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get userid count" & vbCrLf & _
                                                                 " with the following SQL :" & _strSQL & vbCrLf & _
                                                                 " Exception is:" & ex.ToString & vbCrLf)
                        trans.RollBack()
                        SaveProfileInfo = ATPAR_E_LOCALDBSELECTFAIL
                        Exit Function
                    End Try


                    If intUserExist > 0 Then
                        strHash = String.Empty
                        strHash = CSHA256.ComputeHash("atpar" & dsUserid.Tables(0).Rows(intCnt).Item("USER_ID").ToString())
                        _strSQL = String.Empty
                        _strSQL = "UPDATE MT_ATPAR_USER SET PASSHASH='" & strHash & "' WHERE USER_ID='" & dsUserid.Tables(0).Rows(intCnt).Item("USER_ID").ToString() & "'"

                        If log.IsInfoEnabled Then log.Info(methodBaseName & ":" & _strSQL)
                        'NB-0005787
                        strSqlString = "UPDATE MT_ATPAR_USER_ACL SET PASSHASH_REQUIRED = 1, PASSWD_RESET_REQUIRED='Y' WHERE USER_ID='" & dsUserid.Tables(0).Rows(intCnt).Item("USER_ID").ToString() & "'"

                        If log.IsInfoEnabled Then log.Info(methodBaseName & ":" & strSqlString)

                        Try
                            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), trans)
                        Catch ex As Exception
                            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to update userid " & vbCrLf & _
                                                                " with the following SQL :" & _strSQL & vbCrLf & _
                                                                " Exception is:" & ex.ToString & vbCrLf)
                            trans.RollBack()
                            SaveProfileInfo = ATPAR_E_LOCALDBUPDATEFAIL
                            Exit Function
                        End Try
                        Try
                            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(strSqlString), trans)
                        Catch ex As Exception
                            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to update userid in MT_ATPAR_USER_ACL table" & vbCrLf & _
                                                                 " with the following SQL :" & strSqlString & vbCrLf & _
                                                                 " Exception is:" & ex.ToString & vbCrLf)
                            trans.RollBack()
                            SaveProfileInfo = ATPAR_E_LOCALDBUPDATEFAIL
                            Exit Function
                        End Try



                    End If
                Next
            End If

            If pMode = "Add" Then

                If log.IsDebugEnabled Then log.Debug(methodBaseName & ":Creation of new profile")
                _strSQL = String.Empty
                _strSQL = "SELECT COUNT(PROFILE_ID) FROM MT_ATPAR_PROFILE WHERE PROFILE_ID='" & pProfileID & "'"

                If log.IsInfoEnabled Then log.Info(_strSQL)

                intNoofRecords = 0
                Try
                    intNoofRecords = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(_strSQL), trans)
                Catch ex As Exception
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get profileID count " & vbCrLf & _
                                                                 " with the following SQL :" & _strSQL & vbCrLf & _
                                                                 " Exception is:" & ex.ToString & vbCrLf)
                    trans.RollBack()
                    SaveProfileInfo = ATPAR_E_LOCALDBSELECTFAIL
                    Exit Function
                End Try


                If intNoofRecords > 0 Then
                    trans.rollback()
                    Return ATPAR_E_PROFILEEXIST
                Else
                    _strSQL = String.Empty
                    _strSQL = "INSERT INTO MT_ATPAR_PROFILE (PROFILE_ID, PROFILE_DESCRIPTION) VALUES " & _
                                 "('" & pProfileID & "','" & pProfileDescr & "')"
                    If log.IsInfoEnabled Then log.Info(methodBaseName & ":" & _strSQL)
                    Try
                        m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), trans)
                    Catch ex As Exception
                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to insert profileID info " & vbCrLf & _
                                                                  " with the following SQL :" & _strSQL & vbCrLf & _
                                                                  " Exception is:" & ex.ToString & vbCrLf)
                        trans.RollBack()
                        SaveProfileInfo = ATPAR_E_LOCALDBINSERTFAIL
                        Exit Function
                    End Try


                    For intRecCnt = 0 To pDSProfile.Tables.Count - 1
                        strtblName = pDSProfile.Tables(intRecCnt).TableName
                        Select Case strtblName
                            Case "PROFILE"

                                If log.IsDebugEnabled Then log.Debug(methodBaseName & ":Insertion of App parameters")
                                For intRowCnt = 0 To pDSProfile.Tables("PROFILE").Rows.Count - 1
                                    _strSQL = String.Empty
                                    If pDSProfile.Tables("PROFILE").Rows(intRowCnt).Item("CLIENT_USER").ToString = YesNo_Enum.Y.ToString Or _
                                      pDSProfile.Tables("PROFILE").Rows(intRowCnt).Item("SERVER_USER").ToString = YesNo_Enum.Y.ToString Then

                                        _strSQL = "INSERT INTO MT_ATPAR_PROFILE_APP_ACL(PROFILE_ID, APP_ID, CLIENT_USER, SERVER_USER, LAST_UPDATE_DATE, " & _
                                                    "LAST_UPDATE_USER, LAST_CLIENT_ADDRESS) VALUES('" & pProfileID & "','" & _
                                                    pDSProfile.Tables("PROFILE").Rows(intRowCnt).Item("APP_ID").ToString & "','" & _
                                                    pDSProfile.Tables("PROFILE").Rows(intRowCnt).Item("CLIENT_USER").ToString & "','" & _
                                                    pDSProfile.Tables("PROFILE").Rows(intRowCnt).Item("SERVER_USER").ToString & "','" & _
                                                    System.DateTime.Now() & "','" & pUserID & "','" & pClientAddr & "')"

                                        If log.IsInfoEnabled Then log.Info(methodBaseName & ":" & _strSQL)
                                        Try
                                            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), trans)
                                        Catch ex As Exception
                                            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to insert profile info " & vbCrLf & _
                                                                                             " with the following SQL :" & _strSQL & vbCrLf & _
                                                                                             " Exception is:" & ex.ToString & vbCrLf)
                                            trans.RollBack()
                                            SaveProfileInfo = ATPAR_E_LOCALDBINSERTFAIL
                                            Exit Function
                                        End Try
                                    End If

                                Next
                            Case "MENUS"

                                If log.IsDebugEnabled Then log.Debug(methodBaseName & ":Insertion of Menus")
                                For intRowCnt = 0 To pDSProfile.Tables("MENUS").Rows.Count - 1
                                    If Not ((pDSProfile.Tables("MENUS").Rows(intRowCnt).Item("CHKSTATUS").ToString = "N") And (pblnUserUpload = True)) Then
                                        _strSQL = String.Empty
                                        _strSQL = "INSERT INTO MT_ATPAR_PROFILE_MENU(PROFILE_ID, APP_ID, MENU_CODE, MENU_SEQ_NO, LAST_UPDATE_DATE, " & _
                                                    "LAST_UPDATE_USER, LAST_CLIENT_ADDRESS) VALUES('" & pProfileID & "','" & _
                                                    pDSProfile.Tables("MENUS").Rows(intRowCnt).Item("APP_ID").ToString & "','" & _
                                                    pDSProfile.Tables("MENUS").Rows(intRowCnt).Item("MENU_CODE").ToString & "','" & _
                                                    pDSProfile.Tables("MENUS").Rows(intRowCnt).Item("MENU_SEQ_NO").ToString & "','" & _
                                                    System.DateTime.Now() & "','" & pUserID & "','" & pClientAddr & "')"

                                        If log.IsInfoEnabled Then log.Info(methodBaseName & ":" & _strSQL)
                                        Try
                                            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), trans)
                                        Catch ex As Exception
                                            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to insert profileID menu info " & vbCrLf & _
                                                                                             " with the following SQL :" & _strSQL & vbCrLf & _
                                                                                             " Exception is:" & ex.ToString & vbCrLf)
                                            trans.RollBack()
                                            SaveProfileInfo = ATPAR_E_LOCALDBINSERTFAIL
                                            Exit Function
                                        End Try
                                    End If
                                Next
                            Case "PARAMS"

                                If log.IsDebugEnabled Then log.Debug(methodBaseName & ":Insertion of Profile parameters")
                                For intRowCnt = 0 To pDSProfile.Tables("PARAMS").Rows.Count - 1
                                    _strSQL = String.Empty
                                    _strSQL = "INSERT INTO MT_ATPAR_PROFILE_PARAMETERS(PROFILE_ID, APP_ID, PARAMETER_ID, PARAMETER_VALUE, " & _
                                                "LAST_UPDATE_DATE, LAST_UPDATE_USER, LAST_CLIENT_ADDRESS) VALUES('" & pProfileID & "','" & _
                                                pDSProfile.Tables("PARAMS").Rows(intRowCnt).Item("APP_ID").ToString & "','" & _
                                                pDSProfile.Tables("PARAMS").Rows(intRowCnt).Item("PARAMETER_ID").ToString & "','" & _
                                                pDSProfile.Tables("PARAMS").Rows(intRowCnt).Item("PARAMETER_VALUE").ToString & "','" & _
                                                System.DateTime.Now() & "','" & pUserID & "','" & pClientAddr & "')"

                                    If log.IsInfoEnabled Then log.Info(methodBaseName & ":" & _strSQL)
                                    Try
                                        m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), trans)
                                    Catch ex As Exception
                                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to insert profile parameters " & vbCrLf & _
                                                                                         " with the following SQL :" & _strSQL & vbCrLf & _
                                                                                         " Exception is:" & ex.ToString & vbCrLf)
                                        trans.RollBack()
                                        SaveProfileInfo = ATPAR_E_LOCALDBINSERTFAIL
                                        Exit Function
                                    End Try

                                Next
                            Case "SCREENDISPLAY"

                                If log.IsDebugEnabled Then log.Debug(methodBaseName & ":Insertion of Screen display parameters")
                                For intRowCnt = 0 To pDSProfile.Tables("SCREENDISPLAY").Rows.Count - 1
                                    _strSQL = String.Empty
                                    strToggletext = ""
                                    strToggleorder = ""
                                    strToggletext = pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("DEFAULT_TOGGLE_TEXT").ToString
                                    strToggleorder = pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("TOGGLE_ORDER").ToString

                                    If (strToggletext <> "" And strToggleorder <> "") Then
                                        If pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("DISPLAY_FIELD").ToString = "Y" Then
                                            strTogglefld = "Y"
                                        Else
                                            strTogglefld = "N"
                                        End If
                                    Else
                                        strTogglefld = pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("TOGGLE_FIELD").ToString
                                    End If

                                    _strSQL = "INSERT INTO MT_ATPAR_PROFILE_LIST_VIEW(PROFILE_ID, APP_ID, SCREEN_NAME, FIELD_NAME, " & _
                                                "COLUMN_HEADER, COLUMN_ORDER, COLUMN_WIDTH, DISPLAY_FIELD,TOGGLE_FIELD,DEFAULT_TOGGLE_TEXT,TOGGLE_ORDER, " & _
                                                "LAST_UPDATE_DATE, LAST_UPDATE_USER, LAST_CLIENT_ADDRESS) VALUES('" & pProfileID & "','" & _
                                                pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("APP_ID").ToString & "','" & _
                                                pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("SCREEN_NAME").ToString & "','" & _
                                                pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("FIELD_NAME").ToString & "','" & _
                                                pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("COLUMN_HEADER").ToString & "','" & _
                                                pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("COLUMN_ORDER").ToString & "','" & _
                                                pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("COLUMN_WIDTH").ToString & "','" & _
                                                pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("DISPLAY_FIELD").ToString & "','" & _
                                                strTogglefld & "','" & _
                                                pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("DEFAULT_TOGGLE_TEXT").ToString & "','" & _
                                                pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("TOGGLE_ORDER").ToString & "','" & _
                                                System.DateTime.Now() & "','" & pUserID & "','" & pClientAddr & "')"

                                    If log.IsInfoEnabled Then log.Info(methodBaseName & ":" & _strSQL)
                                    Try
                                        m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), trans)
                                    Catch ex As Exception
                                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to insert profile list view " & vbCrLf & _
                                                                                         " with the following SQL :" & _strSQL & vbCrLf & _
                                                                                         " Exception is:" & ex.ToString & vbCrLf)
                                        trans.RollBack()
                                        SaveProfileInfo = ATPAR_E_LOCALDBINSERTFAIL
                                        Exit Function
                                    End Try

                                Next
                        End Select
                    Next
                End If
            ElseIf pMode = "Edit" Then

                If log.IsDebugEnabled Then log.Debug(methodBaseName & ":Updating Profile ")
                'RT 3765 04/23/2008
                _strSQL = String.Empty
                _strSQL = "UPDATE MT_ATPAR_PROFILE SET PROFILE_DESCRIPTION='" & pProfileDescr & "' WHERE PROFILE_ID='" & pProfileID & "'"

                If log.IsInfoEnabled Then log.Info(methodBaseName & ":" & _strSQL)
                Try
                    m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), trans)

                Catch ex As Exception
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to update profile info " & vbCrLf & _
                                                                 " with the following SQL :" & _strSQL & vbCrLf & _
                                                                 " Exception is:" & ex.ToString & vbCrLf)
                    trans.RollBack()
                    SaveProfileInfo = ATPAR_E_LOCALDBUPDATEFAIL
                    Exit Function
                End Try

                For intRecCnt = 0 To pDSProfile.Tables.Count - 1
                    strtblName = pDSProfile.Tables(intRecCnt).TableName

                    Select Case strtblName
                        Case "PROFILE"

                            If log.IsDebugEnabled Then log.Debug(methodBaseName & ":App parameters")
                            For intRowCnt = 0 To pDSProfile.Tables("PROFILE").Rows.Count - 1
                                If pDSProfile.Tables("PROFILE").Rows(intRowCnt).Item("CLIENT_USER").ToString = "N" And _
                                                             pDSProfile.Tables("PROFILE").Rows(intRowCnt).Item("SERVER_USER").ToString = "N" Then

                                    If log.IsDebugEnabled Then log.Debug(methodBaseName & ":Deleting parameters when no access is given")
                                    _strSQL = String.Empty
                                    _strSQL = "DELETE FROM MT_ATPAR_PROFILE_APP_ACL WHERE PROFILE_ID='" & pProfileID & "' AND " & _
                                                "APP_ID='" & pDSProfile.Tables("PROFILE").Rows(intRowCnt).Item("APP_ID").ToString & "'"

                                    If log.IsInfoEnabled Then log.Info(methodBaseName & ":" & _strSQL)
                                    Try
                                        m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), trans)

                                    Catch ex As Exception
                                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to delete profile info " & vbCrLf & _
                                                                                   " with the following SQL :" & _strSQL & vbCrLf & _
                                                                                   " Exception is:" & ex.ToString & vbCrLf)
                                        trans.RollBack()
                                        SaveProfileInfo = ATPAR_E_LOCALDBDELETEFAIL
                                        Exit Function
                                    End Try

                                    'Parameters 
                                    _strSQL = String.Empty
                                    _strSQL = "DELETE FROM MT_ATPAR_PROFILE_PARAMETERS WHERE PROFILE_ID='" & pProfileID & "' AND " & _
                                                "APP_ID='" & pDSProfile.Tables("PROFILE").Rows(intRowCnt).Item("APP_ID").ToString & "'"

                                    If log.IsInfoEnabled Then log.Info(methodBaseName & ":" & _strSQL)
                                    Try
                                        m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), trans)
                                    Catch ex As Exception
                                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to delete profile parameters info " & vbCrLf & _
                                                                                           " with the following SQL :" & _strSQL & vbCrLf & _
                                                                                           " Exception is:" & ex.ToString & vbCrLf)
                                        trans.RollBack()
                                        SaveProfileInfo = ATPAR_E_LOCALDBDELETEFAIL
                                        Exit Function
                                    End Try

                                    'TODO:This method needs to be reviewed and optimized
                                    _strSQL = String.Empty
                                    _strSQL = "UPDATE MT_ATPAR_PROFILE_PARAMETERS SET LAST_UPDATE_USER = '" & pUserID & "', " _
                                            & "LAST_UPDATE_DATE = GETDATE() " & _
                                              "WHERE PROFILE_ID='" & pProfileID & "' "

                                    If log.IsInfoEnabled Then log.Info(methodBaseName & ": Updating the " & _
                                                                                    "profile parameter's last " & _
                                                                                    "sync date values for the " & _
                                                                                    "profile with the following SQL..." _
                                                                                      & vbCrLf & _strSQL)

                                    Try
                                        m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), trans)
                                    Catch ex As Exception
                                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to update profile parameters info " & vbCrLf & _
                                                                                       " with the following SQL :" & _strSQL & vbCrLf & _
                                                                                       " Exception is:" & ex.ToString & vbCrLf)
                                        trans.RollBack()
                                        SaveProfileInfo = ATPAR_E_LOCALDBUPDATEFAIL
                                        Exit Function
                                    End Try

                                Else

                                    If log.IsDebugEnabled Then log.Debug(methodBaseName & ":Updating parameters when access is given")
                                    'Searching the record whether exist or not
                                    _strSQL = ""
                                    _strSQL = "SELECT COUNT(APP_ID) FROM MT_ATPAR_PROFILE_APP_ACL WHERE PROFILE_ID='" & pProfileID & "' AND " & _
                                                "APP_ID='" & pDSProfile.Tables("PROFILE").Rows(intRowCnt).Item("APP_ID").ToString & "'"
                                    If log.IsInfoEnabled Then log.Info(methodBaseName & ":" & _strSQL)

                                    intNoofRecords = 0
                                    Try
                                        intNoofRecords = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(_strSQL), trans)
                                    Catch ex As Exception
                                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get profile info " & vbCrLf & _
                                                                                           " with the following SQL :" & _strSQL & vbCrLf & _
                                                                                           " Exception is:" & ex.ToString & vbCrLf)
                                        trans.RollBack()
                                        SaveProfileInfo = ATPAR_E_LOCALDBSELECTFAIL
                                        Exit Function
                                    End Try


                                    If intNoofRecords > 0 Then

                                        If log.IsDebugEnabled Then log.Debug(methodBaseName & ":Updation of APP parameters")
                                        _strSQL = String.Empty
                                        _strSQL = "UPDATE MT_ATPAR_PROFILE_APP_ACL SET " & _
                                         "CLIENT_USER = '" & pDSProfile.Tables("PROFILE").Rows(intRowCnt).Item("CLIENT_USER").ToString & "', " & _
                                         "SERVER_USER = '" & pDSProfile.Tables("PROFILE").Rows(intRowCnt).Item("SERVER_USER").ToString & "', " & _
                                         "LAST_UPDATE_USER = '" & pUserID & "', LAST_CLIENT_ADDRESS = '" & pClientAddr & "', " & _
                                         "LAST_UPDATE_DATE = '" & System.DateTime.Now() & "' WHERE PROFILE_ID='" & pProfileID & "' AND " & _
                                         "APP_ID='" & pDSProfile.Tables("PROFILE").Rows(intRowCnt).Item("APP_ID").ToString & "'"

                                        If log.IsInfoEnabled Then log.Info(methodBaseName & ":" & _strSQL)
                                        Try
                                            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), trans)
                                        Catch ex As Exception
                                            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to update profile info " & vbCrLf & _
                                                                                                   " with the following SQL :" & _strSQL & vbCrLf & _
                                                                                                   " Exception is:" & ex.ToString & vbCrLf)
                                            trans.RollBack()
                                            SaveProfileInfo = ATPAR_E_LOCALDBUPDATEFAIL
                                            Exit Function
                                        End Try

                                    Else

                                        If log.IsDebugEnabled Then log.Debug(methodBaseName & ":Insertion of APP parameters")
                                        _strSQL = String.Empty
                                        _strSQL = "INSERT INTO MT_ATPAR_PROFILE_APP_ACL(PROFILE_ID, APP_ID, CLIENT_USER, SERVER_USER, LAST_UPDATE_DATE, " & _
                                                    "LAST_UPDATE_USER, LAST_CLIENT_ADDRESS) VALUES('" & pProfileID & "','" & _
                                                    pDSProfile.Tables("PROFILE").Rows(intRowCnt).Item("APP_ID").ToString & "','" & _
                                                    pDSProfile.Tables("PROFILE").Rows(intRowCnt).Item("CLIENT_USER").ToString & "','" & _
                                                    pDSProfile.Tables("PROFILE").Rows(intRowCnt).Item("SERVER_USER").ToString & "','" & _
                                                    System.DateTime.Now() & "','" & pUserID & "','" & pClientAddr & "')"

                                        If log.IsInfoEnabled Then log.Info(methodBaseName & ":" & _strSQL)
                                        Try
                                            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), trans)
                                        Catch ex As Exception
                                            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to insert profile info " & vbCrLf & _
                                                                                                " with the following SQL :" & _strSQL & vbCrLf & _
                                                                                                " Exception is:" & ex.ToString & vbCrLf)
                                            trans.RollBack()
                                            SaveProfileInfo = ATPAR_E_LOCALDBINSERTFAIL
                                            Exit Function
                                        End Try

                                    End If
                                End If

                                'To Delete ScreenDisplay Data
                                If pDSProfile.Tables("PROFILE").Rows(intRowCnt).Item("CLIENT_USER").ToString = "N" Then

                                    If log.IsDebugEnabled Then log.Debug(methodBaseName & ":Deletion of Screen display parameters if no cleint access")
                                    _strSQL = String.Empty
                                    _strSQL = "DELETE FROM MT_ATPAR_PROFILE_LIST_VIEW WHERE PROFILE_ID='" & pProfileID & "' AND " & _
                                                "APP_ID='" & pDSProfile.Tables("PROFILE").Rows(intRowCnt).Item("APP_ID").ToString & "'"


                                    If log.IsInfoEnabled Then log.Info(methodBaseName & ":" & _strSQL)
                                    Try
                                        m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), trans)
                                    Catch ex As Exception
                                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to delete profile list view info " & vbCrLf & _
                                                                                           " with the following SQL :" & _strSQL & vbCrLf & _
                                                                                           " Exception is:" & ex.ToString & vbCrLf)
                                        trans.RollBack()
                                        SaveProfileInfo = ATPAR_E_LOCALDBDELETEFAIL
                                        Exit Function
                                    End Try

                                End If
                            Next
                        Case "MENUS"


                            For intRowCnt = 0 To pDSProfile.Tables("MENUS").Rows.Count - 1
                                If pDSProfile.Tables("MENUS").Rows(intRowCnt).Item("CHKSTATUS").ToString = "N" Then
                                    If log.IsDebugEnabled Then log.Debug(methodBaseName & ":Deletion of Menus")
                                    _strSQL = String.Empty
                                    _strSQL = "DELETE FROM MT_ATPAR_PROFILE_MENU WHERE PROFILE_ID='" & pProfileID & "' AND " & _
                                                "APP_ID='" & pDSProfile.Tables("MENUS").Rows(intRowCnt).Item("APP_ID").ToString & "' AND " & _
                                                "MENU_CODE='" & pDSProfile.Tables("MENUS").Rows(intRowCnt).Item("MENU_CODE").ToString & "'"

                                    If log.IsInfoEnabled Then log.Info(methodBaseName & ":" & _strSQL)
                                    Try
                                        m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), trans)
                                    Catch ex As Exception
                                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to delete profile menu info " & vbCrLf & _
                                                                                           " with the following SQL :" & _strSQL & vbCrLf & _
                                                                                           " Exception is:" & ex.ToString & vbCrLf)
                                        trans.RollBack()
                                        SaveProfileInfo = ATPAR_E_LOCALDBDELETEFAIL
                                        Exit Function
                                    End Try

                                Else

                                    If log.IsDebugEnabled Then log.Debug(methodBaseName & ":Insertion of Menus")
                                    'Searching the record whether exist or not
                                    _strSQL = String.Empty
                                    _strSQL = "SELECT COUNT(APP_ID) FROM MT_ATPAR_PROFILE_MENU WHERE PROFILE_ID='" & pProfileID & "' AND " & _
                                               "APP_ID='" & pDSProfile.Tables("MENUS").Rows(intRowCnt).Item("APP_ID").ToString & "' AND " & _
                                                "MENU_CODE='" & pDSProfile.Tables("MENUS").Rows(intRowCnt).Item("MENU_CODE").ToString & "'"

                                    If log.IsInfoEnabled Then log.Info(methodBaseName & ":" & _strSQL)

                                    intNoofRecords = 0
                                    Try
                                        intNoofRecords = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(_strSQL), trans)
                                    Catch ex As Exception
                                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get profile menu info " & vbCrLf & _
                                                                                          " with the following SQL :" & _strSQL & vbCrLf & _
                                                                                          " Exception is:" & ex.ToString & vbCrLf)
                                        trans.RollBack()
                                        SaveProfileInfo = ATPAR_E_LOCALDBSELECTFAIL
                                        Exit Function
                                    End Try


                                    If intNoofRecords > 0 Then

                                        If log.IsDebugEnabled Then log.Debug(methodBaseName & ":Updation of menus")
                                        _strSQL = String.Empty
                                        _strSQL = "UPDATE MT_ATPAR_PROFILE_MENU SET " & _
                                         "MENU_SEQ_NO = '" & pDSProfile.Tables("MENUS").Rows(intRowCnt).Item("MENU_SEQ_NO").ToString & "', " & _
                                         "LAST_UPDATE_USER = '" & pUserID & "', LAST_CLIENT_ADDRESS = '" & pClientAddr & "', " & _
                                         "LAST_UPDATE_DATE = '" & System.DateTime.Now() & "' WHERE PROFILE_ID='" & pProfileID & "' AND " & _
                                         "APP_ID='" & pDSProfile.Tables("MENUS").Rows(intRowCnt).Item("APP_ID").ToString & "' AND " & _
                                         "MENU_CODE='" & pDSProfile.Tables("MENUS").Rows(intRowCnt).Item("MENU_CODE").ToString & "'"

                                        If log.IsInfoEnabled Then log.Info(methodBaseName & ":" & _strSQL)
                                        Try
                                            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), trans)
                                        Catch ex As Exception
                                            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to update profile menu info " & vbCrLf & _
                                                                                          " with the following SQL :" & _strSQL & vbCrLf & _
                                                                                          " Exception is:" & ex.ToString & vbCrLf)
                                            trans.RollBack()
                                            SaveProfileInfo = ATPAR_E_LOCALDBUPDATEFAIL
                                            Exit Function
                                        End Try

                                    Else

                                        If log.IsDebugEnabled Then log.Debug(methodBaseName & ":Insertion of Menus")
                                        _strSQL = String.Empty
                                        _strSQL = "INSERT INTO MT_ATPAR_PROFILE_MENU(PROFILE_ID, APP_ID, MENU_CODE, MENU_SEQ_NO, LAST_UPDATE_DATE, " & _
                                                    "LAST_UPDATE_USER, LAST_CLIENT_ADDRESS) VALUES('" & pProfileID & "','" & _
                                                    pDSProfile.Tables("MENUS").Rows(intRowCnt).Item("APP_ID").ToString & "','" & _
                                                    pDSProfile.Tables("MENUS").Rows(intRowCnt).Item("MENU_CODE").ToString & "','" & _
                                                    pDSProfile.Tables("MENUS").Rows(intRowCnt).Item("MENU_SEQ_NO").ToString & "','" & _
                                                    System.DateTime.Now() & "','" & pUserID & "','" & pClientAddr & "')"

                                        If log.IsInfoEnabled Then log.Info(methodBaseName & ":" & _strSQL)
                                        Try
                                            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), trans)
                                        Catch ex As Exception
                                            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to insert profile menu info " & vbCrLf & _
                                                                                          " with the following SQL :" & _strSQL & vbCrLf & _
                                                                                          " Exception is:" & ex.ToString & vbCrLf)
                                            trans.RollBack()
                                            SaveProfileInfo = ATPAR_E_LOCALDBINSERTFAIL
                                            Exit Function
                                        End Try

                                    End If
                                End If
                            Next
                        Case "PARAMS"

                            If log.IsDebugEnabled Then log.Debug(methodBaseName & ":Updation of parameters")
                            For intRowCnt = 0 To pDSProfile.Tables("PARAMS").Rows.Count - 1
                                _strSQL = String.Empty
                                _strSQL = "SELECT COUNT(PARAMETER_ID) FROM MT_ATPAR_PROFILE_PARAMETERS WHERE PROFILE_ID='" & pProfileID & "' AND " & _
                                           "APP_ID='" & pDSProfile.Tables("PARAMS").Rows(intRowCnt).Item("APP_ID").ToString & "' AND " & _
                                            "PARAMETER_ID='" & pDSProfile.Tables("PARAMS").Rows(intRowCnt).Item("PARAMETER_ID").ToString & "'"

                                If log.IsInfoEnabled Then log.Info(methodBaseName & ":" & _strSQL)

                                intNoofRecords = 0
                                Try
                                    intNoofRecords = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(_strSQL), trans)

                                Catch ex As Exception
                                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to select profile parameters info " & vbCrLf & _
                                                                                          " with the following SQL :" & _strSQL & vbCrLf & _
                                                                                          " Exception is:" & ex.ToString & vbCrLf)
                                    trans.RollBack()
                                    SaveProfileInfo = ATPAR_E_LOCALDBSELECTFAIL
                                    Exit Function
                                End Try

                                If intNoofRecords > 0 Then

                                    If log.IsDebugEnabled Then log.Debug(methodBaseName & ":updation of Profile parameters")
                                    _strSQL = String.Empty
                                    _strSQL = "UPDATE MT_ATPAR_PROFILE_PARAMETERS SET " & _
                                             "PARAMETER_VALUE = '" & pDSProfile.Tables("PARAMS").Rows(intRowCnt).Item("PARAMETER_VALUE").ToString & "', " & _
                                             "LAST_UPDATE_USER = '" & pUserID & "', LAST_CLIENT_ADDRESS = '" & pClientAddr & "', " & _
                                             "LAST_UPDATE_DATE = '" & System.DateTime.Now() & "' WHERE PROFILE_ID='" & pProfileID & "' AND " & _
                                             "PARAMETER_ID='" & pDSProfile.Tables("PARAMS").Rows(intRowCnt).Item("PARAMETER_ID").ToString & "' AND " & _
                                             "APP_ID='" & pDSProfile.Tables("PARAMS").Rows(intRowCnt).Item("APP_ID").ToString & "'"

                                    If log.IsInfoEnabled Then log.Info(methodBaseName & ":" & _strSQL)
                                    Try
                                        m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), trans)
                                    Catch ex As Exception
                                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to update profile parameters info " & vbCrLf & _
                                                                                         " with the following SQL :" & _strSQL & vbCrLf & _
                                                                                         " Exception is:" & ex.ToString & vbCrLf)
                                        trans.RollBack()
                                        SaveProfileInfo = ATPAR_E_LOCALDBUPDATEFAIL
                                        Exit Function
                                    End Try

                                Else

                                    If log.IsDebugEnabled Then log.Debug(methodBaseName & ":Insertion of Profile parameters")
                                    _strSQL = String.Empty
                                    _strSQL = "INSERT INTO MT_ATPAR_PROFILE_PARAMETERS(PROFILE_ID, APP_ID, PARAMETER_ID, PARAMETER_VALUE, " & _
                                                "LAST_UPDATE_DATE, LAST_UPDATE_USER, LAST_CLIENT_ADDRESS) VALUES('" & pProfileID & "','" & _
                                                pDSProfile.Tables("PARAMS").Rows(intRowCnt).Item("APP_ID").ToString & "','" & _
                                                pDSProfile.Tables("PARAMS").Rows(intRowCnt).Item("PARAMETER_ID").ToString & "','" & _
                                                pDSProfile.Tables("PARAMS").Rows(intRowCnt).Item("PARAMETER_VALUE").ToString & "','" & _
                                                System.DateTime.Now() & "','" & pUserID & "','" & pClientAddr & "')"

                                    If log.IsInfoEnabled Then log.Info(methodBaseName & ":" & _strSQL)
                                    Try
                                        m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), trans)
                                    Catch ex As Exception
                                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to insert profile parameters info " & vbCrLf & _
                                                                                         " with the following SQL :" & _strSQL & vbCrLf & _
                                                                                         " Exception is:" & ex.ToString & vbCrLf)
                                        trans.RollBack()
                                        SaveProfileInfo = ATPAR_E_LOCALDBINSERTFAIL
                                        Exit Function
                                    End Try

                                End If
                            Next
                        Case "SCREENDISPLAY"

                            If log.IsDebugEnabled Then log.Debug(methodBaseName & ":updation of Screen display parameters")
                            For intRowCnt = 0 To pDSProfile.Tables("SCREENDISPLAY").Rows.Count - 1
                                _strSQL = String.Empty
                                _strSQL = "SELECT COUNT(SCREEN_NAME) FROM MT_ATPAR_PROFILE_LIST_VIEW WHERE PROFILE_ID='" & pProfileID & "' AND " & _
                                            "FIELD_NAME='" & pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("FIELD_NAME").ToString & "' AND " & _
                                            "APP_ID='" & pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("APP_ID").ToString & "' AND " & _
                                            "SCREEN_NAME='" & pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("SCREEN_NAME").ToString & "' "

                                If log.IsInfoEnabled Then log.Info(methodBaseName & ":" & _strSQL)

                                intNoofRecords = 0
                                Try
                                    intNoofRecords = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(_strSQL), trans)

                                Catch ex As Exception
                                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to select profile screen display info " & vbCrLf & _
                                                                                        " with the following SQL :" & _strSQL & vbCrLf & _
                                                                                        " Exception is:" & ex.ToString & vbCrLf)
                                    trans.RollBack()
                                    SaveProfileInfo = ATPAR_E_LOCALDBSELECTFAIL
                                    Exit Function
                                End Try

                                strToggletext = ""
                                strToggleorder = ""
                                strToggletext = pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("DEFAULT_TOGGLE_TEXT").ToString
                                strToggleorder = pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("TOGGLE_ORDER").ToString
                                If (strToggletext <> "" And strToggleorder <> "") Then
                                    If pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("DISPLAY_FIELD").ToString = "Y" Then
                                        strTogglefld = "Y"
                                    Else
                                        strTogglefld = "N"
                                    End If
                                Else
                                    'RK-4907
                                    'NB-0005074,0005818,0005875
                                    'strTogglefld = "N"
                                    'strTogglefld = pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("TOGGLE_FIELD").ToString
                                    If (pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("TOGGLE_FIELD").ToString = "Y") Then
                                        _strSQL = String.Empty
                                        _strSQL = "SELECT TOGGLE_FIELD FROM MT_ATPAR_LIST_VIEW WHERE FIELD_NAME='" & pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("FIELD_NAME").ToString & "' AND " & _
                                                    "APP_ID='" & pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("APP_ID").ToString & "' AND " & _
                                                    "SCREEN_NAME='" & pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("SCREEN_NAME").ToString & "' " & _
                                                    "AND ENTERPRISE_SYSTEM = '" & _strEnterpriseSystem & "'"

                                        If log.IsInfoEnabled Then log.Info(methodBaseName & ":" & _strSQL)
                                        Try
                                            strTogglefld = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(_strSQL), trans)
                                        Catch ex As Exception
                                            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to select toggle field info " & vbCrLf & _
                                                                                         " with the following SQL :" & _strSQL & vbCrLf & _
                                                                                         " Exception is:" & ex.ToString & vbCrLf)
                                            trans.RollBack()
                                            SaveProfileInfo = ATPAR_E_LOCALDBSELECTFAIL
                                            Exit Function
                                        End Try

                                    Else
                                        strTogglefld = pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("TOGGLE_FIELD").ToString
                                    End If
                                End If

                                If intNoofRecords > 0 Then

                                    If log.IsDebugEnabled Then log.Debug(methodBaseName & ":Updation of Screen display parameters")
                                    _strSQL = String.Empty
                                    _strSQL = "UPDATE MT_ATPAR_PROFILE_LIST_VIEW SET " & _
                                             "COLUMN_HEADER = '" & pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("COLUMN_HEADER").ToString & "', " & _
                                             "COLUMN_ORDER = '" & pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("COLUMN_ORDER").ToString & "', " & _
                                             "COLUMN_WIDTH = '" & pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("COLUMN_WIDTH").ToString & "', " & _
                                             "DISPLAY_FIELD = '" & pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("DISPLAY_FIELD").ToString & "', " & _
                                             "LAST_UPDATE_USER = '" & pUserID & "', LAST_CLIENT_ADDRESS = '" & pClientAddr & "', " & _
                                             "LAST_UPDATE_DATE = '" & System.DateTime.Now() & "', " & _
                                             "TOGGLE_FIELD='" & strTogglefld & "'," & _
                                             "DEFAULT_TOGGLE_TEXT='" & pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("DEFAULT_TOGGLE_TEXT").ToString & "' , " & _
                                             "TOGGLE_ORDER='" & pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("TOGGLE_ORDER").ToString & "'" & _
                                            " WHERE PROFILE_ID='" & pProfileID & "' AND " & _
                                             "SCREEN_NAME='" & pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("SCREEN_NAME").ToString & "' AND " & _
                                             "FIELD_NAME='" & pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("FIELD_NAME").ToString & "' AND " & _
                                             "APP_ID='" & pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("APP_ID").ToString & "'"

                                    If log.IsInfoEnabled Then log.Info(methodBaseName & ":" & _strSQL)
                                    Try
                                        m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), trans)
                                    Catch ex As Exception
                                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to update list view info " & vbCrLf & _
                                                                                        " with the following SQL :" & _strSQL & vbCrLf & _
                                                                                        " Exception is:" & ex.ToString & vbCrLf)
                                        trans.RollBack()
                                        SaveProfileInfo = ATPAR_E_LOCALDBUPDATEFAIL
                                        Exit Function
                                    End Try

                                Else

                                    If log.IsDebugEnabled Then log.Debug(methodBaseName & ":Insertion of Screen display parameters")
                                    _strSQL = String.Empty
                                    _strSQL = "INSERT INTO MT_ATPAR_PROFILE_LIST_VIEW(PROFILE_ID, APP_ID, SCREEN_NAME, FIELD_NAME, " & _
                                                "COLUMN_HEADER, COLUMN_ORDER, COLUMN_WIDTH, DISPLAY_FIELD,TOGGLE_FIELD,DEFAULT_TOGGLE_TEXT,TOGGLE_ORDER, " & _
                                                "LAST_UPDATE_DATE, LAST_UPDATE_USER, LAST_CLIENT_ADDRESS) VALUES('" & pProfileID & "','" & _
                                                pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("APP_ID").ToString & "','" & _
                                                pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("SCREEN_NAME").ToString & "','" & _
                                                pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("FIELD_NAME").ToString & "','" & _
                                                pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("COLUMN_HEADER").ToString & "','" & _
                                                pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("COLUMN_ORDER").ToString & "','" & _
                                                pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("COLUMN_WIDTH").ToString & "','" & _
                                                pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("DISPLAY_FIELD").ToString & "','" & _
                                                 strTogglefld & "','" & _
                                                pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("DEFAULT_TOGGLE_TEXT").ToString & "','" & _
                                                pDSProfile.Tables("SCREENDISPLAY").Rows(intRowCnt).Item("TOGGLE_ORDER").ToString & "','" & _
                                                System.DateTime.Now() & "','" & pUserID & "','" & pClientAddr & "')"

                                    If log.IsInfoEnabled Then log.Info(methodBaseName & ":" & _strSQL)
                                    Try
                                        m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), trans)
                                    Catch ex As Exception
                                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to insert list view info " & vbCrLf & _
                                                                                        " with the following SQL :" & _strSQL & vbCrLf & _
                                                                                        " Exception is:" & ex.ToString & vbCrLf)
                                        trans.RollBack()
                                        SaveProfileInfo = ATPAR_E_LOCALDBINSERTFAIL
                                        Exit Function
                                    End Try

                                End If
                            Next
                    End Select
                Next
                'to Insert MT_ATPAR_USER_APP_PARAMETERS 

                sqlParms = New SqlParameter(4) {}

                sqlParms(0) = New SqlParameter("@pProfileID", SqlDbType.NVarChar)
                sqlParms(0).Value = pProfileID

                sqlParms(1) = New SqlParameter("@UpdateUser", SqlDbType.NVarChar)
                sqlParms(1).Value = pUserID

                sqlParms(2) = New SqlParameter("@ClientAddress", SqlDbType.NVarChar)
                sqlParms(2).Value = pClientAddr

                sqlParms(3) = New SqlParameter("@pEnterpriseSystem", SqlDbType.NVarChar)
                sqlParms(3).Value = _strEnterpriseSystem

                Dim _Cmd As SqlCommand
                Try
                    _Cmd = New SqlCommand

                    _Cmd.Connection = m_LocalDB.CreateConnection
                    _Cmd.CommandType = CommandType.StoredProcedure
                    _Cmd.CommandText = "SP_UpdateUserAppParams"
                    _Cmd.Parameters.Add(sqlParms(0))
                    _Cmd.Parameters.Add(sqlParms(1))
                    _Cmd.Parameters.Add(sqlParms(2))
                    _Cmd.Parameters.Add(sqlParms(3))

                    If log.IsInfoEnabled Then log.Info(methodBaseName & ": Updating the user parameters : " & _
                                                                          "exec SP_UpdateUserAppParams '" & _
                                                                          sqlParms(0).value & "', " & _
                                                                          "'" & sqlParms(1).value & "', " & _
                                                                          "'" & sqlParms(2).value & "', " & _
                                                                          "'" & sqlParms(3).value & "' ")
                    m_LocalDB.ExecuteNonQuery(_Cmd, trans)

                Catch sqlex As SqlException
                    trans.RollBack()
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & vbCrLf & GetSQLExceptionMessageString(sqlex))
                    Return ATPAR_E_LOCALDBUPDATEFAIL
                Catch ex As Exception
                    trans.RollBack()
                    If log.IsFatalEnabled Then log.Fatal("E_SERVERERROR :" & ex.ToString)
                    Return E_SERVERERROR
                Finally
                    _Cmd.dispose()
                End Try

            End If
            trans.Commit()
            SaveProfileInfo = ATPAR_OK
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " call failed " & ex.ToString)
            trans.rollback()
            SaveProfileInfo = ATPAR_E_LOCALDBSELECTFAIL
            Exit Function
        Finally
            _Conn.close()
        End Try

    End Function

    ''' <summary>
    ''' To get User Products
    ''' </summary>
    ''' <param name="pUser">User ID</param>
    ''' <param name="pDsProducts">Products as Dataset</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function GetUserProducts(ByVal pUser As String, _
                                    ByRef pDsProducts As DataSet, _
                                    ByVal pDeviceTokenEntry() As String) As Integer _
                                    Implements IAtpar_WebTrans.GetUserProducts

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strSQL As String = String.Empty

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            _strSQL = String.Empty
            _strSQL = " SELECT B.APP_ID, C.APP_NAME,B.PROFILE_ID FROM MT_ATPAR_USER A, MT_ATPAR_PROFILE_APP_ACL B," & _
                     " MT_ATPAR_APP C WHERE A.PROFILE_ID = B.PROFILE_ID AND B.APP_ID = C.APP_ID AND " & _
                     " B.SERVER_USER='Y' AND A.USER_ID = '" & pUser & "' AND B.APP_ID <> 0 "

            If log.IsInfoEnabled Then log.Info(_strSQL)

            pDsProducts = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))

            If pDsProducts.Tables(0).Rows.Count = 0 Then
                GetUserProducts = E_NORECORDFOUND
                Exit Function
            Else
                GetUserProducts = ATPAR_OK
            End If

            GetUserProducts = ATPAR_OK

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to Get UserProducts " & vbCrLf & _
                                                           " with the following SQL :" & _strSQL & vbCrLf & _
                                                           " Exception is:" & ex.ToString & vbCrLf)
            GetUserProducts = ATPAR_E_LOCALDBSELECTFAIL
            Exit Function
        End Try

    End Function

    ''' <summary>
    ''' To get User Org Groups
    ''' </summary>
    ''' <param name="pUser">User ID</param>
    ''' <param name="pOrgGrpId">Org Group ID</param>
    ''' <param name="pDsOrgGrpIds">Org Group IDs as Dataset</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function GetUserOrgGroups(ByVal pUser As String, _
                                     ByVal pOrgGrpId As String, _
                                     ByRef pDsOrgGrpIds As DataSet, _
                                     ByVal pDeviceTokenEntry() As String) As Integer _
                                     Implements IAtpar_WebTrans.GetUserOrgGroups

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strSQL As String = String.Empty

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try

            _strSQL = String.Empty
            'RT to obtain all group id's  for org all
            If (pOrgGrpId = "ALL") Then
                _strSQL = "SELECT ORG_GROUP_ID,ORG_GROUP_NAME FROM MT_ATPAR_ORG_GROUPS"
            Else
                _strSQL = " SELECT A.ORG_GROUP_ID,B.ORG_GROUP_NAME FROM  MT_ATPAR_USER_ORG_GROUPS A ," & _
                                        " MT_ATPAR_ORG_GROUPS B WHERE USER_ID='" & pUser & "' AND A.ORG_GROUP_ID = B.ORG_GROUP_ID "
            End If

            If log.IsInfoEnabled Then log.Info(_strSQL)

            pDsOrgGrpIds = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))

            Return ATPAR_OK
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to Get User groups " & vbCrLf & _
                                                          " with the following SQL :" & _strSQL & vbCrLf & _
                                                          " Exception is:" & ex.ToString & vbCrLf)
            GetUserOrgGroups = ATPAR_E_LOCALDBSELECTFAIL
            Exit Function
        End Try

    End Function

    ''' <summary>
    ''' To get Server Users
    ''' </summary>
    ''' <param name="pUserID">User ID</param>
    ''' <param name="pOrgGrpId">Org Group ID</param>
    ''' <param name="pAppid">Application ID</param>
    ''' <param name="pDsServerUser">Server Users as Dataset</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function GetServerUsers(ByVal pUserID As String, ByVal pOrgGrpId As String, _
                                   ByVal pAppid As String, _
                                   ByRef pDsServerUser As DataSet, _
                                   ByVal pDeviceTokenEntry() As String) As Integer _
                                   Implements IAtpar_WebTrans.GetServerUsers
        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserID
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strSQL As String = String.Empty

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try


        Try
            _strSQL = String.Empty
            _strSQL = " SELECT DISTINCT A.USER_ID, FIRST_NAME + ' ' + LAST_NAME + ' ('+ A.USER_ID +')'  AS USERNAME FROM MT_ATPAR_USER A, MT_ATPAR_USER_ORG_GROUPS B, " & _
                     " MT_ATPAR_PROFILE_APP_ACL C, MT_ATPAR_USER_ACL D WHERE(A.USER_ID = B.USER_ID AND A.PROFILE_ID = C.PROFILE_ID) AND " & _
                     " (B.ORG_GROUP_ID ='" & pOrgGrpId & "' OR  B.ORG_GROUP_ID='All') AND A.USER_ID = D.USER_ID AND D.ACCOUNT_DISABLED = 0 " & _
                     " AND C.SERVER_USER='Y' AND C.APP_ID =" & pAppid

            If log.IsInfoEnabled Then log.Info(_strSQL)

            pDsServerUser = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))

            GetServerUsers = ATPAR_OK
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to Get server users " & vbCrLf & _
                                                           " with the following SQL :" & _strSQL & vbCrLf & _
                                                           " Exception is:" & ex.ToString & vbCrLf)
            GetServerUsers = ATPAR_E_LOCALDBSELECTFAIL
            Exit Function
        End Try

    End Function

    ''' <summary>
    ''' To get Client Users
    ''' </summary>
    ''' <param name="pOrgGrpId">Org Group ID</param>
    ''' <param name="pAppid">Application ID</param>
    ''' <param name="pServerUser">Server User ID</param>
    ''' <param name="pDsClientUser">Clients Users as Dataset</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function GetClientUsers(ByVal pOrgGrpId As String, _
                                   ByVal pAppid As String, _
                                   ByVal pServerUser As String, _
                                   ByRef pDsClientUser As DataSet, _
                                   ByVal pDeviceTokenEntry() As String) As Integer _
                                   Implements IAtpar_WebTrans.GetClientUsers

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try


        Dim _strSQL As String = String.Empty

        Dim dsClntUsers As DataSet
        Dim dsAssClntUsers As DataSet
        Dim dtTbl As DataTable
        Dim dtRow As DataRow
        Dim intCount As Integer
        Dim intCnt As Integer
        Dim strTemp As String = String.Empty
        dtTbl = New DataTable("ClientUsers")
        dtTbl.Columns.Add("USERNAME", Type.GetType("System.String"))
        dtTbl.Columns.Add("USER_ID", Type.GetType("System.String"))
        dtTbl.Columns.Add("CHK_VALUE", Type.GetType("System.String"))

        Try
            'HK-0003371-03/28/2008
            _strSQL = String.Empty
            _strSQL = " SELECT FIRST_NAME + ' ' + LAST_NAME + ' ('+ A.USER_ID +')'  AS USERNAME " & _
                     " ,C.APP_ID, A.PROFILE_ID, C.SERVER_USER, C.CLIENT_USER, A.USER_ID FROM MT_ATPAR_USER A, " & _
                     " MT_ATPAR_USER_ORG_GROUPS B, MT_ATPAR_PROFILE_APP_ACL C, MT_ATPAR_USER_ACL D " & _
                     " WHERE A.USER_ID = B.USER_ID AND A.PROFILE_ID = C.PROFILE_ID AND A.USER_ID = D.USER_ID " & _
                     " AND D.ACCOUNT_DISABLED = 0 AND B.ORG_GROUP_ID ='" & pOrgGrpId & "' AND (C.CLIENT_USER='Y' " & _
                     " OR C.SERVER_USER='Y') AND C.APP_ID = " & pAppid & " ORDER BY USERNAME "

            If log.IsInfoEnabled Then log.Info(_strSQL)

            dsClntUsers = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))

            GetClientUsers = ATPAR_OK

            _strSQL = String.Empty
            _strSQL = " SELECT DISTINCT A.APP_ID, A.SERVER_USER, A.CLIENT_USER  FROM MT_ATPAR_USER_GROUPS A, " & _
                     " MT_ATPAR_PROFILE_APP_ACL B WHERE A.APP_ID = B.APP_ID  " & _
                     " AND A.SERVER_USER='" & pServerUser & "' AND A.APP_ID=" & pAppid & "  ORDER BY A.APP_ID, " & _
                     "  A.SERVER_USER, A.CLIENT_USER "

            If log.IsInfoEnabled Then log.Info(_strSQL)

            dsAssClntUsers = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to Get client users " & vbCrLf & _
                                                          " with the following SQL :" & _strSQL & vbCrLf & _
                                                          " Exception is:" & ex.ToString & vbCrLf)
            GetClientUsers = ATPAR_E_LOCALDBSELECTFAIL
            Exit Function
        End Try

        If dsClntUsers.Tables(0).Rows.Count > 0 Then
            For intCount = 0 To dsClntUsers.Tables(0).Rows.Count - 1
                If strTemp <> dsClntUsers.Tables(0).Rows(intCount).Item("USER_ID") Then
                    dtRow = dtTbl.NewRow()
                    dtRow.Item("USER_ID") = dsClntUsers.Tables(0).Rows(intCount).Item("USER_ID").ToString
                    dtRow.Item("USERNAME") = dsClntUsers.Tables(0).Rows(intCount).Item("USERNAME").ToString
                    dtRow.Item("CHK_VALUE") = "0"
                    If dsAssClntUsers.Tables(0).Rows.Count > 0 Then
                        For intCnt = 0 To dsAssClntUsers.Tables(0).Rows.Count - 1
                            If dsAssClntUsers.Tables(0).Rows(intCnt).Item("CLIENT_USER") = _
                                  dsClntUsers.Tables(0).Rows(intCount).Item("USER_ID") Then
                                'dtRow.Item("USERNAME") = dsClntUsers.Tables(0).Rows(intCount).Item("USERNAME").ToString
                                dtRow.Item("CHK_VALUE") = "1"
                            End If
                        Next
                    Else
                        dtRow.Item("USER_ID") = dsClntUsers.Tables(0).Rows(intCount).Item("USER_ID").ToString
                        dtRow.Item("USERNAME") = dsClntUsers.Tables(0).Rows(intCount).Item("USERNAME").ToString
                        dtRow.Item("CHK_VALUE") = "0"
                    End If
                    dtTbl.Rows.Add(dtRow)
                End If
                strTemp = dsClntUsers.Tables(0).Rows(intCount).Item("USER_ID")
            Next

        End If
        pDsClientUser.Tables.Add(dtTbl)

    End Function

    ''' <summary>
    ''' To assign Client Users
    ''' </summary>
    ''' <param name="pOrgGrpId">Org Group ID</param>
    ''' <param name="pAppId">Application ID</param>
    ''' <param name="pDsClients">Clients as Dataset</param>
    ''' <param name="pstrUser">User ID</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function AssignClientUsers(ByVal pOrgGrpId As String, _
                                      ByVal pAppId As String, _
                                      ByVal pDsClients As DataSet, _
                                      ByVal pstrUser As String, _
                                      ByVal pstrClientAddress As String, _
                                      ByVal pDeviceTokenEntry() As String) As Integer _
                                        Implements IAtpar_WebTrans.AssignClientUsers

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strSQL As String = String.Empty

        Dim intCnt As Integer
        Dim strTemp As String = String.Empty

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            For intCnt = 0 To pDsClients.Tables(0).Rows.Count - 1
                If strTemp <> pDsClients.Tables(0).Rows(intCnt).Item("SERVER_USER") Then
                    _strSQL = String.Empty
                    _strSQL = " DELETE FROM MT_ATPAR_USER_GROUPS WHERE APP_ID=" & pAppId & " AND SERVER_USER = " & _
                             " '" & pDsClients.Tables(0).Rows(intCnt).Item("SERVER_USER") & "' "

                    If log.IsInfoEnabled Then log.Info(_strSQL)

                    AssignClientUsers = m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL))
                End If

                If pDsClients.Tables(0).Rows(intCnt).Item("CHK_VALUE") = "Y" Then
                    _strSQL = String.Empty
                    _strSQL = " INSERT INTO MT_ATPAR_USER_GROUPS(APP_ID,SERVER_USER,CLIENT_USER,ORG_GROUP_ID, LAST_UPDATE_DATE, " & _
                                "LAST_UPDATE_USER, LAST_CLIENT_ADDRESS) VALUES (" & pAppId & "," & _
                             " '" & pDsClients.Tables(0).Rows(intCnt).Item("SERVER_USER") & "' ," & _
                             " '" & pDsClients.Tables(0).Rows(intCnt).Item("CLIENT_USER") & "','" & pOrgGrpId & "'," & _
                            " '" & Now() & "','" & pstrUser & "','" & pstrClientAddress & "')"

                    If log.IsInfoEnabled Then log.Info(_strSQL)

                    m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL))
                End If

                strTemp = pDsClients.Tables(0).Rows(intCnt).Item("SERVER_USER")
            Next

            AssignClientUsers = ATPAR_OK
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to assign client users " & vbCrLf & _
                                                           " with the following SQL :" & _strSQL & vbCrLf & _
                                                           " Exception is:" & ex.ToString & vbCrLf)
            AssignClientUsers = ATPAR_E_LOCALDBSELECTFAIL
            Exit Function
        End Try

    End Function

    ''' <summary>
    ''' To get User parameters
    ''' </summary>
    ''' <param name="pSvrUserID">Server User ID</param>
    ''' <param name="pAppId">Application ID</param>
    ''' <param name="pUserID">User ID</param>
    ''' <param name="pDsParam">Parameters as Dataset</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Function GetUserParams(ByVal pSvrUserID As String, ByVal pAppId As String, _
                           ByVal pUserId As String, _
                           ByRef pDsParam As DataSet, _
                           ByVal pDeviceTokenEntry() As String) As Long _
                           Implements IAtpar_WebTrans.GetUserParams

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pSvrUserID
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strSQL As String = String.Empty
        Dim _strEnterpriseSystem As String = String.Empty

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            _strEnterpriseSystem = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), CONFIGFILE.ERP_SYS_DETAILS.ToString(), ERP_SYS_DETAILS.ENTERPRISESYSTEM.ToString)
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to get the enterprise system name " _
                                                                & ex.ToString & ":" & vbCrLf)
            Return E_SERVERERROR
        End Try

        Try
            pDsParam = New DataSet

            _strSQL = String.Empty
            _strSQL = "SELECT A.PARAMETER_ID, A.PARAMETER_VALUE, B.SHORT_DESCR, '['+B.LONG_DESCR+']' as LONG_DESCR, B.PARAMETER_TYPE," & _
           " B.VALIDATION, B.MULTIPLE_VALUES, B.REQUIRED_FLAG, B.PROMPT_TABLE, B.PROMPT_FIELD, B.WHERE_CONDITION " & _
           " FROM MT_ATPAR_USER_APP_PARAMETERS A," & _
           " MT_ATPAR_PARAM_MASTER B WHERE A.PARAMETER_ID = B.PARAMETER_ID And A.APP_ID = B.APP_ID " & _
           " And B.PARAMETER_LEVEL ='USER' AND A.USER_ID = '" & pUserId & "' And A.APP_ID ='" & pAppId & "'" & _
           " AND ENTERPRISE_SYSTEM ='" & _strEnterpriseSystem & "'"
            If log.IsInfoEnabled Then log.Info(_strSQL)

            pDsParam = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))
            'NB-0004241 
            If pDsParam.Tables(0).Rows.Count = 0 Then
                GetUserParams = E_NORECORDFOUND
                Exit Function
            Else
                GetUserParams = ATPAR_OK
            End If
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to Get User parameters " & vbCrLf & _
                                                           " with the following SQL :" & _strSQL & vbCrLf & _
                                                           " Exception is:" & ex.ToString & vbCrLf)
            GetUserParams = ATPAR_E_LOCALDBSELECTFAIL
            Exit Function
        End Try

    End Function

    ''' <summary>
    ''' To set User parameters
    ''' </summary>
    ''' <param name="pAppId">Application ID</param>
    ''' <param name="pUserID">User ID</param>
    ''' <param name="pStrClientAddress">Client Address</param>
    ''' <param name="pstrUpdateUser">UpdateUser</param>
    ''' <param name="pDsParam">Parameters as Dataset</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Function SetUserParams(ByVal pAppId As String, _
                           ByVal pUserId As String, _
                           ByVal pStrClientAddress As String, _
                           ByVal pstrUpdateUser As String, _
                           ByVal pDsParam As DataSet, _
                           ByVal pDeviceTokenEntry() As String) As Long _
                           Implements IAtpar_WebTrans.SetUserParams

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strSQL As String = String.Empty

        Dim intRowCnt As Integer

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            For intRowCnt = 0 To pDsParam.Tables(0).Rows.Count - 1
                _strSQL = String.Empty
                _strSQL = "UPDATE MT_ATPAR_USER_APP_PARAMETERS SET " & _
                 "PARAMETER_VALUE = '" & pDsParam.Tables(0).Rows(intRowCnt).Item("PARAMETER_VALUE").ToString & "', " & _
                 "LAST_UPDATE_DATE = '" & Now() & "', LAST_UPDATE_USER='" & pstrUpdateUser & "', LAST_CLIENT_ADDRESS='" & pStrClientAddress & "' " & _
                 "WHERE APP_ID=" & pAppId & " AND USER_ID='" & pUserId & "' AND PARAMETER_ID = '" & _
                pDsParam.Tables(0).Rows(intRowCnt).Item("PARAMETER_ID").ToString & "'"

                If log.IsInfoEnabled Then log.Info(_strSQL)

                m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL))
            Next
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to save  User parameters " & vbCrLf & _
                                                           " with the following SQL :" & _strSQL & vbCrLf & _
                                                           " Exception is:" & ex.ToString & vbCrLf)
            SetUserParams = ATPAR_E_LOCALDBSELECTFAIL
            Exit Function
        End Try

    End Function


    ''' <summary>
    '''To get Device ID based on User ID
    ''' </summary>
    '''<param name="pUserID">User ID</param>
    ''' <param name="pDSDev">Device IDs Dataset</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function GetDevIDs(ByVal pUserID As String, ByRef pDSDev As DataSet, _
                              ByVal pDeviceTokenEntry() As String) As Integer _
                              Implements IAtpar_WebTrans.GetDevIDs
        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserID
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strSQL As String = String.Empty

        Try
            CreateMasterDB()
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create MasterDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            _strSQL = String.Empty
            _strSQL = "SELECT DEVICE_ID,DESCRIPTION,MAC_ADDRESS,STATUS FROM MT_ATPAR_SYSTEM_DEVICES WHERE SYSTEM_ID='" & pDeviceTokenEntry(TokenEntry_Enum.SystemID) & "'"

            If log.IsInfoEnabled Then log.Info(_strSQL)

            pDSDev = m_MasterDB.ExecuteDataSet(m_MasterDB.GetSqlStringCommand(_strSQL))

            Dim dcCol1 As New DataColumn
            dcCol1.ColumnName = "STATUS_VALUE"
            dcCol1.DefaultValue = "Active"
            pDSDev.Tables(0).Columns.Add(dcCol1)

            Dim dcCol2 As New DataColumn
            dcCol2.ColumnName = "CHANGESTATUS"
            dcCol2.DefaultValue = "InActivate"
            pDSDev.Tables(0).Columns.Add(dcCol2)
            For i As Integer = 0 To pDSDev.Tables(0).Rows.Count - 1
                If pDSDev.Tables(0).Rows(i).Item("STATUS") = 0 Then
                    pDSDev.Tables(0).Rows(i).Item("STATUS_VALUE") = "Inactive"
                    pDSDev.Tables(0).Rows(i).Item("CHANGESTATUS") = "Activate"
                End If
            Next
            pDSDev.Tables(0).AcceptChanges()
            GetDevIDs = ATPAR_OK
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to Get DeviceIDs " & vbCrLf & _
                                                          " with the following SQL :" & _strSQL & vbCrLf & _
                                                          " Exception is:" & ex.ToString & vbCrLf)
            GetDevIDs = ATPAR_E_LOCALDBSELECTFAIL
            Exit Function
        End Try

    End Function

    ''' <summary>
    ''' To save Device IDs
    ''' </summary>
    ''' <param name="pUserID">User ID</param>
    ''' <param name="pDevId">Device ID</param>
    ''' <param name="pDesc">Device description</param>
    ''' <param name="pMACAddr">Device MAC Address</param>
    ''' <param name="pMode">Device mode</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Function SaveDevIDs(ByVal pUserID As String, ByVal pDevId As String, _
                        ByVal pDesc As String, _
                        ByVal pMACAddr As String, _
                        ByVal pMode As String, _
                        ByVal pDeviceTokenEntry() As String) As Integer _
                        Implements IAtpar_WebTrans.SaveDevIDs
        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserID
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strSQL As String = String.Empty

        Try
            CreateMasterDB()
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create MasterDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        _strSQL = String.Empty
        If pMode = "Add" Then
            ' [DEVICE_ID],[DESCRIPTION],[MAC_ADDRESS]
            _strSQL = "INSERT INTO MT_ATPAR_SYSTEM_DEVICES(SYSTEM_ID, DEVICE_ID, DESCRIPTION, MAC_ADDRESS, STATUS)" & _
                    " VALUES('" & pDeviceTokenEntry(TokenEntry_Enum.SystemID) & "','" & pDevId & "','" & pDesc & "','" & pMACAddr & "',1) "
        ElseIf pMode = "Edit" Then
            _strSQL = " UPDATE MT_ATPAR_SYSTEM_DEVICES SET DESCRIPTION='" & pDesc & "'," & _
                     "  MAC_ADDRESS = '" & pMACAddr & "' WHERE DEVICE_ID = '" & pDevId & "' " & _
                     "  AND SYSTEM_ID = '" & pDeviceTokenEntry(TokenEntry_Enum.SystemID) & "'"
        ElseIf pMode = "Delete" Then
            _strSQL = " UPDATE MT_ATPAR_SYSTEM_DEVICES SET STATUS=0" & _
                        " WHERE DEVICE_ID = '" & pDevId & "' " & _
                        " AND SYSTEM_ID = '" & pDeviceTokenEntry(TokenEntry_Enum.SystemID) & "'"
        End If

        If log.IsInfoEnabled Then log.Info(_strSQL)

        Try
            m_MasterDB.ExecuteNonQuery(m_MasterDB.GetSqlStringCommand(_strSQL))
        Catch ex As SqlException
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to save DeviceID " & vbCrLf & _
                                                          " with the following SQL :" & _strSQL & vbCrLf & _
                                                          " Exception is:" & ex.ToString & vbCrLf)
            If ex.Number = 2627 Then
                Return ATPAR_E_PRIMARYKEYVOILATION
            End If
            Return ATPAR_E_LOCALDBUPDATEFAIL
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to save DeviceID " & vbCrLf & _
                                                           " with the following SQL :" & _strSQL & vbCrLf & _
                                                           " Exception is:" & ex.ToString & vbCrLf)
            Return E_SERVERERROR
        End Try
        SaveDevIDs = ATPAR_OK

    End Function

    ''' <summary>
    ''' To update Device status
    ''' </summary>
    ''' <param name="pUserID">User ID</param>
    ''' <param name="strDevID">Device ID</param>
    ''' <param name="pStatus">Status of Device</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Function UpdateDevStatus(ByVal pUserID As String, ByVal strDevID As String, _
                             ByVal pStatus As String, ByVal pDeviceTokenEntry() As String) As Integer _
                             Implements IAtpar_WebTrans.UpdateDevStatus
        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserID
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            CreateMasterDB()
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create MasterDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Dim _strSQL As String = String.Empty

        _strSQL = String.Empty

        If (pStatus = "ACTIVE") Then
            _strSQL = " UPDATE MT_ATPAR_SYSTEM_DEVICES SET STATUS=0" & _
                      " WHERE DEVICE_ID = '" & strDevID & "' " & _
                      " AND SYSTEM_ID = '" & pDeviceTokenEntry(TokenEntry_Enum.SystemID) & "'"
        Else
            _strSQL = " UPDATE MT_ATPAR_SYSTEM_DEVICES SET STATUS=1" & _
                      " WHERE DEVICE_ID = '" & strDevID & "' " & _
                      " AND SYSTEM_ID = '" & pDeviceTokenEntry(TokenEntry_Enum.SystemID) & "'"
        End If

        If log.IsInfoEnabled Then log.Info(_strSQL)

        Try
            m_MasterDB.ExecuteNonQuery(m_MasterDB.GetSqlStringCommand(_strSQL))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to update deviceID status " & vbCrLf & _
                                                           " with the following SQL :" & _strSQL & vbCrLf & _
                                                           " Exception is:" & ex.ToString & vbCrLf)
            UpdateDevStatus = ATPAR_E_LOCALDBUPDATEFAIL
            Exit Function
        End Try

        UpdateDevStatus = ATPAR_OK

    End Function


    'SM-0004532
    ''' <summary>
    ''' To get Error Report
    ''' </summary>
    ''' <param name="pUserID">User ID</param>
    ''' <param name="frmdate">From Date value</param>
    ''' <param name="toDate">To Date value</param>
    ''' <param name="pdsErrorData">Error data as Dataset</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function GetErrorReport(ByVal pUserID As String, ByVal frmdate As String, ByVal toDate As String, _
    ByRef pdsErrorData As DataSet, ByVal pDeviceTokenEntry() As String) As Long Implements IAtpar_WebTrans.GetErrorReport

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserID
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Dim orderby As String
        Dim _strSQL As String

        Try

            orderby = String.Empty
            _strSQL = "SELECT ERROR_DT, ERROR_CODE, ERROR_MESSAGE FROM MT_ATPAR_ERROR_LOG WHERE "

            _strSQL = _strSQL & " ERROR_DT >= CONVERT(DATETIME, '" & frmdate & "', 101)" & _
                        " AND ERROR_DT <= DATEADD(DAY,1,CONVERT(DATETIME, '" & toDate & "', 101)) ORDER BY ERROR_DT DESC"



            pdsErrorData = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))

            If pdsErrorData.Tables(0).Rows.Count = 0 Then
                GetErrorReport = E_NORECORDFOUND
                Exit Function
            Else
                GetErrorReport = ATPAR_OK
            End If

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get error report " & vbCrLf & _
                                                            " with the following SQL :" & _strSQL & vbCrLf & _
                                                            " Exception is:" & ex.ToString & vbCrLf)
            GetErrorReport = ATPAR_E_LOCALDBSELECTFAIL
            Exit Function
        End Try
    End Function

    'NB-0005154
    ''' <summary>
    ''' To get Enterprise Service Conf file details
    ''' </summary>
    ''' <param name="pUserID">User ID</param>
    ''' <param name="pConfXml">XML in String format</param>
    ''' <param name="pBoolRequestType">Request Type</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function GetEntrpServiceConffile(ByVal pUserID As String, ByRef pConfXml As String, _
                                            ByVal pBoolRequestType As Boolean, ByVal pDeviceTokenEntry() As String) As _
        Long Implements IAtpar_WebTrans.GetEntrpServiceConffile

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserID
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            Dim strEnterPriseServiceExePath As String = AppDomain.CurrentDomain.BaseDirectory().Chars(0) & ":\Atpar\bin\AtParEnterpriseService.exe"
            Dim myConfiguration As Configuration

            'Request type - False will Reset the Configuration file with its backup file
            If pBoolRequestType = False Then
                My.Computer.FileSystem.CopyFile(strEnterPriseServiceExePath & strLogConfigBackUpFileExtn, strEnterPriseServiceExePath & strLogConfigFileExtn, True)
            End If

            myConfiguration = System.Configuration.ConfigurationManager.OpenExeConfiguration(strEnterPriseServiceExePath)
            Dim Config As ConfigurationSection = myConfiguration.GetSection("log4net")
            Dim configSelectin As System.Configuration.SectionInformation = Config.SectionInformation()
            Dim selectionXml As String = configSelectin.GetRawXml
            pConfXml = selectionXml.ToString()
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(ATPAR_E_CONFFILEOPENFALIURE & ex.ToString)
            GetEntrpServiceConffile = ATPAR_E_CONFFILEOPENFALIURE
            Exit Function
        End Try
    End Function

    ''' <summary>
    ''' To get Log.Config details
    ''' </summary>
    ''' <param name="pUserID">User ID</param>
    ''' <param name="pStrWPLogVal">Web Pages Log value</param>
    ''' <param name="pStrWSLogVal">Web Services Log value</param>
    ''' <param name="pStrBRLogVal">Business Rules Log value</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function GetLogConfigDetails(ByVal pUserID As String, ByRef pStrWPLogVal As String, ByRef pStrWSLogVal As String,
            ByRef pStrBRLogVal As String, ByVal pDeviceTokenEntry() As String) As Long Implements IAtpar_WebTrans.GetLogConfigDetails

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserID
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim strWebPagesXmlPath As String = AppDomain.CurrentDomain.BaseDirectory().Chars(0) & ":\Atpar\web\webpages.xml"
        Dim strWebServicesXmlPath As String = AppDomain.CurrentDomain.BaseDirectory().Chars(0) & ":\Atpar\WebServices\webservices.xml"
        'NB-0005154
        Dim strWindowsServiceExePath As String = AppDomain.CurrentDomain.BaseDirectory().Chars(0) & ":\Atpar\bin\AtPar_WindowsService.exe"

        Dim myConfiguration As Configuration
        myConfiguration = System.Configuration.ConfigurationManager.OpenExeConfiguration(strWindowsServiceExePath)
        Dim Config As ConfigurationSection = myConfiguration.GetSection("log4net")
        Dim configSelectin As System.Configuration.SectionInformation = Config.SectionInformation()
        Dim selectionXml As String = configSelectin.GetRawXml
        Dim xmldoc As New XmlDocument
        Dim xmlRoot As XmlNode
        Dim xmlItem As XmlNode
        Dim intXmlNodes As Integer
        Dim xmlItemChild As XmlNode
        Dim intXmlChildNodes As Integer
        Dim xmlItemInnerChild As XmlNode


        Try
            xmldoc = New XmlDocument
            xmldoc.Load(strWebPagesXmlPath)
            xmlRoot = xmldoc.DocumentElement()
            For intXmlNodes = 0 To xmlRoot.ChildNodes.Count - 1
                xmlItem = xmlRoot.ChildNodes.Item(intXmlNodes)
                For intXmlChildNodes = 0 To xmlItem.ChildNodes.Count - 1
                    xmlItemChild = xmlItem.ChildNodes.Item(intXmlChildNodes)
                    If (xmlItemChild.Name = "root") Then
                        xmlItemInnerChild = xmlItemChild.FirstChild()
                        pStrWPLogVal = xmlItemInnerChild.Attributes("value").Value
                    End If
                Next
            Next

            xmldoc = New XmlDocument
            xmldoc.Load(strWebServicesXmlPath)
            xmlRoot = xmldoc.DocumentElement()
            For intXmlNodes = 0 To xmlRoot.ChildNodes.Count - 1
                xmlItem = xmlRoot.ChildNodes.Item(intXmlNodes)
                For intXmlChildNodes = 0 To xmlItem.ChildNodes.Count - 1
                    xmlItemChild = xmlItem.ChildNodes.Item(intXmlChildNodes)
                    If (xmlItemChild.Name = "root") Then
                        xmlItemInnerChild = xmlItemChild.FirstChild()
                        pStrWSLogVal = xmlItemInnerChild.Attributes("value").Value
                    End If
                Next
            Next

            xmldoc = New XmlDocument
            xmldoc.LoadXml(selectionXml)
            xmlRoot = xmldoc.DocumentElement()
            For intXmlNodes = 0 To xmlRoot.ChildNodes.Count - 1
                xmlItem = xmlRoot.ChildNodes.Item(intXmlNodes)
                If (xmlItem.Name = "root") Then
                    xmlItemChild = xmlItem.FirstChild()
                    pStrBRLogVal = xmlItemChild.Attributes("value").Value
                End If
            Next

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(ATPAR_E_CONFFILEOPENFALIURE & ex.ToString)
            GetLogConfigDetails = ATPAR_E_CONFFILEOPENFALIURE
            Exit Function
        End Try
    End Function

    ''' <summary>
    ''' To get SSL Config file details
    ''' </summary>
    ''' <param name="pStrProtocol">Webpages Moniker Value</param>
    ''' <param name="pStrServerName">Webpages Server name Value</param>
    ''' <param name="pStrPortNo">WebPages PortNo Value</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    ''' 

    Public Function GetSSLConfigDetails(ByRef pStrProtocal As String, ByRef pStrServerName As String, _
            ByRef pStrPortNo As String, ByVal pDeviceTokenEntry() As String) As Long Implements IAtpar_WebTrans.GetSSLConfigDetails

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim strWebPagesXmlPath As String = AppDomain.CurrentDomain.BaseDirectory().Chars(0) & ":\Atpar\web\webpages.xml"

        Dim xmldoc As New XmlDocument
        Dim xmlRoot As XmlNode
        Dim xmlItem As XmlNode
        Dim intXmlNodes As Integer


        Try
            xmldoc = New XmlDocument
            xmldoc.Load(strWebPagesXmlPath)
            xmlRoot = xmldoc.DocumentElement()
            For intXmlNodes = 0 To xmlRoot.ChildNodes.Count - 1
                xmlItem = xmlRoot.ChildNodes.Item(intXmlNodes)
                If (xmlItem.Name = "atpar_webservices") Then

                    pStrProtocal = xmlItem.Attributes("moniker").Value
                    pStrServerName = xmlItem.Attributes("servername").Value
                    pStrPortNo = xmlItem.Attributes("portno").Value

                End If
            Next
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(ATPAR_E_CONFFILEOPENFALIURE & ex.ToString)
            GetSSLConfigDetails = ATPAR_E_CONFFILEOPENFALIURE
            Exit Function
        End Try
    End Function


    ''' <summary>
    ''' To set Enterprise Service Conf details
    ''' </summary>
    ''' <param name="pUserID">User ID</param>
    ''' <param name="pConfXml">XML Parameter</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function SetEntrpServiceConfDtls(ByVal pUserID As String, ByRef pConfXml As String, _
                                            ByVal pDeviceTokenEntry() As String) As Long Implements IAtpar_WebTrans.SetEntrpServiceConfDtls

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserID
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            Dim strEnterPriseServiceExePath As String = AppDomain.CurrentDomain.BaseDirectory().Chars(0) & ":\Atpar\bin\AtParEnterpriseService.exe"
            Dim myConfiguration As Configuration
            myConfiguration = System.Configuration.ConfigurationManager.OpenExeConfiguration(strEnterPriseServiceExePath)
            Dim Config As ConfigurationSection = myConfiguration.GetSection("log4net")
            Dim configSelectin As System.Configuration.SectionInformation = Config.SectionInformation()

            Dim xmldoc As New XmlDocument
            xmldoc = New XmlDocument
            xmldoc.LoadXml(pConfXml)
            configSelectin.SetRawXml(xmldoc.InnerXml)
            myConfiguration.Save()
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(ATPAR_E_CONFFILEOPENFALIURE & ex.ToString)
            SetEntrpServiceConfDtls = ATPAR_E_CONFFILEOPENFALIURE
            Exit Function
        End Try
    End Function

    ''' <summary>
    ''' To update Log.Config details
    ''' </summary>
    ''' <param name="pStrPath">Path of Config file</param>
    ''' <param name="pStrVal">Value that need to be modified</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function UpdateLogConfigDetails(ByVal pUserID As String, ByVal pStrWPSelectedVal As String, ByVal PStrWSSelectedVal As String, _
            ByVal PStrBRSelectedVal As String, ByVal pDeviceTokenEntry() As String) As Long Implements IAtpar_WebTrans.UpdateLogConfigDetails

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserID
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            Dim strWebPagesXmlPath As String = AppDomain.CurrentDomain.BaseDirectory().Chars(0) & ":\Atpar\web\webpages.xml"
            Dim strWebServicesXmlPath As String = AppDomain.CurrentDomain.BaseDirectory().Chars(0) & ":\Atpar\WebServices\webservices.xml"
            'NB-0005154
            Dim strWindowsServiceExePath As String = AppDomain.CurrentDomain.BaseDirectory().Chars(0) & ":\Atpar\bin\AtPar_WindowsService.exe"

            UpdateWebConfigDetails(strWebPagesXmlPath, pStrWPSelectedVal)
            UpdateWebConfigDetails(strWebServicesXmlPath, PStrWSSelectedVal)
            UpdateExeConfigDetails(strWindowsServiceExePath, PStrBRSelectedVal)

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " call failed " & ex.ToString)
            UpdateLogConfigDetails = ATPAR_E_CONFFILEOPENFALIURE
            Exit Function
        End Try
    End Function


    ''' <summary>
    ''' To Save SSL.Config details
    ''' </summary>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function SaveSSLConfigDetails(ByVal pStrProtocalValue As String, ByVal pStrServerNameValue As String, _
            ByVal pStrPortNoValue As String, ByVal pDeviceTokenEntry() As String) As Long Implements IAtpar_WebTrans.SaveSSLConfigDetails

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            Dim strWebPagesXmlPath As String = AppDomain.CurrentDomain.BaseDirectory().Chars(0) & ":\Atpar\web\webpages.xml"

            Dim xmldoc As New XmlDocument
            Dim xmlRoot As XmlNode
            Dim xmlItem As XmlNode
            Dim intXmlNodes As Integer


            pStrProtocalValue = pStrProtocalValue.ToLower
            pStrServerNameValue = pStrServerNameValue.ToLower

            xmldoc = New XmlDocument
            xmldoc.Load(strWebPagesXmlPath)
            xmlRoot = xmldoc.DocumentElement()
            For intXmlNodes = 0 To xmlRoot.ChildNodes.Count - 1
                xmlItem = xmlRoot.ChildNodes.Item(intXmlNodes)

                If (xmlItem.Name = "atpar_webservices") Then

                    xmlItem.Attributes("moniker").Value = pStrProtocalValue
                    xmlItem.Attributes("servername").Value = pStrServerNameValue
                    xmlItem.Attributes("portno").Value = pStrPortNoValue

                End If



            Next
            xmldoc.Save(strWebPagesXmlPath)

            If log.IsDebugEnabled Then log.Debug(methodBaseName & " Saved Protocol : " & pStrProtocalValue)
            If log.IsDebugEnabled Then log.Debug(methodBaseName & " Saved ServerName : " & pStrServerNameValue)
            If log.IsDebugEnabled Then log.Debug(methodBaseName & " Saved PortNo : " & pStrPortNoValue)

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " call failed " & ex.ToString)
            SaveSSLConfigDetails = ATPAR_E_CONFFILEOPENFALIURE
            Exit Function
        End Try
    End Function


    ''' <summary>
    ''' To update Web.Config details
    ''' </summary>
    ''' <param name="pStrPath">Path of Config file</param>
    ''' <param name="pStrVal">Value that need to be modified</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Sub UpdateWebConfigDetails(ByVal pStrPath As String, ByVal pStrVal As String)
        Try
            Dim xmldoc As New XmlDocument
            Dim xmlRoot As XmlNode
            Dim xmlItem As XmlNode
            Dim intXmlNodes As Integer
            Dim intXmlChildNodes As Integer
            Dim xmlItemChild As XmlNode
            Dim xmlItemInnerChild As XmlNode

            xmldoc = New XmlDocument
            xmldoc.Load(pStrPath)
            xmlRoot = xmldoc.DocumentElement()
            For intXmlNodes = 0 To xmlRoot.ChildNodes.Count - 1
                xmlItem = xmlRoot.ChildNodes.Item(intXmlNodes)
                For intXmlChildNodes = 0 To xmlItem.ChildNodes.Count - 1
                    xmlItemChild = xmlItem.ChildNodes.Item(intXmlChildNodes)
                    If (xmlItemChild.Name = "root") Then
                        xmlItemInnerChild = xmlItemChild.FirstChild()
                        xmlItemInnerChild.Attributes("value").Value = pStrVal
                    End If
                Next

            Next
            xmldoc.Save(pStrPath)
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(ATPAR_E_CONFFILEOPENFALIURE & ex.ToString)
        End Try
    End Sub

    ''' <summary>
    ''' To update EXE.Config details
    ''' </summary>
    ''' <param name="pStrPath">Path of Config file</param>
    ''' <param name="pStrVal">Value that need to be modified</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Sub UpdateExeConfigDetails(ByVal pStrPath As String, ByVal pStrVal As String)
        Try
            Dim myConfiguration As Configuration
            myConfiguration = System.Configuration.ConfigurationManager.OpenExeConfiguration(pStrPath)
            Dim Config As ConfigurationSection = myConfiguration.GetSection("log4net")
            Dim configSelectin As System.Configuration.SectionInformation = Config.SectionInformation()
            Dim selectionXml As String = configSelectin.GetRawXml

            Dim result As String
            Dim xmldoc As New XmlDocument
            Dim xmlRoot As XmlNode
            Dim xmlItem As XmlNode
            Dim intXmlNodes As Integer
            Dim xmlItemChild As XmlNode
            xmldoc = New XmlDocument
            xmldoc.LoadXml(selectionXml)
            xmlRoot = xmldoc.DocumentElement()

            For intXmlNodes = 0 To xmlRoot.ChildNodes.Count - 1
                xmlItem = xmlRoot.ChildNodes.Item(intXmlNodes)
                If (xmlItem.Name = "root") Then
                    xmlItemChild = xmlItem.FirstChild()
                    xmlItemChild.Attributes("value").Value = pStrVal
                End If
            Next
            result = xmldoc.InnerXml()
            configSelectin.SetRawXml(result)
            myConfiguration.Save()
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(ATPAR_E_CONFFILEOPENFALIURE & ex.ToString)
        End Try
    End Sub

    ''' <summary>
    ''' To get Carriers based on User ID
    ''' </summary>
    ''' <param name="userId">User ID</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function GetCarriers(ByVal userId As String, ByVal pDeviceTokenEntry() As String) As Long _
                   Implements IAtpar_WebTrans.GetCarriers

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = userId
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strSQL As String = String.Empty
        Dim pDsCarriers As DataSet
        Dim _StatusCode As Long
        Dim carrierID As String = String.Empty
        Dim descr As String = String.Empty
        Dim pDsLocDbCarriers As DataSet

        Dim _className As String
        Dim _classType As Type
        Dim _reflectObject As Object
        Dim _methodName As MethodInfo
        Dim _remoteAtparObj As String
        Dim _erpObjAssy As Assembly

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        _strSQL = "UPDATE MT_RECV_CARRIER SET STATUS = 'I' WHERE STATUS IN ('N','O') AND LOCAL_FLAG ='N' "
        If log.IsInfoEnabled Then log.Info(methodBaseName & " : _strSQL" & _strSQL)

        Try
            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL))
        Catch sqlex As SqlException
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to update carriers info " & vbCrLf & _
                                                           " with the following SQL :" & _strSQL & vbCrLf & _
                                                           " Exception is:" & sqlex.ToString & vbCrLf)
            Throw New Exception("GetCarriers Update Failed", sqlex)
            GetCarriers = ATPAR_E_LOCALDBUPDATEFAIL
            If log.IsFatalEnabled Then log.Fatal("ATPAR_E_LOCALDBUPDATEFAIL :" & sqlex.ToString)
            Exit Function
        End Try

        If log.IsDebugEnabled Then log.Debug(methodBaseName & "Before Invoking PeopleSoft Component")
        'creating the remote obj which is specified in the config.xml, implementation of Reflection

        Try
            _remoteAtparObj = CONST_ATPAR & "_" & GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), _
                              CONFIGFILE.ERP_SYS_DETAILS.ToString(), ERP_SYS_DETAILS.DOWNLOADFROM.ToString())

            CreateERPObject(_remoteAtparObj, _erpObjAssy)
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to Create ERP Object .... " & _remoteAtparObj _
                                & vbCrLf & "Exception thrown is..." & ex.ToString)
            Return E_SERVERERROR
        End Try

        Try
            _className = _remoteAtparObj & ".GetCarriers"
            _classType = _erpObjAssy.GetType(_className)
            _methodName = _classType.GetMethod("GetCarriers")
            _reflectObject = Activator.CreateInstance(_classType)

            Dim args As Object() = {pDsCarriers, pDeviceTokenEntry}
            _StatusCode = _methodName.Invoke(_reflectObject, args)
            pDsCarriers = args(0)

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Remote Object Instance Create Failed " & ex.ToString)
            GetCarriers = E_SERVERERROR
            If log.IsFatalEnabled Then log.Fatal("E_SERVERERROR :" & ex.ToString)
            Exit Function
        Finally
            _reflectObject = Nothing
        End Try

        Try
            For i As Int16 = 0 To pDsCarriers.Tables(0).Rows.Count - 1

                carrierID = pDsCarriers.Tables(0).Rows(i).Item("CARRIER_ID").ToString().TrimEnd()
                descr = pDsCarriers.Tables(0).Rows(i).Item("DESCR").ToString().TrimEnd()
                descr = substituteString(descr)
                _strSQL = "SELECT CARRIER_ID,DESCR,LOCAL_FLAG FROM MT_RECV_CARRIER WHERE CARRIER_ID = '" & carrierID & "'"
                If log.IsInfoEnabled Then log.Info(methodBaseName & " : " & _strSQL)
                Try
                    pDsLocDbCarriers = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))
                    GetCarriers = ATPAR_OK
                Catch ex As Exception
                    If log.IsErrorEnabled Then log.Error(GetSQLExceptionMessageString(ex))
                    Throw New Exception("GetCarriers Failed :", ex)
                    GetCarriers = ATPAR_E_LOCALDBSELECTFAIL
                    If log.IsFatalEnabled Then log.Fatal("ATPAR_E_LOCALDBSELECTFAIL :" & ex.ToString)
                    Exit Function
                End Try

                If pDsLocDbCarriers.Tables.Count > 0 Then
                    If pDsLocDbCarriers.Tables(0).Rows.Count > 0 Then
                        Try
                            If pDsLocDbCarriers.Tables(0).Rows(0).Item("CARRIER_ID").ToString().TrimEnd() = carrierID And pDsLocDbCarriers.Tables(0).Rows(0).Item("LOCAL_FLAG").ToString().TrimEnd() = "Y" Then
                                _strSQL = "UPDATE MT_RECV_CARRIER SET DESCR = '" & descr & "'" & _
                                     ", STATUS = 'N', LAST_UPDATE_DATE = '" & Now() & "', LAST_UPDATE_USERID = '" & userId & "'" & _
                                     ",LOCAL_FLAG ='N' WHERE CARRIER_ID ='" & carrierID & "'"
                                If log.IsInfoEnabled Then log.Info(methodBaseName & " : " & _strSQL)
                                Try
                                    m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL))
                                    GetCarriers = ATPAR_OK
                                Catch ex As Exception
                                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to update carriers info " & vbCrLf & _
                                                                                   " with the following SQL :" & _strSQL & vbCrLf & _
                                                                                   " Exception is:" & ex.ToString & vbCrLf)
                                    Throw New Exception(methodBaseName & " : ", ex)
                                    GetCarriers = ATPAR_E_LOCALDBUPDATEFAIL
                                    Exit Function
                                End Try

                            Else
                                If pDsLocDbCarriers.Tables(0).Rows(0).Item("DESCR").ToString().TrimEnd() <> descr Then
                                    _strSQL = "UPDATE MT_RECV_CARRIER SET DESCR = '" & descr & "'" & _
                                            ", STATUS = 'O',LAST_UPDATE_DATE = '" & Now() & "', LAST_UPDATE_USERID = '" & userId & "'" & _
                                           " WHERE CARRIER_ID ='" & carrierID & "'"
                                    If log.IsInfoEnabled Then log.Info(methodBaseName & " : " & _strSQL)
                                    Try
                                        m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL))
                                        GetCarriers = ATPAR_OK
                                    Catch ex As Exception
                                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to update carriers info " & vbCrLf & _
                                                                                       " with the following SQL :" & _strSQL & vbCrLf & _
                                                                                       " Exception is:" & ex.ToString & vbCrLf)
                                        Throw New Exception(methodBaseName & " : ", ex)
                                        GetCarriers = ATPAR_E_LOCALDBUPDATEFAIL
                                        Exit Function
                                    End Try
                                Else
                                    _strSQL = "UPDATE MT_RECV_CARRIER SET STATUS = 'O'" & _
                                                " WHERE CARRIER_ID ='" & carrierID & "'"
                                    If log.IsInfoEnabled Then log.Info(methodBaseName & ":" & _strSQL)
                                    Try
                                        m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL))
                                        GetCarriers = ATPAR_OK
                                    Catch ex As Exception
                                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to update carriers info " & vbCrLf & _
                                                                                           " with the following SQL :" & _strSQL & vbCrLf & _
                                                                                           " Exception is:" & ex.ToString & vbCrLf)
                                        Throw New Exception(methodBaseName & " : ", ex)
                                        GetCarriers = ATPAR_E_LOCALDBUPDATEFAIL
                                        Exit Function
                                    End Try

                                End If
                            End If
                        Catch ex As Exception
                            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to update carriers info " & vbCrLf & _
                                                                            " with the following SQL :" & _strSQL & vbCrLf & _
                                                                            " Exception is:" & ex.ToString & vbCrLf)
                            Throw New Exception("GetCarriers Update Failed", ex)
                            GetCarriers = ATPAR_E_LOCALDBUPDATEFAIL
                            Exit Function
                        End Try
                    Else

                        _strSQL = "INSERT INTO MT_RECV_CARRIER (CARRIER_ID, DESCR, STATUS," & _
                               " LAST_UPDATE_DATE, LAST_UPDATE_USERID,LOCAL_FLAG) VALUES ('" & carrierID & _
                               "' , '" & descr & "', 'N', '" & Now() & "' , '" & userId & "','N')"
                        If log.IsInfoEnabled Then log.Info(methodBaseName & ": " & _strSQL)
                        Try
                            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL))
                            GetCarriers = ATPAR_OK
                        Catch ex As Exception
                            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to insert carriers info " & vbCrLf & _
                                                                            " with the following SQL :" & _strSQL & vbCrLf & _
                                                                            " Exception is:" & ex.ToString & vbCrLf)
                            Throw New Exception(methodBaseName & " : ", ex)
                            GetCarriers = ATPAR_E_LOCALDBINSERTFAIL
                            Exit Function
                        End Try

                    End If
                End If
                _strSQL = "UPDATE MT_RECV_CARRIER SET STATUS = 'D', LAST_UPDATE_DATE = '" & Now() & "', LAST_UPDATE_USERID = '" & userId & "'" & _
                                    " WHERE STATUS = 'I'"
                If log.IsInfoEnabled Then log.Info(methodBaseName & " : " & _strSQL)
                Try
                    m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL))
                    GetCarriers = ATPAR_OK
                Catch ex As Exception
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to update carriers info " & vbCrLf & _
                                                                     " with the following SQL :" & _strSQL & vbCrLf & _
                                                                     " Exception is:" & ex.ToString & vbCrLf)
                    Throw New Exception(methodBaseName & " : ", ex)
                    GetCarriers = ATPAR_E_LOCALDBSELECTFAIL
                    Exit Function
                End Try

            Next
        Catch sqlex As SqlException
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get carriers info " & vbCrLf & _
                                                             " with the following SQL :" & _strSQL & vbCrLf & _
                                                             " Exception is:" & sqlex.ToString & vbCrLf)
            Throw New Exception(methodBaseName & " : " & "GetCarriers Failed", sqlex)
            GetCarriers = ATPAR_E_LOCALDBSELECTFAIL
            Exit Function
        Catch ex As Exception
            Throw New Exception(methodBaseName & " : " & "GetCarriers Failed", ex)
            GetCarriers = E_SERVERERROR
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get carriers info " & vbCrLf & _
                                                              " with the following SQL :" & _strSQL & vbCrLf & _
                                                              " Exception is:" & ex.ToString & vbCrLf)
            Exit Function
        End Try

    End Function

    ''' <summary>
    ''' To manipulate the String using delimeters
    ''' </summary>
    ''' <param name="strSource">Source String value</param>
    ''' <returns>Modified Source String value</returns>
    ''' <remarks></remarks>
    Public Function substituteString(ByVal strSource As String) As String
        'To substitute escape character for below mentioned special characters
        'TODO:: Other special characters have to be added.
        Dim i
        Dim Delimiters(1) As String
        Delimiters(0) = "&"
        Delimiters(1) = "'"
        Array.Sort(Delimiters)

        If strSource <> "" Then
            For i = LBound(Delimiters) To UBound(Delimiters)
                If (InStr(strSource, Delimiters(i))) Then
                    If Delimiters(i) = "&" Then
                        ' if true, string contains &
                        ' replace with &amp;
                        strSource = Replace(strSource, Delimiters(i), "&amp;")
                    ElseIf Delimiters(i) = "'" Then
                        strSource = Replace(strSource, Delimiters(i), "")
                    End If
                End If
            Next i
        End If
        substituteString = strSource
    End Function

    ''' <summary>
    ''' To get Carriers Data
    ''' </summary>
    ''' <param name="pDsCarriersData">Data Set contains Carriers Data</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function GetCarriersData(ByRef pDsCarriersData As DataSet, ByVal pDeviceTokenEntry() As String) As Long _
                  Implements IAtpar_WebTrans.GetCarriersData

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strSQL As String = String.Empty

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        _strSQL = "SELECT CARRIER_ID, DESCR ,LOCAL_FLAG FROM MT_RECV_CARRIER WHERE STATUS <> 'D' ORDER BY CARRIER_ID"
        If log.IsInfoEnabled Then log.Info(methodBaseName & " : " & _strSQL)
        Try
            pDsCarriersData = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))
            GetCarriersData = ATPAR_OK
        Catch sqlex As SqlException
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get carriers info " & vbCrLf & _
                                                            " with the following SQL :" & _strSQL & vbCrLf & _
                                                            " Exception is:" & sqlex.ToString & vbCrLf)
            Throw New Exception(methodBaseName & " : " & "GetCarriersData Failed : ATAPR_E_LOCALDBSELECTFAIL :", sqlex)
            GetCarriersData = ATPAR_E_LOCALDBSELECTFAIL
            Exit Function
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get carriers info " & vbCrLf & _
                                                             " with the following SQL :" & _strSQL & vbCrLf & _
                                                             " Exception is:" & ex.ToString & vbCrLf)
            Throw New Exception("GetCarriersData Failed :", ex)
            GetCarriersData = E_SERVERERROR
            Exit Function
        End Try
    End Function

    ''' <summary>
    ''' To add a new Carrier into DB
    ''' </summary>
    ''' <param name="pCarrierId">Carrier ID</param>
    ''' <param name="pDescr">Description</param>
    ''' <param name="pUserId">User ID</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function AddCarrier(ByVal pCarrierId As String, ByVal pDescr As String, ByVal pUserId As String, _
                               ByVal pDeviceTokenEntry() As String) As Long Implements _
                               IAtpar_WebTrans.AddCarrier

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserId
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strSQL As String = String.Empty
        Dim _dsCarriers As DataSet
        Dim _blnadd As Boolean = True
        Dim _blnadd1 As Boolean = True

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        pDescr = Replace(pDescr, "'", "''")
        pCarrierId = Replace(pCarrierId, "'", "")
        Try
            _strSQL = "SELECT DISTINCT CARRIER_ID, STATUS FROM MT_RECV_CARRIER WHERE CARRIER_ID ='" & pCarrierId & "'"
            If log.IsInfoEnabled Then log.Info(methodBaseName & " : " & _strSQL)
            Try
                _dsCarriers = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))
                AddCarrier = ATPAR_OK
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get distinct carriers info " & vbCrLf & _
                                                                " with the following SQL :" & _strSQL & vbCrLf & _
                                                                " Exception is:" & ex.ToString & vbCrLf)
                Throw New Exception(methodBaseName & "Select  Failed :Exception : ", ex)
                AddCarrier = ATPAR_E_LOCALDBSELECTFAIL
                Exit Function
            End Try

            If _dsCarriers.Tables.Count > 0 Then
                If _dsCarriers.Tables(0).Rows.Count > 0 Then
                    For i As Int32 = 0 To _dsCarriers.Tables(0).Rows.Count - 1
                        If UCase(_dsCarriers.Tables(0).Rows(i).Item("CARRIER_ID").ToString().TrimEnd()) = UCase(pCarrierId) Then
                            If (_dsCarriers.Tables(0).Rows(i).Item("STATUS").ToString().TrimEnd()) = "D" Then
                                _blnadd = False
                            Else
                                Return ATPAR_E_CARRIERIDALREADYEXISTS
                            End If
                        End If
                    Next
                End If
            End If
           
            If InStr(pCarrierId, "&") > 0 Then
                _blnadd1 = False
            End If

            If _blnadd = False Then
                If log.IsDebugEnabled Then log.Debug(methodBaseName & " : _blnadd : " & _blnadd)
                _strSQL = "UPDATE MT_RECV_CARRIER SET STATUS = 'N',CARRIER_ID='" & pCarrierId & "',DESCR='" & pDescr & "',LAST_UPDATE_DATE = '" & Now() & "', LAST_UPDATE_USERID = '" & pUserId & "' WHERE CARRIER_ID='" & pCarrierId & "'"
                If log.IsInfoEnabled Then log.Info(methodBaseName & " : " & _strSQL)

                Try
                    m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL))
                    AddCarrier = ATPAR_OK
                Catch ex As SqlException
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & " call failed " & ex.ToString & "ex.Number" & ex.Number)
                    If ex.Number = 2627 Then
                        AddCarrier = ATPAR_E_PRIMARYKEYVOILATION
                    End If
                    Exit Function
                Catch ex As Exception
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to update carriers info " & vbCrLf & _
                                                                    " with the following SQL :" & _strSQL & vbCrLf & _
                                                                    " Exception is:" & ex.ToString & vbCrLf)
                    AddCarrier = ATPAR_E_LOCALDBUPDATEFAIL
                    Throw New Exception(methodBaseName & "Update  Failed :Exception : ", ex)
                    Exit Function
                End Try

            ElseIf (_blnadd = True And _blnadd1 = True) Then
                If log.IsInfoEnabled Then log.Info(methodBaseName & " : _blnadd : " & _blnadd & " : _blnadd1: " & _blnadd1)
                _strSQL = "INSERT INTO MT_RECV_CARRIER (CARRIER_ID, DESCR, STATUS," & _
                                                     " LAST_UPDATE_DATE, LAST_UPDATE_USERID,LOCAL_FLAG) VALUES ('" & pCarrierId & _
                                                     "' , '" & substituteString(pDescr) & "', 'N', '" & Now() & "' , '" & pUserId & "','Y')"
                If log.IsInfoEnabled Then log.Info(methodBaseName & " : " & _strSQL)

                Try
                    m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL))
                    AddCarrier = ATPAR_OK
                Catch ex As SqlException
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to insert carriers info " & vbCrLf & _
                                                             " with the following SQL :" & _strSQL & vbCrLf & _
                                                             " Exception is:" & ex.ToString & vbCrLf)
                    If ex.Number = 2627 Then
                        AddCarrier = ATPAR_E_PRIMARYKEYVOILATION
                    End If
                    Exit Function
                Catch ex As Exception
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to insert carriers info " & vbCrLf & _
                                                             " with the following SQL :" & _strSQL & vbCrLf & _
                                                             " Exception is:" & ex.ToString & vbCrLf)
                    Throw New Exception(methodBaseName & " :   Insert  Failed :Exception : ", ex)
                    AddCarrier = ATPAR_E_LOCALDBINSERTFAIL
                    Exit Function
                End Try
            End If
            If _blnadd1 = False Then
                AddCarrier = ATPAR_E_LOCALDBINSERTFAIL
            Else
                AddCarrier = ATPAR_OK
            End If
        Catch sqlex As SqlException
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get distinct carriers info " & vbCrLf & _
                                                            " with the following SQL :" & _strSQL & vbCrLf & _
                                                            " Exception is:" & sqlex.ToString & vbCrLf)
            Throw New Exception(methodBaseName & " : SQLExceptionMessageString : ", sqlex)
            AddCarrier = ATPAR_E_LOCALDBSELECTFAIL
            Exit Function

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get distinct carriers info " & vbCrLf & _
                                                            " with the following SQL :" & _strSQL & vbCrLf & _
                                                            " Exception is:" & ex.ToString & vbCrLf)
            Throw New Exception(methodBaseName & " : Failed :Exception : ", ex)
            AddCarrier = E_SERVERERROR
            Exit Function

        End Try
    End Function

    ''' <summary>
    ''' To delete a Carrier from DB based on Carrier ID
    ''' </summary>
    ''' <param name="pCarrierId">Carrier ID</param>
    ''' <param name="pUserId">User ID</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function DeleteCarrier(ByVal pCarrierId As String, ByVal pUserId As String, _
                                  ByVal pDeviceTokenEntry() As String) As Long Implements _
                                  IAtpar_WebTrans.DeleteCarrier

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserId
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strSQL As String = String.Empty

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        _strSQL = "UPDATE MT_RECV_CARRIER SET STATUS = 'D',LAST_UPDATE_DATE = '" & Now() & "', LAST_UPDATE_USERID = '" & pUserId & "' WHERE CARRIER_ID='" & pCarrierId & "'"
        If log.IsInfoEnabled Then log.Info(methodBaseName & " : " & _strSQL)
        Try
            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL))
            DeleteCarrier = ATPAR_OK

        Catch sqlex As SqlException
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to update carriers info " & vbCrLf & _
                                                        " with the following SQL :" & _strSQL & vbCrLf & _
                                                        " Exception is:" & sqlex.ToString & vbCrLf)
            Throw New Exception(methodBaseName & " : SQLExceptionMessageString : ", sqlex)
            DeleteCarrier = ATPAR_E_LOCALDBUPDATEFAIL
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to update carriers info " & vbCrLf & _
                                                      " with the following SQL :" & _strSQL & vbCrLf & _
                                                      " Exception is:" & ex.ToString & vbCrLf)
            Throw New Exception(methodBaseName & " : Failed :Exception : ", ex)
            DeleteCarrier = E_SERVERERROR
        End Try
    End Function
    ''' <summary>
    ''' Used to Get the Org Units
    ''' </summary>
    ''' <param name="pUserId">User ID</param>
    ''' <param name="_pdsOrg">Orgs Dataset</param>
    ''' <param name="pOrgId">Org ID</param>
    ''' <param name="pOrgName">Org Name</param>
    ''' <param name="pStatus">Status</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function GetOrgUnits(ByVal pUserId As String, ByRef _pdsOrg As DataSet, ByVal pOrgId As String, ByVal pOrgType As String, ByVal pOrgName As String, _
        ByVal pStatus As String, ByVal pDeviceTokenEntry() As String) As Long Implements IAtpar_WebTrans.GetOrgUnits


        Dim _StatusCode As Long

        'DG-0006288
        Try
            log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserId
            log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

            Dim stackFrame As New StackFrame()
            Dim methodBase As MethodBase = stackFrame.GetMethod()
            Dim methodBaseName As String = methodBase.Name
            If log.IsDebugEnabled Then log.Debug(methodBaseName)

            Dim _className As String
            Dim _classType As Type
            Dim _reflectObject As Object
            Dim _methodName As MethodInfo
            Dim _remoteAtparObj As String
            Dim _erpObjAssy As Assembly

            Try
                _remoteAtparObj = CONST_ATPAR & "_" & GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), _
                                  CONFIGFILE.ERP_SYS_DETAILS.ToString(), ERP_SYS_DETAILS.DOWNLOADFROM.ToString())

                CreateERPObject(_remoteAtparObj, _erpObjAssy)
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to Create ERP Object .... " & _remoteAtparObj _
                                    & vbCrLf & "Exception thrown is..." & ex.ToString)
                Return E_SERVERERROR
            End Try


            If log.IsDebugEnabled Then log.Debug(methodBaseName & "Before Invoking Erp Component")
            'creating the remote obj which is specified in the config.xml, implementation of Reflection
            Try
                _className = _remoteAtparObj & ".SetUpOrgUnits"
                _classType = _erpObjAssy.GetType(_className)
                _methodName = _classType.GetMethod("GetOrgUnits")
                _reflectObject = Activator.CreateInstance(_classType)

                Dim args As Object() = {_pdsOrg, pOrgId, pOrgType, pOrgName, pStatus, pDeviceTokenEntry}
                _StatusCode = _methodName.Invoke(_reflectObject, args)
                _pdsOrg = args(0)

            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal("Remote Object Instance Create Failed " & ex.ToString)
                GetOrgUnits = E_SERVERERROR
                If log.IsFatalEnabled Then log.Fatal("E_SERVERERROR :" & ex.ToString)
                Exit Function
            Finally
                _reflectObject = Nothing
            End Try



        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("E_SERVERERROR :" & ex.ToString)
            'Throw New Exception(methodBaseName & " : Failed :Exception : ", ex)
            GetOrgUnits = E_SERVERERROR
        End Try

        GetOrgUnits = _StatusCode

    End Function
    ''' <summary>
    ''' Used to Updted the OrgId Status
    ''' </summary>
    ''' <param name="pUserId">User ID</param>
    ''' <param name="pOrgId">Org ID</param>
    ''' <param name="pStatus">Status</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function UpdateOrgIDStatus(ByVal pUserId As String, ByVal pOrgId As String, ByVal pOrgType As String, _
                                      ByVal pStatus As Boolean, ByVal pDeviceTokenEntry() As String) As Long _
                                      Implements IAtpar_WebTrans.UpdateOrgIDStatus


        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserId
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)
        Dim _StatusCode As Long

        Dim _className As String
        Dim _classType As Type
        Dim _reflectObject As Object
        Dim _methodName As MethodInfo
        Dim _remoteAtparObj As String
        Dim _erpObjAssy As Assembly

        Try
            _remoteAtparObj = CONST_ATPAR & "_" & GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), _
                              CONFIGFILE.ERP_SYS_DETAILS.ToString(), ERP_SYS_DETAILS.DOWNLOADFROM.ToString())

            CreateERPObject(_remoteAtparObj, _erpObjAssy)
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to Create ERP Object .... " & _remoteAtparObj _
                                & vbCrLf & "Exception thrown is..." & ex.ToString)
            Return E_SERVERERROR
        End Try

        If log.IsDebugEnabled Then log.Debug(methodBaseName & "Before Invoking Erp Component")
        'creating the remote obj which is specified in the config.xml, implementation of Reflection
        Try
            _className = _remoteAtparObj & ".SetUpOrgUnits"
            _classType = _erpObjAssy.GetType(_className)
            _methodName = _classType.GetMethod("UpdateOrgIDStatus")
            _reflectObject = Activator.CreateInstance(_classType)

            Dim args As Object() = {pOrgId, pOrgType, pStatus, pDeviceTokenEntry}
            _StatusCode = _methodName.Invoke(_reflectObject, args)

            If log.IsDebugEnabled Then log.Debug(_StatusCode & "_StatusCode")

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Remote Object Instance Create Failed " & ex.ToString)
            UpdateOrgIDStatus = E_SERVERERROR
            If log.IsFatalEnabled Then log.Fatal("E_SERVERERROR :" & ex.ToString)
            Exit Function
        Finally
            _reflectObject = Nothing
        End Try

        UpdateOrgIDStatus = _StatusCode
    End Function
    ''' <summary>
    ''' Used to Updte or Insert the OrgIds
    ''' </summary>
    ''' <param name="pUserId">User ID</param>
    ''' <param name="pDsOrgIds">OrgIds Dataset</param>
    ''' <param name="pStrMode">Mode</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function InsertUpdateOrgUnits(ByVal pUserId As String, _
                                         ByVal pDsOrgIds As DataSet, _
                                         ByVal pStrMode As String, _
                                         ByVal pStrNewType As String, _
                                         ByVal pDeviceTokenEntry() As String) As Long _
                                         Implements IAtpar_WebTrans.InsertUpdateOrgUnits


        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserId
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)
        Dim _StatusCode As Long

        Dim _className As String
        Dim _classType As Type
        Dim _reflectObject As Object
        Dim _methodName As MethodInfo
        Dim _remoteAtparObj As String
        Dim _erpObjAssy As Assembly

        Try
            _remoteAtparObj = CONST_ATPAR & "_" & GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), _
                              CONFIGFILE.ERP_SYS_DETAILS.ToString(), ERP_SYS_DETAILS.DOWNLOADFROM.ToString())

            CreateERPObject(_remoteAtparObj, _erpObjAssy)
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to Create ERP Object .... " & _remoteAtparObj _
                                & vbCrLf & "Exception thrown is..." & ex.ToString)
            Return E_SERVERERROR
        End Try

        If log.IsDebugEnabled Then log.Debug(methodBaseName & "Before Invoking Erp Component")
        'creating the remote obj which is specified in the config.xml, implementation of Reflection
        Try
            _className = _remoteAtparObj & ".SetUpOrgUnits"
            _classType = _erpObjAssy.GetType(_className)
            _methodName = _classType.GetMethod("InsertUpdateOrgUnits")
            _reflectObject = Activator.CreateInstance(_classType)

            Dim args As Object() = {pDsOrgIds, pStrMode, pStrNewType, pDeviceTokenEntry}
            _StatusCode = _methodName.Invoke(_reflectObject, args)


        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Remote Object Instance Create Failed " & ex.ToString)
            InsertUpdateOrgUnits = E_SERVERERROR
            If log.IsFatalEnabled Then log.Fatal("E_SERVERERROR :" & ex.ToString)
            Exit Function
        Finally
            _reflectObject = Nothing
        End Try

        InsertUpdateOrgUnits = _StatusCode
    End Function
    ''' <summary>
    ''' Used to Upload User Data
    ''' </summary>
    ''' <param name="pSvrUserID">User ID</param>
    ''' <param name="pDsUserData">Parameters Dataset</param>
    ''' <param name="pDsOrgGroupData">Org Parameters Dataset</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>

#Region "    User Upload"


    Public Function Do_UploadData(ByVal pSvrUserID As String, ByRef pDsUserData As DataSet, _
                                  ByRef pDsOrgGroupData As DataSet, _
                                  ByRef pDsProfileData As DataSet, _
                                  ByVal pDeviceTokenEntry() As String) As Long Implements IAtpar_WebTrans.Do_UploadData

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pSvrUserID
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            Dim _StatusCode As Long = -1
            Dim _UserStatusCode As Long = -1
            Dim _OrgStatusCode As Long = -1
            Dim _ProfileStatusCode As Long = -1

            If pDsUserData.Tables.Count > 0 Then
                _UserStatusCode = Do_UploadUserData_Flow(pSvrUserID, pDsUserData, pDeviceTokenEntry)
            End If

            If pDsOrgGroupData.Tables.Count > 0 Then
                _OrgStatusCode = Do_UploadOrgGroupData_Flow(pSvrUserID, pDsOrgGroupData, pDeviceTokenEntry)
            End If

            If pDsProfileData.Tables.Count > 0 Then
                _ProfileStatusCode = Do_UploadProfileData_Flow(pSvrUserID, pDsProfileData, pDeviceTokenEntry)
            End If

            If pDsUserData.Tables.Count > 0 And pDsOrgGroupData.Tables.Count > 0 And pDsProfileData.Tables.Count > 0 Then
                If (_UserStatusCode = ATPAR_OK And _OrgStatusCode = ATPAR_OK And _ProfileStatusCode = ATPAR_OK) Then
                    pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(0).Item("STATUS_CODE") = ATPAR_OK
                    pDsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupErrorData.ToString).Rows(0).Item("STATUS_CODE") = ATPAR_OK
                    pDsProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(0).Item("STATUS_CODE") = ATPAR_OK
                    Return ATPAR_OK
                Else
                    If _UserStatusCode <> ATPAR_OK Then
                        pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(0).Item("STATUS_CODE") = _UserStatusCode
                    End If
                    If _OrgStatusCode <> ATPAR_OK Then
                        pDsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupErrorData.ToString).Rows(0).Item("STATUS_CODE") = _OrgStatusCode
                    End If
                    If _ProfileStatusCode <> ATPAR_OK Then
                        pDsProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(0).Item("STATUS_CODE") = _ProfileStatusCode
                    End If
                    Return ATPAR_OK
                End If
            Else
                If pDsUserData.Tables.Count > 0 Then
                    pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(0).Item("STATUS_CODE") = _UserStatusCode
                    Return _UserStatusCode
                ElseIf pDsOrgGroupData.Tables.Count > 0 Then
                    pDsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupErrorData.ToString).Rows(0).Item("STATUS_CODE") = _OrgStatusCode
                    Return _OrgStatusCode
                ElseIf pDsProfileData.Tables.Count > 0 Then
                    'pDsProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(0).Item("STATUS_CODE") = _ProfileStatusCode
                    Return _ProfileStatusCode
                End If
            End If
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in  " & methodBaseName & " is..." & vbCrLf & ex.ToString)
            Return E_SERVERERROR
        End Try

        Return ATPAR_OK
    End Function

    ''' <summary>
    ''' RefreshUserDN
    ''' </summary>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Function RefreshUserDN(ByVal pStrUser As String, ByVal pStrUserFName As String, _
                           ByVal pStrUserLName As String, ByRef pStrUserDn As String, _
                           ByRef PdsUserDtls As DataSet, _
                           ByVal pDeviceTokenEntry() As String) As Long Implements IAtpar_WebTrans.RefreshUserDN

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim dtTbl As New DataTable
        Dim dtRow As DataRow

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try

            dtTbl.Columns.Add("USER_ID")
            dtTbl.Columns.Add("FIRST_NAME")
            dtTbl.Columns.Add("LAST_NAME")
            dtTbl.Columns.Add("MIDDLE_INITIAL")
            dtTbl.Columns.Add("EMAIL_ID")
            dtTbl.Columns.Add("PHONE1")
            dtTbl.Columns.Add("FAX")
            dtTbl.Columns.Add("USERDN")

          

            Dim _strLdapServername As String = String.Empty
            Dim _strLdapProtocol As String = String.Empty
            Dim _strLDAPAuthType As String = String.Empty
            Dim _strLdapBasedn As String = String.Empty
            Dim _strLdapUsername As String = String.Empty
            Dim _strLdapPassword As String = String.Empty
            Dim _strLDAPSearchScope As String = String.Empty
            Dim _strLdapEntryLimit As String = String.Empty
            Dim _strLdapSearchFilter As String = String.Empty
            Dim _StatusCode As Long

          
            Dim _strLdapUserID As String = String.Empty
            Dim _strLDAPUserDN As String = String.Empty
            Dim _strLdapFirstName As String = String.Empty
            Dim _strLdapLastName As String = String.Empty
            Dim _strLdapMInitial As String = String.Empty
            Dim _strLdapEmailID As String = String.Empty
            Dim _strLdapMobile As String = String.Empty
            Dim _strLdapFax As String = String.Empty
            Dim _strEntryLimit As String = String.Empty
          


            Try
                _strLdapServername = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemID), CONFIGFILE.LDAPCONFIG.ToString(), LDAPCONFIG.SERVERNAME.ToString())
                _strLdapProtocol = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemID), CONFIGFILE.LDAPCONFIG.ToString(), LDAPCONFIG.PROTOCOL.ToString())
                _strLDAPAuthType = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemID), CONFIGFILE.LDAPCONFIG.ToString(), LDAPCONFIG.AUTHTYPE.ToString())
                _strLdapBasedn = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemID), CONFIGFILE.LDAPCONFIG.ToString(), LDAPCONFIG.BASEDN.ToString())
                _strLdapUsername = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemID), CONFIGFILE.LDAPCONFIG.ToString(), LDAPCONFIG.USERNAME.ToString())
                _strLdapPassword = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemID), CONFIGFILE.LDAPCONFIG.ToString(), LDAPCONFIG.PASSWORD.ToString())
                _strLDAPSearchScope = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemID), CONFIGFILE.LDAPCONFIG.ToString(), LDAPCONFIG.SEARCHSCOPE.ToString())
                _strLdapEntryLimit = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemID), CONFIGFILE.LDAPCONFIG.ToString(), LDAPCONFIG.ENTRYLIMIT.ToString())
                _strLdapSearchFilter = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemID), CONFIGFILE.LDAPCONFIG.ToString(), LDAPCONFIG.SEARCHFILTER.ToString())

                _strLdapUserID = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemID), CONFIGFILE.LDAPCONFIG.ToString(), LDAPCONFIG.USERID.ToString())
                _strLdapFirstName = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemID), CONFIGFILE.LDAPCONFIG.ToString(), LDAPCONFIG.FIRSTNAME.ToString())
                _strLdapLastName = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemID), CONFIGFILE.LDAPCONFIG.ToString(), LDAPCONFIG.LASTNAME.ToString())
                _strLdapMInitial = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemID), CONFIGFILE.LDAPCONFIG.ToString(), LDAPCONFIG.MIDDLEINITIAL.ToString())
                _strLdapEmailID = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemID), CONFIGFILE.LDAPCONFIG.ToString(), LDAPCONFIG.EMAILID.ToString())
                _strLdapMobile = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemID), CONFIGFILE.LDAPCONFIG.ToString(), LDAPCONFIG.PHONE.ToString())
                _strLdapFax = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemID), CONFIGFILE.LDAPCONFIG.ToString(), LDAPCONFIG.FAX.ToString())

            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & "Failed to load ldapconfiguration details " & ex.ToString)
                Return E_SERVERERROR
            End Try
            If (_strLdapProtocol = "LDAP") Or (_strLdapProtocol = "LDAPS") Then
                _strLdapProtocol = "LDAP"
            End If

            Dim mCount As Integer

            Dim _nAuthType As Integer = 0
            Select Case _strLDAPAuthType
                Case "NONE"
                    _nAuthType = AuthenticationTypes.None
                    Exit Select
                Case "ANONYMOUS"
                    _nAuthType = AuthenticationTypes.Anonymous
                    Exit Select
                Case "SECURE"
                    _nAuthType = AuthenticationTypes.Secure
                    Exit Select
                Case "SECURESOCKETSLAYER"
                    _nAuthType = AuthenticationTypes.SecureSocketsLayer
                    Exit Select
                Case Else 'default
                    _nAuthType = AuthenticationTypes.Anonymous
            End Select


            Dim _nSearchScope As Integer = 0
            Select Case _strLDAPSearchScope
                Case "BASE"
                    _nSearchScope = SearchScope.Base
                    Exit Select
                Case "ONELEVEL"
                    _nSearchScope = SearchScope.OneLevel
                    Exit Select
                Case "SUBTREE"
                    _nSearchScope = SearchScope.Subtree
                    Exit Select
                Case Else 'default
                    _nSearchScope = SearchScope.Base
            End Select

            Dim _strLdapConnectString As String = _strLdapProtocol & "://" & _strLdapServername & IIf(_strLdapBasedn.Length > 0, "/", String.Empty) & _strLdapBasedn

            Dim oSearcher As New DirectorySearcher
            Dim oResults As SearchResultCollection
            Dim sb As New StringBuilder
            Dim arrLst As New ArrayList
            Dim pStrSearchFilter As String = String.Empty
            Dim strSearchFilter As String = String.Empty
            Dim strUserIDFilter As String
            Dim strFirstNameFilter As String
            Dim strLastNameFilter As String

            Try

                strUserIDFilter = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemID), CONFIGFILE.LDAPCONFIG.ToString(), LDAPCONFIG.USERID.ToString())
                strFirstNameFilter = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemID), CONFIGFILE.LDAPCONFIG.ToString(), LDAPCONFIG.FIRSTNAME.ToString())
                strLastNameFilter = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemID), CONFIGFILE.LDAPCONFIG.ToString(), LDAPCONFIG.LASTNAME.ToString())

            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal("Failed to load conf details " & ex.ToString)
                Return E_SERVERERROR
            End Try

            If Not Trim(pStrUser) = String.Empty Then
                arrLst.Add(strUserIDFilter & "=" & pStrUser)
            End If
            'If Not Trim(pStrUserFName) = String.Empty Then
            '    arrLst.Add(strFirstNameFilter & "=" & Trim(pStrUserFName))
            'End If
            'If Not Trim(pStrUserLName) = String.Empty Then
            '    arrLst.Add(strLastNameFilter & "=" & Trim(pStrUserLName))
            'End If

            Select Case arrLst.Count
                Case "1"
                    sb.Append(arrLst(0))
                Case "2"
                    sb.Append(arrLst(0) & "," & arrLst(1))
                Case "3"
                    sb.Append(arrLst(0) & "," & arrLst(1) & "," & arrLst(2))
            End Select
            pStrSearchFilter = sb.ToString()
            If Not String.IsNullOrEmpty(pStrSearchFilter) Then
                If pStrSearchFilter.Contains(",") Then
                    pStrSearchFilter = pStrSearchFilter.Replace(",", ")(")
                    strSearchFilter = "(&(" & pStrSearchFilter & ")(" & _strLdapSearchFilter & "))"
                Else
                    strSearchFilter = "(&(" & pStrSearchFilter & ")(" & _strLdapSearchFilter & "))"
                End If
            Else
                strSearchFilter = _strLdapSearchFilter
            End If

            Dim resultFields As New ArrayList

            If Not String.IsNullOrEmpty(_strLdapUserID) Then resultFields.Add(_strLdapUserID)
            If Not String.IsNullOrEmpty(_strLDAPUserDN) Then resultFields.Add(_strLDAPUserDN)
            If Not String.IsNullOrEmpty(_strLdapFirstName) Then resultFields.Add(CleanString(_strLdapFirstName))
            If Not String.IsNullOrEmpty(_strLdapLastName) Then resultFields.Add(CleanString(_strLdapLastName))
            If Not String.IsNullOrEmpty(_strLdapMInitial) Then resultFields.Add(_strLdapMInitial)
            If Not String.IsNullOrEmpty(_strLdapEmailID) Then resultFields.Add(_strLdapEmailID)
            If Not String.IsNullOrEmpty(_strLdapMobile) Then resultFields.Add(_strLdapMobile)
            If Not String.IsNullOrEmpty(_strLdapFax) Then resultFields.Add(_strLdapFax)

            Dim strResultsFields(resultFields.ToArray.Length - 1) As String

            resultFields.CopyTo(strResultsFields, 0)

            Try
                With oSearcher
                    .SearchRoot = New DirectoryEntry(_strLdapConnectString, _strLdapUsername, Decrypt(_strLdapPassword), _nAuthType)
                    .SizeLimit = _strLdapEntryLimit
                    .SearchScope = _nSearchScope
                    .PropertiesToLoad.AddRange(strResultsFields)
                    .Filter = strSearchFilter
                    oResults = .FindAll()
                End With

            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(" btnRefreshUserDN_Click : while accessing the Active Directory :" & ex.ToString())
                oSearcher.Dispose()
                Return E_SERVERERROR
            End Try

            mCount = oResults.Count
            If mCount > 0 Then
                Try
                    Dim _serverPath As String = _strLdapProtocol & "://" & _strLdapServername & "/"
                    Dim currentEntry As DirectoryEntry = oResults.Item(0).GetDirectoryEntry
                    pStrUserDn = currentEntry.Path.Substring(_serverPath.Length)

                    For Each oResult In oResults
                        dtRow = dtTbl.NewRow()
                        dtRow("USER_ID") = currentEntry.Properties(_strLdapUserID).Value
                        dtRow("FIRST_NAME") = currentEntry.Properties(CleanString(_strLdapFirstName)).Value
                        dtRow("LAST_NAME") = currentEntry.Properties(CleanString(_strLdapLastName)).Value
                        dtRow("MIDDLE_INITIAL") = currentEntry.Properties(_strLdapMInitial).Value
                        dtRow("EMAIL_ID") = currentEntry.Properties(_strLdapEmailID).Value
                        dtRow("PHONE1") = currentEntry.Properties(_strLdapMobile).Value
                        dtRow("FAX") = currentEntry.Properties(_strLdapFax).Value
                        dtRow("USERDN") = currentEntry.Path.Substring(CleanString(_serverPath.Length))
                        dtTbl.Rows.Add(dtRow)
                    Next
                    PdsUserDtls.Tables.Add(dtTbl)
                    PdsUserDtls.AcceptChanges()
                Catch ex As Exception
                    oSearcher.Dispose()
                    Return E_SERVERERROR
                End Try
            Else
                If log.IsDebugEnabled Then log.Debug("No users related to the search criteria exist in the LDAP server")
                Return E_NORECORDFOUND
            End If


        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(" btnRefreshUserDN_Click Failed " & ex.ToString)
            Return E_SERVERERROR
        End Try

        RefreshUserDN = ATPAR_OK

    End Function
    ''' <summary>
    ''' Validate User Column Names
    ''' </summary>
    ''' <param name="pdsUserData">Org Parameters Dataset</param>
    ''' <returns>Err Message</returns>
    ''' <remarks></remarks>
    Function ValidateUserColumnNames(ByVal pdsUserData As DataSet) As String
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        Dim strErrMsg As String = String.Empty
        If log.IsDebugEnabled Then log.Debug(methodBaseName)
        Try

            For Each dc As DataColumn In pdsUserData.Tables(Enum_UserData.UserData.ToString).Columns
                Dim strName As String = dc.ColumnName.ToString
                If strName = "USER_ID" Or strName = "LOC_ID" Or strName = "B_UNIT" Or strName = "USER_DETAIL" _
                          Or strName = "ORG_GROUP" Or strName = "LDAP" Or strName = "PASS_REQ" _
                          Or strName = "PASS_RESET" Or strName = "PASS_LDAP" Or strName = "IDLE_TIME" Or strName = "SESSION_TIME" _
                          Or strName = "PROFILE_ID" Or strName = "JOB_ID" Then
                    Continue For
                Else
                    strName = strName.Substring(strName.IndexOf("_") + 1)
                    If Not [Enum].IsDefined(GetType(AppParameters_Enum), strName) Then
                        strErrMsg = " Parameter ID :" & strName & " is not defined in atpar application parameters enum "
                        If log.IsDebugEnabled Then log.Debug(strErrMsg)
                        Return strErrMsg
                    End If
                End If
            Next
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in " & methodBaseName & ", Validating Column Names" & vbCrLf & ex.ToString)
            Return "E_SERVERERROR"
        End Try
    End Function

    Private Function Do_UploadUserData_Flow(ByVal pSvrUserID As String, ByRef pDsUserData As DataSet, ByVal pDeviceTokenEntry() As String) As Long

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pSvrUserID
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        'Error Messages to Displaying on UI WebPage
        Const CONST_USER_EXIST = "User Creation Failed, User Already Exist"
        Const CONST_ORG_NOT_EXIST = "User Creation Failed, Org GroupID Does Not Exist"
        Const CONST_PROFILE_NOT_EXIST = "User Creation Failed, ProfileID Does Not Exist"
        Const CONST_USER_PARAM_CREATION_FAILED = "User Parameters Updation Failed"
        Const CONST_USER_CREATION_SUCESS = "User Created Successfully"
        Const CONST_USER_CREATION_FAILED = "User Creation Failed"
        Const CONST_USER_UPDATION_FAILED = "User Updation Failed"
        Const CONST_USER_UPDATION_SUCESS = "User Updated Successfully"
        Const CONST_LDAP_CONFIG_NOT_SET = "User Creation Failed, LDAP Configuration Not Set"
        Const CONST_INVALID_DATA = "User Creation Failed, Invalid Data"
        Const CONST_INVALID_LDAPID = "User Creation Failed, Invalid LDAP ID"
        Const CONST_USER_UPDATION_FAILED_ORG_NOT_EXIST = "User Updation Failed, Org GroupID Does Not Exist"
        Const CONST_USER_UPDATION_FAILED_PROFILE_NOT_EXIST = "User Updation Failed, ProfileID Does Not Exist"
        Dim blnChkUserExist As Boolean = False   'user already exist in localDB
        Dim blnLdapConfigNotSet As Boolean = False   'Ldap Config not set
        Dim blnUpdateParamForExistingLdapUser As Boolean = False     'If LdapUser Imported Already, Then update parameters

        Try
            Dim _StatusCode As Long = -1
            Dim intCnt As Int16
            Dim _strLDAPUserIDFilter As String
            Dim objAtparUserMgmt As AtPar_UserManagement
            Dim arrUserDtls As ArrayList
            Dim _sbErrorString As New StringBuilder
            Dim _blnMandatory As Boolean = False
            Dim _intPasswordreq As Integer
            Dim _strPassword As String = String.Empty
            Dim _strName() As String
            Dim _strErrName As String = String.Empty
            Dim blnLDAPCheck As Boolean = False
            arrUserDtls = New ArrayList

            Try
                If pDsUserData.Tables(Enum_UserData.UserData.ToString).Rows.Count = 0 Then
                    Return E_NORECORDFOUND
                Else
                    Dim dRow As DataRow = pDsUserData.Tables(Enum_UserData.SUMMARY.ToString).NewRow()
                    pDsUserData.Tables(Enum_UserData.SUMMARY.ToString).Rows.Add(dRow)
                    pDsUserData.Tables(Enum_UserData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.TOTAL_REC_CNT) = pDsUserData.Tables(Enum_UserData.UserData.ToString).Rows.Count - 2
                    pDsUserData.Tables(Enum_UserData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.SUCCESS_CNT) = 0
                    pDsUserData.Tables(Enum_UserData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.FAILURE_CNT) = 0
                    pDsUserData.Tables(Enum_UserData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.ADDED_CNT) = 0
                    pDsUserData.Tables(Enum_UserData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.UPDATED_CNT) = 0
                End If
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal("Exception Thrown while Creating DataRow in Summary Table is.." & vbCrLf & ex.ToString)
                Return E_SERVERERROR
            End Try
            'ValidatingUserColumnNames 
            Try
                _strErrName = ValidateUserColumnNames(pDsUserData)

                If log.IsDebugEnabled Then log.Debug("Invalid Column Name" & _strErrName)

                If Not _strErrName = String.Empty Then
                    pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_NOT_VALID_PARAMETER & _strErrName
                End If
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal("Exception Thrown in ValidColumnNames " & methodBaseName & " is...." & vbCrLf & ex.ToString)
                Return E_SERVERERROR
            End Try

            Try
                objAtparUserMgmt = New AtPar_UserManagement
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal("Exception Thrown while creating UserManagement object is.." & vbCrLf & ex.ToString)
                Return E_SERVERERROR
            End Try

            'TO DO:: Need to implement, reading of conf values from cache, which is implemented in CartCount
            Try
                _strLDAPUserIDFilter = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemID), CONFIGFILE.LDAPCONFIG.ToString(), LDAPCONFIG.USERID.ToString())

                If Trim(_strLDAPUserIDFilter) = String.Empty Then
                    If log.IsWarnEnabled Then log.Warn("Please set LDAP configuration in Configuration Manager Screen")
                    blnLdapConfigNotSet = True
                End If
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal("Exception Thrown while reading config file is.." & vbCrLf & ex.ToString)
                Return E_SERVERERROR
            End Try

            With pDsUserData.Tables(Enum_UserData.UserData.ToString)
                For intCnt = 2 To .Rows.Count - 1
                    Dim _strValidInput As String = String.Empty
                    Dim strUserID As String = String.Empty
                    Dim strProfileID As String = String.Empty

                    blnChkUserExist = False
                    blnUpdateParamForExistingLdapUser = False
                    If .Rows(intCnt).Item("USER_ID").ToString = String.Empty Then
                        _sbErrorString.Append("UserID")
                        _blnMandatory = True
                    Else
                        strUserID = Trim(.Rows(intCnt).Item("USER_ID").ToString)
                    End If
                    If .Rows(intCnt).Item("IDLE_TIME").ToString = String.Empty Then
                        If _sbErrorString.ToString = String.Empty Then
                            _sbErrorString.Append("Idle Time")
                        Else
                            _sbErrorString.Append(", Idle Time")
                        End If
                        _blnMandatory = True
                    End If
                    If .Rows(intCnt).Item("SESSION_TIME").ToString = String.Empty Then
                        If _sbErrorString.ToString = String.Empty Then
                            _sbErrorString.Append("Session Time")
                        Else
                            _sbErrorString.Append(", Session Time")
                        End If
                        _blnMandatory = True
                    End If
                    If .Rows(intCnt).Item("LDAP").ToString = String.Empty Then
                        If _sbErrorString.ToString = String.Empty Then
                            _sbErrorString.Append("Ldap")
                        Else
                            _sbErrorString.Append(", Ldap")
                        End If
                        _blnMandatory = True
                    End If

                    If .Rows(intCnt).Item("LDAP").ToString = "N" Then
                        If .Rows(intCnt).Item("USER_DETAIL").ToString = String.Empty Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("First Name and Last Name ")
                            Else
                                _sbErrorString.Append(", First Name and Last Name ")
                            End If
                            _blnMandatory = True
                        End If
                    End If

                    If .Rows(intCnt).Item("PASS_REQ").ToString = "Y" Then
                        If .Rows(intCnt).Item("PASS_LDAP").ToString = String.Empty Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Password")
                            Else
                                _sbErrorString.Append(", Password")
                            End If
                            _blnMandatory = True
                        End If
                    End If
                    If .Rows(intCnt).Item("PROFILE_ID").ToString = String.Empty And .Rows(intCnt).Item("JOB_ID").ToString = String.Empty Then
                        If .Rows(intCnt).Item("PROFILE_ID").ToString = String.Empty Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Profile ID or Job ID")
                            Else
                                _sbErrorString.Append(", Profile ID or Job ID")
                            End If
                            _blnMandatory = True
                        End If
                    End If
                    If _blnMandatory Then
                        If _sbErrorString.ToString.Contains(",") Then
                            _sbErrorString.Append(" are Mandatory Fields")
                        Else
                            _sbErrorString.Append(" is Mandatory Field")
                        End If
                        pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = _sbErrorString.ToString
                        _sbErrorString = Nothing
                        _sbErrorString = New StringBuilder
                        _blnMandatory = False
                        Continue For
                    Else
                        _sbErrorString = Nothing
                        _sbErrorString = New StringBuilder
                    End If

                    'Validating Each Row's Data
                    Try
                        _strValidInput = ValidateUserData(.Rows(intCnt))
                        If Not _strValidInput = String.Empty Then
                            pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = _strValidInput
                            Continue For
                        End If
                    Catch ex As Exception
                        pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_USER_CREATION_FAILED
                        If log.IsFatalEnabled Then log.Fatal("Exception Thrown in " & methodBaseName & " is...." & vbCrLf & ex.ToString)
                        Continue For
                    End Try


                    'Getting ProfileID with jobID
                    If .Rows(intCnt).Item("PROFILE_ID").ToString = String.Empty Then
                        If pDsUserData.Tables(Enum_UserData.ProfileJobRef.ToString).Select("JOBID='" & .Rows(intCnt).Item("JOB_ID").ToString & "'").Length > 0 Then
                            strProfileID = pDsUserData.Tables(Enum_UserData.ProfileJobRef.ToString).Select("JOBID='" & .Rows(intCnt).Item("JOB_ID").ToString & "'")(0).Item(2).ToString
                        Else
                            If log.IsWarnEnabled Then log.Warn("ProfileID Not Exist, for UserID :" & strUserID & ": and JobID :" & .Rows(intCnt).Item("JOB_ID").ToString & ":")
                            pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_PROFILE_NOT_EXIST
                            Continue For
                        End If
                    Else
                        strProfileID = .Rows(intCnt).Item("PROFILE_ID").ToString
                    End If

                    'If profile id exist then replacing Excel's profile Id with selected profile Id to avoid case sensitivity issue'
                    Dim _strProfile As String = String.Empty
                    Dim _strSQL As String = String.Empty

                    Try
                        _strSQL = "SELECT PROFILE_ID FROM MT_ATPAR_PROFILE WHERE PROFILE_ID='" & strProfileID & "'"

                        If log.IsInfoEnabled Then log.Info(methodBaseName & ":Query to Get profile id is :" & _strSQL)

                        _strProfile = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(_strSQL))
                        If Not String.IsNullOrEmpty(_strProfile) Then
                            strProfileID = _strProfile
                        End If
                        If log.IsDebugEnabled Then log.Debug(methodBaseName & " :Actual profileId:  " & _strProfile)
                    Catch ex As Exception
                        If log.IsFatalEnabled Then log.Fatal("Exception Thrown in " & methodBaseName & " is...." & vbCrLf & ex.ToString)
                        Continue For
                    End Try
                    ''

                    Try
                        _StatusCode = objAtparUserMgmt.CheckUser(strUserID, pDeviceTokenEntry)
                        If _StatusCode = ATPAR_E_USERALREADYEXISTS Then
                            blnChkUserExist = True

                            _StatusCode = CheckLDAPUser(strUserID, blnLDAPCheck)
                            If _StatusCode = ATPAR_OK Then
                                If log.IsDebugEnabled Then log.Debug(methodBaseName & "blnLDAPCheck  " & blnLDAPCheck)
                                If (blnLDAPCheck = True) Then
                                    If log.IsDebugEnabled Then log.Debug(methodBaseName & " Ldap User  " & .Rows(intCnt).Item("LDAP").ToString)
                                    If (.Rows(intCnt).Item("LDAP").ToString = "N") Then
                                        pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = "LDAP user can't be converted to normal user "
                                        Continue For
                                    End If
                                    '0006707
                                Else
                                    If log.IsDebugEnabled Then log.Debug(methodBaseName & " Ldap User  " & .Rows(intCnt).Item("LDAP").ToString)
                                    If (.Rows(intCnt).Item("LDAP").ToString = "Y") Then
                                        pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = "Normal user  can't be converted to LDAP user "
                                        Continue For
                                    End If
                                End If
                            End If
                            If log.IsDebugEnabled Then log.Debug("User Already Exist, for UserID :" & strUserID & ":")
                        ElseIf _StatusCode <> ATPAR_OK Then
                            If log.IsWarnEnabled Then log.Warn("StatusCode Returned from CheckUser is :" & _StatusCode & ": for UserID :" & strUserID & ":")
                            pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_USER_CREATION_FAILED
                            Continue For
                        End If
                    Catch ex As Exception
                        If log.IsWarnEnabled Then log.Warn("StatusCode Returned from CheckUser is :" & _StatusCode & ": for UserID :" & strUserID & ":")
                        pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_USER_CREATION_FAILED
                        Continue For
                    End Try
                    Try
                        If (.Rows(intCnt).Item("LDAP").ToString = "Y") Then


                            Dim intNoofRecordsToFetch As Int16
                            Dim dsLdapUserDtls As DataSet

                            intNoofRecordsToFetch = 1
                            dsLdapUserDtls = New DataSet

                            If blnLdapConfigNotSet = True Then
                                If log.IsWarnEnabled Then log.Warn("Please set LDAP configuration in Configuration Manager Screen")
                                pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_LDAP_CONFIG_NOT_SET
                                Continue For
                            End If

                            _StatusCode = objAtparUserMgmt.GetLdapUsers(pSvrUserID, dsLdapUserDtls, _strLDAPUserIDFilter & "=" & strUserID, intNoofRecordsToFetch, pDeviceTokenEntry)

                            If _StatusCode = ATPAR_E_USERALREADYEXISTS Then
                                If blnChkUserExist Then
                                    blnUpdateParamForExistingLdapUser = True
                                    'Setting LdapUser Details through excel
                                    arrUserDtls.Add(strUserID.ToUpper) 'userid - 0
                                    arrUserDtls.Add(String.Empty) 'passhash - 1
                                    arrUserDtls.Add(String.Empty) 'firstname - 2
                                    arrUserDtls.Add(String.Empty) 'lastname - 3
                                    arrUserDtls.Add(String.Empty) 'middle initial - 4
                                    arrUserDtls.Add(String.Empty) 'email id - 5
                                    arrUserDtls.Add(String.Empty) 'phone1 - 6
                                    arrUserDtls.Add(String.Empty) 'phone2 - 7
                                    arrUserDtls.Add(String.Empty) 'fax - 8
                                    arrUserDtls.Add(String.Empty) 'pager - 9
                                    arrUserDtls.Add(strProfileID) 'profileID - 10
                                    arrUserDtls.Add("Y") 'LdapUser - 11
                                    arrUserDtls.Add(String.Empty) 'LdapRole - 12
                                    arrUserDtls.Add(String.Empty) 'Ldaporg - 13
                                    arrUserDtls.Add(String.Empty) 'created userid - 14
                                    arrUserDtls.Add(String.Empty) 'EMPTY - 15
                                    arrUserDtls.Add(.Rows(intCnt).Item("SESSION_TIME").ToString) 'Session Expiry - 16
                                    arrUserDtls.Add(1) 'Password Required - 17
                                    arrUserDtls.Add("1-12:00,23:59;2-12:00,23:59;3-12:00,23:59;4-12:00,23:59;5-12:00,23:59;6-12:00,23:59;7-12:00,23:59;") 'Time Restrictions - 18
                                    arrUserDtls.Add(.Rows(intCnt).Item("IDLE_TIME").ToString) 'Idle Time - 19
                                    arrUserDtls.Add("N") 'Pwd Reset Req - 20
                                    arrUserDtls.Add(String.Empty) 'EMPTY - 21
                                    arrUserDtls.Add(String.Empty) 'EMPTY - 22
                                    arrUserDtls.Add(.Rows(intCnt).Item("ORG_GROUP").ToString) 'Org Group - 23
                                    arrUserDtls.Add(0) 'Account disabled - 24
                                    arrUserDtls.Add(String.Empty)

                                Else
                                    If log.IsWarnEnabled Then log.Warn("UserID Not Existing on LDAP for :" & strUserID & ":")
                                    pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = strUserID & " Not Existing on LDAP "
                                    Continue For
                                End If

                            ElseIf _StatusCode = E_NORECORDFOUND Then
                                If log.IsWarnEnabled Then log.Warn("StatusCode Returned from GetLdapUsers is :" & _StatusCode & ": for UserID :" & strUserID & ":")
                                pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_INVALID_LDAPID
                                Continue For
                            ElseIf _StatusCode = E_REMOTEERROR Then
                                If log.IsWarnEnabled Then log.Warn("Please set LDAP configuration in Configuration Manager Screen")
                                pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_USER_CREATION_FAILED
                                Continue For
                            ElseIf _StatusCode <> ATPAR_OK Then
                                If log.IsWarnEnabled Then log.Warn("StatusCode Returned from GetLdapUsers is :" & _StatusCode & ": for UserID :" & strUserID & ":")
                                pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_USER_CREATION_FAILED
                                Continue For
                            End If
                            If blnUpdateParamForExistingLdapUser = False Then

                                If dsLdapUserDtls.Tables(0).Rows.Count > 0 Then
                                    arrUserDtls.Add(strUserID.ToUpper) 'userid - 0
                                    arrUserDtls.Add(String.Empty) 'passhash - 1
                                    arrUserDtls.Add(dsLdapUserDtls.Tables(0).Rows(0).Item(1).ToString()) 'firstname - 2
                                    arrUserDtls.Add(dsLdapUserDtls.Tables(0).Rows(0).Item(2).ToString()) 'lastname - 3
                                    arrUserDtls.Add(dsLdapUserDtls.Tables(0).Rows(0).Item(3).ToString()) 'middle initial - 4
                                    arrUserDtls.Add(dsLdapUserDtls.Tables(0).Rows(0).Item(4).ToString()) 'email id - 5
                                    arrUserDtls.Add(dsLdapUserDtls.Tables(0).Rows(0).Item(5).ToString()) 'phone1 - 6
                                    arrUserDtls.Add(String.Empty) 'phone2 - 7
                                    arrUserDtls.Add(dsLdapUserDtls.Tables(0).Rows(0).Item(6).ToString()) 'fax - 8
                                    arrUserDtls.Add(String.Empty) 'pager - 9
                                    arrUserDtls.Add(strProfileID) 'profileID - 10
                                    arrUserDtls.Add("Y") 'LdapUser - 11
                                    arrUserDtls.Add(String.Empty) 'LdapRole - 12
                                    arrUserDtls.Add(String.Empty) 'Ldaporg - 13
                                    arrUserDtls.Add(String.Empty) 'created userid - 14
                                    arrUserDtls.Add(String.Empty) 'EMPTY - 15
                                    arrUserDtls.Add(.Rows(intCnt).Item("SESSION_TIME").ToString) 'Session Expiry - 16
                                    arrUserDtls.Add(0) 'Password Required - 17
                                    arrUserDtls.Add("1-12:00,23:59;2-12:00,23:59;3-12:00,23:59;4-12:00,23:59;5-12:00,23:59;6-12:00,23:59;7-12:00,23:59;") 'Time Restrictions - 18
                                    arrUserDtls.Add(.Rows(intCnt).Item("IDLE_TIME").ToString) 'Idle Time - 19
                                    arrUserDtls.Add("N") 'Pwd Reset Req - 20
                                    arrUserDtls.Add(String.Empty) 'EMPTY - 21
                                    arrUserDtls.Add(String.Empty) 'EMPTY - 22
                                    arrUserDtls.Add(.Rows(intCnt).Item("ORG_GROUP").ToString) 'Org Group - 23
                                    arrUserDtls.Add(0) 'Account disabled - 24

                                    arrUserDtls.Add(dsLdapUserDtls.Tables(0).Rows(0).Item(7).ToString())
                                    If blnChkUserExist = False Then
                                        _StatusCode = objAtparUserMgmt.AddUser(arrUserDtls, pDeviceTokenEntry)
                                        If _StatusCode = ATPAR_E_USERALREADYEXISTS Then
                                            arrUserDtls.Clear()
                                            dsLdapUserDtls.Clear()
                                            If log.IsWarnEnabled Then log.Warn("User Already Exist, for UserID :" & strUserID & ":")
                                            pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_USER_EXIST
                                            Continue For
                                        ElseIf _StatusCode = ATPAR_E_PROFILE_NOT_EXIST Then
                                            arrUserDtls.Clear()
                                            dsLdapUserDtls.Clear()
                                            If log.IsWarnEnabled Then log.Warn("ProfileID Not Exist, for UserID :" & strUserID & ": and ProfileID :" & strProfileID & ":")
                                            pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_PROFILE_NOT_EXIST
                                            Continue For
                                        ElseIf _StatusCode = ATPAR_E_ORG_NOT_EXIST Then
                                            arrUserDtls.Clear()
                                            dsLdapUserDtls.Clear()
                                            If log.IsWarnEnabled Then log.Warn("Org GroupID Not Exist, for UserID :" & strUserID & ": and Org GroupID :" & .Rows(intCnt).Item(4).ToString & ":")
                                            pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_ORG_NOT_EXIST
                                            Continue For
                                        ElseIf _StatusCode <> ATPAR_OK Then
                                            arrUserDtls.Clear()
                                            dsLdapUserDtls.Clear()
                                            If log.IsWarnEnabled Then log.Warn("StatusCode Returned from AddUser is :" & _StatusCode & ": for UserID :" & strUserID & ":")
                                            pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_USER_CREATION_FAILED
                                            Continue For
                                        ElseIf _StatusCode = ATPAR_OK Then
                                            arrUserDtls.Clear()
                                            dsLdapUserDtls.Clear()
                                            pDsUserData.Tables(Enum_UserData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.ADDED_CNT) += 1
                                        End If
                                    End If
                                End If
                            End If
                        Else
                            If .Rows(intCnt).Item("USER_DETAIL").ToString = String.Empty Then
                                pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = "First Name,Last Name are Mandatory"
                                Continue For
                            Else
                                _strName = Split(.Rows(intCnt).Item("USER_DETAIL").ToString, ",")
                                If _strName.Length < 2 Then
                                    pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = "First Name,Last Name are Mandatory"
                                    Continue For
                                End If
                            End If
                            If (.Rows(intCnt).Item("PASS_REQ").ToString = "Y") Then
                                _intPasswordreq = 1
                                If (.Rows(intCnt).Item("PASS_LDAP").ToString = String.Empty) Then
                                    pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = "Password is not provided"
                                    Continue For
                                Else
                                    _strPassword = .Rows(intCnt).Item("PASS_LDAP").ToString
                                End If
                            Else
                                _strPassword = String.Empty
                                _intPasswordreq = 0
                            End If
                            arrUserDtls.Add(strUserID.ToUpper) 'userid - 0
                            arrUserDtls.Add(_strPassword) 'passhash - 1

                            arrUserDtls.Add(_strName(0)) 'firstname - 2
                            arrUserDtls.Add(_strName(1)) 'lastname - 3
                            If (_strName.Length > 2) Then
                                arrUserDtls.Add(_strName(2)) 'middle initial - 4
                            Else
                                arrUserDtls.Add(String.Empty)

                            End If
                            arrUserDtls.Add(String.Empty) 'email id - 5
                            arrUserDtls.Add(String.Empty) 'phone1 - 6
                            arrUserDtls.Add(String.Empty) 'phone2 - 7
                            arrUserDtls.Add(String.Empty) 'fax - 8
                            arrUserDtls.Add(String.Empty) 'pager - 9
                            arrUserDtls.Add(strProfileID) 'profileID - 10
                            arrUserDtls.Add("N") 'LdapUser - 11
                            arrUserDtls.Add(String.Empty) 'LdapRole - 12
                            arrUserDtls.Add(String.Empty) 'Ldaporg - 13
                            arrUserDtls.Add(String.Empty) 'created userid - 14
                            arrUserDtls.Add(String.Empty) 'EMPTY - 15
                            arrUserDtls.Add(.Rows(intCnt).Item("SESSION_TIME").ToString) 'Session Expiry - 16
                            arrUserDtls.Add(_intPasswordreq) 'Password Required - 17
                            arrUserDtls.Add("1-12:00,23:59;2-12:00,23:59;3-12:00,23:59;4-12:00,23:59;5-12:00,23:59;6-12:00,23:59;7-12:00,23:59;") 'Time Restrictions - 18
                            arrUserDtls.Add(.Rows(intCnt).Item("IDLE_TIME").ToString) 'Idle Time - 19
                            If (.Rows(intCnt).Item("PASS_REQ").ToString = "Y") Then
                                arrUserDtls.Add(.Rows(intCnt).Item("PASS_RESET").ToString) 'Pwd Reset Req - 20 
                            Else
                                arrUserDtls.Add("N") 'Pwd Reset Req - 20
                            End If

                            arrUserDtls.Add(String.Empty) 'EMPTY - 21
                            arrUserDtls.Add(String.Empty) 'EMPTY - 22
                            arrUserDtls.Add(.Rows(intCnt).Item("ORG_GROUP").ToString) 'Org Group - 23
                            arrUserDtls.Add(0) 'Account disabled - 24
                            arrUserDtls.Add(String.Empty)
                            If blnChkUserExist = False Then
                                _StatusCode = objAtparUserMgmt.AddUser(arrUserDtls, pDeviceTokenEntry)
                                If _StatusCode = ATPAR_E_USERALREADYEXISTS Then
                                    arrUserDtls.Clear()
                                    If log.IsWarnEnabled Then log.Warn("User Already Exist, for UserID :" & strUserID & ":")
                                    pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_USER_EXIST
                                    Continue For
                                ElseIf _StatusCode = ATPAR_E_PROFILE_NOT_EXIST Then
                                    arrUserDtls.Clear()
                                    If log.IsWarnEnabled Then log.Warn("ProfileID Not Exist, for UserID :" & strUserID & ": and ProfileID :" & strProfileID & ":")
                                    pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_PROFILE_NOT_EXIST
                                    Continue For
                                ElseIf _StatusCode = ATPAR_E_ORG_NOT_EXIST Then
                                    arrUserDtls.Clear()
                                    If log.IsWarnEnabled Then log.Warn("Org GroupID Not Exist, for UserID :" & strUserID & ": and Org GroupID :" & .Rows(intCnt).Item(4).ToString & ":")
                                    pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_ORG_NOT_EXIST
                                    Continue For
                                ElseIf _StatusCode <> ATPAR_OK Then
                                    arrUserDtls.Clear()
                                    If log.IsWarnEnabled Then log.Warn("StatusCode Returned from AddUser is :" & _StatusCode & ": for UserID :" & strUserID & ":")
                                    pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_USER_CREATION_FAILED
                                    Continue For
                                ElseIf _StatusCode = ATPAR_OK Then
                                    arrUserDtls.Clear()
                                    pDsUserData.Tables(Enum_UserData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.ADDED_CNT) += 1
                                End If
                            End If
                        End If
                    Catch ex As Exception
                        If log.IsWarnEnabled Then log.Warn("StatusCode Returned from normal user except from if is :" & _StatusCode & ": for UserID :" & strUserID & ":" & ex.ToString)
                        pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_USER_CREATION_FAILED
                        Continue For
                    End Try

                    'userparameters
                    Try

                        'User Already exist so update
                        If blnChkUserExist = True Then

                            _StatusCode = Do_UpdateLoadedUser(arrUserDtls, .Rows(intCnt), _
                                                             blnUpdateParamForExistingLdapUser, _
                                                             pDeviceTokenEntry)
                            arrUserDtls.Clear()
                            If _StatusCode = ATPAR_E_ORG_NOT_EXIST Then
                                If log.IsWarnEnabled Then log.Warn("Org GroupID Not Exist, for UserID :" & strUserID & ": and Org GroupID :" & .Rows(intCnt).Item(4).ToString & ":")
                                pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_USER_UPDATION_FAILED_ORG_NOT_EXIST
                                Continue For
                            ElseIf _StatusCode = ATPAR_E_PROFILE_NOT_EXIST Then
                                If log.IsWarnEnabled Then log.Warn("ProfileID Not Exist, for UserID :" & strUserID & ": and ProfileID :" & strProfileID & ":")
                                pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_USER_UPDATION_FAILED_PROFILE_NOT_EXIST
                                Continue For
                            ElseIf _StatusCode <> ATPAR_OK Then
                                If log.IsWarnEnabled Then log.Warn("User Updation Failed, for UserID :" & strUserID & ":")
                                pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_USER_UPDATION_FAILED
                                Continue For
                            ElseIf _StatusCode = ATPAR_OK Then
                                pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_USER_UPDATION_SUCESS
                                pDsUserData.Tables(Enum_UserData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.UPDATED_CNT) += 1
                            End If

                        End If

                        If blnChkUserExist = False Then
                            'set user parameters

                            _StatusCode = SetUserParam(.Rows(intCnt), strUserID, String.Empty, pSvrUserID, pDeviceTokenEntry)
                            If _StatusCode <> ATPAR_OK Then
                                pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_USER_PARAM_CREATION_FAILED
                                If log.IsWarnEnabled Then log.Warn("StatusCode Returned from SetUserParam is :" & _StatusCode & ": for UserID :" & strUserID & ":")
                                _StatusCode = DeleteUserParams(strUserID)
                                If _StatusCode = ATPAR_OK Then
                                    If log.IsWarnEnabled Then log.Warn("StatusCode Returned from DeleteUserParams is :" & _StatusCode & ": for UserID :" & strUserID & ":")
                                Else
                                    If log.IsWarnEnabled Then log.Warn("StatusCode Returned from DeleteUserParams is :" & _StatusCode & ": for UserID :" & strUserID & ":")
                                End If
                                Continue For
                            Else
                                pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_USER_CREATION_SUCESS
                                If log.IsDebugEnabled Then log.Debug("User Created Successfully, for UserID :" & strUserID & ":")
                            End If
                        End If
                    Catch ex As Exception
                        If log.IsFatalEnabled Then log.Fatal("Exception Thrown in " & methodBaseName & " is...." & vbCrLf & ex.ToString)
                        Return E_SERVERERROR
                    End Try
                Next
            End With

            pDsUserData.Tables(Enum_UserData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.SUCCESS_CNT) = pDsUserData.Tables(Enum_UserData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.ADDED_CNT) + pDsUserData.Tables(Enum_UserData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.UPDATED_CNT)
            pDsUserData.Tables(Enum_UserData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.FAILURE_CNT) = pDsUserData.Tables(Enum_UserData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.TOTAL_REC_CNT) - pDsUserData.Tables(Enum_UserData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.SUCCESS_CNT)
            pDsUserData.AcceptChanges()
            Try
                For i As Integer = pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows.Count - 1 To 0 Step -1
                    If pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(i).Item("ERROR_MESSAGE").ToString = CONST_USER_CREATION_SUCESS Or pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(i).Item("ERROR_MESSAGE").ToString = CONST_USER_UPDATION_SUCESS Then
                        pDsUserData.Tables(Enum_UserData.UserErrorData.ToString).Rows(i).Delete()
                    End If
                Next
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal("Exception Thrown while updating ErrorData Table is..." & vbCrLf & ex.ToString)
                Return E_SERVERERROR
            End Try
            pDsUserData.AcceptChanges()
            objAtparUserMgmt = Nothing
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in " & methodBaseName & " is..." & vbCrLf & ex.ToString)
            Return E_SERVERERROR
        End Try
    End Function

    Private Function DeleteUserParams(ByVal pstrUserID As String) As Long
        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pstrUserID
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _StatusCode As Long = -1
        Dim _trans As SqlTransaction
        Try
            sqlConnect = m_LocalDB.CreateConnection()
            sqlConnect.Open()
            _trans = sqlConnect.BeginTransaction()


            Dim _strSQL As String = String.Empty


            _strSQL = "DELETE FROM MT_ATPAR_USER WHERE USER_ID='" & pstrUserID & "'"
            If log.IsInfoEnabled Then log.Info(methodBaseName & " : " & _strSQL)
            Try
                m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), _trans)


            Catch sqlex As SqlException
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to delete user params " & vbCrLf & _
                                                                      " with the following SQL :" & _strSQL & vbCrLf & _
                                                                      " Exception is:" & sqlex.ToString & vbCrLf)
                Throw New Exception(methodBaseName & " : SQLExceptionMessageString : ", sqlex)
                DeleteUserParams = ATPAR_E_LOCALDBDELETEFAIL
                _trans.ROLLBACK()
            End Try


            _strSQL = "DELETE FROM MT_ATPAR_USER_ACL WHERE USER_ID='" & pstrUserID & "'"
            If log.IsInfoEnabled Then log.Info(methodBaseName & " : " & _strSQL)
            Try
                m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), _trans)

            Catch sqlex As SqlException
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to delete user params " & vbCrLf & _
                                                                     " with the following SQL :" & _strSQL & vbCrLf & _
                                                                     " Exception is:" & sqlex.ToString & vbCrLf)
                Throw New Exception(methodBaseName & " : SQLExceptionMessageString : ", sqlex)
                DeleteUserParams = ATPAR_E_LOCALDBDELETEFAIL
                _trans.ROLLBACK()
            End Try


            _strSQL = "DELETE FROM MT_ATPAR_USER_ORG_GROUPS WHERE USER_ID='" & pstrUserID & "'"
            If log.IsInfoEnabled Then log.Info(methodBaseName & " : " & _strSQL)
            Try
                m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), _trans)


            Catch sqlex As SqlException
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to delete user params " & vbCrLf & _
                                                                      " with the following SQL :" & _strSQL & vbCrLf & _
                                                                      " Exception is:" & sqlex.ToString & vbCrLf)
                Throw New Exception(methodBaseName & " : SQLExceptionMessageString : ", sqlex)
                DeleteUserParams = ATPAR_E_LOCALDBDELETEFAIL
                _trans.ROLLBACK()
            End Try


            _strSQL = "DELETE FROM MT_ATPAR_USER_APP_PARAMETERS WHERE USER_ID='" & pstrUserID & "'"
            If log.IsInfoEnabled Then log.Info(methodBaseName & " : " & _strSQL)
            Try
                m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), _trans)


            Catch sqlex As SqlException
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to delete user params " & vbCrLf & _
                                                                      " with the following SQL :" & _strSQL & vbCrLf & _
                                                                      " Exception is:" & sqlex.ToString & vbCrLf)
                Throw New Exception(methodBaseName & " : SQLExceptionMessageString : ", sqlex)
                DeleteUserParams = ATPAR_E_LOCALDBDELETEFAIL
                _trans.ROLLBACK()
            End Try
            _trans.COMMIT()
            DeleteUserParams = ATPAR_OK
        Catch ex As Exception
            _trans.rollback()
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in " & methodBaseName & " is..." & vbCrLf & ex.ToString)
            Return E_SERVERERROR
        Finally
            If sqlConnect.State <> ConnectionState.Closed Then
                sqlConnect.Close()
            End If
        End Try

    End Function

    Private Function Do_UpdateLoadedUser(ByVal pArrUserDtls As ArrayList, _
                                           ByVal pRow As DataRow, ByVal pBlnUpdateParam As Boolean, _
                                           ByVal pDeviceTokenEntry() As String) As Long
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        sqlConnect = m_LocalDB.CreateConnection()
        sqlConnect.Open()
        Dim _trans As SqlTransaction = sqlConnect.BeginTransaction()
        Dim _strEnterpriseSystem As String = String.Empty

        Try
            _strEnterpriseSystem = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), CONFIGFILE.ERP_SYS_DETAILS.ToString(), ERP_SYS_DETAILS.ENTERPRISESYSTEM.ToString)
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to get the enterprise system name " _
                                                                & ex.ToString & ":" & vbCrLf)
            Return E_SERVERERROR
        End Try

        Try
            Dim strHashVal As String = String.Empty
            Dim strPwd As String
            Dim _StatusCode As Long = -1

            'If Not pBlnUpdateParam Then
            Try
                If pArrUserDtls(17) = 1 Then
                    If Not String.IsNullOrEmpty(pArrUserDtls(1)) Then
                        strPwd = pArrUserDtls(1) & pArrUserDtls(0)
                        strHashVal = CSHA256.ComputeHash(strPwd)
                    End If
                End If

                Dim sqlParms As SqlParameter() = New SqlParameter(25) {}

                sqlParms(0) = New SqlParameter("@pMode", SqlDbType.NVarChar)  '@pMode 0-ADDING USER, 1-EDITING USER
                sqlParms(0).Value = CType(AddEdit_Enum.EDIT, Integer)
                sqlParms(1) = New SqlParameter("@pUserID", SqlDbType.NVarChar)
                sqlParms(1).Value = pArrUserDtls(0)
                sqlParms(2) = New SqlParameter("@pPasswordRequired", SqlDbType.NVarChar) 'required 1, not required - 0
                sqlParms(2).Value = pArrUserDtls(17)
                sqlParms(3) = New SqlParameter("@pPassword", SqlDbType.NVarChar)
                sqlParms(3).Value = strHashVal
                sqlParms(4) = New SqlParameter("@pTokenExpPeriod", SqlDbType.Int)
                sqlParms(4).Value = pArrUserDtls(16)
                sqlParms(5) = New SqlParameter("@pIdleTime", SqlDbType.Int)
                sqlParms(5).Value = pArrUserDtls(19)
                sqlParms(6) = New SqlParameter("@pFirstName", SqlDbType.NVarChar)
                sqlParms(6).Value = pArrUserDtls(2)
                sqlParms(7) = New SqlParameter("@pLastName", SqlDbType.NVarChar)
                sqlParms(7).Value = pArrUserDtls(3)
                sqlParms(8) = New SqlParameter("@pMiddleInitial", SqlDbType.NVarChar)
                sqlParms(8).Value = pArrUserDtls(4)
                sqlParms(9) = New SqlParameter("@pEmailID", SqlDbType.NVarChar)
                sqlParms(9).Value = pArrUserDtls(5)
                sqlParms(10) = New SqlParameter("@pPhone1", SqlDbType.NVarChar)
                sqlParms(10).Value = pArrUserDtls(6)
                sqlParms(11) = New SqlParameter("@pPhone2", SqlDbType.NVarChar)
                sqlParms(11).Value = pArrUserDtls(7)
                sqlParms(12) = New SqlParameter("@pFax", SqlDbType.NVarChar)
                sqlParms(12).Value = pArrUserDtls(8)
                sqlParms(13) = New SqlParameter("@pPager", SqlDbType.NVarChar)
                sqlParms(13).Value = pArrUserDtls(9)
                sqlParms(14) = New SqlParameter("@pOrgGroup", SqlDbType.NVarChar)
                sqlParms(14).Value = pArrUserDtls(23)
                sqlParms(15) = New SqlParameter("@pProfile", SqlDbType.NVarChar)
                sqlParms(15).Value = pArrUserDtls(10)
                sqlParms(16) = New SqlParameter("@pLdapUser", SqlDbType.NVarChar) 'default ''
                sqlParms(16).Value = pArrUserDtls(11)
                sqlParms(17) = New SqlParameter("@pLdapRole", SqlDbType.NVarChar) 'default ''
                sqlParms(17).Value = pArrUserDtls(12)
                sqlParms(18) = New SqlParameter("@pLdapOrg", SqlDbType.NVarChar)  'default ''
                sqlParms(18).Value = pArrUserDtls(13)
                sqlParms(19) = New SqlParameter("@pTimeRestrictions", SqlDbType.NVarChar)  ' default 1-12:00,23:59;2-12:00,23:59;3-12:00,23:59;4-12:00,23:59;5-12:00,23:59;6-12:00,23:59;7-12:00,23:59;
                sqlParms(19).Value = pArrUserDtls(18)
                sqlParms(20) = New SqlParameter("@pPwdResetReq", SqlDbType.NVarChar) ' default 'N'
                sqlParms(20).Value = pArrUserDtls(20)
                sqlParms(21) = New SqlParameter("@pLastUpdateUser ", SqlDbType.NVarChar)
                sqlParms(21).Value = pArrUserDtls(14)
                sqlParms(22) = New SqlParameter("@pAccountDisabled", SqlDbType.NVarChar) ' default 0
                sqlParms(22).Value = pArrUserDtls(24)
                sqlParms(23) = New SqlParameter("@pUserDN", SqlDbType.NVarChar) ' default 0
                sqlParms(23).Value = pArrUserDtls(25)
                sqlParms(24) = New SqlParameter("@pEnterpriseSystem", SqlDbType.NVarChar) ' default 0
                sqlParms(24).Value = _strEnterpriseSystem
                sqlParms(25) = New SqlParameter("@StatusCode", SqlDbType.Int)
                sqlParms(25).direction = ParameterDirection.Output

                If log.IsInfoEnabled Then

                    log.Info("Calling SP_CreateUpdateUser with the following syntax..")
                    Dim _strSQL As String = "DECLARE @P1 INT " & _
                                                   "SET @P1 = 0 " & vbCrLf & _
                                                   vbCrLf & _
                                                   "EXEC	" & _
                                                   "SP_CreateUpdateUser" & vbCrLf & _
                                                   "@pMode = N'" & sqlParms(0).Value & "'," & vbCrLf & _
                                                   "@pUserID = N'" & sqlParms(1).Value & "'," & vbCrLf & _
                                                   "@pPasswordRequired = N'" & sqlParms(2).Value & "'," & vbCrLf & _
                                                   "@pPassword = N'" & sqlParms(3).Value & "'," & vbCrLf & _
                                                   "@pTokenExpPeriod = N'" & sqlParms(4).Value & "'," & vbCrLf & _
                                                   "@pIdleTime = N'" & sqlParms(5).Value & "'," & vbCrLf & _
                                                   "@pFirstName = N'" & sqlParms(6).Value & "'," & vbCrLf & _
                                                   "@pLastName = N'" & sqlParms(7).Value & "'," & vbCrLf & _
                                                   "@pMiddleInitial = N'" & sqlParms(8).Value & "'," & vbCrLf & _
                                                   "@pEmailID = N'" & sqlParms(9).Value & "'," & vbCrLf & _
                                                   "@pPhone1 = N'" & sqlParms(10).Value & "'," & vbCrLf & _
                                                   "@pPhone2 = N'" & sqlParms(11).Value & "'," & vbCrLf & _
                                                   "@pFax = N'" & sqlParms(12).Value & "'," & vbCrLf & _
                                                   "@pPager = N'" & sqlParms(13).Value & "'," & vbCrLf & _
                                                   "@pOrgGroup = N'" & sqlParms(14).Value & "'," & vbCrLf & _
                                                   "@pProfile = N'" & sqlParms(15).Value & "'," & vbCrLf & _
                                                   "@pLdapUser = N'" & sqlParms(16).Value & "'," & vbCrLf & _
                                                   "@pLdapRole = N'" & sqlParms(17).Value & "'," & vbCrLf & _
                                                   "@pLdapOrg = N'" & sqlParms(18).Value & "'," & vbCrLf & _
                                                   "@pTimeRestrictions = N'" & sqlParms(19).Value & "'," & vbCrLf & _
                                                   "@pPwdResetReq = N'" & sqlParms(20).Value & "'," & vbCrLf & _
                                                   "@pLastUpdateUser  = N'" & sqlParms(21).Value & "'," & vbCrLf & _
                                                   "@pAccountDisabled = N'" & sqlParms(22).Value & "'," & vbCrLf & _
                                                   "@pUserDn = N'" & sqlParms(23).Value & "'," & vbCrLf & _
                                                   "@pEnterpriseSystem = N'" & sqlParms(24).Value & "'," & vbCrLf & _
                                                   "@StatusCode = @P1 output" & vbCrLf & _
                                                   vbCrLf & _
                                                   "SELECT	@P1 "
                    log.Info(_strSQL)
                End If

                Dim _Cmd As SqlCommand
                Try
                    _Cmd = New SqlCommand

                    _Cmd.Connection = m_LocalDB.CreateConnection
                    _Cmd.CommandType = CommandType.StoredProcedure
                    _Cmd.CommandText = "SP_CreateUpdateUser"
                    _Cmd.Parameters.Add(sqlParms(0))
                    _Cmd.Parameters.Add(sqlParms(1))
                    _Cmd.Parameters.Add(sqlParms(2))
                    _Cmd.Parameters.Add(sqlParms(3))
                    _Cmd.Parameters.Add(sqlParms(4))
                    _Cmd.Parameters.Add(sqlParms(5))
                    _Cmd.Parameters.Add(sqlParms(6))
                    _Cmd.Parameters.Add(sqlParms(7))
                    _Cmd.Parameters.Add(sqlParms(8))
                    _Cmd.Parameters.Add(sqlParms(9))
                    _Cmd.Parameters.Add(sqlParms(10))
                    _Cmd.Parameters.Add(sqlParms(11))
                    _Cmd.Parameters.Add(sqlParms(12))
                    _Cmd.Parameters.Add(sqlParms(13))
                    _Cmd.Parameters.Add(sqlParms(14))
                    _Cmd.Parameters.Add(sqlParms(15))
                    _Cmd.Parameters.Add(sqlParms(16))
                    _Cmd.Parameters.Add(sqlParms(17))
                    _Cmd.Parameters.Add(sqlParms(18))
                    _Cmd.Parameters.Add(sqlParms(19))
                    _Cmd.Parameters.Add(sqlParms(20))
                    _Cmd.Parameters.Add(sqlParms(21))
                    _Cmd.Parameters.Add(sqlParms(22))
                    _Cmd.Parameters.Add(sqlParms(23))
                    _Cmd.Parameters.Add(sqlParms(24))
                    _Cmd.Parameters.Add(sqlParms(25))

                    m_LocalDB.ExecuteNonQuery(_Cmd, _trans)

                Catch sqlex As SqlException
                    _trans.Rollback()
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & vbCrLf & GetSQLExceptionMessageString(sqlex))
                    Return ATPAR_E_LOCALDBSELECTFAIL
                Catch ex As Exception
                    _trans.Rollback()
                    If log.IsFatalEnabled Then log.Fatal("E_SERVERERROR :" & ex.ToString)
                    Return E_SERVERERROR
                Finally
                    _Cmd.dispose()
                End Try

                _StatusCode = sqlParms(25).Value
                If log.IsDebugEnabled Then log.Debug("_StatusCode for SP_CreateUpdateUser to UpdateUser" & _StatusCode)

                If _StatusCode = ATPAR_E_ORG_NOT_EXIST Then
                    _trans.Rollback()
                    Return ATPAR_E_ORG_NOT_EXIST
                ElseIf _StatusCode = ATPAR_E_PROFILE_NOT_EXIST Then
                    _trans.Rollback()
                    Return ATPAR_E_PROFILE_NOT_EXIST
                ElseIf _StatusCode <> ATPAR_OK Then
                    _trans.Rollback()
                    Return ATPAR_E_LOCALDBUPDATEFAIL
                End If

            Catch ex As Exception
                _trans.Rollback()
                If log.IsFatalEnabled Then log.Fatal("User updation failed " & ex.ToString)
                Return ATPAR_E_LOCALDBUPDATEFAIL
            End Try
            ' End If
            'set user parameters
            Try
                _StatusCode = SetUserParam(pRow, pArrUserDtls(0), String.Empty, String.Empty, pDeviceTokenEntry, _trans)
                If _StatusCode <> ATPAR_OK Then
                    _trans.Rollback()
                    Return ATPAR_E_LOCALDBUPDATEFAIL
                End If
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal("User updation failed " & ex.ToString)
                Return ATPAR_E_LOCALDBUPDATEFAIL
                Exit Function
            End Try
            _trans.Commit()
            Return ATPAR_OK
        Catch ex As Exception
            _trans.Rollback()
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in " & methodBaseName & " is...." & vbCrLf & ex.ToString)
            Return E_SERVERERROR
        Finally
            sqlConnect.close()
        End Try

    End Function

    Private Function ValidateUserData(ByVal dr As DataRow) As String

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            Dim strChars As String = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
            Dim strNumbers As String = "0123456789"
            Dim strYN As String = "YN"
            Dim strValid As String = String.Empty
            Dim ch As String = String.Empty
            Dim strCtrlText As String = String.Empty
            Dim strErrMsg As String = String.Empty
            Dim _strName() As String

            'User ID
            strCtrlText = Trim(dr.Item("USER_ID").ToString)
            If strCtrlText = "admin" Then
                strErrMsg = " You are not authorised to change the user  " & strCtrlText
                If log.IsDebugEnabled Then log.Debug(strErrMsg)
                Return strErrMsg
            End If
            If strCtrlText.ToString.StartsWith("_") Then
                strErrMsg = " Underscore is not allowed as a first character in User ID , User Creation Failed for UserID  " & dr.Item(0).ToString
                If log.IsDebugEnabled Then log.Debug(strErrMsg)
                Return strErrMsg
            End If
            strValid = strChars & strNumbers & "_"
            For intCnt As Integer = 0 To strCtrlText.Length - 1
                ch = strCtrlText(intCnt)
                If strValid.IndexOf(ch) = -1 Then
                    strErrMsg = " Only characters, numbers or underscore is allowed in User ID , User Creation Failed for UserID  " & dr.Item(0).ToString
                    If log.IsDebugEnabled Then log.Debug(strErrMsg)
                    Return strErrMsg
                End If
            Next

            If (dr.Item("LDAP").ToString = "N") Then
                _strName = Split(dr.Item("USER_DETAIL").ToString, ",")
                If _strName.Length < 2 Then
                    strErrMsg = " First Name and Last Name are Mandatory " & dr.Item(0).ToString
                    If log.IsDebugEnabled Then log.Debug(strErrMsg)
                    Return strErrMsg
                End If
                'first name
                strCtrlText = _strName(0).ToString
                strValid = strChars & strNumbers & "_"
                For intCnt As Integer = 0 To strCtrlText.Length - 1
                    ch = strCtrlText(intCnt)
                    If strValid.IndexOf(ch) = -1 Then
                        strErrMsg = " Only characters, numbers or underscore is allowed in first name , User Creation Failed for UserID  " & dr.Item(0).ToString
                        If log.IsDebugEnabled Then log.Debug(strErrMsg)
                        Return strErrMsg
                    End If
                Next

                'last name
                strCtrlText = _strName(1).ToString
                strValid = strChars & strNumbers & "_"
                For intCnt As Integer = 0 To strCtrlText.Length - 1
                    ch = strCtrlText(intCnt)
                    If strValid.IndexOf(ch) = -1 Then
                        strErrMsg = " Only characters, numbers or underscore is allowed in last name , User Creation Failed for UserID  " & dr.Item(0).ToString
                        If log.IsDebugEnabled Then log.Debug(strErrMsg)
                        Return strErrMsg
                    End If
                Next
                strCtrlText = Trim(dr.Item("PASS_REQ").ToString)
                If strCtrlText = String.Empty Then
                    strErrMsg = " Enter Y Or N,If Ldap User is N in Password Required Field , User Creation Failed for UserID  " & dr.Item(0).ToString
                    If log.IsDebugEnabled Then log.Debug(strErrMsg)
                    Return strErrMsg
                End If

                strCtrlText = Trim(dr.Item("PASS_RESET").ToString)
                If strCtrlText = String.Empty Then
                    strErrMsg = " Enter Y Or N,If Ldap User is N in Password Reset Required Field , User Creation Failed for UserID  " & dr.Item(0).ToString
                    If log.IsDebugEnabled Then log.Debug(strErrMsg)
                    Return strErrMsg
                End If
            End If
            'Org Group ID
            strCtrlText = Trim(dr.Item("ORG_GROUP").ToString)
            If Not strCtrlText = String.Empty Then
                If strCtrlText.ToString.StartsWith("_") Then
                    strErrMsg = " Underscore is not allowed as a first character in Org Group ID  , User Creation Failed for UserID  " & dr.Item(0).ToString
                    If log.IsDebugEnabled Then log.Debug(strErrMsg)
                    Return strErrMsg
                End If
                strValid = strChars & strNumbers & "_"
                For intCnt As Integer = 0 To strCtrlText.Length - 1
                    ch = strCtrlText(intCnt)
                    If strValid.IndexOf(ch) = -1 Then
                        strErrMsg = " Only characters, numbers or underscore is allowed Org Group ID  , User Creation Failed for UserID  " & dr.Item(0).ToString
                        If log.IsDebugEnabled Then log.Debug(strErrMsg)
                        Return strErrMsg
                    End If
                Next
            End If

            'Ldap User - allow Y OR N
            strCtrlText = Trim(dr.Item("LDAP").ToString)
            strValid = strYN
            For intCnt As Integer = 0 To strCtrlText.Length - 1
                ch = strCtrlText(intCnt)
                If strValid.IndexOf(ch) = -1 Then
                    strErrMsg = " Only Y or N is allowed in Ldap User , User Creation Failed for UserID  " & dr.Item(0).ToString
                    If log.IsDebugEnabled Then log.Debug(strErrMsg)
                    Return strErrMsg
                End If
            Next

            'Password Required - allow Y OR N
            strCtrlText = Trim(dr.Item("PASS_REQ").ToString)
            If Not strCtrlText = String.Empty Then
                strValid = strYN
                For intCnt As Integer = 0 To strCtrlText.Length - 1
                    ch = strCtrlText(intCnt)
                    If strValid.IndexOf(ch) = -1 Then
                        strErrMsg = " Only Y or N is allowed in Password Required filed , User Creation Failed for UserID  " & dr.Item(0).ToString
                        If log.IsDebugEnabled Then log.Debug(strErrMsg)
                        Return strErrMsg
                    End If
                Next
            End If

            'Password Reset Required - allow Y OR N
            strCtrlText = Trim(dr.Item("PASS_RESET").ToString)
            If Not strCtrlText = String.Empty Then
                strValid = strYN
                For intCnt As Integer = 0 To strCtrlText.Length - 1
                    ch = strCtrlText(intCnt)
                    If strValid.IndexOf(ch) = -1 Then
                        strErrMsg = " Only Y or N is allowed in Password Reset Required filed , User Creation Failed for UserID  " & dr.Item(0).ToString
                        If log.IsDebugEnabled Then log.Debug(strErrMsg)
                        Return strErrMsg
                    End If
                Next
            End If

            'Idle Time
            strCtrlText = Trim(dr.Item("IDLE_TIME").ToString)
            If strCtrlText.Length - 1 > 3 Then
                strErrMsg = strErrMsg & "Maximum Length of Idle Time is 4 , User Creation Failed for UserID  " & dr.Item(0).ToString
                If log.IsDebugEnabled Then log.Debug(strErrMsg)
                Return strErrMsg
            ElseIf strCtrlText = "0" Then
                strErrMsg = strErrMsg & "Idle Time must be greater than 0 , User Creation Failed for UserID  " & dr.Item(0).ToString
                If log.IsDebugEnabled Then log.Debug(strErrMsg)
                Return strErrMsg
            Else
                For intCnt As Integer = 0 To strCtrlText.Length - 1
                    ch = strCtrlText(intCnt)
                    If strNumbers.IndexOf(ch) = -1 Then
                        strErrMsg = strErrMsg & " Only numbers are allowed in Idle Time , User Creation Failed for UserID  " & dr.Item(0).ToString
                        If log.IsDebugEnabled Then log.Debug(strErrMsg)
                        Return strErrMsg
                    End If
                Next
            End If

            'Session Time
            strCtrlText = Trim(dr.Item("SESSION_TIME").ToString)
            If strCtrlText.Length - 1 > 3 Then
                strErrMsg = strErrMsg & "Maximum Length of Session Time is 4 , User Creation Failed for UserID  " & dr.Item(0).ToString
                If log.IsDebugEnabled Then log.Debug(strErrMsg)
                Return strErrMsg
            ElseIf strCtrlText = "0" Then
                strErrMsg = strErrMsg & "Session Validity Time must be greater than 0 , User Creation Failed for UserID  " & dr.Item(0).ToString
                If log.IsDebugEnabled Then log.Debug(strErrMsg)
                Return strErrMsg
            Else
                For intCnt As Integer = 0 To strCtrlText.Length - 1
                    ch = strCtrlText(intCnt)
                    If strNumbers.IndexOf(ch) = -1 Then
                        strErrMsg = strErrMsg & " Only numbers are allowed in Session Time , User Creation Failed for UserID  " & dr.Item(0).ToString
                        If log.IsDebugEnabled Then log.Debug(strErrMsg)
                        Return strErrMsg
                    End If
                Next
            End If

            'Profile ID
            strCtrlText = Trim(dr.Item("PROFILE_ID").ToString)
            If strCtrlText.ToString.StartsWith("_") Then
                strErrMsg = " Underscore is not allowed as a first character in Profile ID  , User Creation Failed for UserID  " & dr.Item(0).ToString
                If log.IsDebugEnabled Then log.Debug(strErrMsg)
                Return strErrMsg
            End If
            strValid = strChars & strNumbers & "_" & "-"
            For intCnt As Integer = 0 To strCtrlText.Length - 1
                ch = strCtrlText(intCnt)
                If strValid.IndexOf(ch) = -1 Then
                    strErrMsg = " Only characters, numbers or underscore and " & "-" & "is allowed Profile ID  , User Creation Failed for UserID  " & dr.Item(0).ToString
                    If log.IsDebugEnabled Then log.Debug(strErrMsg)
                    Return strErrMsg
                End If
            Next

            'JOB ID
            strCtrlText = Trim(dr.Item("JOB_ID").ToString)
            If strCtrlText.ToString.StartsWith("_") Then
                strErrMsg = " Underscore is not allowed as a first character in JOB ID  , User Creation Failed for UserID  " & dr.Item(0).ToString
                If log.IsDebugEnabled Then log.Debug(strErrMsg)
                Return strErrMsg
            End If
            strValid = strChars & strNumbers & "_"
            For intCnt As Integer = 0 To strCtrlText.Length - 1
                ch = strCtrlText(intCnt)
                If strValid.IndexOf(ch) = -1 Then
                    strErrMsg = " Only characters, numbers or underscore is allowed JOB ID  , User Creation Failed for UserID  " & dr.Item(0).ToString
                    If log.IsDebugEnabled Then log.Debug(strErrMsg)
                    Return strErrMsg
                End If
            Next
            '15_MENU_ACCESS(POU)
            If dr.Table.Columns.Contains("15_MENU_ACCESS") Then
                strCtrlText = Trim(dr.Item("15_MENU_ACCESS").ToString)
                If String.IsNullOrEmpty(strCtrlText) Then
                    strErrMsg = "  Menu Access is Mandatory : " & dr.Item("15_MENU_ACCESS").ToString
                    If log.IsDebugEnabled Then log.Debug(strErrMsg)
                    Return strErrMsg
                End If
            End If
            '2_REQUESTOR_ID
            If dr.Table.Columns.Contains(EnumApps.CartCount & "_" & AppParameters_Enum.REQUESTOR_ID.ToString) Then
                strCtrlText = Trim(dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.REQUESTOR_ID.ToString).ToString)
                If Not String.IsNullOrEmpty(strCtrlText) Then
                    strValid = strChars & strNumbers & "_"
                    For intCnt As Integer = 0 To strCtrlText.Length - 1
                        ch = strCtrlText(intCnt)
                        If strValid.IndexOf(ch) = -1 Then
                            strErrMsg = " Only characters, numbers or underscore is allowed Requestor : " & dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.REQUESTOR_ID.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                    Next
                    If strCtrlText.Length > 50 Then
                        strErrMsg = " Number of characters cannot be more than 50 For Parameter Requestor ID : " & dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.REQUESTOR_ID.ToString).ToString
                        If log.IsDebugEnabled Then log.Debug(strErrMsg)
                        Return strErrMsg
                    End If
                End If
            End If
            '4_PRINTER_ADDRESS
            If dr.Table.Columns.Contains(EnumApps.Receiving & "_" & AppParameters_Enum.PRINTER_ADDRESS.ToString) Then
                strCtrlText = Trim(dr.Item(EnumApps.Receiving & "_" & AppParameters_Enum.PRINTER_ADDRESS.ToString).ToString)
                If Not String.IsNullOrEmpty(strCtrlText) Then
                    strValid = strChars & strNumbers & "_"
                    For intCnt As Integer = 0 To strCtrlText.Length - 1
                        ch = strCtrlText(intCnt)
                        If strValid.IndexOf(ch) = -1 Then
                            strErrMsg = " Only characters, numbers or underscore is allowed Printer Address : " & dr.Item(EnumApps.Receiving & "_" & AppParameters_Enum.PRINTER_ADDRESS.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                    Next
                End If
            End If
            '10_DEFAULT_COMPANY
            If dr.Table.Columns.Contains(EnumApps.StockIssue & "_" & AppParameters_Enum.DEFAULT_COMPANY.ToString) Then
                strCtrlText = Trim(dr.Item(EnumApps.StockIssue & "_" & AppParameters_Enum.DEFAULT_COMPANY.ToString).ToString)
                If Not String.IsNullOrEmpty(strCtrlText) Then
                    strValid = strChars & strNumbers & "_"
                    For intCnt As Integer = 0 To strCtrlText.Length - 1
                        ch = strCtrlText(intCnt)
                        If strValid.IndexOf(ch) = -1 Then
                            strErrMsg = " Only characters, numbers or underscore is allowed Default Company : " & dr.Item(EnumApps.StockIssue & "_" & AppParameters_Enum.DEFAULT_COMPANY.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                    Next
                End If
            End If
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in " & methodBaseName & ", User Creation Failed for UserID  " & dr.Item(0).ToString & " is..." & vbCrLf & ex.ToString)
            Return "E_SERVERERROR"
        End Try

    End Function

    Private Function CheckLDAPUser(ByVal pUserID As String, ByRef pblnLDAPCheck As Boolean) As Long

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserID
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)
        Dim strLDAP As String = String.Empty
        Dim _strSQL As String = String.Empty

        Try
            _strSQL = "SELECT LDAP_USER FROM MT_ATPAR_USER WHERE USER_ID='" & pUserID & "'"

            If log.IsInfoEnabled Then log.Info(_strSQL)

            strLDAP = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(_strSQL))
            If (strLDAP = "Y") Then
                pblnLDAPCheck = True
            Else
                pblnLDAPCheck = False
            End If
            If log.IsDebugEnabled Then log.Debug(methodBaseName & " strLDAP  " & strLDAP)
            Return ATPAR_OK
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " call failed " & ex.ToString)
            Return ATPAR_E_LOCALDBSELECTFAIL
        End Try

    End Function

    Private Function SetUserParam(ByVal pRow As DataRow, _
                          ByVal pUserId As String, _
                          ByVal pStrClientAddress As String, _
                          ByVal pstrUpdateUser As String, _
                          ByVal pDeviceTokenEntry() As String, Optional ByVal _trans As SqlTransaction = Nothing) As Long


        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strSQL As String = String.Empty

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            Dim strParamVal As String = String.Empty
            Dim strParamID As String = String.Empty

            For Each dc As DataColumn In pRow.Table.Columns
                Dim strName As String = dc.ColumnName.ToString
                Dim strAppID As String = dc.ColumnName.ToString

                If strName = "USER_ID" Or strName = "LOC_ID" Or strName = "B_UNIT" Or strName = "USER_DETAIL" Or strName = "ORG_GROUP" Or strName = "LDAP" Or strName = "PASS_REQ" _
                                     Or strName = "PASS_RESET" Or strName = "PASS_LDAP" Or strName = "IDLE_TIME" Or strName = "SESSION_TIME" _
                                    Or strName = "PROFILE_ID" Or strName = "JOB_ID" Then
                    Continue For
                Else
                    strName = strName.Substring(strName.IndexOf("_") + 1)
                    strAppID = strAppID.Substring(0, strAppID.IndexOf("_"))

                    _strSQL = String.Empty

                    _strSQL = "UPDATE MT_ATPAR_USER_APP_PARAMETERS SET " & _
                     "PARAMETER_VALUE = '" & pRow.Item(dc.ColumnName.ToString).ToString & "', " & _
                     "LAST_UPDATE_DATE = '" & Now() & "', LAST_UPDATE_USER='" & pstrUpdateUser & "', LAST_CLIENT_ADDRESS='" & pStrClientAddress & "' " & _
                     "WHERE APP_ID=" & strAppID & " AND USER_ID='" & pUserId & "' AND PARAMETER_ID = '" & strName & "'"

                    If log.IsInfoEnabled Then log.Info(_strSQL)
                    If Not _trans Is Nothing Then
                        m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), _trans)
                    Else
                        m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL))
                    End If
                End If
            Next



        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to save  User parameters " & vbCrLf & _
                                                           " with the following SQL :" & _strSQL & vbCrLf & _
                                                           " Exception is:" & ex.ToString & vbCrLf)
            SetUserParam = ATPAR_E_LOCALDBSELECTFAIL
            Exit Function
        End Try
        SetUserParam = ATPAR_OK
    End Function

#End Region

#Region "    OrgGroup Upload"



    ''' <summary>
    ''' Used to Upload Org Group Data 
    ''' </summary>
    ''' <param name="pSvrUserID">User ID</param>
    ''' <param name="pdsOrgGroupData">Org Parameters Dataset</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Private Function Do_UploadOrgGroupData_Flow(ByVal pSvrUserID As String, ByRef pdsOrgGroupData As DataSet, ByVal pDeviceTokenEntry() As String) As Long

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pSvrUserID
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)
        Dim count As Integer = 1
        'Error Messages to Displaying on UI WebPage
        Const CONST_ORG_NOT_EXIST = "Org Group ID Does Not Exist"
        Const CONST_ORG_PARAM_CREATION_FAILED = "Org Parameters Updation Failed"
        Const CONST_ORGGROUP_CREATION_SUCESS = "Org Group Created Successfully"
        Const CONST_ORGGROUP_CREATION_FAILED = "Org Group Creation Failed"
        Const CONST_ORGGROUP_UPDATION_FAILED = "Org Group Updation Failed"
        Const CONST_ORGGROUP_UPDATION_SUCESS = "Org Group Updated Successfully"
        Const CONST_INVALID_DATA = "Org Creation Failed, Invalid Data"
        Const CONST_BUNIT_INVALID_DATA = "Org Creation Failed, BusinessUnit Should be Unique, Invalid Data"


        Try
            Dim _StatusCode As Long = -1
            Dim intCnt As Int16
            Dim _sbErrorString As New StringBuilder
            Dim _sbWarningString As New StringBuilder
            Dim _blnMandatory As Boolean = False
            Dim StrErrorMsg As String
            Dim pMode As String = String.Empty
            Dim _strParameterTemplateID As String
            Dim _strValidInput As String
            Dim _strOrgGroupId As String
            Dim _dsOrgData As DataSet
            Dim dtOrgParameters As DataTable
            Dim _dsAppID As DataSet
            Dim _strSQL As String = String.Empty
            Dim strChars As String = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
            Dim strNumbers As String = "0123456789"
            Dim strValid As String = String.Empty
            Dim ch As String = String.Empty
            Dim strCtrlText As String = String.Empty
            Dim strErrMsg As String = String.Empty
            Dim _blnIsMandatoryFlag As Boolean = False
            Dim _blnIsAddModeFlag As Boolean = False
            Dim _strErrName As String = String.Empty
            Dim objAtparUserMgmt As New AtPar_UserManagement
            Dim _strOrgId As String = String.Empty
            Dim dsBunits As DataSet = New DataSet

            Try
                If pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupParams.ToString).Rows.Count = 0 Then
                    Return E_NORECORDFOUND
                Else
                    Dim dRow As DataRow = pdsOrgGroupData.Tables(Enum_OrgGroupData.SUMMARY.ToString).NewRow()
                    pdsOrgGroupData.Tables(Enum_OrgGroupData.SUMMARY.ToString).Rows.Add(dRow)
                    'To get unique orggroupid 
                    Dim dv As New DataView(pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupBU.ToString))
                    Dim dtGroup As DataTable = dv.ToTable(True, New String() {"OrgGroupID"})
                    'end  To get unique orggroupid  
                    pdsOrgGroupData.Tables(Enum_OrgGroupData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.TOTAL_REC_CNT) = dtGroup.Rows.Count
                    'pdsOrgGroupData.Tables(Enum_OrgGroupData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.TOTAL_REC_CNT) = pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupParams.ToString).Rows.Count - 1
                    pdsOrgGroupData.Tables(Enum_OrgGroupData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.SUCCESS_CNT) = 0
                    pdsOrgGroupData.Tables(Enum_OrgGroupData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.FAILURE_CNT) = 0
                    pdsOrgGroupData.Tables(Enum_OrgGroupData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.ADDED_CNT) = 0
                    pdsOrgGroupData.Tables(Enum_OrgGroupData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.UPDATED_CNT) = 0

                End If
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal("Exception Thrown while Creating DataRow in Summary Table is.." & vbCrLf & ex.ToString)
                Return E_SERVERERROR
            End Try

            'ValidatingColumnNames 
            Try
                _strErrName = ValidateOrgColumnNames(pdsOrgGroupData)

                If log.IsDebugEnabled Then log.Debug("Invalid Parameter" & _strErrName)

                If _strErrName <> String.Empty Then
                    pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_NOT_VALID_PARAMETER & _strErrName
                End If
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal("Exception Thrown in ValidColumnNames " & methodBaseName & " is...." & vbCrLf & ex.ToString)
                Return E_SERVERERROR
            End Try

            'Getting Products List
            Try
                _StatusCode = GetApps(_dsAppID, pSvrUserID, pDeviceTokenEntry)
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal("Exception Thrown in Getting Products list " & methodBaseName & " is..." & vbCrLf & ex.ToString)
                Return E_SERVERERROR
            End Try

            Dim _trans As SqlTransaction
            sqlConnect = m_LocalDB.CreateConnection()
            sqlConnect.Open()
            _trans = sqlConnect.BeginTransaction()

            With pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupParams.ToString)
                For intCnt = 2 To .Rows.Count - 1

                    _strValidInput = String.Empty
                    _strOrgGroupId = String.Empty
                    _dsOrgData = New DataSet
                    _blnIsAddModeFlag = False

                    Try
                        'Check if all the required fields have values in Org-BU Table or not
                        ' First Mandatory Check and Validating Parameter Template Id
                        If Trim(.Rows(intCnt).Item("PARAMETER_TEMPLATE_ID").ToString) = String.Empty Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Parameter Template Id")
                            End If
                            _blnMandatory = True
                        End If
                        If _blnMandatory Then
                            _sbErrorString.Append(" is Mandatory Field")
                            pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = _sbErrorString.ToString
                            _sbErrorString = Nothing
                            _sbErrorString = New StringBuilder
                            _blnMandatory = False
                            Continue For
                        Else
                            _sbErrorString = Nothing
                            _sbErrorString = New StringBuilder
                        End If

                        'PARAMETER_TEMPLATE_ID VALIDATION
                        strErrMsg = String.Empty
                        strCtrlText = Trim(.Rows(intCnt).Item("PARAMETER_TEMPLATE_ID").ToString)
                        strValid = strChars & strNumbers & "_"
                        If strCtrlText.ToString.StartsWith("_") Then
                            strErrMsg = " Underscore is not allowed as a first character in Parameter template ID   " & .Rows(intCnt).Item(0).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                        End If
                        If strCtrlText.Length > 20 Then
                            strErrMsg = "  Number of characters cannot be more than 20 For Parameter template ID " & .Rows(intCnt).Item(0).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                        End If
                        For i As Integer = 0 To strCtrlText.Length - 1
                            ch = strCtrlText(i)
                            If strValid.IndexOf(ch) = -1 Then
                                strErrMsg = " Only characters, numbers or underscore is allowed  For Parameter template ID   " & .Rows(intCnt).Item(0).ToString
                                If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            End If
                        Next
                        If strErrMsg <> String.Empty Then
                            pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = strErrMsg
                            Continue For
                        End If

                        _strParameterTemplateID = Trim(.Rows(intCnt).Item("PARAMETER_TEMPLATE_ID").ToString)

                        If log.IsDebugEnabled Then log.Debug("_strParameterTemplateID" & _strParameterTemplateID)
                        Dim _drSelectedParam() As DataRow
                        Try
                            If pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupBU.ToString).Rows.Count > 0 Then
                                _drSelectedParam = pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupBU.ToString).Select("ParameterTemplateID='" & _strParameterTemplateID & "'")
                            End If

                            If log.IsDebugEnabled Then log.Debug("_drSelectedParam" & _drSelectedParam.Length)


                        Catch ex As Exception
                            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in _drSelectedParam BUtable " & methodBaseName & " is..." & vbCrLf & ex.ToString)
                            Return E_SERVERERROR
                        End Try

                        If _drSelectedParam.Length > 0 Then
                            _StatusCode = objAtparUserMgmt.GetOrgBUnits(pDeviceTokenEntry(TokenEntry_Enum.UserID), _strOrgId, dsBunits, pDeviceTokenEntry)
                            For Each _dr As DataRow In _drSelectedParam
                                _strValidInput = String.Empty
                                If _dr.Item(Enum_OrgGroupBU.OrgGroupID) Is DBNull.Value Then
                                    If _sbErrorString.ToString = String.Empty Then
                                        _sbErrorString.Append("Org Group ID ")
                                    Else
                                        _sbErrorString.Append(", Org Group ID ")
                                    End If
                                    _blnMandatory = True
                                End If
                                If _dr.Item(Enum_OrgGroupBU.OrgGroupDescr) Is DBNull.Value Then
                                    If _sbErrorString.ToString = String.Empty Then
                                        _sbErrorString.Append("Org Group Descr ")
                                    Else
                                        _sbErrorString.Append(", Org Group Descr ")
                                    End If
                                    _blnMandatory = True
                                End If
                                If _dr.Item(Enum_OrgGroupBU.BusinessUnit) Is DBNull.Value Then
                                    If _sbErrorString.ToString = String.Empty Then
                                        _sbErrorString.Append("Business Unit ")
                                    Else
                                        _sbErrorString.Append(", Business Unit ")
                                    End If
                                    _blnMandatory = True
                                End If
                                If _dr.Item(Enum_OrgGroupBU.BusinessUnitType) Is DBNull.Value Then
                                    If _sbErrorString.ToString = String.Empty Then
                                        _sbErrorString.Append("Business Unit Type ")
                                    Else
                                        _sbErrorString.Append(", Business Unit Type ")
                                    End If
                                    _blnMandatory = True
                                End If
                                If _dr.Item(Enum_OrgGroupBU.ParameterTemplateID) Is DBNull.Value Then
                                    If _sbErrorString.ToString = String.Empty Then
                                        _sbErrorString.Append("Parameter Template ID ")
                                    Else
                                        _sbErrorString.Append(", Parameter Template ID ")
                                    End If
                                    _blnMandatory = True
                                End If
                                If _blnMandatory Then
                                    If _sbErrorString.ToString.Contains(",") Then
                                        _sbErrorString.Append(" are Mandatory Fields")
                                    Else
                                        _sbErrorString.Append(" is Mandatory Field")
                                    End If
                                    pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = _sbErrorString.ToString
                                    _blnIsMandatoryFlag = True
                                    _sbErrorString = Nothing
                                    _sbErrorString = New StringBuilder
                                    _blnMandatory = False
                                    Exit For
                                Else
                                    _blnIsMandatoryFlag = False
                                    _sbErrorString = Nothing
                                    _sbErrorString = New StringBuilder
                                End If
                                'ValidateOrgData
                                Try
                                    _strValidInput = ValidateOrgData(_dr, dsBunits)
                                    If Not _strValidInput = String.Empty Then
                                        pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = _strValidInput
                                        _blnIsMandatoryFlag = True
                                        Exit For
                                    End If
                                Catch ex As Exception
                                    pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_ORGGROUP_CREATION_FAILED
                                    If log.IsFatalEnabled Then log.Fatal("Exception Thrown in ValidateOrgData " & methodBaseName & " is...." & vbCrLf & ex.ToString)
                                    Continue For
                                End Try
                            Next
                        End If

                        If _blnIsMandatoryFlag = True Then
                            Continue For
                        End If

                    Catch ex As Exception
                        If log.IsFatalEnabled Then log.Fatal("Exception Thrown in Checking Mandatatory Fields in BUtable" & methodBaseName & " is..." & vbCrLf & ex.ToString)
                        Return E_SERVERERROR
                    Finally
                        dsBunits = Nothing
                    End Try

                    'Check Mandatatory fields  for org Parameters table
                    'CartCount

                    If _dsAppID.Tables(0).Select("APP_ID='" & EnumApps.CartCount & "'").Length > 0 Then
                        If .Columns.Contains(EnumApps.CartCount & "_" & AppParameters_Enum.DEFAULT_MFG_ITEM_ID.ToString) Then
                            If .Rows(intCnt).Item(EnumApps.CartCount & "_" & AppParameters_Enum.DEFAULT_MFG_ITEM_ID.ToString).ToString = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Cart Count Default Manufacturer Item ID")
                                Else
                                    _sbErrorString.Append(", Cart Count Default Manufacturer Item ID")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.CartCount & "_" & AppParameters_Enum.ITEM_DESCR.ToString) Then
                            If .Rows(intCnt).Item(EnumApps.CartCount & "_" & AppParameters_Enum.ITEM_DESCR.ToString).ToString = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Cart Count Item Description Option on HHT")
                                Else
                                    _sbErrorString.Append(", Cart Count Item Description Option on HHT")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.CartCount & "_" & AppParameters_Enum.ITEM_PRICE.ToString) Then
                            If .Rows(intCnt).Item(EnumApps.CartCount & "_" & AppParameters_Enum.ITEM_PRICE.ToString).ToString = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Cart Count Item Price Option on HHT ")
                                Else
                                    _sbErrorString.Append(", Cart Count Item Price Option on HHT ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        'QTY_ROUND_TYPE
                        If .Columns.Contains(EnumApps.CartCount & "_" & AppParameters_Enum.QTY_ROUND_TYPE.ToString) Then
                            If .Rows(intCnt).Item(EnumApps.CartCount & "_" & AppParameters_Enum.QTY_ROUND_TYPE.ToString).ToString = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Cart Count Order Qty Rounding Option ")
                                Else
                                    _sbErrorString.Append(", Cart Count Order Qty Rounding Option ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        ' FACTOR_OF_SAFETY
                        If .Columns.Contains(EnumApps.CartCount & "_" & AppParameters_Enum.FACTOR_OF_SAFETY.ToString) Then
                            If .Rows(intCnt).Item(EnumApps.CartCount & "_" & AppParameters_Enum.FACTOR_OF_SAFETY.ToString).ToString = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Cart Count Factor of safety percentage(%) for recommended par ")
                                Else
                                    _sbErrorString.Append(", Cart Count Factor of safety percentage(%) for recommended par ")
                                End If
                                _blnMandatory = True
                            End If
                        End If

                    End If

                    'Cycle Count
                    If _dsAppID.Tables(0).Select("APP_ID='" & EnumApps.CycleCount & "'").Length > 0 Then
                        If .Columns.Contains(EnumApps.CycleCount & "_" & AppParameters_Enum.DEFAULT_MFG_ITEM_ID.ToString) Then
                            If .Rows(intCnt).Item(EnumApps.CycleCount & "_" & AppParameters_Enum.DEFAULT_MFG_ITEM_ID.ToString).ToString = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Cycle Count Default Manufacturer Item ID ")
                                Else
                                    _sbErrorString.Append(", Cycle Count Default Manufacturer Item ID ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.CycleCount & "_" & AppParameters_Enum.ITEM_DESCR.ToString) Then
                            If .Rows(intCnt).Item(EnumApps.CycleCount & "_" & AppParameters_Enum.ITEM_DESCR.ToString).ToString = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Cycle Count Item Description ")
                                Else
                                    _sbErrorString.Append(", Cycle Count Item Description ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.CycleCount & "_" & AppParameters_Enum.ITEM_PRICE.ToString) Then

                            If .Rows(intCnt).Item(EnumApps.CycleCount & "_" & AppParameters_Enum.ITEM_PRICE.ToString).ToString = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Cycle Count Item Price Option on HHT ")
                                Else
                                    _sbErrorString.Append(", Cycle Count Item Price Option on HHT ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                    End If

                    'Receiving
                    If _dsAppID.Tables(0).Select("APP_ID='" & EnumApps.Receiving & "'").Length > 0 Then
                        If .Columns.Contains(EnumApps.Receiving & "_" & AppParameters_Enum.ALT_UOM_DISPLAY_OPT.ToString) Then

                            If .Rows(intCnt).Item(EnumApps.Receiving & "_" & AppParameters_Enum.ALT_UOM_DISPLAY_OPT.ToString).ToString = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Receiving Alternate UOM display in HHT ")
                                Else
                                    _sbErrorString.Append(", Receiving Alternate UOM display in HHT ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.Receiving & "_" & AppParameters_Enum.ASN_DOWNLOAD_BY.ToString) Then

                            If .Rows(intCnt).Item(EnumApps.Receiving & "_" & AppParameters_Enum.ASN_DOWNLOAD_BY.ToString).ToString = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Receiving ASN/ASR Receipt by InvoiceNo or PackSlipNo ")
                                Else
                                    _sbErrorString.Append(", Receiving ASN/ASR Receipt by InvoiceNo or PackSlipNo ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.Receiving & "_" & AppParameters_Enum.ASN_RECEIPT_STATUS.ToString) Then

                            If .Rows(intCnt).Item(EnumApps.Receiving & "_" & AppParameters_Enum.ASN_RECEIPT_STATUS.ToString).ToString = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Receiving ASN Receipt status after EDI ASN/ASR loaded in ERP ")
                                Else
                                    _sbErrorString.Append(", Receiving ASN Receipt status after EDI ASN/ASR loaded in ERP ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.Receiving & "_" & AppParameters_Enum.DEFAULT_MFG_ITEM_ID.ToString) Then

                            If .Rows(intCnt).Item(EnumApps.Receiving & "_" & AppParameters_Enum.DEFAULT_MFG_ITEM_ID.ToString).ToString = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Receiving Default Manufacturer Item ID ")
                                Else
                                    _sbErrorString.Append(", Receiving Default Manufacturer Item ID ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.Receiving & "_" & AppParameters_Enum.ITEM_DESCR.ToString) Then

                            If .Rows(intCnt).Item(EnumApps.Receiving & "_" & AppParameters_Enum.ITEM_DESCR.ToString).ToString = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Receiving Item Description Option ")
                                Else
                                    _sbErrorString.Append(", Receiving Item Description Option ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.Receiving & "_" & AppParameters_Enum.ITEM_PRICE.ToString) Then

                            If .Rows(intCnt).Item(EnumApps.Receiving & "_" & AppParameters_Enum.ITEM_PRICE.ToString).ToString = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Receiving Item Price Option on HHT ")
                                Else
                                    _sbErrorString.Append(", Receiving Item Price Option on HHT ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.Receiving & "_" & AppParameters_Enum.MAX_NO_OF_REC_DOWNLOAD.ToString) Then

                            If Trim(.Rows(intCnt).Item(EnumApps.Receiving & "_" & AppParameters_Enum.MAX_NO_OF_REC_DOWNLOAD.ToString).ToString) = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Receiving Max Number of Records to download ")
                                Else
                                    _sbErrorString.Append(", Receiving Max Number of Records to download ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.Receiving & "_" & AppParameters_Enum.PS_USER.ToString) Then

                            If Trim(.Rows(intCnt).Item(EnumApps.Receiving & "_" & AppParameters_Enum.PS_USER.ToString).ToString) = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Receiving User ID ")
                                Else
                                    _sbErrorString.Append(", Receiving User ID ")
                                End If
                                _blnMandatory = True
                            End If
                        End If

                        If .Columns.Contains(EnumApps.Receiving & "_" & AppParameters_Enum.SEARCH_BY_DUE_OR_PO_DATE.ToString) Then

                            If Trim(.Rows(intCnt).Item(EnumApps.Receiving & "_" & AppParameters_Enum.SEARCH_BY_DUE_OR_PO_DATE.ToString).ToString) = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Receiving Search POs by PO creation or Due date ")
                                Else
                                    _sbErrorString.Append(", Receiving Search POs by PO creation or Due date ")
                                End If
                                _blnMandatory = True
                            End If
                        End If

                        If .Columns.Contains(EnumApps.Receiving & "_" & AppParameters_Enum.LOT_SERIAL_ENABLED.ToString) Then

                            If Trim(.Rows(intCnt).Item(EnumApps.Receiving & "_" & AppParameters_Enum.LOT_SERIAL_ENABLED.ToString).ToString) = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Receiving Enable Lot /Serial Tracking ")
                                Else
                                    _sbErrorString.Append(", Receiving Enable Lot /Serial Tracking ")
                                End If
                                _blnMandatory = True
                            End If
                        End If

                        If .Columns.Contains(EnumApps.Receiving & "_" & AppParameters_Enum.CUSTOM_VIEW_ERPUSER.ToString) Then

                            If Trim(.Rows(intCnt).Item(EnumApps.Receiving & "_" & AppParameters_Enum.CUSTOM_VIEW_ERPUSER.ToString).ToString) = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Table/view name to read User ID and Employee ID ")
                                Else
                                    _sbErrorString.Append(", Table/view name to read User ID and Employee ID ")
                                End If
                                _blnMandatory = True
                            End If
                        End If

                    End If
                    'Pick Plan
                    If _dsAppID.Tables(0).Select("APP_ID='" & EnumApps.PickPlan & "'").Length > 0 Then
                        If .Columns.Contains(EnumApps.PickPlan & "_" & AppParameters_Enum.DEFAULT_MFG_ITEM_ID.ToString) Then

                            If .Rows(intCnt).Item(EnumApps.PickPlan & "_" & AppParameters_Enum.DEFAULT_MFG_ITEM_ID.ToString).ToString = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Pick Plan Default Manufacturer Item ID ")
                                Else
                                    _sbErrorString.Append(", Pick Plan Default Manufacturer Item ID ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.PickPlan & "_" & AppParameters_Enum.DEFAULT_PRIORITY.ToString) Then

                            If Trim(.Rows(intCnt).Item(EnumApps.PickPlan & "_" & AppParameters_Enum.DEFAULT_PRIORITY.ToString).ToString) = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Pick Plan Default Location Priority ")
                                Else
                                    _sbErrorString.Append(", Pick Plan Default Location Priority ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.PickPlan & "_" & AppParameters_Enum.ITEM_DESCR.ToString) Then

                            If .Rows(intCnt).Item(EnumApps.PickPlan & "_" & AppParameters_Enum.ITEM_DESCR.ToString).ToString = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Pick Plan Item Description Option ")
                                Else
                                    _sbErrorString.Append(", Pick Plan Item Description Option ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.PickPlan & "_" & AppParameters_Enum.ITEM_PRICE.ToString) Then

                            If .Rows(intCnt).Item(EnumApps.PickPlan & "_" & AppParameters_Enum.ITEM_PRICE.ToString).ToString = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Pick Plan Item Price Option on HHT ")
                                Else
                                    _sbErrorString.Append(", Pick Plan Item Price Option on HHT ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.PickPlan & "_" & AppParameters_Enum.LIMIT_OF_LISTS.ToString) Then

                            If Trim(.Rows(intCnt).Item(EnumApps.PickPlan & "_" & AppParameters_Enum.LIMIT_OF_LISTS.ToString).ToString) = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Pick Plan Limit number of downloaded pick plans ")
                                Else
                                    _sbErrorString.Append(", Pick Plan Limit number of downloaded pick plans ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.PickPlan & "_" & AppParameters_Enum.PS_USER.ToString) Then

                            If Trim(.Rows(intCnt).Item(EnumApps.PickPlan & "_" & AppParameters_Enum.PS_USER.ToString).ToString) = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Pick Plan User ID ")
                                Else
                                    _sbErrorString.Append(", Pick Plan User ID ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        'PICK_ENABLE_LOT_SRL_TRACKING
                        If .Columns.Contains(EnumApps.PickPlan & "_" & AppParameters_Enum.PICK_ENABLE_LOT_SRL_TRACKING.ToString) Then

                            If Trim(.Rows(intCnt).Item(EnumApps.PickPlan & "_" & AppParameters_Enum.PICK_ENABLE_LOT_SRL_TRACKING.ToString).ToString) = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Pick Plan Enable Lot /Serial Tracking ")
                                Else
                                    _sbErrorString.Append(", Pick Plan Enable Lot /Serial Tracking ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                    End If

                    'Deliver
                    If _dsAppID.Tables(0).Select("APP_ID='" & EnumApps.Deliver & "'").Length > 0 Then
                        If .Columns.Contains(EnumApps.Deliver & "_" & AppParameters_Enum.DEFAULT_MFG_ITEM_ID.ToString) Then

                            If Trim(.Rows(intCnt).Item(EnumApps.Deliver & "_" & AppParameters_Enum.DEFAULT_MFG_ITEM_ID.ToString).ToString) = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Deliver Default Manufacturer Item ID ")
                                Else
                                    _sbErrorString.Append(", Deliver Default Manufacturer Item ID ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                    End If
                    If .Columns.Contains(EnumApps.Deliver & "_" & AppParameters_Enum.ITEM_DESCR.ToString) Then

                        If Trim(.Rows(intCnt).Item(EnumApps.Deliver & "_" & AppParameters_Enum.ITEM_DESCR.ToString).ToString) = String.Empty Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Deliver Item Description Option ")
                            Else
                                _sbErrorString.Append(", Deliver Item Description Option ")
                            End If
                            _blnMandatory = True
                        End If
                    End If

                    If .Columns.Contains(EnumApps.Deliver & "_" & AppParameters_Enum.ITEM_PRICE.ToString) Then
                        If .Rows(intCnt).Item(EnumApps.Deliver & "_" & AppParameters_Enum.ITEM_PRICE.ToString).ToString = String.Empty Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Deliver Item Price Option on HHT ")
                            Else
                                _sbErrorString.Append(", Deliver Item Price Option on HHT ")
                            End If
                            _blnMandatory = True
                        End If
                    End If


                    'PutAway
                    If _dsAppID.Tables(0).Select("APP_ID='" & EnumApps.PutAway & "'").Length > 0 Then
                        If .Columns.Contains(EnumApps.PutAway & "_" & AppParameters_Enum.DEFAULT_MFG_ITEM_ID.ToString) Then
                            If .Rows(intCnt).Item(EnumApps.PutAway & "_" & AppParameters_Enum.DEFAULT_MFG_ITEM_ID.ToString).ToString = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append(" PutAway Default Manufacturer Item ID ")
                                Else
                                    _sbErrorString.Append(",  PutAway Default Manufacturer Item ID ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.PutAway & "_" & AppParameters_Enum.ITEM_DESCR.ToString) Then
                            If .Rows(intCnt).Item(EnumApps.PutAway & "_" & AppParameters_Enum.ITEM_DESCR.ToString).ToString = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("PutAway Item Description Option ")
                                Else
                                    _sbErrorString.Append(", PutAway Item Description Option ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.PutAway & "_" & AppParameters_Enum.ITEM_PRICE.ToString) Then
                            If .Rows(intCnt).Item(EnumApps.PutAway & "_" & AppParameters_Enum.ITEM_PRICE.ToString).ToString = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("PutAway Item Price Option on HHT ")
                                Else
                                    _sbErrorString.Append(", PutAway Item Price Option on HHT ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.PutAway & "_" & AppParameters_Enum.MULTI_IUT_DOWNLOAD.ToString) Then
                            If .Rows(intCnt).Item(EnumApps.PutAway & "_" & AppParameters_Enum.MULTI_IUT_DOWNLOAD.ToString).ToString = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("PutAway Multiple users receiving an Inter Unit transfer ")
                                Else
                                    _sbErrorString.Append(", PutAway Multiple users receiving an Inter Unit transfer ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.PutAway & "_" & AppParameters_Enum.PS_USER.ToString) Then
                            If Trim(.Rows(intCnt).Item(EnumApps.PutAway & "_" & AppParameters_Enum.PS_USER.ToString).ToString) = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("PutAway User ID ")
                                Else
                                    _sbErrorString.Append(", PutAway User ID ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                    End If

                    'TrackIT
                    'NO_OF_REQUESTS_FOR_SAME_EQ_ITM
                    If _dsAppID.Tables(0).Select("APP_ID='" & EnumApps.TrackIT & "'").Length > 0 Then
                        If .Columns.Contains(EnumApps.TrackIT & "_" & AppParameters_Enum.NO_OF_REQUESTS_FOR_SAME_EQ_ITM.ToString) Then
                            If .Rows(intCnt).Item(EnumApps.TrackIT & "_" & AppParameters_Enum.NO_OF_REQUESTS_FOR_SAME_EQ_ITM.ToString).ToString = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append(" TrackIT No. Of Requests for same EQ Item ")
                                Else
                                    _sbErrorString.Append(",  TrackIT No. Of Requests for same EQ Item ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                    End If

                    'StockIssue
                    If _dsAppID.Tables(0).Select("APP_ID='" & EnumApps.StockIssue & "'").Length > 0 Then
                        If .Columns.Contains(EnumApps.StockIssue & "_" & AppParameters_Enum.DEFAULT_MFG_ITEM_ID.ToString) Then
                            If .Rows(intCnt).Item(EnumApps.StockIssue & "_" & AppParameters_Enum.DEFAULT_MFG_ITEM_ID.ToString).ToString = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append(" Stock Issue Default Manufacturer Item ID ")
                                Else
                                    _sbErrorString.Append(",  Stock Issue Default Manufacturer Item ID ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.StockIssue & "_" & AppParameters_Enum.ITEM_DESCR.ToString) Then
                            If .Rows(intCnt).Item(EnumApps.StockIssue & "_" & AppParameters_Enum.ITEM_DESCR.ToString).ToString = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Stock Issue Item Description Option ")
                                Else
                                    _sbErrorString.Append(", Stock Issue Item Description Option ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.StockIssue & "_" & AppParameters_Enum.ITEM_PRICE.ToString) Then
                            If .Rows(intCnt).Item(EnumApps.StockIssue & "_" & AppParameters_Enum.ITEM_PRICE.ToString).ToString = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Stock Issue Item Price Option on HHT ")
                                Else
                                    _sbErrorString.Append(", Stock Issue Item Price Option on HHT ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.StockIssue & "_" & AppParameters_Enum.PS_USER.ToString) Then
                            If Trim(.Rows(intCnt).Item(EnumApps.StockIssue & "_" & AppParameters_Enum.PS_USER.ToString).ToString) = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Stock Issue User ID ")
                                Else
                                    _sbErrorString.Append(", Stock Issue User ID ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        'DOC_ID_GENERATION
                        If .Columns.Contains(EnumApps.StockIssue & "_" & AppParameters_Enum.DOC_ID_GENERATION.ToString) Then
                            If Trim(.Rows(intCnt).Item(EnumApps.StockIssue & "_" & AppParameters_Enum.DOC_ID_GENERATION.ToString).ToString) = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Stock Issue Document ID generation ")
                                Else
                                    _sbErrorString.Append(", Stock Issue Document ID generation ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        'RMA_COMPONENT_INTERFACE
                        If .Columns.Contains(EnumApps.StockIssue & "_" & AppParameters_Enum.RMA_COMPONENT_INTERFACE.ToString) Then
                            If Trim(.Rows(intCnt).Item(EnumApps.StockIssue & "_" & AppParameters_Enum.RMA_COMPONENT_INTERFACE.ToString).ToString) = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Stock Issue Interface for posting Return transaction ")
                                Else
                                    _sbErrorString.Append(", Stock Issue Interface for posting Return transaction ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        'LOT_SERIAL_ENABLED
                        If .Columns.Contains(EnumApps.StockIssue & "_" & AppParameters_Enum.LOT_SERIAL_ENABLED.ToString) Then

                            If Trim(.Rows(intCnt).Item(EnumApps.StockIssue & "_" & AppParameters_Enum.LOT_SERIAL_ENABLED.ToString).ToString) = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Stock Issue Enable Lot /Serial Tracking ")
                                Else
                                    _sbErrorString.Append(", Stock Issue Enable Lot /Serial Tracking ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                    End If

                    'BinToBin
                    If _dsAppID.Tables(0).Select("APP_ID='" & EnumApps.BinToBin & "'").Length > 0 Then
                        If .Columns.Contains(EnumApps.BinToBin & "_" & AppParameters_Enum.DEFAULT_MFG_ITEM_ID.ToString) Then
                            If .Rows(intCnt).Item(EnumApps.BinToBin & "_" & AppParameters_Enum.DEFAULT_MFG_ITEM_ID.ToString).ToString = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append(" Bin To Bin Default Manufacturer Item ID ")
                                Else
                                    _sbErrorString.Append(",  Bin To Bin Default Manufacturer Item ID ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.BinToBin & "_" & AppParameters_Enum.ITEM_DESCR.ToString) Then
                            If .Rows(intCnt).Item(EnumApps.BinToBin & "_" & AppParameters_Enum.ITEM_DESCR.ToString).ToString = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Bin To Bin Item Description Option ")
                                Else
                                    _sbErrorString.Append(", Bin To Bin Item Description Option ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.BinToBin & "_" & AppParameters_Enum.ITEM_PRICE.ToString) Then
                            If .Rows(intCnt).Item(EnumApps.BinToBin & "_" & AppParameters_Enum.ITEM_PRICE.ToString).ToString = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Bin To Bin Item Price Option on HHT ")
                                Else
                                    _sbErrorString.Append(", Bin To Bin Item Price Option on HHT ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.BinToBin & "_" & AppParameters_Enum.PS_USER.ToString) Then
                            If Trim(.Rows(intCnt).Item(EnumApps.BinToBin & "_" & AppParameters_Enum.PS_USER.ToString).ToString) = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Bin To Bin User ID ")
                                Else
                                    _sbErrorString.Append(", Bin To Bin User ID ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                    End If
                    'Point Of Use
                    If _dsAppID.Tables(0).Select("APP_ID='" & EnumApps.PointOfUse & "'").Length > 0 Then
                        If .Columns.Contains(EnumApps.PointOfUse & "_" & AppParameters_Enum.DEFAULT_MFG_ITEM_ID.ToString) Then
                            If .Rows(intCnt).Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.DEFAULT_MFG_ITEM_ID.ToString).ToString = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append(" Point Of Use Default Manufacturer Item ID ")
                                Else
                                    _sbErrorString.Append(",  Point Of Use Default Manufacturer Item ID ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.PointOfUse & "_" & AppParameters_Enum.ITEM_DESCR.ToString) Then
                            If Trim(.Rows(intCnt).Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.ITEM_DESCR.ToString).ToString) = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Point Of Use Inventory Item Description ")
                                Else
                                    _sbErrorString.Append(", Point Of Use Inventory Item Description ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.PointOfUse & "_" & AppParameters_Enum.ITEM_PRICE.ToString) Then
                            If Trim(.Rows(intCnt).Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.ITEM_PRICE.ToString).ToString) = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Point Of Use Item Price ")
                                Else
                                    _sbErrorString.Append(", Point Of Use Item Price ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.PointOfUse & "_" & AppParameters_Enum.QTY_ROUND_TYPE.ToString) Then
                            If Trim(.Rows(intCnt).Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.QTY_ROUND_TYPE.ToString).ToString) = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Point Of Use Order Qty Rounding Option ")
                                Else
                                    _sbErrorString.Append(", Point Of Use Order Qty Rounding Option ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.PointOfUse & "_" & AppParameters_Enum.RESERVE_QTY.ToString) Then
                            If Trim(.Rows(intCnt).Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.RESERVE_QTY.ToString).ToString) = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Point Of Use Reserve Qty while CasePick ")
                                Else
                                    _sbErrorString.Append(", Point Of Use Reserve Qty while CasePick ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.PointOfUse & "_" & AppParameters_Enum.CASE_PICK_INTERFACE.ToString) Then
                            If Trim(.Rows(intCnt).Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.CASE_PICK_INTERFACE.ToString).ToString) = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Point Of Use Case Pick Interface option ")
                                Else
                                    _sbErrorString.Append(", Point Of Use Case Pick Interface option ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                        If .Columns.Contains(EnumApps.PointOfUse & "_" & AppParameters_Enum.RMA_COMPONENT_INTERFACE.ToString) Then
                            If Trim(.Rows(intCnt).Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.RMA_COMPONENT_INTERFACE.ToString).ToString) = String.Empty Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Point Of Use Interface for posting Return transaction ")
                                Else
                                    _sbErrorString.Append(", Point Of Use Interface for posting Return transaction ")
                                End If
                                _blnMandatory = True
                            End If
                        End If
                    End If

                    If _blnMandatory Then
                        If _sbErrorString.ToString.Contains(",") Then
                            _sbErrorString.Append(" are Mandatory Fields")
                        Else
                            _sbErrorString.Append(" is Mandatory Field")
                        End If
                        pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = _sbErrorString.ToString
                        _sbErrorString = Nothing
                        _sbErrorString = New StringBuilder
                        _blnMandatory = False
                        Continue For
                    Else
                        _sbErrorString = Nothing
                        _sbErrorString = New StringBuilder
                    End If

                    'ValidateOrgParamData
                    Try
                        _strValidInput = ValidateOrgParamData(.Rows(intCnt), _dsAppID, pDeviceTokenEntry)

                        If log.IsDebugEnabled Then log.Debug("_strValidInput" & _strValidInput)

                        If Not _strValidInput = String.Empty Then
                            pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = _strValidInput
                            Continue For
                        End If
                    Catch ex As Exception
                        pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_ORGGROUP_CREATION_FAILED
                        If log.IsFatalEnabled Then log.Fatal("Exception Thrown in ValidateOrgParamData " & methodBaseName & " is...." & vbCrLf & ex.ToString)
                        Continue For
                    End Try

                    ' Call GetOrgGroupDetails  
                    Try
                        _StatusCode = GetOrgGroupDetails(_strParameterTemplateID, StrErrorMsg, pdsOrgGroupData, _dsOrgData)

                        If log.IsDebugEnabled Then log.Debug("_StatusCode" & _StatusCode)
                    Catch ex As Exception
                        If log.IsFatalEnabled Then log.Fatal("Exception Thrown in GetOrgGroupDetails " & methodBaseName & " is..." & vbCrLf & ex.ToString)
                        Return E_SERVERERROR
                    End Try

                    If StrErrorMsg = CONST_ORG_NOT_EXIST Then
                        pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_ORG_NOT_EXIST
                        Continue For
                    Else
                        If StrErrorMsg <> String.Empty Then
                            pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = StrErrorMsg
                            Continue For
                        End If
                    End If

                    If _dsOrgData.Tables().Count > 0 Then
                        If _dsOrgData.Tables("dtOrgData").Rows.Count > 0 Then
                            _strOrgGroupId = String.Empty
                            For i As Integer = 0 To _dsOrgData.Tables("dtOrgData").Rows.Count - 1

                                _strOrgGroupId = _dsOrgData.Tables("dtOrgData").Rows(i).Item("ORG_GROUP_ID")

                                If log.IsDebugEnabled Then log.Debug("_strOrgGroupId" & _strOrgGroupId)

                                Try
                                    'Check if org Group already exists
                                    If _strOrgGroupId <> String.Empty Then
                                        _strSQL = String.Empty
                                        Dim _intCountExists As Integer
                                        pMode = String.Empty

                                        Try
                                            _strSQL = "SELECT COUNT(ORG_GROUP_ID) FROM MT_ATPAR_ORG_GROUPS " & _
                                                      " WHERE ORG_GROUP_ID= '" & _strOrgGroupId & "'"

                                            If log.IsInfoEnabled Then log.Info(methodBaseName & " : " & _strSQL)

                                            _intCountExists = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(_strSQL), _trans)

                                        Catch ex As Exception
                                            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in SELECT " & methodBaseName & " is..." & vbCrLf & ex.ToString)
                                            Return E_SERVERERROR
                                            _trans.rollback()
                                        End Try

                                        If _intCountExists = 0 Then
                                            pMode = AddEdit_Enum.ADD
                                            _blnIsAddModeFlag = True
                                        Else
                                            pMode = AddEdit_Enum.EDIT
                                            _blnIsAddModeFlag = False
                                        End If
                                    End If

                                Catch ex As Exception
                                    If log.IsFatalEnabled Then log.Fatal("Exception Thrown in Check if org Group" & methodBaseName & " is..." & vbCrLf & ex.ToString)
                                    Return E_SERVERERROR
                                End Try

                                Try

                                    If _dsOrgData.Tables.Contains("dtOrgParameters") Then
                                        _dsOrgData.Tables.Remove(dtOrgParameters)
                                    End If

                                    dtOrgParameters = New DataTable

                                    _StatusCode = GetOrgGroupParametersList(.Rows(intCnt), _strOrgGroupId, dtOrgParameters)

                                    If _StatusCode = ATPAR_OK Then
                                        _dsOrgData.Tables.Add(dtOrgParameters)
                                    Else
                                        pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_INVALID_DATA
                                        Continue For
                                    End If

                                Catch ex As Exception
                                    pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_ORGGROUP_CREATION_FAILED
                                    If log.IsFatalEnabled Then log.Fatal("Exception Thrown in GetOrgGroupParametersList " & methodBaseName & " is...." & vbCrLf & ex.ToString)
                                    Continue For
                                End Try

                                Try
                                    If pMode <> String.Empty Then
                                        _StatusCode = AddUpdateOrgGroup(_trans, pSvrUserID, _dsOrgData, pMode)
                                        If _StatusCode = ATPAR_OK Then
                                            If _blnIsAddModeFlag Then
                                                pdsOrgGroupData.Tables(Enum_OrgGroupData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.ADDED_CNT) += 1
                                                pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_ORGGROUP_CREATION_SUCESS
                                            Else
                                                pdsOrgGroupData.Tables(Enum_OrgGroupData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.UPDATED_CNT) += 1
                                                pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_ORGGROUP_UPDATION_SUCESS
                                            End If
                                        Else
                                            If _blnIsAddModeFlag = True Then
                                                If log.IsWarnEnabled Then log.Warn("Org Parameters Updation Failed:" & _strOrgGroupId & ":")
                                                pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_ORGGROUP_CREATION_FAILED
                                                _trans.Rollback()
                                                sqlConnect.Open()
                                                _trans = sqlConnect.BeginTransaction()
                                                Continue For
                                            Else
                                                If log.IsWarnEnabled Then log.Warn("Org Parameters Updation Failed:" & _strOrgGroupId & ":")
                                                pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = CONST_ORGGROUP_UPDATION_FAILED
                                                _trans.Rollback()
                                                sqlConnect.Open()
                                                _trans = sqlConnect.BeginTransaction()
                                                Continue For
                                            End If
                                        End If
                                    End If
                                Catch ex As Exception
                                    If log.IsFatalEnabled Then log.Fatal("Exception Thrown in AddUpdateOrgGroup" & methodBaseName & " is..." & vbCrLf & ex.ToString)
                                    Return E_SERVERERROR
                                    _trans.rollback()
                                End Try

                                'Warning Message for receive
                                If _dsAppID.Tables(0).Select("APP_ID='" & EnumApps.Receiving & "'").Length > 0 Then
                                    If .Columns.Contains(EnumApps.Receiving & "_" & AppParameters_Enum.LOT_SERIAL_ENABLED.ToString) Then
                                        If .Rows(intCnt).Item(EnumApps.Receiving & "_" & AppParameters_Enum.LOT_SERIAL_ENABLED.ToString).ToString = Enable_Lot_Serial_Tracking.MMIS.ToString Then
                                            If .Columns.Contains(EnumApps.Receiving & "_" & AppParameters_Enum.SEND_LOT_SERIAL_INFO_TO_MMIS.ToString) Then
                                                If .Rows(intCnt).Item(EnumApps.Receiving & "_" & AppParameters_Enum.SEND_LOT_SERIAL_INFO_TO_MMIS.ToString).ToString = YesNo_Enum.N.ToString Then
                                                    If _sbWarningString.ToString = String.Empty Then
                                                        _sbWarningString.Append("Send Lot /Serial information to MMIS is updated with " & YesNo_Enum.Y.ToString & " in " & EnumApps.Receiving.ToString() & " for Org group : " & _strOrgGroupId)
                                                    Else
                                                        _sbWarningString.Append(", Send Lot /Serial information to MMIS is updated with " & YesNo_Enum.Y.ToString & " in " & EnumApps.Receiving.ToString() & " for Org group : " & _strOrgGroupId)
                                                    End If
                                                End If
                                            End If
                                        End If

                                        If .Rows(intCnt).Item(EnumApps.Receiving & "_" & AppParameters_Enum.LOT_SERIAL_ENABLED.ToString).ToString = Enable_Lot_Serial_Tracking.None.ToString Then
                                            If .Columns.Contains(EnumApps.Receiving & "_" & AppParameters_Enum.SEND_LOT_SERIAL_INFO_TO_MMIS.ToString) Then
                                                If .Rows(intCnt).Item(EnumApps.Receiving & "_" & AppParameters_Enum.SEND_LOT_SERIAL_INFO_TO_MMIS.ToString).ToString = YesNo_Enum.Y.ToString Then
                                                    If _sbWarningString.ToString = String.Empty Then
                                                        _sbWarningString.Append("Send Lot /Serial information to MMIS is updated with " & YesNo_Enum.N.ToString & " in " & EnumApps.Receiving.ToString() & " for Org group : " & _strOrgGroupId)
                                                    Else
                                                        _sbWarningString.Append(", Send Lot /Serial information to MMIS is updated with " & YesNo_Enum.N.ToString & " in " & EnumApps.Receiving.ToString() & " for Org group : " & _strOrgGroupId)
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If


                                'Warning Message for pick
                                If _dsAppID.Tables(0).Select("APP_ID='" & EnumApps.Receiving & "'").Length > 0 Then
                                    If .Columns.Contains(EnumApps.PickPlan & "_" & AppParameters_Enum.PICK_ENABLE_LOT_SRL_TRACKING.ToString) Then
                                        If .Rows(intCnt).Item(EnumApps.PickPlan & "_" & AppParameters_Enum.PICK_ENABLE_LOT_SRL_TRACKING.ToString).ToString = Enable_Lot_Serial_Tracking.MMIS.ToString Then
                                            If .Columns.Contains(EnumApps.PickPlan & "_" & AppParameters_Enum.PICK_SEND_LOT_SRL_INFO_TO_MMIS.ToString) Then
                                                If .Rows(intCnt).Item(EnumApps.PickPlan & "_" & AppParameters_Enum.PICK_SEND_LOT_SRL_INFO_TO_MMIS.ToString).ToString = YesNo_Enum.N.ToString Then
                                                    If _sbWarningString.ToString = String.Empty Then
                                                        _sbWarningString.Append("Send Lot /Serial information to MMIS is updated with " & YesNo_Enum.Y.ToString & " in " & EnumApps.PickPlan.ToString() & " for Org group : " & _strOrgGroupId)
                                                    Else
                                                        _sbWarningString.Append(", Send Lot /Serial information to MMIS is updated with " & YesNo_Enum.Y.ToString & " in " & EnumApps.PickPlan.ToString() & " for Org group : " & _strOrgGroupId)
                                                    End If
                                                End If
                                            End If
                                        End If
                                        If .Rows(intCnt).Item(EnumApps.PickPlan & "_" & AppParameters_Enum.PICK_ENABLE_LOT_SRL_TRACKING.ToString).ToString = Enable_Lot_Serial_Tracking.None.ToString Then
                                            If .Columns.Contains(EnumApps.PickPlan & "_" & AppParameters_Enum.PICK_SEND_LOT_SRL_INFO_TO_MMIS.ToString) Then
                                                If .Rows(intCnt).Item(EnumApps.PickPlan & "_" & AppParameters_Enum.PICK_SEND_LOT_SRL_INFO_TO_MMIS.ToString).ToString = YesNo_Enum.Y.ToString Then
                                                    If _sbWarningString.ToString = String.Empty Then
                                                        _sbWarningString.Append("Send Lot /Serial information to MMIS is updated with " & YesNo_Enum.N.ToString & " in " & EnumApps.PickPlan.ToString() & " for Org group : " & _strOrgGroupId)
                                                    Else
                                                        _sbWarningString.Append(", Send Lot /Serial information to MMIS is updated with " & YesNo_Enum.N.ToString & " in " & EnumApps.PickPlan.ToString() & " for Org group : " & _strOrgGroupId)
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If

                                'Warning Message for Stock Issue
                                If _dsAppID.Tables(0).Select("APP_ID='" & EnumApps.StockIssue & "'").Length > 0 Then
                                    If .Columns.Contains(EnumApps.StockIssue & "_" & AppParameters_Enum.VALIDATE_DEPT.ToString) Then
                                        If .Rows(intCnt).Item(EnumApps.StockIssue & "_" & AppParameters_Enum.VALIDATE_DEPT.ToString).ToString = YesNo_Enum.Y.ToString Then
                                            If .Columns.Contains(EnumApps.StockIssue & "_" & AppParameters_Enum.CUSTOM_SQL_DEPT.ToString) Then
                                                If .Rows(intCnt).Item(EnumApps.StockIssue & "_" & AppParameters_Enum.CUSTOM_SQL_DEPT.ToString).ToString = String.Empty Then
                                                    If _sbWarningString.ToString = String.Empty Then
                                                        _sbWarningString.Append("Please provide Custom SQL for Syncing Valid Departments.")
                                                    Else
                                                        _sbWarningString.Append(", Please provide Custom SQL for Syncing Valid Departments.")
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If

                                If _sbWarningString.ToString <> String.Empty Then
                                    pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupErrorData.ToString).Rows(intCnt).Item("ERROR_MESSAGE") = _sbWarningString.ToString
                                    pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupErrorData.ToString).Rows(intCnt).Item("ERROR_TYPE") = Enum_ErrorType.Warning
                                End If
                                _sbWarningString = Nothing
                                _sbWarningString = New StringBuilder
                            Next
                        End If
                    End If
                Next
            End With

            pdsOrgGroupData.Tables(Enum_OrgGroupData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.SUCCESS_CNT) = pdsOrgGroupData.Tables(Enum_OrgGroupData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.ADDED_CNT) + pdsOrgGroupData.Tables(Enum_OrgGroupData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.UPDATED_CNT)
            pdsOrgGroupData.Tables(Enum_OrgGroupData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.FAILURE_CNT) = pdsOrgGroupData.Tables(Enum_OrgGroupData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.TOTAL_REC_CNT) - pdsOrgGroupData.Tables(Enum_OrgGroupData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.SUCCESS_CNT)
            pdsOrgGroupData.Tables(Enum_OrgGroupData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.WARNING_CNT) = Decimal.Zero
            If pdsOrgGroupData.Tables(Enum_OrgGroupData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.FAILURE_CNT) < 0 Then
                pdsOrgGroupData.Tables(Enum_OrgGroupData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.FAILURE_CNT) = 0
                If log.IsDebugEnabled Then log.Debug("Value is less than zero")
            End If
            Dim dr() As DataRow
            If pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupErrorData.ToString).Rows.Count > 0 Then
                dr = pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupErrorData.ToString).Select("ERROR_TYPE = " & Enum_ErrorType.Warning)
                If log.IsDebugEnabled Then log.Debug("Length" & methodBaseName & dr.Length)
                If dr.Length > 0 Then
                    pdsOrgGroupData.Tables(Enum_OrgGroupData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.WARNING_CNT) = dr.Length
                End If
            End If
            pdsOrgGroupData.AcceptChanges()

            Try
                For i As Integer = pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupErrorData.ToString).Rows.Count - 1 To 0 Step -1
                    If pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupErrorData.ToString).Rows(i).Item("ERROR_MESSAGE").ToString = CONST_ORGGROUP_CREATION_SUCESS Or pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupErrorData.ToString).Rows(i).Item("ERROR_MESSAGE").ToString = CONST_ORGGROUP_UPDATION_SUCESS Then
                        pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupErrorData.ToString).Rows(i).Delete()
                    End If
                Next
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal("Exception Thrown while updating ErrorData Table is..." & vbCrLf & ex.ToString)
                Return E_SERVERERROR
            End Try

            pdsOrgGroupData.AcceptChanges()
            If log.IsDebugEnabled Then log.Debug("End Of The Function " & methodBaseName)
            _trans.commit()
            Return ATPAR_OK

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in Main Try " & methodBaseName & " is..." & vbCrLf & ex.ToString)
            Return E_SERVERERROR
        Finally
            If sqlConnect.State <> ConnectionState.Closed Then
                sqlConnect.Close()
            End If
        End Try
    End Function

    ''' <summary>
    ''' Validate Org Column Names
    ''' </summary>
    ''' <param name="pdsOrgGroupData">Org Parameters Dataset</param>
    ''' <returns>Err Message</returns>
    ''' <remarks></remarks>
    Private Function ValidateOrgColumnNames(ByVal pdsOrgGroupData As DataSet) As String
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        Dim strErrMsg As String = String.Empty
        If log.IsDebugEnabled Then log.Debug(methodBaseName)
        Try
            For Each dc As DataColumn In pdsOrgGroupData.Tables(Enum_OrgGroupData.OrgGroupParams.ToString).Columns
                Dim strName As String = dc.ColumnName.ToString
                If strName <> "PARAMETER_TEMPLATE_ID" Then
                    strName = strName.Substring(strName.IndexOf("_") + 1)
                    If Not [Enum].IsDefined(GetType(AppParameters_Enum), strName) Then
                        strErrMsg = " Parameter ID :" & strName & " is not defined in atpar application parameters enum "
                        If log.IsDebugEnabled Then log.Debug(strErrMsg)
                        Return strErrMsg
                    End If
                End If
            Next
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in " & methodBaseName & ", Validating Column Names" & vbCrLf & ex.ToString)
            Return "E_SERVERERROR"
        End Try


    End Function

    ''' <summary>
    ''' Used to Get Org Group Details
    ''' </summary>
    ''' <param name="pstrParameterTemplateId">ParameterTemplate Id</param>
    ''' <param name="pStrErrorMsg">ErrorMsg Id</param>
    ''' <param name="pDsOrgUploadData">Org Group details Dataset</param>
    ''' <param name="pdsOrgdata">Org Group data Dataset</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Private Function GetOrgGroupDetails(ByVal pstrParameterTemplateId As String, _
                                        ByRef pStrErrorMsg As String, _
                                        ByVal pDsOrgUploadData As DataSet, _
                                        ByRef pdsOrgdata As DataSet) As Long
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        'Get the No Of Rows For Parameter Template ID 
        Const CONST_ORG_NOT_EXIST = "Org Group ID Does Not Exist"
        Const CONST_BUNIT_INVALID_DATA = "Org Creation Failed, BusinessUnit Should be Unique, Invalid Data"
        Const CONST_ORGGROUPID_INVALID_DATA = "Org Creation Failed, Org Group ID Should be Unique, Invalid Data"
        Const CONST_BUNIT_INVENTORY_TYPE = "I"
        Const CONST_BUNIT_PURCHASING_TYPE = "P"
        Dim _blnIsValidData As Boolean = False
        pStrErrorMsg = String.Empty

        Try
            Dim _dr() As DataRow
            _dr = pDsOrgUploadData.Tables(Enum_OrgGroupData.OrgGroupBU.ToString).Select("ParameterTemplateID = '" & pstrParameterTemplateId & "'")

            If log.IsDebugEnabled Then log.Debug("ParameterTemplateID Count in OrgBU Table " & methodBaseName & " is .. " & _dr.Length)

            If _dr.Length = 0 Then
                pStrErrorMsg = CONST_ORG_NOT_EXIST
                Return ATPAR_OK
            End If
            If _dr.Length > 1 Then
                'Loop the rows and checkorggroupid and orggroupname should be same and buint should be unique for each row
                For Each _drOrg As DataRow In _dr
                    Dim _drUniqueBUnit() As DataRow
                    _drUniqueBUnit = pDsOrgUploadData.Tables(Enum_OrgGroupData.OrgGroupBU.ToString).Select("OrgGroupID= '" & _drOrg.Item(Enum_OrgGroupBU.OrgGroupID) & "'" & _
                                                  " and  BusinessUnit= '" & _drOrg.Item(Enum_OrgGroupBU.BusinessUnit) & "' and BusinessUnitType='" & _drOrg.Item(Enum_OrgGroupBU.BusinessUnitType) & "'")

                    If log.IsDebugEnabled Then log.Debug("BusinessUnit Count " & methodBaseName & " is .. " & _drUniqueBUnit.Length)

                    If _drUniqueBUnit.Length > 1 Then
                        'BusinessUnit should be unique
                        pStrErrorMsg = CONST_BUNIT_INVALID_DATA
                        Return ATPAR_OK
                    Else
                        _blnIsValidData = True
                    End If


                Next
            End If
            If _dr.Length = 1 Then
                _blnIsValidData = True
            End If

            If _blnIsValidData Then
                Dim dtOrg As New DataTable
                dtOrg.TableName = "dtOrgData"
                dtOrg.Columns.Add("ORG_GROUP_ID", System.Type.GetType("System.String"))
                dtOrg.Columns.Add("ORG_GROUP_NAME", System.Type.GetType("System.String"))

                Dim dtOrgBU As New DataTable
                dtOrgBU.TableName = "dtOrgBUData"
                dtOrgBU.Columns.Add("ORG_GROUP_ID", System.Type.GetType("System.String"))
                dtOrgBU.Columns.Add("BUSINESS_UNIT", System.Type.GetType("System.String"))
                dtOrgBU.Columns.Add("BU_TYPE", System.Type.GetType("System.String"))

                Dim _drOrgData As DataRow
                Dim _checkdrOrgData() As DataRow
                For Each _drOrg As DataRow In _dr
                    _drOrgData = dtOrg.NewRow
                    _drOrgData("ORG_GROUP_ID") = _drOrg("OrgGroupID")
                    _drOrgData("ORG_GROUP_NAME") = _drOrg("OrgGroupDescr") '_drOrg("F2") 
                    _checkdrOrgData = dtOrg.Select("ORG_GROUP_ID= '" & _drOrg("OrgGroupID") & "' and ORG_GROUP_NAME= '" & _drOrg("OrgGroupDescr") & "'")
                    If log.IsDebugEnabled Then log.Debug("_checkdrOrgData.Length" & _checkdrOrgData.Length)
                    If _checkdrOrgData.Length = 0 Then
                        dtOrg.Rows.Add(_drOrgData)
                    End If
                Next

                pdsOrgdata.Tables.Add(dtOrg)

                Dim _drOrgBUData As DataRow
                Dim _checkdrOrgBUData() As DataRow
                For Each _drOrgBU As DataRow In _dr
                    _drOrgBUData = dtOrgBU.NewRow
                    _drOrgBUData("ORG_GROUP_ID") = _drOrgBU("OrgGroupID")
                    _drOrgBUData("BUSINESS_UNIT") = _drOrgBU("BusinessUnit") '_drOrgBU("F3") 
                    If _drOrgBU("BusinessUnitType") = BusinessType.Inventory.ToString Then
                        _drOrgBUData("BU_TYPE") = CONST_BUNIT_INVENTORY_TYPE
                    Else
                        _drOrgBUData("BU_TYPE") = CONST_BUNIT_PURCHASING_TYPE
                    End If
                    ' _drOrgBUData("BU_TYPE") = _drOrgBU("Business Unit Type") '_drOrgBU("F5") 
                    _checkdrOrgBUData = dtOrgBU.Select("ORG_GROUP_ID= '" & _drOrgBU("OrgGroupID") & "' and  BUSINESS_UNIT= '" & _drOrgBU("BusinessUnit") & "' and BU_TYPE= '" & _drOrgBUData("BU_TYPE") & "'")
                    If log.IsDebugEnabled Then log.Debug("checkdrOrgBUData.Length" & _checkdrOrgBUData.Length)
                    If _checkdrOrgBUData.Length = 0 Then
                        dtOrgBU.Rows.Add(_drOrgBUData)
                    End If


                Next
                pdsOrgdata.Tables.Add(dtOrgBU)
            End If


        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in Last Try " & methodBaseName & " is..." & vbCrLf & ex.ToString)
            Return E_SERVERERROR
        End Try

        Return ATPAR_OK

    End Function

    ''' <summary>
    ''' Used to Get Org Group Parameters List
    ''' </summary>
    ''' <param name="dr">DataRow</param>
    ''' <param name="pstrOrgGroupId">pstrOrgGroupId</param>
    ''' <param name="pdsAppID">pdsAppID</param>
    ''' <param name="dtOrgParameters">dtOrgParameters</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Private Function GetOrgGroupParametersList(ByVal dr As DataRow, _
                                               ByVal pstrOrgGroupId As String, _
                                               ByRef dtOrgParameters As DataTable) As Long

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            dtOrgParameters.TableName = "dtOrgParameters"

            dtOrgParameters.Columns.Add("ORG_GROUP_ID", System.Type.GetType("System.String"))
            dtOrgParameters.Columns.Add("APP_ID", System.Type.GetType("System.Int32"))
            dtOrgParameters.Columns.Add("PARAMETER_ID", System.Type.GetType("System.String"))
            dtOrgParameters.Columns.Add("PARAMETER_VALUE", System.Type.GetType("System.String"))
            For Each _dc As DataColumn In dr.Table.Columns
                Dim _drOrgparameters As DataRow
                Dim strParameterID As String = _dc.ColumnName.ToString
                Dim strAppID As String = _dc.ColumnName.ToString
                If strParameterID <> "PARAMETER_TEMPLATE_ID" Then
                    strParameterID = strParameterID.Substring(strParameterID.IndexOf("_") + 1)
                    strAppID = strAppID.Substring(0, strAppID.IndexOf("_"))
                    _drOrgparameters = dtOrgParameters.NewRow()
                    _drOrgparameters("PARAMETER_ID") = strParameterID
                    _drOrgparameters("APP_ID") = CInt(strAppID)
                    _drOrgparameters("PARAMETER_VALUE") = dr.Item(_dc.ColumnName.ToString).ToString
                    _drOrgparameters("ORG_GROUP_ID") = pstrOrgGroupId
                    dtOrgParameters.Rows.Add(_drOrgparameters)
                End If
            Next
            If log.IsDebugEnabled Then log.Debug(" dtOrgParameters Table creation " & methodBaseName & " is .. ")

            Return ATPAR_OK

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown  " & methodBaseName & " is..." & vbCrLf & ex.ToString)
            Return E_SERVERERROR
        End Try

    End Function

    ''' <summary>
    ''' Used to Insert and Update Org Group Details
    ''' </summary>
    ''' <param name="ptrans">ptrans</param>
    ''' <param name="pUser">pUser</param>
    ''' <param name="pDsOrgUploadData">pDsOrgUploadData</param>
    ''' <param name="pMode">pMode</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Private Function AddUpdateOrgGroup(ByVal ptrans As SqlTransaction, _
                                       ByVal pUser As String, _
                                       ByVal pDsOrgUploadData As DataSet, _
                                       ByVal pMode As String) As Long
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strSQL As String = String.Empty
        Dim _StatusCode As Long = -1
        Dim _strOrgGroupID As String = String.Empty
        Dim _strPevousOrgGroupID As String = String.Empty
        Dim _dsActualOrgUploadData As New DataSet
        Dim _strOrgid As String = String.Empty
        Dim _drOrgData() As DataRow
        Dim _drOrgBUData() As DataRow

        Try

            _dsActualOrgUploadData = pDsOrgUploadData.Copy()

            _strOrgid = _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(0)("ORG_GROUP_ID").ToString()

            _drOrgData = _dsActualOrgUploadData.Tables("dtOrgData").Select("ORG_GROUP_ID <> '" & _strOrgid & "'")
            _drOrgBUData = _dsActualOrgUploadData.Tables("dtOrgBUData").Select("ORG_GROUP_ID <> '" & _strOrgid & "'")

            For Each dr As DataRow In _drOrgData
                _dsActualOrgUploadData.Tables("dtOrgData").Rows.Remove(dr)

            Next
            For Each dr As DataRow In _drOrgBUData
                _dsActualOrgUploadData.Tables("dtOrgBUData").Rows.Remove(dr)
            Next

            _dsActualOrgUploadData.AcceptChanges()

            If _dsActualOrgUploadData.Tables("dtOrgData").Rows.Count > 0 Then
                If pMode = AddEdit_Enum.ADD Then
                    For intcnt As Integer = 0 To _dsActualOrgUploadData.Tables("dtOrgData").Rows.Count - 1
                        ' replacing ' with '' for Org Group Name
                        _dsActualOrgUploadData.Tables("dtOrgData").Rows(intcnt).Item("ORG_GROUP_NAME") = Replace(_dsActualOrgUploadData.Tables("dtOrgData").Rows(intcnt).Item("ORG_GROUP_NAME"), "'", "''")
                        _strOrgGroupID = _dsActualOrgUploadData.Tables("dtOrgData").Rows(intcnt).Item("ORG_GROUP_ID")
                        If _strOrgGroupID <> _strPevousOrgGroupID Then
                            _strSQL = "INSERT INTO MT_ATPAR_ORG_GROUPS(ORG_GROUP_ID,ORG_GROUP_NAME,LAST_UPDATE_DATE,LAST_UPDATE_USER)" & _
                                                                 " VALUES('" & _dsActualOrgUploadData.Tables("dtOrgData").Rows(intcnt).Item("ORG_GROUP_ID") & "', " & _
                                                                 "'" & _dsActualOrgUploadData.Tables("dtOrgData").Rows(intcnt).Item("ORG_GROUP_NAME") & "',GETDATE(),'" & pUser & "') "

                            If log.IsInfoEnabled Then log.Info(methodBaseName & " : " & _strSQL)

                            Try
                                m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), ptrans)
                            Catch sqlex As SqlException
                                If log.IsFatalEnabled Then log.Fatal(GetSQLExceptionMessageString(sqlex))
                                Throw New Exception(methodBaseName & " : SQLExceptionMessageString : ", sqlex)
                                Return ATPAR_E_LOCALDBINSERTFAIL
                            End Try
                            _strPevousOrgGroupID = _strOrgGroupID
                        End If
                    Next
                Else
                    For intcnt As Integer = 0 To _dsActualOrgUploadData.Tables("dtOrgData").Rows.Count - 1
                        _dsActualOrgUploadData.Tables("dtOrgData").Rows(intcnt).Item("ORG_GROUP_NAME") = Replace(_dsActualOrgUploadData.Tables("dtOrgData").Rows(intcnt).Item("ORG_GROUP_NAME"), "'", "''")
                        _strSQL = " UPDATE MT_ATPAR_ORG_GROUPS SET " & _
                                   " ORG_GROUP_NAME='" & _dsActualOrgUploadData.Tables("dtOrgData").Rows(intcnt).Item("ORG_GROUP_NAME") & "'," & _
                                   " LAST_UPDATE_DATE = GETDATE() ,LAST_UPDATE_USER = '" & pUser & "' " & _
                                   " WHERE ORG_GROUP_ID = '" & _dsActualOrgUploadData.Tables("dtOrgData").Rows(intcnt).Item("ORG_GROUP_ID") & "' "

                        If log.IsInfoEnabled Then log.Info(methodBaseName & " : " & _strSQL)

                        Try
                            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), ptrans)

                        Catch sqlex As SqlException
                            If log.IsFatalEnabled Then log.Fatal(GetSQLExceptionMessageString(sqlex))
                            Throw New Exception(methodBaseName & " : SQLExceptionMessageString : ", sqlex)
                            Return ATPAR_E_LOCALDBUPDATEFAIL

                        End Try
                    Next
                End If
            End If
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Insertion of org call failed " & ex.ToString)
            Return E_SERVERERROR
        End Try

        Try
            If _dsActualOrgUploadData.Tables("dtOrgBUData").Rows.Count > 0 Then
                If pMode = AddEdit_Enum.ADD Then
                    Try
                        For intCount As Integer = 0 To _dsActualOrgUploadData.Tables("dtOrgBUData").Rows.Count - 1

                            With _dsActualOrgUploadData.Tables("dtOrgBUData").Rows(intCount)

                                _strSQL = " INSERT INTO MT_ATPAR_ORG_GROUP_BUNITS(BUSINESS_UNIT,ORG_GROUP_ID,BU_TYPE,LAST_UPDATE_DATE,LAST_UPDATE_USERID) " & _
                                             " VALUES ('" & .Item("BUSINESS_UNIT") & "','" & .Item("ORG_GROUP_ID") & "','" & .Item("BU_TYPE") & "' ,'" & System.DateTime.Now & "','" & pUser & "') "

                                If log.IsInfoEnabled Then log.Info(_strSQL)

                                m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), ptrans)

                            End With
                        Next

                    Catch sqlex As SqlException
                        If log.IsFatalEnabled Then log.Fatal(GetSQLExceptionMessageString(sqlex))
                        Throw New Exception(methodBaseName & " : SQLExceptionMessageString : ", sqlex)
                        Return ATPAR_E_LOCALDBINSERTFAIL
                    End Try
                Else
                    Dim intCount As Integer
                    Try
                        Try
                            _strSQL = " DELETE FROM MT_ATPAR_ORG_GROUP_BUNITS WHERE " & _
                                        " ORG_GROUP_ID =  '" & _dsActualOrgUploadData.Tables("dtOrgBUData").Rows(0).Item("ORG_GROUP_ID") & "'"

                            If log.IsInfoEnabled Then log.Info(_strSQL)

                            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), ptrans)
                        Catch ex As Exception
                            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " call failed " & ex.ToString)
                            Return E_SERVERERROR
                        End Try

                        For intCount = 0 To _dsActualOrgUploadData.Tables("dtOrgBUData").Rows.Count - 1
                            With _dsActualOrgUploadData.Tables("dtOrgBUData").Rows(intCount)

                                _strSQL = " INSERT INTO MT_ATPAR_ORG_GROUP_BUNITS(BUSINESS_UNIT,ORG_GROUP_ID,BU_TYPE,LAST_UPDATE_DATE,LAST_UPDATE_USERID ) " & _
                                             " VALUES ('" & .Item("BUSINESS_UNIT") & "','" & .Item("ORG_GROUP_ID") & "','" & .Item("BU_TYPE") & "'  ,'" & System.DateTime.Now & "','" & pUser & "') "

                                If log.IsInfoEnabled Then log.Info(_strSQL)

                                m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), ptrans)

                            End With
                        Next
                    Catch ex As Exception
                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " call failed " & ex.ToString)
                        Return E_SERVERERROR
                    End Try
                End If
            End If
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & "Insertion of BUInts call failed " & ex.ToString)
            Return E_SERVERERROR
        End Try

        'Parameters Insertion
        Try
            If _dsActualOrgUploadData.Tables("dtOrgParameters").Rows.Count > 0 Then
                Dim _blnSetLotSel_MMIS As Boolean = False
                Dim _blnSetLotSel_NONE As Boolean = False
                Dim _strLotSel As String = String.Empty
                If pMode = AddEdit_Enum.ADD Then
                    For intCount As Integer = 0 To _dsActualOrgUploadData.Tables("dtOrgParameters").Rows.Count - 1
                        _strSQL = String.Empty
                        '///starting of logic to handle when Lot serial enable is MMIS and NONE(for Receive and PickPlan)///'
                        If _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("APP_ID") = EnumApps.Receiving Or _
                         _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("APP_ID") = EnumApps.PickPlan Then


                            If (_dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("PARAMETER_ID") = AppParameters_Enum.LOT_SERIAL_ENABLED.ToString And _
                            _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("PARAMETER_VALUE") = Enable_Lot_Serial_Tracking.MMIS.ToString) Then
                                _blnSetLotSel_MMIS = True
                            End If

                            If (_dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("PARAMETER_ID") = AppParameters_Enum.PICK_ENABLE_LOT_SRL_TRACKING.ToString And _
                            _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("PARAMETER_VALUE") = Enable_Lot_Serial_Tracking.MMIS.ToString) Then
                                _blnSetLotSel_MMIS = True
                            End If

                            If (_dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("PARAMETER_ID") = AppParameters_Enum.LOT_SERIAL_ENABLED.ToString And _
                            _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("PARAMETER_VALUE") = Enable_Lot_Serial_Tracking.None.ToString) Then
                                _blnSetLotSel_NONE = True
                            End If

                            If (_dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("PARAMETER_ID") = AppParameters_Enum.PICK_ENABLE_LOT_SRL_TRACKING.ToString And _
                            _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("PARAMETER_VALUE") = Enable_Lot_Serial_Tracking.None.ToString) Then
                                _blnSetLotSel_NONE = True
                            End If



                            If _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("PARAMETER_ID") = AppParameters_Enum.SEND_LOT_SERIAL_INFO_TO_MMIS.ToString Or _
                            _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("PARAMETER_ID") = AppParameters_Enum.PICK_SEND_LOT_SRL_INFO_TO_MMIS.ToString Then
                                If _blnSetLotSel_MMIS Then
                                    _strLotSel = YesNo_Enum.Y.ToString
                                ElseIf _blnSetLotSel_NONE Then
                                    _strLotSel = YesNo_Enum.N.ToString
                                Else
                                    _strLotSel = _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("PARAMETER_VALUE")
                                End If
                                _blnSetLotSel_MMIS = False
                                _blnSetLotSel_NONE = False
                            Else
                                _strLotSel = _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("PARAMETER_VALUE")
                            End If

                            _strSQL = " INSERT INTO MT_ATPAR_ORG_GROUP_PARAMETERS(APP_ID,PARAMETER_ID,PARAMETER_VALUE, " & _
                                     " ORG_GROUP_ID,LAST_UPDATE_DATE,LAST_UPDATE_USER) VALUES(" & _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("APP_ID") & "," & _
                                     " '" & _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("PARAMETER_ID") & "'," & _
                                     " '" & _strLotSel & "', " & _
                                     " '" & _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("ORG_GROUP_ID") & "'," & _
                                     " GETDATE(),'" & pUser & "')"
                            '///End of logic to handle when Lot serial enable is MMIS and NONE(for Receive and PickPlan)///'


                        Else
                            _strSQL = " INSERT INTO MT_ATPAR_ORG_GROUP_PARAMETERS(APP_ID,PARAMETER_ID,PARAMETER_VALUE, " & _
                                     " ORG_GROUP_ID,LAST_UPDATE_DATE,LAST_UPDATE_USER) VALUES(" & _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("APP_ID") & "," & _
                                     " '" & _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("PARAMETER_ID") & "'," & _
                                     " '" & _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("PARAMETER_VALUE") & "', " & _
                                     " '" & _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("ORG_GROUP_ID") & "'," & _
                                     " GETDATE(),'" & pUser & "')"
                        End If
                        If log.IsInfoEnabled Then log.Info(methodBaseName & " : " & _strSQL)

                        Try
                            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), ptrans)

                        Catch sqlex As SqlException
                            If log.IsFatalEnabled Then log.Fatal(GetSQLExceptionMessageString(sqlex))
                            Throw New Exception(methodBaseName & " : SQLExceptionMessageString : ", sqlex)
                            Return ATPAR_E_LOCALDBINSERTFAIL
                        End Try
                    Next
                Else
                    For intCount As Integer = 0 To _dsActualOrgUploadData.Tables("dtOrgParameters").Rows.Count - 1
                        _strSQL = String.Empty
                        '///starting of logic to handle when Lot serial enable is MMIS and NONE(for Receive and PickPlan)///'
                        If _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("APP_ID") = EnumApps.Receiving Or _
                           _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("APP_ID") = EnumApps.PickPlan Then


                            If (_dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("PARAMETER_ID") = AppParameters_Enum.LOT_SERIAL_ENABLED.ToString And _
                            _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("PARAMETER_VALUE") = Enable_Lot_Serial_Tracking.MMIS.ToString) Then
                                _blnSetLotSel_MMIS = True
                            End If

                            If (_dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("PARAMETER_ID") = AppParameters_Enum.PICK_ENABLE_LOT_SRL_TRACKING.ToString And _
                            _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("PARAMETER_VALUE") = Enable_Lot_Serial_Tracking.MMIS.ToString) Then
                                _blnSetLotSel_MMIS = True
                            End If


                            If (_dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("PARAMETER_ID") = AppParameters_Enum.LOT_SERIAL_ENABLED.ToString And _
                            _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("PARAMETER_VALUE") = Enable_Lot_Serial_Tracking.None.ToString) Then
                                _blnSetLotSel_NONE = True
                            End If

                            If (_dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("PARAMETER_ID") = AppParameters_Enum.PICK_ENABLE_LOT_SRL_TRACKING.ToString And _
                            _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("PARAMETER_VALUE") = Enable_Lot_Serial_Tracking.None.ToString) Then
                                _blnSetLotSel_NONE = True
                            End If


                            If _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("PARAMETER_ID") = AppParameters_Enum.SEND_LOT_SERIAL_INFO_TO_MMIS.ToString Or _
                            _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("PARAMETER_ID") = AppParameters_Enum.PICK_SEND_LOT_SRL_INFO_TO_MMIS.ToString Then
                                If _blnSetLotSel_MMIS Then
                                    _strLotSel = YesNo_Enum.Y.ToString
                                ElseIf _blnSetLotSel_NONE Then
                                    _strLotSel = YesNo_Enum.N.ToString
                                Else
                                    _strLotSel = _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("PARAMETER_VALUE")
                                End If
                                _blnSetLotSel_MMIS = False
                                _blnSetLotSel_NONE = False
                            Else
                                _strLotSel = _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("PARAMETER_VALUE")
                            End If
                            _strSQL = " UPDATE MT_ATPAR_ORG_GROUP_PARAMETERS SET " & _
                                     " PARAMETER_VALUE = '" & _strLotSel & "' " & _
                                     " , LAST_UPDATE_DATE = GETDATE() ,LAST_UPDATE_USER = '" & pUser & "' " & _
                                     "  WHERE ORG_GROUP_ID = '" & _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("ORG_GROUP_ID") & "' AND " & _
                                     "  APP_ID = '" & _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("APP_ID") & "' AND " & _
                                     "  PARAMETER_ID = '" & _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("PARAMETER_ID") & "' "
                            '///End of logic to handle when Lot serial enable is MMIS and NONE(for Receive and PickPlan)///'
                            '
                        Else
                            _strSQL = " UPDATE MT_ATPAR_ORG_GROUP_PARAMETERS SET " & _
                                       " PARAMETER_VALUE = '" & _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("PARAMETER_VALUE") & "' " & _
                                       " , LAST_UPDATE_DATE = GETDATE() ,LAST_UPDATE_USER = '" & pUser & "' " & _
                                       "  WHERE ORG_GROUP_ID = '" & _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("ORG_GROUP_ID") & "' AND " & _
                                       "  APP_ID = '" & _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("APP_ID") & "' AND " & _
                                       "  PARAMETER_ID = '" & _dsActualOrgUploadData.Tables("dtOrgParameters").Rows(intCount).Item("PARAMETER_ID") & "' "
                        End If

                        If log.IsInfoEnabled Then log.Info(methodBaseName & " : " & _strSQL)

                        Try
                            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), ptrans)

                        Catch sqlex As SqlException
                            If log.IsFatalEnabled Then log.Fatal(GetSQLExceptionMessageString(sqlex))
                            Throw New Exception(methodBaseName & " : SQLExceptionMessageString : ", sqlex)
                            Return ATPAR_E_LOCALDBUPDATEFAIL
                        End Try
                    Next

                End If
            End If
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " call failed " & ex.ToString)
            Return E_SERVERERROR
        End Try

        Return ATPAR_OK

    End Function

    ''' <summary>
    ''' To Validate the Org Group Parameters
    ''' </summary>
    ''' <param name="dr">DataRow</param>
    ''' <param name="pdsAppID">pdsAppID</param>
    ''' <returns>String Message</returns>
    ''' <remarks></remarks>
    Function ValidateOrgParamData(ByVal dr As DataRow, ByVal pdsAppID As DataSet, ByVal pDeviceTokenEntry() As String) As String
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            Dim strChars As String = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
            Dim strNumbers As String = "0123456789"
            Dim strYN As String = "YN"
            Dim strValid As String = String.Empty
            Dim ch As String = String.Empty
            Dim strCtrlText As String = String.Empty
            Dim strErrMsg As String = String.Empty

            'CartCount
            If pdsAppID.Tables(0).Select("APP_ID='" & EnumApps.CartCount & "'").Length > 0 Then
                'FACTOR_OF_SAFETY
                If dr.Table.Columns.Contains(EnumApps.CartCount & "_" & AppParameters_Enum.FACTOR_OF_SAFETY.ToString) Then
                    strCtrlText = Trim(dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.FACTOR_OF_SAFETY.ToString).ToString)
                    If Not String.IsNullOrEmpty(strCtrlText) Then
                        If Not Regex.IsMatch(strCtrlText, "^[0-9]+$") Then
                            strErrMsg = "Factor of safety for recommended par - Please enter a positive numeric value : " & dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.FACTOR_OF_SAFETY.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        ElseIf strCtrlText.Length > 3 Then
                            strErrMsg = "Factor of safety for recommended par - Number of digits cannot be more than 3 : " & dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.FACTOR_OF_SAFETY.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                    End If
                End If
                'COORDINATOR_EMAIL_CONSIGNREQ
                If dr.Table.Columns.Contains(EnumApps.CartCount & "_" & AppParameters_Enum.COORDINATOR_EMAIL_CONSIGNREQ.ToString) Then
                    strCtrlText = Trim(dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.COORDINATOR_EMAIL_CONSIGNREQ.ToString).ToString)
                    If Not String.IsNullOrEmpty(strCtrlText) Then
                        If Not Regex.IsMatch(strCtrlText, "^[a-zA-Z][a-zA-Z|0-9|]*([_][a-zA-Z|0-9]+)*([.][a-zA-Z|0-9]+([_][a-zA-Z|0-9]+)*)?@[a-zA-Z][a-zA-Z|0-9|]*([-][a-zA-Z|0-9]+)*\.([a-zA-Z][a-zA-Z|0-9]*(\.[a-zA-Z][a-zA-Z|0-9]*)?)$") Then
                            strErrMsg = "Co-ordinator Email ID for Consign Item Requisition - Please enter valid Email ID: " & dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.COORDINATOR_EMAIL_CONSIGNREQ.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                    End If
                End If
                'COORDINATOR_EMAIL_STOCKREQ
                If dr.Table.Columns.Contains(EnumApps.CartCount & "_" & AppParameters_Enum.COORDINATOR_EMAIL_STOCKREQ.ToString) Then
                    strCtrlText = Trim(dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.COORDINATOR_EMAIL_STOCKREQ.ToString).ToString)
                    If Not String.IsNullOrEmpty(strCtrlText) Then
                        If Not Regex.IsMatch(strCtrlText, "^[a-zA-Z][a-zA-Z|0-9|]*([_][a-zA-Z|0-9]+)*([.][a-zA-Z|0-9]+([_][a-zA-Z|0-9]+)*)?@[a-zA-Z][a-zA-Z|0-9|]*([-][a-zA-Z|0-9]+)*\.([a-zA-Z][a-zA-Z|0-9]*(\.[a-zA-Z][a-zA-Z|0-9]*)?)$") Then
                            strErrMsg = "Co-ordinator Email ID for Stock  Requisition - Please enter valid Email ID: " & dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.COORDINATOR_EMAIL_STOCKREQ.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                    End If
                End If
                'COORDINATOR_EMAIL_STOCKXFER
                If dr.Table.Columns.Contains(EnumApps.CartCount & "_" & AppParameters_Enum.COORDINATOR_EMAIL_STOCKXFER.ToString) Then
                    strCtrlText = Trim(dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.COORDINATOR_EMAIL_STOCKXFER.ToString).ToString)
                    If Not String.IsNullOrEmpty(strCtrlText) Then
                        If Not Regex.IsMatch(strCtrlText, "^[a-zA-Z][a-zA-Z|0-9|]*([_][a-zA-Z|0-9]+)*([.][a-zA-Z|0-9]+([_][a-zA-Z|0-9]+)*)?@[a-zA-Z][a-zA-Z|0-9|]*([-][a-zA-Z|0-9]+)*\.([a-zA-Z][a-zA-Z|0-9]*(\.[a-zA-Z][a-zA-Z|0-9]*)?)$") Then
                            strErrMsg = "Co-ordinator Email ID for StockTransfer - Please enter valid Email ID: " & dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.COORDINATOR_EMAIL_STOCKXFER.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                    End If
                End If
                'COORDINATOR_EMAILSTOCKLESSREQ
                If dr.Table.Columns.Contains(EnumApps.CartCount & "_" & AppParameters_Enum.COORDINATOR_EMAILSTOCKLESSREQ.ToString) Then
                    strCtrlText = Trim(dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.COORDINATOR_EMAILSTOCKLESSREQ.ToString).ToString)
                    If Not String.IsNullOrEmpty(strCtrlText) Then
                        If Not Regex.IsMatch(strCtrlText, "^[a-zA-Z][a-zA-Z|0-9|]*([_][a-zA-Z|0-9]+)*([.][a-zA-Z|0-9]+([_][a-zA-Z|0-9]+)*)?@[a-zA-Z][a-zA-Z|0-9|]*([-][a-zA-Z|0-9]+)*\.([a-zA-Z][a-zA-Z|0-9]*(\.[a-zA-Z][a-zA-Z|0-9]*)?)$") Then
                            strErrMsg = "Co-ordinator Email ID for Stockless Item Requisition - Please enter valid Email ID: " & dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.COORDINATOR_EMAILSTOCKLESSREQ.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                    End If
                End If
                'MM_COORD_EMAIL
                If dr.Table.Columns.Contains(EnumApps.CartCount & "_" & AppParameters_Enum.MM_COORD_EMAIL.ToString) Then
                    strCtrlText = Trim(dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.MM_COORD_EMAIL.ToString).ToString)
                    If Not String.IsNullOrEmpty(strCtrlText) Then
                        If Not Regex.IsMatch(strCtrlText, "^[a-zA-Z][a-zA-Z|0-9|]*([_][a-zA-Z|0-9]+)*([.][a-zA-Z|0-9]+([_][a-zA-Z|0-9]+)*)?@[a-zA-Z][a-zA-Z|0-9|]*([-][a-zA-Z|0-9]+)*\.([a-zA-Z][a-zA-Z|0-9]*(\.[a-zA-Z][a-zA-Z|0-9]*)?)$") Then
                            strErrMsg = "Coordinator Email Id - Please enter valid Email ID: " & dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.MM_COORD_EMAIL.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                    End If
                End If
                'REQUESTOR_ID
                If dr.Table.Columns.Contains(EnumApps.CartCount & "_" & AppParameters_Enum.REQUESTOR_ID.ToString) Then
                    strCtrlText = Trim(dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.REQUESTOR_ID.ToString).ToString)
                    If Not String.IsNullOrEmpty(strCtrlText) Then
                        strValid = strChars & strNumbers & "_"
                        For intCnt As Integer = 0 To strCtrlText.Length - 1
                            ch = strCtrlText(intCnt)
                            If strValid.IndexOf(ch) = -1 Then
                                strErrMsg = " Only characters, numbers or underscore is allowed Requestor : " & dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.REQUESTOR_ID.ToString).ToString
                                If log.IsDebugEnabled Then log.Debug(strErrMsg)
                                Return strErrMsg
                            End If
                        Next
                    End If
                End If
                'COORDINATOR_EMAIL_NONSTOCKREQ
                If dr.Table.Columns.Contains(EnumApps.CartCount & "_" & AppParameters_Enum.COORDINATOR_EMAIL_NONSTOCKREQ.ToString) Then
                    strCtrlText = Trim(dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.COORDINATOR_EMAIL_NONSTOCKREQ.ToString).ToString)
                    If Not String.IsNullOrEmpty(strCtrlText) Then
                        If Not Regex.IsMatch(strCtrlText, "^[a-zA-Z][a-zA-Z|0-9|]*([_][a-zA-Z|0-9]+)*([.][a-zA-Z|0-9]+([_][a-zA-Z|0-9]+)*)?@[a-zA-Z][a-zA-Z|0-9|]*([-][a-zA-Z|0-9]+)*\.([a-zA-Z][a-zA-Z|0-9]*(\.[a-zA-Z][a-zA-Z|0-9]*)?)$") Then
                            strErrMsg = "Co-ordinator Email ID for Non  Stock Requisition - Please enter valid Email ID: " & dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.COORDINATOR_EMAIL_NONSTOCKREQ.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                    End If
                End If
            End If

            'CycleCount

            'Receiving
            If pdsAppID.Tables(0).Select("APP_ID='" & EnumApps.Receiving & "'").Length > 0 Then

                'MAX_NO_OF_REC_DOWNLOAD
                If dr.Table.Columns.Contains(EnumApps.Receiving & "_" & AppParameters_Enum.MAX_NO_OF_REC_DOWNLOAD.ToString) Then
                    strCtrlText = Trim(dr.Item(EnumApps.Receiving & "_" & AppParameters_Enum.MAX_NO_OF_REC_DOWNLOAD.ToString).ToString)
                    If Not String.IsNullOrEmpty(strCtrlText) Then
                        If Not Regex.IsMatch(strCtrlText, "^[0-9]+$") Then
                            strErrMsg = "Max Number of Records to download - Please enter a positive numeric value : " & dr.Item(EnumApps.Receiving & "_" & AppParameters_Enum.MAX_NO_OF_REC_DOWNLOAD.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        ElseIf strCtrlText.Length > 2 Then
                            strErrMsg = "Max Number of Records to download - Number of digits cannot be more than  2 : " & dr.Item(EnumApps.Receiving & "_" & AppParameters_Enum.MAX_NO_OF_REC_DOWNLOAD.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                        If Not CType(strCtrlText, Integer) > 0 Then
                            strErrMsg = "Max Number of Records to download - Should not be less than 1 : " & dr.Item(EnumApps.Receiving & "_" & AppParameters_Enum.MAX_NO_OF_REC_DOWNLOAD.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                    End If
                End If
                'ERP_USER
                If dr.Table.Columns.Contains(EnumApps.Receiving & "_" & AppParameters_Enum.PS_USER.ToString) Then

                    strCtrlText = Trim(dr.Item(EnumApps.Receiving & "_" & AppParameters_Enum.PS_USER.ToString).ToString)
                    If Not String.IsNullOrEmpty(strCtrlText) Then
                        If strCtrlText.ToString.StartsWith("_") Then
                            strErrMsg = " Underscore is not allowed as a first character in User ID : " & dr.Item(EnumApps.Receiving & "_" & AppParameters_Enum.PS_USER.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        ElseIf strCtrlText.Length > 10 Then
                            strErrMsg = "User ID - Number of characters cannot be more than 10 : " & dr.Item(EnumApps.Receiving & "_" & AppParameters_Enum.PS_USER.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                        strValid = strChars & strNumbers & "_"
                        For intCnt As Integer = 0 To strCtrlText.Length - 1
                            ch = strCtrlText(intCnt)
                            If strValid.IndexOf(ch) = -1 Then
                                strErrMsg = " Only characters, numbers or underscore is allowed User ID : " & dr.Item(EnumApps.Receiving & "_" & AppParameters_Enum.PS_USER.ToString).ToString
                                If log.IsDebugEnabled Then log.Debug(strErrMsg)
                                Return strErrMsg
                            End If
                        Next
                    End If
                End If
                'REQUESTOR_EMAIL_TABLE
                If dr.Table.Columns.Contains(EnumApps.Receiving & "_" & AppParameters_Enum.REQUESTOR_EMAIL_TABLE.ToString) Then

                    strCtrlText = Trim(dr.Item(EnumApps.Receiving & "_" & AppParameters_Enum.REQUESTOR_EMAIL_TABLE.ToString).ToString)
                    If strCtrlText.Length > 50 Then
                        strErrMsg = " Table/view name to read Email ID for Requestor - Number of characters cannot be more than 50 : " & dr.Item(EnumApps.Receiving & "_" & AppParameters_Enum.REQUESTOR_EMAIL_TABLE.ToString).ToString
                        If log.IsDebugEnabled Then log.Debug(strErrMsg)
                        Return strErrMsg
                    End If
                End If
                'COORDINATOR_EMAIL_RECEIVEREQ
                If dr.Table.Columns.Contains(EnumApps.Receiving & "_" & AppParameters_Enum.COORDINATOR_EMAIL_RECEIVEREQ.ToString) Then
                    strCtrlText = Trim(dr.Item(EnumApps.Receiving & "_" & AppParameters_Enum.COORDINATOR_EMAIL_RECEIVEREQ.ToString).ToString)
                    If Not String.IsNullOrEmpty(strCtrlText) Then
                        If Not Regex.IsMatch(strCtrlText, "^[a-zA-Z][a-zA-Z|0-9|]*([_][a-zA-Z|0-9]+)*([.][a-zA-Z|0-9]+([_][a-zA-Z|0-9]+)*)?@[a-zA-Z][a-zA-Z|0-9|]*([-][a-zA-Z|0-9]+)*\.([a-zA-Z][a-zA-Z|0-9]*(\.[a-zA-Z][a-zA-Z|0-9]*)?)$") Then
                            strErrMsg = "Co-ordinator Email ID for Receive item Requisition - Please enter valid Email ID: " & dr.Item(EnumApps.Receiving & "_" & AppParameters_Enum.COORDINATOR_EMAIL_RECEIVEREQ.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                    End If
                End If
                'RECALL_NOTIFICATION_EMAIL
                If dr.Table.Columns.Contains(EnumApps.Receiving & "_" & AppParameters_Enum.RECALL_NOTIFICATION_EMAIL.ToString) Then

                    strCtrlText = Trim(dr.Item(EnumApps.Receiving & "_" & AppParameters_Enum.RECALL_NOTIFICATION_EMAIL.ToString).ToString)
                    Dim ConfigData As Long
                    Dim RecallParameter As Boolean
                    ConfigData = CheckRecall(pDeviceTokenEntry, RecallParameter)
                    If ConfigData = ATPAR_OK Then
                        If RecallParameter Then
                            If String.IsNullOrEmpty(strCtrlText) Then
                                strErrMsg = "Email for Recall Notification is Mandatory when Recall Management is implemented : " & dr.Item(EnumApps.Receiving & "_" & AppParameters_Enum.RECALL_NOTIFICATION_EMAIL.ToString).ToString
                                If log.IsDebugEnabled Then log.Debug(strErrMsg)
                                Return strErrMsg
                            End If
                        End If
                    Else
                        If log.IsFatalEnabled Then log.Fatal("Exception Thrown in " & methodBaseName & ", Org Creation Failed.Exception is:Error in getting recall enabled parameter from config data.")
                        Return "E_SERVERERROR"
                    End If
                    If Not String.IsNullOrEmpty(strCtrlText) Then
                        If Not Regex.IsMatch(strCtrlText, "^[a-zA-Z][a-zA-Z|0-9|]*([_][a-zA-Z|0-9]+)*([.][a-zA-Z|0-9]+([_][a-zA-Z|0-9]+)*)?@[a-zA-Z][a-zA-Z|0-9|]*([-][a-zA-Z|0-9]+)*\.([a-zA-Z][a-zA-Z|0-9]*(\.[a-zA-Z][a-zA-Z|0-9]*)?)$") Then
                            strErrMsg = "Please enter valid Email ID in Email for Recall Notification Textbox : " & dr.Item(EnumApps.Receiving & "_" & AppParameters_Enum.RECALL_NOTIFICATION_EMAIL.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                    End If
                End If
            End If

            'PickPlan
            If pdsAppID.Tables(0).Select("APP_ID='" & EnumApps.PickPlan & "'").Length > 0 Then
                'DEFAULT_PRIORITY
                If dr.Table.Columns.Contains(EnumApps.PickPlan & "_" & AppParameters_Enum.DEFAULT_PRIORITY.ToString) Then

                    strCtrlText = Trim(dr.Item(EnumApps.PickPlan & "_" & AppParameters_Enum.DEFAULT_PRIORITY.ToString).ToString)
                    If Not Regex.IsMatch(strCtrlText, "^[0-9]+$") Then
                        strErrMsg = "Default Priority - Please enter a positive numeric value : " & dr.Item(EnumApps.PickPlan & "_" & AppParameters_Enum.DEFAULT_PRIORITY.ToString).ToString
                        If log.IsDebugEnabled Then log.Debug(strErrMsg)
                        Return strErrMsg
                    ElseIf strCtrlText.Length > 2 Then
                        strErrMsg = "Default Priority - Number of digits cannot be more than  2 : " & dr.Item(EnumApps.PickPlan & "_" & AppParameters_Enum.DEFAULT_PRIORITY.ToString).ToString
                        If log.IsDebugEnabled Then log.Debug(strErrMsg)
                        Return strErrMsg
                    End If
                End If
                ''LIMIT_OF_LISTS
                If dr.Table.Columns.Contains(EnumApps.PickPlan & "_" & AppParameters_Enum.LIMIT_OF_LISTS.ToString) Then

                    strCtrlText = Trim(dr.Item(EnumApps.PickPlan & "_" & AppParameters_Enum.LIMIT_OF_LISTS.ToString).ToString)
                    If Not Regex.IsMatch(strCtrlText, "^[0-9]+$") Then
                        strErrMsg = "Limit number of Lists - Please enter a positive numeric value : " & dr.Item(EnumApps.PickPlan & "_" & AppParameters_Enum.LIMIT_OF_LISTS.ToString).ToString
                        If log.IsDebugEnabled Then log.Debug(strErrMsg)
                        Return strErrMsg
                    ElseIf strCtrlText.Length > 2 Then
                        strErrMsg = "Limit number of Lists - Number of digits cannot be more than : " & dr.Item(EnumApps.PickPlan & "_" & AppParameters_Enum.LIMIT_OF_LISTS.ToString).ToString
                        If log.IsDebugEnabled Then log.Debug(strErrMsg)
                        Return strErrMsg
                    End If
                End If
                'ERP_USER_ID
                If dr.Table.Columns.Contains(EnumApps.PickPlan & "_" & AppParameters_Enum.PS_USER.ToString) Then

                    strCtrlText = Trim(dr.Item(EnumApps.PickPlan & "_" & AppParameters_Enum.PS_USER.ToString).ToString)
                    If Not String.IsNullOrEmpty(strCtrlText) Then
                        If strCtrlText.ToString.StartsWith("_") Then
                            strErrMsg = " Underscore is not allowed as a first character in User ID : " & dr.Item("5_PS_USER").ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        ElseIf strCtrlText.Length > 10 Then
                            strErrMsg = "User ID - Number of characters cannot be more than 10 : " & dr.Item("5_PS_USER").ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                        strValid = strChars & strNumbers & "_"
                        For intCnt As Integer = 0 To strCtrlText.Length - 1
                            ch = strCtrlText(intCnt)
                            If strValid.IndexOf(ch) = -1 Then
                                strErrMsg = " Only characters, numbers or underscore is allowed User ID : " & dr.Item("5_PS_USER").ToString
                                If log.IsDebugEnabled Then log.Debug(strErrMsg)
                                Return strErrMsg
                            End If
                        Next
                    End If
                End If
                'COORDINATOR_EMAIL_PICKREQ
                If dr.Table.Columns.Contains(EnumApps.PickPlan & "_" & AppParameters_Enum.COORDINATOR_EMAIL_PICKREQ.ToString) Then
                    strCtrlText = Trim(dr.Item(EnumApps.PickPlan & "_" & AppParameters_Enum.COORDINATOR_EMAIL_PICKREQ.ToString).ToString)
                    If Not String.IsNullOrEmpty(strCtrlText) Then
                        If Not Regex.IsMatch(strCtrlText, "^[a-zA-Z][a-zA-Z|0-9|]*([_][a-zA-Z|0-9]+)*([.][a-zA-Z|0-9]+([_][a-zA-Z|0-9]+)*)?@[a-zA-Z][a-zA-Z|0-9|]*([-][a-zA-Z|0-9]+)*\.([a-zA-Z][a-zA-Z|0-9]*(\.[a-zA-Z][a-zA-Z|0-9]*)?)$") Then
                            strErrMsg = "Co-ordinator Email ID for Pick Requisition - Please enter valid Email ID: " & dr.Item(EnumApps.PickPlan & "_" & AppParameters_Enum.COORDINATOR_EMAIL_PICKREQ.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                    End If
                End If

            End If

            'Deliver
            If pdsAppID.Tables(0).Select("APP_ID='" & EnumApps.Deliver & "'").Length > 0 Then
                'BADGE_TRACK_INFO
                If dr.Table.Columns.Contains(EnumApps.Deliver & "_" & AppParameters_Enum.BADGE_TRACK_INFO.ToString) Then

                    strCtrlText = Trim(dr.Item(EnumApps.Deliver & "_" & AppParameters_Enum.BADGE_TRACK_INFO.ToString).ToString)
                    If Not String.IsNullOrEmpty(strCtrlText) Then
                        If Not Regex.IsMatch(strCtrlText, "^[0-9]+$") Then
                            strErrMsg = "Track Numbers - Please enter a positive numeric value : " & dr.Item(EnumApps.Deliver & "_" & AppParameters_Enum.BADGE_TRACK_INFO.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        ElseIf (CInt(strCtrlText) > 3 Or CInt(strCtrlText) < 1) Then
                            strErrMsg = "The valid Track Numbers used for reading info from Badge are 1,2,3 : " & dr.Item(EnumApps.Deliver & "_" & AppParameters_Enum.BADGE_TRACK_INFO.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                    Else
                        strErrMsg = "Track Numbers - Please enter valid Swipe Card Track Number : " & dr.Item(EnumApps.Deliver & "_" & AppParameters_Enum.BADGE_TRACK_INFO.ToString).ToString
                        If log.IsDebugEnabled Then log.Debug(methodBaseName & ":" & strErrMsg)
                        Return strErrMsg
                    End If

                End If
                'REQUESTOR_EMAIL_TABLE
                If dr.Table.Columns.Contains(EnumApps.Deliver & "_" & AppParameters_Enum.REQUESTOR_EMAIL_TABLE.ToString) Then

                    strCtrlText = Trim(dr.Item(EnumApps.Deliver & "_" & AppParameters_Enum.REQUESTOR_EMAIL_TABLE.ToString).ToString)
                    If strCtrlText.Length > 50 Then
                        strErrMsg = "Table/view name to read Email ID for Requestor - Number of characters cannot be more than 50 : " & dr.Item(EnumApps.Deliver & "_" & AppParameters_Enum.REQUESTOR_EMAIL_TABLE.ToString).ToString
                        If log.IsDebugEnabled Then log.Debug(strErrMsg)
                        Return strErrMsg
                    End If
                End If
                'COORDINATOR_EMAIL_EMPLOYEEDATA
                If dr.Table.Columns.Contains(EnumApps.Deliver & "_" & AppParameters_Enum.COORDINATOR_EMAIL_EMPLOYEEDATA.ToString) Then
                    strCtrlText = Trim(dr.Item(EnumApps.Deliver & "_" & AppParameters_Enum.COORDINATOR_EMAIL_EMPLOYEEDATA.ToString).ToString)
                    If Not String.IsNullOrEmpty(strCtrlText) Then
                        If Not Regex.IsMatch(strCtrlText, "^[a-zA-Z][a-zA-Z|0-9|]*([_][a-zA-Z|0-9]+)*([.][a-zA-Z|0-9]+([_][a-zA-Z|0-9]+)*)?@[a-zA-Z][a-zA-Z|0-9|]*([-][a-zA-Z|0-9]+)*\.([a-zA-Z][a-zA-Z|0-9]*(\.[a-zA-Z][a-zA-Z|0-9]*)?)$") Then
                            strErrMsg = "Email ID for employee data load failures notification - Please enter valid Email ID: " & dr.Item(EnumApps.Deliver & "_" & AppParameters_Enum.COORDINATOR_EMAIL_EMPLOYEEDATA.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                    End If
                End If
            End If

            'PutAway
            If pdsAppID.Tables(0).Select("APP_ID='" & EnumApps.PutAway & "'").Length > 0 Then
                'ERP_USER_ID
                If dr.Table.Columns.Contains(EnumApps.PickPlan & "_" & AppParameters_Enum.PS_USER.ToString) Then

                    strCtrlText = Trim(dr.Item(EnumApps.PickPlan & "_" & AppParameters_Enum.PS_USER.ToString).ToString)
                    If Not String.IsNullOrEmpty(strCtrlText) Then
                        If strCtrlText.ToString.StartsWith("_") Then
                            strErrMsg = " Underscore is not allowed as a first character in User ID : " & dr.Item(EnumApps.PickPlan & "_" & AppParameters_Enum.PS_USER.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        ElseIf strCtrlText.Length > 10 Then
                            strErrMsg = "User ID - Number of characters cannot be more than 10 : " & dr.Item(EnumApps.PickPlan & "_" & AppParameters_Enum.PS_USER.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                        strValid = strChars & strNumbers & "_"
                        For intCnt As Integer = 0 To strCtrlText.Length - 1
                            ch = strCtrlText(intCnt)
                            If strValid.IndexOf(ch) = -1 Then
                                strErrMsg = " Only characters, numbers or underscore is allowed User ID : " & dr.Item(EnumApps.PickPlan & "_" & AppParameters_Enum.PS_USER.ToString).ToString
                                If log.IsDebugEnabled Then log.Debug(strErrMsg)
                                Return strErrMsg
                            End If
                        Next
                    End If
                End If
            End If

            'TrackIT

            If pdsAppID.Tables(0).Select("APP_ID='" & EnumApps.TrackIT & "'").Length > 0 Then
                'B_MAX_STOR
                If dr.Table.Columns.Contains(EnumApps.TrackIT & "_" & AppParameters_Enum.B_MAX_STOR.ToString) Then

                    strCtrlText = Trim(dr.Item(EnumApps.TrackIT & "_" & AppParameters_Enum.B_MAX_STOR.ToString).ToString)
                    If Not String.IsNullOrEmpty(strCtrlText) Then
                        If Not Regex.IsMatch(strCtrlText, "^[0-9]+$") Then
                            strErrMsg = "Max. Storage Period for Box Items - Please enter a positive numeric value : " & dr.Item(EnumApps.TrackIT & "_" & AppParameters_Enum.B_MAX_STOR.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        ElseIf strCtrlText.Length > 4 Then
                            strErrMsg = "Max. Storage Period for Box Items - Number of digits cannot be more than 4 : " & dr.Item(EnumApps.TrackIT & "_" & AppParameters_Enum.B_MAX_STOR.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                    End If
                End If
                'E_MAX_STOR
                If dr.Table.Columns.Contains(EnumApps.TrackIT & "_" & AppParameters_Enum.E_MAX_STOR.ToString) Then

                    strCtrlText = Trim(dr.Item(EnumApps.TrackIT & "_" & AppParameters_Enum.E_MAX_STOR.ToString).ToString)
                    If Not String.IsNullOrEmpty(strCtrlText) Then
                        If Not Regex.IsMatch(strCtrlText, "^[0-9]+$") Then
                            strErrMsg = "Max. Storage Period for Equipment Items - Please enter a positive numeric value : " & dr.Item(EnumApps.TrackIT & "_" & AppParameters_Enum.E_MAX_STOR.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        ElseIf strCtrlText.Length > 4 Then
                            strErrMsg = "Max. Storage Period for Equipment Items - Number of digits cannot be more than 4 : " & dr.Item(EnumApps.TrackIT & "_" & AppParameters_Enum.E_MAX_STOR.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                    End If
                End If
                'F_MAX_STOR
                If dr.Table.Columns.Contains(EnumApps.TrackIT & "_" & AppParameters_Enum.F_MAX_STOR.ToString) Then

                    strCtrlText = Trim(dr.Item(EnumApps.TrackIT & "_" & AppParameters_Enum.F_MAX_STOR.ToString).ToString)
                    If Not String.IsNullOrEmpty(strCtrlText) Then
                        If Not Regex.IsMatch(strCtrlText, "^[0-9]+$") Then
                            strErrMsg = "Max. Storage Period for Furniture Items - Please enter a positive numeric value : " & dr.Item(EnumApps.TrackIT & "_" & AppParameters_Enum.F_MAX_STOR.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        ElseIf strCtrlText.Length > 4 Then
                            strErrMsg = "Max. Storage Period for Furniture Items - Number of digits cannot be more than 4 : " & dr.Item(EnumApps.TrackIT & "_" & AppParameters_Enum.F_MAX_STOR.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                    End If
                End If
                'NO_OF_REQUESTS_FOR_SAME_EQ_ITM
                If dr.Table.Columns.Contains(EnumApps.TrackIT & "_" & AppParameters_Enum.NO_OF_REQUESTS_FOR_SAME_EQ_ITM.ToString) Then

                    strCtrlText = Trim(dr.Item(EnumApps.TrackIT & "_" & AppParameters_Enum.NO_OF_REQUESTS_FOR_SAME_EQ_ITM.ToString).ToString)
                    If Not String.IsNullOrEmpty(strCtrlText) Then
                        If Not Regex.IsMatch(strCtrlText, "^[0-9]+$") Then
                            strErrMsg = "No. Of Requests for same EQ Item - Please enter a positive numeric value : " & dr.Item(EnumApps.TrackIT & "_" & AppParameters_Enum.NO_OF_REQUESTS_FOR_SAME_EQ_ITM.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        ElseIf strCtrlText.Length > 4 Then
                            strErrMsg = "No. Of Requests for same EQ Item - Number of digits cannot be more than 4 : " & dr.Item(EnumApps.TrackIT & "_" & AppParameters_Enum.NO_OF_REQUESTS_FOR_SAME_EQ_ITM.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                    End If
                End If
            End If

            'StockIssue
            If pdsAppID.Tables(0).Select("APP_ID='" & EnumApps.StockIssue & "'").Length > 0 Then
                'ERP_USER_ID
                If dr.Table.Columns.Contains(EnumApps.StockIssue & "_" & AppParameters_Enum.PS_USER.ToString) Then

                    strCtrlText = Trim(dr.Item(EnumApps.StockIssue & "_" & AppParameters_Enum.PS_USER.ToString).ToString)
                    If Not String.IsNullOrEmpty(strCtrlText) Then
                        If strCtrlText.ToString.StartsWith("_") Then
                            strErrMsg = " Underscore is not allowed as a first character in User ID : " & dr.Item(EnumApps.StockIssue & "_" & AppParameters_Enum.PS_USER.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        ElseIf strCtrlText.Length > 10 Then
                            strErrMsg = "User ID - Number of characters cannot be more than 10 : " & dr.Item(EnumApps.StockIssue & "_" & AppParameters_Enum.PS_USER.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                        strValid = strChars & strNumbers & "_"
                        For intCnt As Integer = 0 To strCtrlText.Length - 1
                            ch = strCtrlText(intCnt)
                            If strValid.IndexOf(ch) = -1 Then
                                strErrMsg = " Only characters, numbers or underscore is allowed User ID : " & dr.Item(EnumApps.StockIssue & "_" & AppParameters_Enum.PS_USER.ToString).ToString
                                If log.IsDebugEnabled Then log.Debug(strErrMsg)
                                Return strErrMsg
                            End If
                        Next
                    End If
                End If
                'COORDINATOR_EMAIL_STOCKISSUE
                If dr.Table.Columns.Contains(EnumApps.StockIssue & "_" & AppParameters_Enum.COORDINATOR_EMAIL_STOCKISSUE.ToString) Then
                    strCtrlText = Trim(dr.Item(EnumApps.StockIssue & "_" & AppParameters_Enum.COORDINATOR_EMAIL_STOCKISSUE.ToString).ToString)
                    If Not String.IsNullOrEmpty(strCtrlText) Then
                        If Not Regex.IsMatch(strCtrlText, "^[a-zA-Z][a-zA-Z|0-9|]*([_][a-zA-Z|0-9]+)*([.][a-zA-Z|0-9]+([_][a-zA-Z|0-9]+)*)?@[a-zA-Z][a-zA-Z|0-9|]*([-][a-zA-Z|0-9]+)*\.([a-zA-Z][a-zA-Z|0-9]*(\.[a-zA-Z][a-zA-Z|0-9]*)?)$") Then
                            strErrMsg = "Co-ordinator Email ID for Stock Issue/Returns - Please enter valid Email ID: " & dr.Item(EnumApps.StockIssue & "_" & AppParameters_Enum.COORDINATOR_EMAIL_STOCKISSUE.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                    End If
                End If
                'RECALL_NOTIFICATION_EMAIL
                If dr.Table.Columns.Contains(EnumApps.StockIssue & "_" & AppParameters_Enum.RECALL_NOTIFICATION_EMAIL.ToString) Then

                    strCtrlText = Trim(dr.Item(EnumApps.StockIssue & "_" & AppParameters_Enum.RECALL_NOTIFICATION_EMAIL.ToString).ToString)
                    Dim ConfigData As Long
                    Dim RecallParameter As Boolean
                    ConfigData = CheckRecall(pDeviceTokenEntry, RecallParameter)
                    If ConfigData = ATPAR_OK Then
                        If RecallParameter Then
                            If String.IsNullOrEmpty(strCtrlText) Then
                                strErrMsg = "Email for Recall Notification is Mandatory when Recall Management is implemented : " & dr.Item(EnumApps.StockIssue & "_" & AppParameters_Enum.RECALL_NOTIFICATION_EMAIL.ToString).ToString
                                If log.IsDebugEnabled Then log.Debug(strErrMsg)
                                Return strErrMsg
                            End If
                        End If
                    Else
                        If log.IsFatalEnabled Then log.Fatal("Exception Thrown in " & methodBaseName & ", Org Creation Failed.Exception is:Error in getting recall enabled parameter from config data.")
                        Return "E_SERVERERROR"
                    End If
                    If Not String.IsNullOrEmpty(strCtrlText) Then
                        If Not Regex.IsMatch(strCtrlText, "^[a-zA-Z][a-zA-Z|0-9|]*([_][a-zA-Z|0-9]+)*([.][a-zA-Z|0-9]+([_][a-zA-Z|0-9]+)*)?@[a-zA-Z][a-zA-Z|0-9|]*([-][a-zA-Z|0-9]+)*\.([a-zA-Z][a-zA-Z|0-9]*(\.[a-zA-Z][a-zA-Z|0-9]*)?)$") Then
                            strErrMsg = "Please enter valid Email ID in Email for Recall Notification Textbox : " & dr.Item(EnumApps.StockIssue & "_" & AppParameters_Enum.RECALL_NOTIFICATION_EMAIL.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                    End If
                End If
                'SYNC_FREQUENCY
                If dr.Table.Columns.Contains(EnumApps.StockIssue & "_" & AppParameters_Enum.SYNC_FREQUENCY.ToString) Then
                    strCtrlText = Trim(dr.Item(EnumApps.StockIssue & "_" & AppParameters_Enum.SYNC_FREQUENCY.ToString).ToString)
                    If Not String.IsNullOrEmpty(strCtrlText) Then
                        If Not Regex.IsMatch(strCtrlText, "^[0-9]+$") Then
                            strErrMsg = "Frequency for Syncing - Please enter a positive numeric value."
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        ElseIf strCtrlText.Length > 2 Then
                            strErrMsg = "Frequency for Syncing - Max. allowable Frequency value is 99"
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                    End If
                End If

            End If

            'BinToBin
            If pdsAppID.Tables(0).Select("APP_ID='" & EnumApps.BinToBin & "'").Length > 0 Then
                'ERP_USER_ID
                If dr.Table.Columns.Contains(EnumApps.BinToBin & "_" & AppParameters_Enum.PS_USER.ToString) Then
                    strCtrlText = Trim(dr.Item(EnumApps.BinToBin & "_" & AppParameters_Enum.PS_USER.ToString).ToString)
                    If Not String.IsNullOrEmpty(strCtrlText) Then
                        If strCtrlText.ToString.StartsWith("_") Then
                            strErrMsg = " Underscore is not allowed as a first character in User ID  : " & dr.Item(EnumApps.BinToBin & "_" & AppParameters_Enum.PS_USER.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        ElseIf strCtrlText.Length > 10 Then
                            strErrMsg = "User ID - Number of characters cannot be more than 10 : " & dr.Item(EnumApps.BinToBin & "_" & AppParameters_Enum.PS_USER.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                        strValid = strChars & strNumbers & "_"
                        For intCnt As Integer = 0 To strCtrlText.Length - 1
                            ch = strCtrlText(intCnt)
                            If strValid.IndexOf(ch) = -1 Then
                                strErrMsg = " Only characters, numbers or underscore is allowed User ID : " & dr.Item(EnumApps.BinToBin & "_" & AppParameters_Enum.PS_USER.ToString).ToString
                                If log.IsDebugEnabled Then log.Debug(strErrMsg)
                                Return strErrMsg
                            End If
                        Next
                    End If
                End If
            End If

            'Point Of Use            
            If pdsAppID.Tables(0).Select("APP_ID='" & EnumApps.PointOfUse & "'").Length > 0 Then
                'DURATION_TRACKING_EXP
                If dr.Table.Columns.Contains(EnumApps.PointOfUse & "_" & AppParameters_Enum.DURATION_TRACKING_EXP.ToString) Then

                    strCtrlText = Trim(dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.DURATION_TRACKING_EXP.ToString).ToString)
                    If Not Regex.IsMatch(strCtrlText, "^[0-9]+$") Then
                        strErrMsg = "Duration Tracking Expiration in days - Please enter a positive numeric value : " & dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.DURATION_TRACKING_EXP.ToString).ToString
                        If log.IsDebugEnabled Then log.Debug(strErrMsg)
                        Return strErrMsg
                    ElseIf strCtrlText.Length > 3 Then
                        strErrMsg = "Duration Tracking Expiration in days - Number of digits cannot be more than 3 : " & dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.DURATION_TRACKING_EXP.ToString).ToString
                        If log.IsDebugEnabled Then log.Debug(strErrMsg)
                        Return strErrMsg
                    End If
                End If
                'EMAILID_FOR_ALERTS
                If dr.Table.Columns.Contains(EnumApps.PointOfUse & "_" & AppParameters_Enum.EMAILID_FOR_ALERTS.ToString) Then

                    strCtrlText = Trim(dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.EMAILID_FOR_ALERTS.ToString).ToString)
                    If Not String.IsNullOrEmpty(strCtrlText) Then
                        If strCtrlText.Length > 50 Then
                            strErrMsg = "Email Id for alerts - Number of characters cannot be more than 50 : " & dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.EMAILID_FOR_ALERTS.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        ElseIf Not Regex.IsMatch(strCtrlText, "^[a-zA-Z][a-zA-Z|0-9|]*([_][a-zA-Z|0-9]+)*([.][a-zA-Z|0-9]+([_][a-zA-Z|0-9]+)*)?@[a-zA-Z][a-zA-Z|0-9|]*([-][a-zA-Z|0-9]+)*\.([a-zA-Z][a-zA-Z|0-9]*(\.[a-zA-Z][a-zA-Z|0-9]*)?)$") Then
                            strErrMsg = "Please enter valid Email ID in Email Id for alerts Textbox : " & dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.EMAILID_FOR_ALERTS.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                    End If
                End If
                'FACTOR_OF_SAFETY
                If dr.Table.Columns.Contains(EnumApps.PointOfUse & "_" & AppParameters_Enum.FACTOR_OF_SAFETY.ToString) Then

                    strCtrlText = Trim(dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.FACTOR_OF_SAFETY.ToString).ToString)
                    If Not String.IsNullOrEmpty(strCtrlText) Then
                        If Not Regex.IsMatch(strCtrlText, "^[0-9]+$") Then
                            strErrMsg = "Factor of safety for recommended par - Please enter a positive numeric value : " & dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.FACTOR_OF_SAFETY.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        ElseIf strCtrlText.Length > 3 Then
                            strErrMsg = "Factor of safety for recommended par - Number of digits cannot be more than 3 : " & dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.FACTOR_OF_SAFETY.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                    End If
                End If
                'FREQUENCY_EMAIL_ALERTS
                If dr.Table.Columns.Contains(EnumApps.PointOfUse & "_" & AppParameters_Enum.FREQUENCY_EMAIL_ALERTS.ToString) Then

                    strCtrlText = Trim(dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.FREQUENCY_EMAIL_ALERTS.ToString).ToString)
                    If Not Regex.IsMatch(strCtrlText, "^[0-9]+$") Then
                        strErrMsg = "Frequency of Email Alerts - Please enter a positive numeric value : " & dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.FREQUENCY_EMAIL_ALERTS.ToString).ToString
                        If log.IsDebugEnabled Then log.Debug(strErrMsg)
                        Return strErrMsg
                    ElseIf strCtrlText.Length > 10 Then
                        strErrMsg = "Frequency of Email Alerts - Number of digits cannot be more than 10 : " & dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.FREQUENCY_EMAIL_ALERTS.ToString).ToString
                        If log.IsDebugEnabled Then log.Debug(strErrMsg)
                        Return strErrMsg
                    End If
                End If
                'PERCENTAGE_OPTIMUM_QTY
                If dr.Table.Columns.Contains(EnumApps.PointOfUse & "_" & AppParameters_Enum.PERCENTAGE_OPTIMUM_QTY.ToString) Then

                    strCtrlText = Trim(dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.PERCENTAGE_OPTIMUM_QTY.ToString).ToString)
                    If Not Regex.IsMatch(strCtrlText, "^[0-9]+$") Then
                        strErrMsg = "Percentage of Optimum quantity - Please enter a positive numeric value : " & dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.PERCENTAGE_OPTIMUM_QTY.ToString).ToString
                        If log.IsDebugEnabled Then log.Debug(strErrMsg)
                        Return strErrMsg
                    ElseIf strCtrlText.Length > 3 Then
                        strErrMsg = "Percentage of Optimum quantity - Number of digits cannot be more than 3 : " & dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.PERCENTAGE_OPTIMUM_QTY.ToString).ToString
                        If log.IsDebugEnabled Then log.Debug(strErrMsg)
                        Return strErrMsg
                    End If
                End If
                'RECALL_NOTIFICATION_EMAIL
                If dr.Table.Columns.Contains(EnumApps.PointOfUse & "_" & AppParameters_Enum.RECALL_NOTIFICATION_EMAIL.ToString) Then

                    strCtrlText = Trim(dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.RECALL_NOTIFICATION_EMAIL.ToString).ToString)
                    Dim ConfigData As Long
                    Dim RecallParameter As Boolean
                    ConfigData = CheckRecall(pDeviceTokenEntry, RecallParameter)
                    If ConfigData = ATPAR_OK Then
                        If RecallParameter Then
                            If String.IsNullOrEmpty(strCtrlText) Then
                                strErrMsg = "Email for Recall Notification is Mandatory when Recall Management is implemented : " & dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.RECALL_NOTIFICATION_EMAIL.ToString).ToString
                                If log.IsDebugEnabled Then log.Debug(strErrMsg)
                                Return strErrMsg
                            End If
                        End If
                    Else
                        If log.IsFatalEnabled Then log.Fatal("Exception Thrown in " & methodBaseName & ", Org Creation Failed.Exception is:Error in getting recall enabled parameter from config data.")
                        Return "E_SERVERERROR"
                    End If
                    If Not String.IsNullOrEmpty(strCtrlText) Then
                        If Not Regex.IsMatch(strCtrlText, "^[a-zA-Z][a-zA-Z|0-9|]*([_][a-zA-Z|0-9]+)*([.][a-zA-Z|0-9]+([_][a-zA-Z|0-9]+)*)?@[a-zA-Z][a-zA-Z|0-9|]*([-][a-zA-Z|0-9]+)*\.([a-zA-Z][a-zA-Z|0-9]*(\.[a-zA-Z][a-zA-Z|0-9]*)?)$") Then
                            strErrMsg = "Please enter valid Email ID in Email for Recall Notification Textbox : " & dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.RECALL_NOTIFICATION_EMAIL.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                    End If
                End If
                'ADJ_REASON_CODE
                If dr.Table.Columns.Contains(EnumApps.PointOfUse & "_" & AppParameters_Enum.ADJ_REASON_CODE.ToString) Then
                    strCtrlText = Trim(dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.ADJ_REASON_CODE.ToString).ToString)
                    If strCtrlText.Length > 10 Then
                        strErrMsg = "Reason Code for Adjustment Return - Number of digits cannot be more than 10 : " & dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.ADJ_REASON_CODE.ToString).ToString
                        If log.IsDebugEnabled Then log.Debug(strErrMsg)
                        Return strErrMsg
                    End If
                End If
                'DEFAULT_LEAD_TIME
                If dr.Table.Columns.Contains(EnumApps.PointOfUse & "_" & AppParameters_Enum.DEFAULT_LEAD_TIME.ToString) Then

                    strCtrlText = Trim(dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.DEFAULT_LEAD_TIME.ToString).ToString)
                    If Not Regex.IsMatch(strCtrlText, "^[0-9]+$") Then
                        strErrMsg = "Default lead time in days - Please enter a positive numeric value. : " & dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.DEFAULT_LEAD_TIME.ToString).ToString
                        If log.IsDebugEnabled Then log.Debug(strErrMsg)
                        Return strErrMsg
                    ElseIf strCtrlText.Length > 3 Then
                        strErrMsg = "Default lead time in days - Please enter a positive numeric value. : " & dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.DEFAULT_LEAD_TIME.ToString).ToString
                        If log.IsDebugEnabled Then log.Debug(strErrMsg)
                        Return strErrMsg
                    End If
                End If
                'EMAILID_FOR_PRODUCT_EXP_ALERTS
                If dr.Table.Columns.Contains(EnumApps.PointOfUse & "_" & AppParameters_Enum.EMAILID_FOR_PRODUCT_EXP_ALERTS.ToString) Then
                    strCtrlText = Trim(dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.EMAILID_FOR_PRODUCT_EXP_ALERTS.ToString).ToString)
                    If Not String.IsNullOrEmpty(strCtrlText) Then
                        If Not Regex.IsMatch(strCtrlText, "^[a-zA-Z][a-zA-Z|0-9|]*([_][a-zA-Z|0-9]+)*([.][a-zA-Z|0-9]+([_][a-zA-Z|0-9]+)*)?@[a-zA-Z][a-zA-Z|0-9|]*([-][a-zA-Z|0-9]+)*\.([a-zA-Z][a-zA-Z|0-9]*(\.[a-zA-Z][a-zA-Z|0-9]*)?)$") Then
                            strErrMsg = "Email for Product Expiration Alerts - Please enter valid Email ID: " & dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.EMAILID_FOR_PRODUCT_EXP_ALERTS.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                    End If
                End If
                'EMAILID_FOR_LOWSTOCK_ALERTS
                If dr.Table.Columns.Contains(EnumApps.PointOfUse & "_" & AppParameters_Enum.EMAILID_FOR_LOWSTOCK_ALERTS.ToString) Then
                    strCtrlText = Trim(dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.EMAILID_FOR_LOWSTOCK_ALERTS.ToString).ToString)
                    If Not String.IsNullOrEmpty(strCtrlText) Then
                        If Not Regex.IsMatch(strCtrlText, "^[a-zA-Z][a-zA-Z|0-9|]*([_][a-zA-Z|0-9]+)*([.][a-zA-Z|0-9]+([_][a-zA-Z|0-9]+)*)?@[a-zA-Z][a-zA-Z|0-9|]*([-][a-zA-Z|0-9]+)*\.([a-zA-Z][a-zA-Z|0-9]*(\.[a-zA-Z][a-zA-Z|0-9]*)?)$") Then
                            strErrMsg = "Email for low stock Alerts - Please enter valid Email ID: " & dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.EMAILID_FOR_LOWSTOCK_ALERTS.ToString).ToString
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        End If
                    End If
                End If
            End If

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in " & methodBaseName & ", Org Creation Failed for UserID  " & dr.Item(0).ToString & " is..." & vbCrLf & ex.ToString)
            Return "E_SERVERERROR"
        End Try

    End Function

    ''' <summary>
    ''' To Validate the Org Group details 
    ''' </summary>
    ''' <param name="dr">DataRow</param>
    ''' <returns>String Message</returns>
    ''' <remarks></remarks>
    Function ValidateOrgData(ByVal dr As DataRow, ByVal _dsBunits As DataSet) As String
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            Dim strChars As String = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
            Dim strNumbers As String = "0123456789"
            Dim strYN As String = "YN"
            Dim strValid As String = String.Empty
            Dim ch As String = String.Empty
            Dim strCtrlText As String = String.Empty
            Dim strErrMsg As String = String.Empty
            Dim _dr() As DataRow
            Dim _strSearch As String = String.Empty
            Dim _strBUType As String = String.Empty
            Dim _strBunitTypeSearch As String = String.Empty
            Dim _drBunitType() As DataRow

            'ORG_GROUP_ID
            strCtrlText = Trim(dr.Item(Enum_OrgGroupBU.OrgGroupID).ToString)
            If strCtrlText = "all" Then
                strErrMsg = "You are not authorised to change the org group " & strCtrlText
                If log.IsDebugEnabled Then log.Debug(strErrMsg)
                Return strErrMsg
            End If
            strValid = strChars & strNumbers & "_"
            If Not String.IsNullOrEmpty(strCtrlText) Then
                If strCtrlText.Length > 20 Then
                    strErrMsg = "  Number of characters cannot be more than 20 For OrgGroupID " & dr.Item(Enum_OrgGroupBU.OrgGroupID).ToString
                    If log.IsDebugEnabled Then log.Debug(strErrMsg)
                    Return strErrMsg
                End If
                For intCnt As Integer = 0 To strCtrlText.Length - 1
                    ch = strCtrlText(intCnt)
                    If strValid.IndexOf(ch) = -1 Then
                        strErrMsg = " Only characters, numbers or underscore is allowed  For OrgGroupId   " & dr.Item(Enum_OrgGroupBU.OrgGroupID).ToString
                        If log.IsDebugEnabled Then log.Debug(strErrMsg)
                        Return strErrMsg
                    End If
                Next
            End If


            'ORG_GROUP_NAME
            strCtrlText = Trim(dr.Item(Enum_OrgGroupBU.OrgGroupDescr).ToString)
            If strCtrlText.Length > 50 Then
                strErrMsg = "  Number of characters cannot be more than 50 For OrgGroup Name " & dr.Item(Enum_OrgGroupBU.OrgGroupDescr).ToString
                If log.IsDebugEnabled Then log.Debug(strErrMsg)
                Return strErrMsg
            End If

            'BUSINESS_UNIT
            strCtrlText = Trim(dr.Item(Enum_OrgGroupBU.BusinessUnit).ToString)

            'BU_TYPE
            _strBUType = Trim(dr.Item(Enum_OrgGroupBU.BusinessUnitType).ToString)
            If log.IsDebugEnabled Then log.Debug(methodBaseName & " Bunit Type : " & _strBUType)

            If _strBUType = BusinessType.Purchasing.ToString Then
                _strBUType = "P"
            ElseIf _strBUType = BusinessType.Inventory.ToString Then
                _strBUType = "I"
            End If

            If strCtrlText.Length > 50 Then
                strErrMsg = "  Number of characters cannot be more than 50 For BusinessUnit " & dr.Item(Enum_OrgGroupBU.BusinessUnit).ToString
                If log.IsDebugEnabled Then log.Debug(strErrMsg)
                Return strErrMsg
            Else
                If Not _dsBunits Is Nothing Then
                    If _dsBunits.Tables.Count > 0 Then
                        _strSearch = "BUSINESS_UNIT = '" & strCtrlText & "'"
                        _dr = _dsBunits.Tables(0).Select(_strSearch)
                        If _dr.Length = 0 Then
                            strErrMsg = "Please insert valid Business Unit(s)"
                            If log.IsDebugEnabled Then log.Debug(strErrMsg)
                            Return strErrMsg
                        Else
                            _strBunitTypeSearch = "BUSINESS_UNIT = '" & strCtrlText & "' AND BU_TYPE = '" & _strBUType & "'"
                            _drBunitType = _dsBunits.Tables(0).Select(_strBunitTypeSearch)
                            If _drBunitType.Length = 0 Then
                                strErrMsg = "Please insert valid Business Unit Type"
                                If log.IsDebugEnabled Then log.Debug(methodBaseName & strErrMsg)
                                Return strErrMsg
                            End If
                        End If
                    End If
                End If
            End If

            'BUSINESS_UNIT_TYPE
            strCtrlText = Trim(dr.Item(Enum_OrgGroupBU.BusinessUnitType).ToString)
            If strCtrlText <> BusinessType.Inventory.ToString() And strCtrlText <> BusinessType.Purchasing.ToString() Then
                strErrMsg = "  Business Unit Type should be either Inventory or Purchasing " & dr.Item(Enum_OrgGroupBU.BusinessUnitType).ToString
                If log.IsDebugEnabled Then log.Debug(strErrMsg)
                Return strErrMsg
            End If

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in ValidateOrgData " & methodBaseName & ", Org Creation Failed for UserID  is..." & vbCrLf & ex.ToString)
            Return "E_SERVERERROR"
        End Try


    End Function

#End Region

    Public Function GetLocations(ByVal pSvrUserID As String, _
                              ByRef pdsLoc As DataSet, _
                              ByVal pLocId As String, _
                              ByVal pLocName As String, _
                              ByVal pStatus As String, _
                              ByVal pOrgGrpId As String, _
                              ByVal pDeviceTokenEntry() As String) As Long _
                              Implements IAtpar_WebTrans.GetLocations


        Dim _StatusCode As Long

        Try
            log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pSvrUserID
            log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)
            Dim stackFrame As New StackFrame()
            Dim methodBase As MethodBase = stackFrame.GetMethod()
            Dim methodBaseName As String = methodBase.Name
            If log.IsDebugEnabled Then log.Debug(methodBaseName)

            Dim _className As String
            Dim _classType As Type
            Dim _reflectObject As Object
            Dim _methodName As MethodInfo
            Dim pInputParameters As New DataSet
            Dim _pick_header_dt As New DataTable
            Dim _remoteAtparObj As String
            Dim _erpObjAssy As Assembly

            Try
                _remoteAtparObj = CONST_ATPAR & "_" & GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), _
                                  CONFIGFILE.ERP_SYS_DETAILS.ToString(), ERP_SYS_DETAILS.DOWNLOADFROM.ToString())

                If _remoteAtparObj.ToUpper() = "ATPAR_PEOPLESOFT" Then _remoteAtparObj = "Atpar_FileInterface"

                CreateERPObject(_remoteAtparObj, _erpObjAssy)
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to Create ERP Object .... " & _remoteAtparObj _
                                    & vbCrLf & "Exception thrown is..." & ex.ToString)
                Return E_SERVERERROR
            End Try
            'creating the remote obj which is specified in the config.xml, implementation of Reflection

            Try
                Dim _drHeader, _drPreReq As DataRow

                'To Create Header table for pInputParameters dataset
                Try
                    _pick_header_dt = ApplicationDataSetDefns.CreateAtParTableDefn(ApplicationDataSetDefns.Get_Pick_Header_Defns, DataSet_Type.HEADERS.ToString)
                Catch ex As Exception
                    If log.IsFatalEnabled Then log.Fatal("Exception Thrown in " & methodBaseName & " is.. " & vbCrLf & ex.ToString)
                    Return E_SERVERERROR
                End Try

                _drHeader = _pick_header_dt.NewRow()

                _drHeader.Item(Get_Pick_Header_Enum.BUSINESS_UNIT) = pOrgGrpId
                _drHeader.Item(Get_Pick_Header_Enum.STATUS) = pStatus
                _drHeader.Item(Get_Pick_Header_Enum.LOCATION) = pLocId
                _drHeader.Item(Get_Pick_Header_Enum.LOCATIONNAME) = pLocName

                _pick_header_dt.Rows.Add(_drHeader)
                pInputParameters.Tables.Add(_pick_header_dt)

                _className = _remoteAtparObj & ".GetLocations"
                _classType = _erpObjAssy.GetType(_className)
                _methodName = _classType.GetMethod("GetLocations")
                _reflectObject = Activator.CreateInstance(_classType)
                Dim args As Object() = {pInputParameters, pdsLoc, pDeviceTokenEntry}
                _StatusCode = _methodName.Invoke(_reflectObject, args)
                pdsLoc = args(1)


            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal("Remote Object Instance Create Failed " & ex.ToString)
                GetLocations = E_SERVERERROR
                If log.IsFatalEnabled Then log.Fatal("E_SERVERERROR :" & ex.ToString)
                Exit Function
            Finally
                _reflectObject = Nothing
            End Try



        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("E_SERVERERROR :" & ex.ToString)
            GetLocations = E_SERVERERROR
        End Try

        GetLocations = _StatusCode

    End Function

    Public Function InsertUpdateLocIDs(ByVal pSvrUserID As String, _
                                          ByVal pDsLocIds As DataSet, _
                                          ByVal pStrMode As String, _
                                          ByVal pNewOrgID As String, _
                                          ByVal pDeviceTokenEntry() As String) As Long _
                                          Implements IAtpar_WebTrans.InsertUpdateLocIDs

        Dim _StatusCode As Long

        Try
            log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pSvrUserID
            log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)
            Dim stackFrame As New StackFrame()
            Dim methodBase As MethodBase = stackFrame.GetMethod()
            Dim methodBaseName As String = methodBase.Name
            If log.IsDebugEnabled Then log.Debug(methodBaseName)

            Dim _className As String
            Dim _classType As Type
            Dim _reflectObject As Object
            Dim _methodName As MethodInfo
            Dim _remoteAtparObj As String
            Dim _erpObjAssy As Assembly

            Try
                _remoteAtparObj = CONST_ATPAR & "_" & GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), _
                                  CONFIGFILE.ERP_SYS_DETAILS.ToString(), ERP_SYS_DETAILS.DOWNLOADFROM.ToString())
                If _remoteAtparObj.ToUpper() = "ATPAR_PEOPLESOFT" Then _remoteAtparObj = "Atpar_FileInterface"
                CreateERPObject(_remoteAtparObj, _erpObjAssy)
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to Create ERP Object .... " & _remoteAtparObj _
                                    & vbCrLf & "Exception thrown is..." & ex.ToString)
                Return E_SERVERERROR
            End Try


            If log.IsDebugEnabled Then log.Debug(methodBaseName & "Before Invoking Erp Component")
            'creating the remote obj which is specified in the config.xml, implementation of Reflection
            Try
                _className = _remoteAtparObj & ".SetUpLocations"
                _classType = _erpObjAssy.GetType(_className)
                _methodName = _classType.GetMethod("InsertUpdateLocIDs")
                _reflectObject = Activator.CreateInstance(_classType)

                Dim args As Object() = {pDsLocIds, pStrMode, pNewOrgID, pDeviceTokenEntry}
                _StatusCode = _methodName.Invoke(_reflectObject, args)

            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal("Remote Object Instance Create Failed " & ex.ToString)
                InsertUpdateLocIDs = E_SERVERERROR
                If log.IsFatalEnabled Then log.Fatal("E_SERVERERROR :" & ex.ToString)
                Exit Function
            Finally
                _reflectObject = Nothing
            End Try



        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("E_SERVERERROR :" & ex.ToString)
            InsertUpdateLocIDs = E_SERVERERROR
        End Try

        InsertUpdateLocIDs = _StatusCode

    End Function

    Public Function UpdateLocIDStatus(ByVal pSvrUserID As String, _
                                      ByVal pLocId As String, ByVal pOrgId As String, _
                                      ByVal pStatus As Boolean, _
                                      ByVal pDeviceTokenEntry() As String) As Long _
                                      Implements IAtpar_WebTrans.UpdateLocIDStatus


        Dim _StatusCode As Long

        Try
            log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pSvrUserID
            log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)
            Dim stackFrame As New StackFrame()
            Dim methodBase As MethodBase = stackFrame.GetMethod()
            Dim methodBaseName As String = methodBase.Name
            If log.IsDebugEnabled Then log.Debug(methodBaseName)

            Dim _className As String
            Dim _classType As Type
            Dim _reflectObject As Object
            Dim _methodName As MethodInfo
            Dim _remoteAtparObj As String
            Dim _erpObjAssy As Assembly

            Try
                _remoteAtparObj = CONST_ATPAR & "_" & GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), _
                                  CONFIGFILE.ERP_SYS_DETAILS.ToString(), ERP_SYS_DETAILS.DOWNLOADFROM.ToString())
                If _remoteAtparObj.ToUpper() = "ATPAR_PEOPLESOFT" Then _remoteAtparObj = "Atpar_FileInterface"
                CreateERPObject(_remoteAtparObj, _erpObjAssy)
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to Create ERP Object .... " & _remoteAtparObj _
                                    & vbCrLf & "Exception thrown is..." & ex.ToString)
                Return E_SERVERERROR
            End Try

            If log.IsDebugEnabled Then log.Debug(methodBaseName & "  Before Invoking Erp Component")
            'creating the remote obj which is specified in the config.xml, implementation of Reflection
            Try
                _className = _remoteAtparObj & ".SetUpLocations"
                _classType = _erpObjAssy.GetType(_className)
                _methodName = _classType.GetMethod("UpdateLocIDStatus")
                _reflectObject = Activator.CreateInstance(_classType)

                Dim args As Object() = {pLocId, pOrgId, pStatus, pDeviceTokenEntry}
                _StatusCode = _methodName.Invoke(_reflectObject, args)

                If log.IsDebugEnabled Then log.Debug("AFTER INVODE  " & _className)

            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal("Remote Object Instance Create Failed " & ex.ToString)
                UpdateLocIDStatus = E_SERVERERROR
                If log.IsFatalEnabled Then log.Fatal("E_SERVERERROR :" & ex.ToString)
                Exit Function
            Finally
                _reflectObject = Nothing
            End Try



        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("E_SERVERERROR :" & ex.ToString)
            UpdateLocIDStatus = E_SERVERERROR
        End Try

        UpdateLocIDStatus = _StatusCode

    End Function

#Region "    Location Groups"

    ''' <summary>
    ''' To get the Location Groups Created by the user
    ''' </summary>
    ''' <param name="pGroupId">Location Group ID</param>
    ''' <param name="pOrgId">Logged in User Org Group Id</param>
    ''' <param name="dsLocGrps">Output Dataset </param>
    ''' <returns>ATPAR_OK on Success, else E_SERVERERROR</returns>
    ''' <remarks></remarks>
    Public Function GetLocationGroups(ByVal pLocGrpId As String, ByVal pLocGrpDescr As String, _
                                      ByVal pOrgId As String, ByRef dsLocGrps As DataSet, _
                                      ByVal pDeviceTokenEntry() As String) As Long _
                                      Implements IAtpar_WebTrans.GetLocationGroups

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Dim _strSQL As String = String.Empty
        pOrgId = Trim(pOrgId)
        pLocGrpId = Trim(pLocGrpId)
        pLocGrpDescr = Trim(pLocGrpDescr)
        _strSQL = " SELECT LOC_GROUP_ID,ORG_GROUP_ID,LOC_DESCR,STATUS FROM MT_ATPAR_LOC_GROUPS   "
        If Not String.IsNullOrEmpty(pOrgId) Then
            If pOrgId <> "ALL" Then
                _strSQL &= " WHERE  ORG_GROUP_ID = '" & pOrgId & "'"
            End If
        End If
        If Not String.IsNullOrEmpty(pLocGrpId) Then
            If pOrgId <> "ALL" Then
                _strSQL &= " AND LOC_GROUP_ID LIKE '" & pLocGrpId & "%'"
            Else
                _strSQL &= " WHERE LOC_GROUP_ID LIKE '" & pLocGrpId & "%'"
            End If
        End If
        If Not String.IsNullOrEmpty(pLocGrpDescr) Then
            If pOrgId <> "ALL" Then
                _strSQL &= " AND LOC_DESCR LIKE '" & Replace(substituteString(pLocGrpDescr), "'", "''") & "%'"
            ElseIf pOrgId = "ALL" And pLocGrpId = String.Empty Then
                _strSQL &= " WHERE LOC_DESCR LIKE '" & Replace(substituteString(pLocGrpDescr), "'", "''") & "%'"
            End If

        End If
        Try
            If log.IsInfoEnabled Then log.Info(methodBaseName & " :Query to fetch the data from MT_ATPAR_LOC_GROUPS: " & _strSQL & " : ")
            dsLocGrps = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))
            If dsLocGrps.Tables(0).Rows.Count = 0 Then
                Return E_NORECORDFOUND
            Else
                Return ATPAR_OK
            End If
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                            _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBSELECTFAIL
        End Try
    End Function

    ''' <summary>
    ''' To Create the Location Groups for the User
    ''' </summary>
    ''' <param name="pGroupId">Location Group ID</param>
    ''' <param name="pGroupDescr">Location Group Description<</param>
    ''' <param name="pUserId">Group creating User - Logged in User</param>
    ''' <param name="pOrgId">Logged in User Org Group Id</param>
    ''' <returns>ATPAR_OK on Success, else E_SERVERERROR</returns>
    ''' <remarks></remarks>
    Public Function InsertLocationGroups(ByVal pGroupId As String, ByVal pGroupDescr As String, _
                                         ByVal pUserId As String, ByVal pOrgId As String, _
                                         ByVal pDeviceTokenEntry() As String) As Long _
                                         Implements IAtpar_WebTrans.InsertLocationGroups
        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserId
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Dim _sbSQL As New StringBuilder
        Dim _strSQL As String = String.Empty
        Dim intCnt As Integer
        Try
            _strSQL = " SELECT COUNT(LOC_GROUP_ID) FROM MT_ATPAR_LOC_GROUPS WHERE LOC_GROUP_ID='" & pGroupId & "' " & _
                      " AND ORG_GROUP_ID='" & pOrgId & "' "
            If log.IsInfoEnabled Then log.Info(methodBaseName & ":Query to find the duplicates if exists:" & _strSQL)
            intCnt = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(_strSQL))
            If intCnt > 0 Then
                Return ATPAR_E_LOCGRPIDALREADYEXISTS
            End If
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                        _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
            Return ATPAR_E_LOCGRPIDALREADYEXISTS
        End Try

        With _sbSQL
            .Append("INSERT INTO MT_ATPAR_LOC_GROUPS(ORG_GROUP_ID,LOC_GROUP_ID,LOC_DESCR,STATUS,LAST_UPDATE_DATE,LAST_UPDATE_USER,LAST_CLIENT_ADDRESS) ")
            .Append("VALUES('" & pOrgId & "','" & pGroupId & "','" & Replace(substituteString(pGroupDescr), "'", "''") & "',1,'" & Now() & "','" & pUserId & "','" & pOrgId & "')")
        End With
        Try
            If log.IsInfoEnabled Then log.Info(methodBaseName & " : Query to insert the data in to MT_ATPAR_LOC_GROUPS:" & _sbSQL.ToString & " : ")
            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString))

            Return ATPAR_OK
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                        _sbSQL.ToString & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBINSERTFAIL
        End Try
    End Function

    ''' <summary>
    ''' To update the Status of the Location group Id
    ''' </summary>
    ''' <param name="pLocGrpId">Location Group ID</param>
    ''' <param name="pStatus">Active Status</param>
    ''' <param name="pOrgGrpId">User Org Group Id</param>
    ''' <param name="pUserId">Group creating User - Logged in User</param>
    ''' <returns>ATPAR_OK on Success, else E_SERVERERROR</returns>
    ''' <remarks></remarks>
    Public Function UpdateLocationGroups(ByVal pLocGrpId As String, ByVal pStatus As Integer, _
                                         ByVal pOrgGrpId As String, ByVal pUserId As String, _
                                         ByVal pDeviceTokenEntry() As String) As Long _
                                         Implements IAtpar_WebTrans.UpdateLocationGroups

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserId
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        '''
        'Here status :
        '0' - Location is in INACTIVE status
        '1' - Location is in ACTIVE status
        '''
        Dim _strSQL As String = String.Empty
        Dim _intCnt As Integer
        Try
            _strSQL = "SELECT COUNT(*) FROM MT_ATPAR_LOC_GROUP_ALLOCATION WHERE LOC_GROUP_ID='" & pLocGrpId & "'   AND ORG_GROUP_ID='" & pOrgGrpId & "'"
            '  AND ORG_GROUP_ID='" & pOrgGrpId & "' AND USER_ID = '" & pUserId & "'"
            Try
                If log.IsInfoEnabled Then log.Info(methodBaseName & " :To check the existance of allocation: " & _strSQL & " : ")
                _intCnt = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(_strSQL))
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                    _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)

                Return ATPAR_E_LOCALDBSELECTFAIL
            End Try
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                            _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)

            Return ATPAR_E_LOCALDBSELECTFAIL
        End Try
        If _intCnt > 0 And pStatus = 0 Then
            Return ATPAR_E_CANNOTUPDATESTATUS
        End If
        Try
            _strSQL = " UPDATE MT_ATPAR_LOC_GROUPS SET STATUS= '" & pStatus & "' WHERE LOC_GROUP_ID='" & pLocGrpId & "'" & _
                      " AND ORG_GROUP_ID='" & pOrgGrpId & "'"
            Try
                If log.IsInfoEnabled Then log.Info(methodBaseName & " :Query to update the data from MT_ATPAR_LOC_GROUPS: " & _strSQL & " : ")
                m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL))
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                    _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)

                Return ATPAR_E_LOCALDBUPDATEFAIL
            End Try
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                            _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)

            Return ATPAR_E_LOCALDBUPDATEFAIL
        End Try

    End Function

    ''' <summary>
    ''' To get the Locations from ERP and Middle based on Location Group Ids
    ''' </summary>
    ''' <param name="pBUnit">Org Id - required Business Unit</param>
    ''' <param name="pLocId">required Lcation Id</param>
    ''' <param name="pAppId">App Id</param>
    ''' <param name="pUserId">Logged in User</param>
    ''' <param name="pOrgGroupId">Logged in User Org Group Id</param>
    ''' <param name="pLocGroupId">Location Group ID</param>
    ''' <param name="pDsLocations">Return Dataset with the required values</param>
    ''' <returns>ATPAR_OK on Success, else E_SERVERERROR</returns>
    ''' <remarks></remarks>
    Public Function GetLocationDetails(ByVal pBUnit As String, ByVal pLocId As String, ByVal pAppId As Integer, _
                                       ByVal pUserId As String, ByVal pOrgGroupId As String, ByVal pLocGroupId As String, _
                                       ByRef pDsLocations As DataSet, ByVal pDeviceTokenEntry() As String) As Long _
                                       Implements IAtpar_WebTrans.GetLocationDetails

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserId
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Dim _strSQL As String = String.Empty
        Dim _StatusCode As Long = -1


        Dim _defaultBUnit As String = String.Empty
        Dim _atparParameters As Atpar_Application_Parameters
        _atparParameters = Atpar_Application_Parameters.CreateInstance(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Dim _atparTransaction As AtPar_Application_Transactions
        _atparTransaction = AtPar_Application_Transactions.CreateInstance(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Dim _className As String
        Dim _classType As Type
        Dim _reflectObject As Object
        Dim _methodName As MethodInfo
        Dim m_erpObjAssy As Assembly
        Dim _erpObjName As String = String.Empty
        Dim _remoteSchema As String
        Dim pInputParameters, pOutputParameters As New DataSet
        Dim _pick_header_dt, _pick_BusinessUnits, _pick_output, _pickPreReqData As New DataTable
        Dim _drHeader, _drPreReq As DataRow
        Dim _drBusinessUnit As DataRow
        Dim _dsBunits As DataSet
        Dim objAtparBr As New AtPar_BusinessRules.AtPar_Utils
        Dim cartsManagedInAtPar As String = String.Empty
        Dim _dsBunitsAllocated As DataSet

        Dim _intBunitCnt As Integer
        Dim _sbSQL As New StringBuilder
        'Checking for Business Unit whether it is assigned to Current User ORG GROUP or not
        _strSQL = " SELECT COUNT(BUSINESS_UNIT) FROM MT_ATPAR_ORG_GROUP_BUNITS  "

        If Not String.IsNullOrEmpty(pOrgGroupId) Then
            If pOrgGroupId <> "ALL" Then
                _strSQL &= " WHERE ORG_GROUP_ID = '" & pOrgGroupId & "'"
            End If
        End If
        If Not String.IsNullOrEmpty(pBUnit) Then
            If pOrgGroupId <> "ALL" Then
                _strSQL &= " AND BUSINESS_UNIT = '" & pBUnit & "'"
            ElseIf pOrgGroupId = "ALL" Then
                _strSQL &= " WHERE BUSINESS_UNIT = '" & pBUnit & "'"
            End If
        End If


        Try
            If log.IsInfoEnabled Then log.Info(methodBaseName & ":Query to fetch the data:" & _strSQL)
            _intBunitCnt = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(_strSQL))
            If _intBunitCnt > 0 Then
                If log.IsDebugEnabled Then log.Debug(methodBaseName & ":Business Unit is assigned :")
            Else
                If log.IsDebugEnabled Then log.Debug(methodBaseName & ":Business Unit is Not assigned :" & pBUnit)
                Return ATPAR_E_ASSIGN_ORGBUS
            End If
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                     _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBSELECTFAIL
        End Try

        'To Create Header table for pInputParameters dataset
        Try
            _pick_header_dt = ApplicationDataSetDefns.CreateAtParTableDefn(ApplicationDataSetDefns.Get_Pick_Header_Defns, DataSet_Type.HEADERS.ToString)
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in " & methodBaseName & " is.. " & vbCrLf & ex.ToString)
            Return E_SERVERERROR
        End Try

        'To Create Business Units table for pInputParameters dataset
        Try
            _pick_BusinessUnits = ApplicationDataSetDefns.CreateAtParTableDefn(ApplicationDataSetDefns.Get_BusinessUnits_Defns, DataSet_Type.BUSINESSUNITS.ToString)
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in " & methodBaseName & " is.. " & vbCrLf & ex.ToString)
            Return E_SERVERERROR
        End Try

        'To Create PreReq parameters table for pInputParameters dataset
        Try
            _pickPreReqData = ApplicationDataSetDefns.CreateAtParTableDefn(ApplicationDataSetDefns.Get_Params_Defns, DataSet_Type.PREREQDATA.ToString)
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in " & methodBaseName & " is.. " & vbCrLf & ex.ToString)
            Return E_SERVERERROR
        End Try

        _remoteSchema = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), CONFIGFILE.REMOTEDBCONNECTION.ToString(), REMOTEDBCONNECTION.SCHEMA.ToString())

        _drHeader = _pick_header_dt.NewRow()

        _drHeader.Item(Get_Pick_Header_Enum.BUSINESS_UNIT) = pBUnit
        _drHeader.Item(Get_Pick_Header_Enum.SET_ID) = String.Empty
        _drHeader.Item(Get_Pick_Header_Enum.LOCATION) = pLocId
        _drHeader.Item(Get_Pick_Header_Enum.LOCATIONNAME) = String.Empty
        _drHeader.Item(Get_Pick_Header_Enum.STATUS) = 1


        _pick_header_dt.Rows.Add(_drHeader)


        _drPreReq = _pickPreReqData.NewRow()
        _drPreReq.Item(Get_Pick_Header_PreReqData_Enum.REMOTE_SCHEMA) = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), CONFIGFILE.REMOTEDBCONNECTION.ToString(), REMOTEDBCONNECTION.SCHEMA.ToString())
        _drPreReq.Item(Get_Pick_Header_PreReqData_Enum.REMOTE_DB_TYPE) = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), CONFIGFILE.REMOTEDBCONNECTION.ToString(), REMOTEDBCONNECTION.DATABASE.ToString()) 'GetConfigData(EName(Of CONFIGFILE)(CONFIGFILE.REMOTEDBCONNECTION), REMOTEDBCONNECTION.DATABASE.ToString)
        _pickPreReqData.Rows.Add(_drPreReq)


        pInputParameters.Tables.Add(_pick_header_dt)

        pInputParameters.Tables.Add(_pickPreReqData)



        Try
            If log.IsDebugEnabled Then log.Debug(methodBaseName & ": before calling get business units:")

            objAtparBr = New AtPar_BusinessRules.AtPar_Utils
            'TODO :: Need to get  confirmation about BusinessUnit Type : I/P or ALL

            _StatusCode = objAtparBr.GetBusinessUnits(pUserId, BusinessType.AllBunits, _dsBunits, pDeviceTokenEntry)



            If _StatusCode <> ATPAR_OK Then
                If log.IsWarnEnabled Then log.Warn(methodBaseName & ":Failed to fetch the data with the status code : " & _StatusCode)
                Return E_SERVERERROR
            ElseIf _StatusCode = E_NORECORDFOUND Then
                If log.IsWarnEnabled Then log.Warn(methodBaseName & ":No Data Found : " & _StatusCode)
                Return E_NORECORDFOUND
            End If

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in " & methodBaseName & " is.. " & vbCrLf & ex.ToString)
            Return E_SERVERERROR
        Finally
            If Not objAtparBr Is Nothing Then
                objAtparBr = Nothing
            End If
        End Try

        For intCnt As Integer = 0 To _dsBunits.Tables(0).Rows.Count - 1

            _drBusinessUnit = _pick_BusinessUnits.NewRow()

            _drBusinessUnit.Item(0) = _dsBunits.Tables(0).Rows(intCnt).Item("BUSINESS_UNIT")

            _pick_BusinessUnits.Rows.Add(_drBusinessUnit)

        Next
        pInputParameters.Tables.Add(_pick_BusinessUnits)
        pInputParameters.AcceptChanges()
        'For ParManagement Installation check

        'ERP call
        Dim _strERPType As String = String.Empty
        Try
            Try
                _erpObjName = CONST_ATPAR & "_" & GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), _
                             EName(Of CONFIGFILE)(CONFIGFILE.ERP_SYS_DETAILS), ERP_SYS_DETAILS.DOWNLOADFROM.ToString)

                CreateERPObject(_erpObjName, m_erpObjAssy)
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to Create ERP Object .... " & _erpObjName _
                                    & vbCrLf & "Exception thrown is..." & ex.ToString)
                Return CRCT_E_ERPCOMPCREATION
            End Try

            _className = _erpObjName & ".GetLocations"
            _classType = m_erpObjAssy.GetType(_className)
            _methodName = _classType.GetMethod("GetLocations")
            _reflectObject = Activator.CreateInstance(_classType)

            Dim args As Object() = {pInputParameters, pOutputParameters, pDeviceTokenEntry}


            _StatusCode = _methodName.Invoke(_reflectObject, args)

            pDsLocations = args(1)

            If _StatusCode <> ATPAR_OK Then
                If log.IsWarnEnabled Then log.Warn(_StatusCode)
                If _StatusCode = E_REMOTEERROR Then
                    Return E_SERVERERROR
                Else
                    Return _StatusCode
                End If
            End If


        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the data from ERP..... " & _
                                                 vbCrLf & ":Exception thrown is..." & ex.ToString)
            Return E_SERVERERROR
        End Try

        Dim dcCol1 As New DataColumn
        dcCol1.ColumnName = "CHK_VALUE"
        dcCol1.DefaultValue = 0
        pDsLocations.Tables(0).Columns.Add(dcCol1)

        'ROWINDEX column is added to track down selected locations on the web screen,particularly useful when paging is applied
        Dim dcCol3 As New DataColumn
        dcCol3.ColumnName = "ROWINDEX"
        dcCol3.DefaultValue = 0
        pDsLocations.Tables(0).Columns.Add(dcCol3)

        Dim dcCol4 As New DataColumn
        dcCol4.ColumnName = "CHK_ALLOCATED"
        dcCol4.DefaultValue = 0
        pDsLocations.Tables(0).Columns.Add(dcCol4)

        ' The value in this column will decide whether the row has to be deleted or added
        Dim dcCol5 As New DataColumn
        dcCol5.ColumnName = "PERFORM_ACTION"
        dcCol5.DefaultValue = 0
        pDsLocations.Tables(0).Columns.Add(dcCol5)

        'Getting the data from MT_ATPAR_LOC_GROUP_MEMBERS
        Dim _dsLocationsAllocated As DataSet
        Dim i As Integer = 0
        Dim j As Integer = 0

        _strSQL = "SELECT ORG_GROUP_ID,LOC_GROUP_ID,ORG_ID,LOCATION_ID,LOC_DESCR,LAST_CLIENT_ADDRESS,TYPE FROM MT_ATPAR_LOC_GROUP_MEMBERS "

        If Not String.IsNullOrEmpty(pLocGroupId) Then
            _strSQL &= " WHERE LOC_GROUP_ID = '" & pLocGroupId & "'"
        End If
        If Not String.IsNullOrEmpty(pOrgGroupId) Then
            If pOrgGroupId <> "ALL" Then
                _strSQL &= " AND  ORG_GROUP_ID = '" & pOrgGroupId & "'"
            End If
        End If
        If Not String.IsNullOrEmpty(pBUnit) Then
            _strSQL &= " AND ORG_ID = '" & pBUnit & "'"
        End If
        If Not String.IsNullOrEmpty(pLocId) Then
            _strSQL &= " AND LOCATION_ID LIKE '" & pLocId & "%'"
        End If



        Try
            If log.IsInfoEnabled Then log.Info(methodBaseName & ":Query to fetch the data:" & _strSQL)
            _dsLocationsAllocated = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                     _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)

            Return ATPAR_E_LOCALDBSELECTFAIL
        End Try

        Try
            If _dsLocationsAllocated.Tables(0).Rows.Count = 0 Then
                For i = 0 To pDsLocations.Tables(0).Rows.Count - 1
                    pDsLocations.Tables(0).Rows(i).Item("CHK_VALUE") = "0"
                    pDsLocations.Tables(0).Rows(i).Item("CHK_ALLOCATED") = "0"
                    pDsLocations.Tables(0).Rows(i).Item("PERFORM_ACTION") = "0"
                Next
            ElseIf _dsLocationsAllocated.Tables(0).Rows.Count > 0 Then

                'TODO : Need to remove loops
                For j = 0 To pDsLocations.Tables(0).Rows.Count - 1

                    pDsLocations.Tables(0).Rows(j).Item("PERFORM_ACTION") = "0"

                    For i = 0 To _dsLocationsAllocated.Tables(0).Rows.Count - 1
                        If (pDsLocations.Tables(0).Rows(j).Item("LOCATION") = _dsLocationsAllocated.Tables(0).Rows(i).Item("LOCATION_ID")) And (pDsLocations.Tables(0).Rows(j).Item("SETCNTRLVALUE") = _dsLocationsAllocated.Tables(0).Rows(i).Item("ORG_ID")) And (pDsLocations.Tables(0).Rows(j).Item("TYPE") = _dsLocationsAllocated.Tables(0).Rows(i).Item("TYPE")) Then
                            'Checking whether Middle Tire DB UserId Column is same as Selected User Id in the Webpages or not.
                            If _dsLocationsAllocated.Tables(0).Rows(i).Item("LOC_GROUP_ID") = pLocGroupId Then
                                pDsLocations.Tables(0).Rows(j).Item("CHK_VALUE") = "1"
                                pDsLocations.Tables(0).Rows(j).Item("CHK_ALLOCATED") = "1"
                            End If
                        End If
                    Next 'for i = 0 To _dsLocationsAllocated.Tables(0).Rows.Count - 1
                Next 'for j = 0 To pDsLocations.Tables(0).Rows.Count - 1
            End If
            With pDsLocations.Tables(0)
                For i = 0 To .Rows.Count - 1
                    .Rows(i).Item("ROWINDEX") = i
                Next
                .AcceptChanges()
            End With

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Remote Call failed " & ex.ToString)
            Return E_SERVERERROR
        End Try
    End Function

    ''' <summary>
    ''' To insert the Location details for the logged in user with the Location group id details
    ''' </summary>
    ''' <param name="pOrgId">Org ID</param>
    ''' <param name="pLocation">Location<</param>
    ''' <param name="pOrgGroupId">Logged in User Org Group Id</param>
    ''' <param name="pLocGroupId">Location Group ID</param>
    ''' <param name="pUserId">Logged in User</param>
    ''' <param name="pClientIP">Client IP</param>
    ''' <param name="pDsLocations">Dataset with details to insert </param>
    ''' <param name="pDeviceTokenEntry">DeviceTokenEntry Enum</param>
    ''' <returns>ATPAR_OK on Success, else E_SERVERERROR</returns>
    ''' <remarks></remarks>
    Public Function InsertLocationDetails(ByVal pOrgId As String, _
                                          ByVal pLocation As String, _
                                          ByVal pOrgGroupId As String, _
                                          ByVal pLocGroupId As String, _
                                          ByVal pUserId As String, _
                                          ByVal pClientIP As String, _
                                          ByVal pDsLocations As DataSet, _
                                          ByVal pDeviceTokenEntry() As String) As Long _
                                          Implements IAtpar_WebTrans.InsertLocationDetails

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserId
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Dim _trans As SqlTransaction

        Try
            sqlConnect = m_LocalDB.CreateConnection()
            sqlConnect.Open()
            _trans = sqlConnect.BeginTransaction()

            Dim _strSQL As String = String.Empty
            Dim _strType As String = String.Empty
            Dim _strOrgId As String = String.Empty
            Dim _sbSQL As New StringBuilder
            Dim _strDescr As String = String.Empty
            Dim _strLocId As String = String.Empty
            Dim _blnLocAlloc As Boolean = True
            Dim _statusCode As Long = -1
            Dim _dsLocDetails As New DataSet
            Dim _dvLocDetails As New DataView
            Dim _dtLocDetails As New DataTable

            If log.IsDebugEnabled Then log.Debug(methodBaseName & " : pLocGroupId in BR: " & pLocGroupId & " : ")

            If pDsLocations.Tables.Count > 0 Then
                If pDsLocations.Tables(0).Rows.Count > 0 Then

                    If log.IsDebugEnabled Then log.Debug(methodBaseName & " :pDsLocations.Tables(0).Rows.Count : " & pDsLocations.Tables(0).Rows.Count)

                    ' to check which rows needs to be deleted
                    _dvLocDetails = pDsLocations.Tables(0).DefaultView
                    _dvLocDetails.RowFilter = "PERFORM_ACTION = " & Perform_Action.DELETE
                    _dtLocDetails = _dvLocDetails.ToTable()
                    _dsLocDetails.Tables.Clear()
                    _dsLocDetails.Tables.Add(_dtLocDetails)

                    ' to delete the rows which are un checked in the data grid
                    If _dsLocDetails.Tables.Count > 0 Then
                        If _dsLocDetails.Tables(0).Rows.Count Then

                            For intLocCnt As Integer = 0 To _dsLocDetails.Tables(0).Rows.Count - 1
                                _strOrgId = String.Empty
                                _strOrgId = _dsLocDetails.Tables(0).Rows(intLocCnt).Item("SETCNTRLVALUE").ToString
                                _strLocId = String.Empty
                                _strLocId = _dsLocDetails.Tables(0).Rows(intLocCnt).Item("LOCATION").ToString()

                                _strSQL = " DELETE FROM MT_ATPAR_LOC_GROUP_MEMBERS WHERE LOC_GROUP_ID = '" & pLocGroupId & "' "

                                If Not String.IsNullOrEmpty(_strOrgId) Then
                                    _strSQL &= " AND ORG_ID = '" & _strOrgId & "'"
                                End If
                                If Not String.IsNullOrEmpty(_strLocId) Then
                                    _strSQL &= " AND LOCATION_ID = '" & _strLocId & "'"
                                End If
                                If Not String.IsNullOrEmpty(pOrgGroupId) Then
                                    _strSQL &= " AND ORG_GROUP_ID = '" & pOrgGroupId & "'"
                                End If
                                Try
                                    If log.IsInfoEnabled Then log.Info(methodBaseName & " :Query to delete the data from MT_ATPAR_LOC_GROUP_MEMBERS: " & _strSQL & " : ")
                                    m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), _trans)
                                Catch ex As Exception
                                    _trans.rollback()
                                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                                        _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
                                    Return ATPAR_E_LOCALDBDELETEFAIL
                                End Try
                            Next
                        End If
                    End If

                    ' to find out the rows which are newly checked in the grid
                    _dvLocDetails = pDsLocations.Tables(0).DefaultView
                    _dvLocDetails.RowFilter = "PERFORM_ACTION = " & Perform_Action.ADD
                    _dtLocDetails = _dvLocDetails.ToTable()
                    _dsLocDetails.Tables.Clear()
                    _dsLocDetails.Tables.Add(_dtLocDetails)

                    ' to insert the rows which are newly checked in the grid
                    If _dsLocDetails.Tables.Count > 0 Then
                        If _dsLocDetails.Tables(0).Rows.Count Then
                            For intRowCnt As Integer = 0 To _dsLocDetails.Tables(0).Rows.Count - 1
                                _strOrgId = String.Empty
                                _strOrgId = _dsLocDetails.Tables(0).Rows(intRowCnt).Item("SETCNTRLVALUE").ToString
                                _strDescr = String.Empty
                                _strDescr = Replace(_dsLocDetails.Tables(0).Rows(intRowCnt).Item("DESCR").ToString(), "'", "''")
                                _strLocId = String.Empty
                                _strLocId = _dsLocDetails.Tables(0).Rows(intRowCnt).Item("LOCATION").ToString()
                                _strType = String.Empty
                                _strType = _dsLocDetails.Tables(0).Rows(intRowCnt).Item("TYPE").ToString()

                                With _sbSQL
                                    .Append("INSERT INTO MT_ATPAR_LOC_GROUP_MEMBERS(")
                                    .Append("ORG_GROUP_ID, ")
                                    .Append("LOC_GROUP_ID, ")
                                    .Append("ORG_ID, ")
                                    .Append("LOCATION_ID, ")
                                    .Append("TYPE, ")
                                    .Append("LOC_DESCR, ")
                                    .Append(" LAST_UPDATE_DATE, ")
                                    .Append("LAST_UPDATE_USER, ")
                                    .Append("LAST_CLIENT_ADDRESS) ")
                                    .Append("VALUES(")
                                    .Append("'" & pOrgGroupId & "',")
                                    .Append("'" & pLocGroupId & "',")
                                    .Append("'" & _strOrgId & "',")
                                    .Append("'" & _strLocId & "',")
                                    .Append("'" & _strType & "',")
                                    .Append("'" & _strDescr & "',")
                                    .Append("'" & Now() & "',")
                                    .Append("'" & pUserId & "',")
                                    .Append("'" & pClientIP & "')")
                                End With

                                Try
                                    If log.IsInfoEnabled Then log.Info(methodBaseName & vbCrLf & _sbSQL.ToString)
                                    m_LocalDB.ExecuteNonQuery(_trans, CommandType.Text, _sbSQL.ToString)
                                Catch ex As Exception
                                    _trans.Rollback()
                                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                                        _sbSQL.ToString & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
                                    Return ATPAR_E_LOCALDBINSERTFAIL
                                Finally
                                    _sbSQL.Remove(0, _sbSQL.Length)
                                End Try
                            Next
                        End If
                    End If
                    _trans.Commit()
                    Return ATPAR_OK
                End If
            Else
                _trans.Rollback()
                Return E_SERVERERROR
            End If
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ":Remote Call failed: " & ex.ToString)
            _trans.Rollback()
            Return E_SERVERERROR
        Finally
            _trans = Nothing
            sqlConnect = Nothing
        End Try
    End Function


    ''' <summary>
    ''' To get the Location Groups to allocate to Users
    ''' </summary>
    ''' <param name="pUserId">User Id to whom it is/should assigned</param>
    ''' <param name="pOrgGroupId">Logged in user org group</param>
    ''' <param name="pLocGroupId">Location Group to search</param>
    ''' <param name="pDisplayMode">Display mode </param>
    ''' <param name="pAppId">AppId to differentiate the Product data</param>
    ''' <param name="pDsLocGrps">Return dataset from DataBase</param>
    ''' <returns>ATPAR_OK on Success, else E_SERVERERROR</returns>
    ''' <remarks></remarks>
    Public Function GetLocGrps(ByVal pUserId As String, ByVal pOrgGroupId As String, ByVal pLocGroupId As String, _
                               ByVal pDisplayMode As String, ByVal pAppId As Integer, ByRef pDsLocGrps As DataSet, _
                               ByVal pDeviceTokenEntry() As String) As Long _
                               Implements IAtpar_WebTrans.GetLocGrps
        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserId
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Dim _strSQL As String = String.Empty

        _strSQL = " SELECT LOC_GROUP_ID,LOC_DESCR FROM MT_ATPAR_LOC_GROUPS WHERE STATUS=1   "
        If Not String.IsNullOrEmpty(pOrgGroupId) Then
            If pOrgGroupId <> "ALL" Then
                _strSQL &= " AND ORG_GROUP_ID = '" & pOrgGroupId & "'"
            End If
        End If
        Try
            If log.IsInfoEnabled Then log.Info(methodBaseName & " :Query to fetch the data from MT_ATPAR_LOC_GROUPS: " & _strSQL & " : ")
            pDsLocGrps = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                            _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBSELECTFAIL
        End Try

        Dim dcCol1 As New DataColumn
        dcCol1.ColumnName = "CHK_VALUE"
        dcCol1.DefaultValue = 0
        pDsLocGrps.Tables(0).Columns.Add(dcCol1)

        Dim dcCol2 As New DataColumn
        dcCol2.ColumnName = "USER_ID"
        dcCol2.DefaultValue = String.Empty
        pDsLocGrps.Tables(0).Columns.Add(dcCol2)

        'ROWINDEX column is added to track down selected locations on the web screen, 
        'particularly useful when paging is applied
        Dim dcCol3 As New DataColumn
        dcCol3.ColumnName = "ROWINDEX"
        dcCol3.DefaultValue = 0
        pDsLocGrps.Tables(0).Columns.Add(dcCol3)

        Dim dcCol4 As New DataColumn
        dcCol4.ColumnName = "CHK_ALLOCATED"
        dcCol4.DefaultValue = 0
        pDsLocGrps.Tables(0).Columns.Add(dcCol4)
        'Getting the data from MT_ATPAR_LOC_GROUP_MEMBERS
        Dim _dsLocationsAllocated As DataSet
        Dim _dsUsers As DataSet
        Dim _strUsers As String = String.Empty
        Dim i As Integer = 0
        Dim j As Integer = 0

        'To get the data which is assigned
        _strSQL = "SELECT ORG_GROUP_ID,LOC_GROUP_ID,USER_ID FROM MT_ATPAR_LOC_GROUP_ALLOCATION  WHERE USER_ID='" & pUserId & "' AND APP_ID='" & pAppId & "'  "
        If Not String.IsNullOrEmpty(pOrgGroupId) Then
            If pOrgGroupId <> "ALL" Then
                _strSQL &= " AND ORG_GROUP_ID = '" & pOrgGroupId & "'"
            End If
        End If

        Try
            If log.IsInfoEnabled Then log.Info(methodBaseName & ":Query to fetch the data:" & _strSQL)
            _dsLocationsAllocated = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                     _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)

            Return ATPAR_E_LOCALDBSELECTFAIL
        End Try


        Try
            If _dsLocationsAllocated.Tables(0).Rows.Count = 0 Then
                For i = 0 To pDsLocGrps.Tables(0).Rows.Count - 1

                    'To get the Users with same data
                    _strSQL = String.Empty
                    _strSQL = "SELECT DISTINCT A.USER_ID, FIRST_NAME+ ' '+MIDDLE_INITIAL+' '+LAST_NAME+'('+A.USER_ID+')' AS USERNAME " & _
                              "FROM MT_ATPAR_LOC_GROUP_ALLOCATION A, MT_ATPAR_USER B WHERE A.USER_ID = B.USER_ID AND " & _
                              "LOC_GROUP_ID = '" & pDsLocGrps.Tables(0).Rows(i).Item("LOC_GROUP_ID") & "'"

                    If Not String.IsNullOrEmpty(pOrgGroupId) Then
                        If pOrgGroupId <> "ALL" Then
                            _strSQL &= " AND ORG_GROUP_ID = '" & pOrgGroupId & "'"
                        End If
                    End If

                    Try
                        If log.IsInfoEnabled Then log.Info(methodBaseName & ":Query to fetch the Allocated loc to users when NoData :" & _strSQL)
                        _dsUsers = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))
                    Catch ex As Exception
                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                 _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)

                        Return ATPAR_E_LOCALDBSELECTFAIL
                    End Try
                    _strUsers = String.Empty
                    If _dsUsers.Tables.Count > 0 Then
                        If _dsUsers.Tables(0).Rows.Count > 0 Then
                            For _intCnt As Integer = 0 To _dsUsers.Tables(0).Rows.Count - 1
                                _strUsers = _strUsers & IIf((_strUsers <> ""), ",", "")
                                _strUsers = _strUsers & _dsUsers.Tables(0).Rows(_intCnt).Item("USERNAME").ToString
                            Next
                        End If
                    End If
                    'Updating the data
                    pDsLocGrps.Tables(0).Rows(i).Item("USER_ID") = _strUsers
                    pDsLocGrps.Tables(0).Rows(i).Item("CHK_VALUE") = "0"
                    pDsLocGrps.Tables(0).Rows(i).Item("CHK_ALLOCATED") = "0"
                Next
            ElseIf _dsLocationsAllocated.Tables(0).Rows.Count > 0 Then

                'TODO : Need to remove loops
                For j = 0 To pDsLocGrps.Tables(0).Rows.Count - 1
                    For i = 0 To _dsLocationsAllocated.Tables(0).Rows.Count - 1

                        'To get the Users with same data
                        _strSQL = String.Empty
                        _strSQL = "SELECT DISTINCT A.USER_ID, FIRST_NAME+ ' '+MIDDLE_INITIAL+' '+LAST_NAME+'('+A.USER_ID+')' AS USERNAME " & _
                             "FROM MT_ATPAR_LOC_GROUP_ALLOCATION A, MT_ATPAR_USER B WHERE A.USER_ID = B.USER_ID AND " & _
                             "LOC_GROUP_ID = '" & pDsLocGrps.Tables(0).Rows(j).Item("LOC_GROUP_ID") & "'"

                        If Not String.IsNullOrEmpty(pOrgGroupId) Then
                            If pOrgGroupId <> "ALL" Then
                                _strSQL &= " AND ORG_GROUP_ID = '" & pOrgGroupId & "'"
                            End If
                        End If

                        Try
                            If log.IsInfoEnabled Then log.Info(methodBaseName & ":Query to fetch the Allocated loc to users when Data Found:" & _strSQL)
                            _dsUsers = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))
                        Catch ex As Exception
                            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                     _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)

                            Return ATPAR_E_LOCALDBSELECTFAIL
                        End Try
                        _strUsers = String.Empty
                        If _dsUsers.Tables.Count > 0 Then
                            If _dsUsers.Tables(0).Rows.Count > 0 Then
                                For _intCnt As Integer = 0 To _dsUsers.Tables(0).Rows.Count - 1
                                    _strUsers = _strUsers & IIf((_strUsers <> ""), ",", "")
                                    _strUsers = _strUsers & _dsUsers.Tables(0).Rows(_intCnt).Item("USERNAME").ToString
                                Next
                            End If
                        End If

                        If log.IsDebugEnabled Then log.Debug(methodBaseName & ":Users string:" & _strUsers)
                        pDsLocGrps.Tables(0).Rows(j).Item("USER_ID") = _strUsers

                        'Updating the data
                        If pDsLocGrps.Tables(0).Rows(j).Item("LOC_GROUP_ID") = _dsLocationsAllocated.Tables(0).Rows(i).Item("LOC_GROUP_ID") Then
                            pDsLocGrps.Tables(0).Rows(j).Item("CHK_VALUE") = "1"
                            pDsLocGrps.Tables(0).Rows(j).Item("CHK_ALLOCATED") = "1"
                        End If
                    Next 'for i = 0 To _dsLocationsAllocated.Tables(0).Rows.Count - 1
                Next 'for j = 0 To pDsLocGrps.Tables(0).Rows.Count - 1
            End If
            With pDsLocGrps.Tables(0)
                For i = 0 To .Rows.Count - 1
                    .Rows(i).Item("ROWINDEX") = i
                Next
                .AcceptChanges()
            End With

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Remote Call failed " & ex.ToString)
            Return E_SERVERERROR
        End Try
    End Function

    ''' <summary>
    ''' To insert the Location Group details to selected user
    ''' </summary>
    ''' <param name="pOrgGroupId"></param>
    ''' <param name="pLocGroupId"></param>
    ''' <param name="pAssignedUserId"></param>
    ''' <param name="pUserId"></param>
    ''' <param name="pClientIP"></param>
    ''' <param name="pDsLocGrps"></param>
    ''' <returns>ATPAR_OK on Success, else E_SERVERERROR</returns>
    ''' <remarks></remarks>
    Public Function InsertLocGrps(ByVal pOrgGroupId As String, ByVal pLocGroupId As String, _
                                               ByVal pAssignedUserId As String, ByVal pUserId As String, _
                                               ByVal pClientIP As String, ByVal pDsLocGrps As DataSet, _
                                               ByVal pAppId As Integer, ByVal pDeviceTokenEntry() As String) As Long _
                                               Implements IAtpar_WebTrans.InsertLocGrps

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserId
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Dim _trans As SqlTransaction
        sqlConnect = m_LocalDB.CreateConnection()
        sqlConnect.Open()
        _trans = sqlConnect.BeginTransaction()

        Dim _strSQL As String = String.Empty
        Dim _sbSQL As New StringBuilder

        _strSQL = "DELETE FROM MT_ATPAR_LOC_GROUP_ALLOCATION WHERE  ORG_GROUP_ID  = '" & pOrgGroupId & "'  AND USER_ID = '" & pAssignedUserId & "' AND APP_ID = '" & pAppId & "' "
        Try
            If log.IsInfoEnabled Then log.Info(methodBaseName & " :Query to delete the data from MT_PKPL_LOC_GROUP_MEMBERS: " & _strSQL & " : ")
            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), _trans)
        Catch ex As Exception
            _trans.rollback()
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)

            Return ATPAR_E_LOCALDBDELETEFAIL
        End Try

        If pDsLocGrps.Tables.Count > 0 Then
            If pDsLocGrps.Tables(0).Rows.Count > 0 Then

                If log.IsInfoEnabled Then log.Info(methodBaseName & " :pDsLocGrps.Tables(0).Rows.Count : " & pDsLocGrps.Tables(0).Rows.Count)
                For intCnt As Integer = 0 To pDsLocGrps.Tables(0).Rows.Count - 1

                    If pDsLocGrps.Tables(0).Rows(intCnt).Item("CHK_VALUE") = "1" Then
                        With _sbSQL
                            .Append(" INSERT INTO MT_ATPAR_LOC_GROUP_ALLOCATION(APP_ID,ORG_GROUP_ID,LOC_GROUP_ID,USER_ID,")
                            .Append(" LAST_UPDATE_DATE,LAST_UPDATE_USER,LAST_CLIENT_ADDRESS) ")
                            .Append(" VALUES('" & pAppId & "','" & pOrgGroupId & "','" & pDsLocGrps.Tables(0).Rows(intCnt).Item("LOC_GROUP_ID") & "',")
                            .Append(" '" & pAssignedUserId & "','" & Now() & "','" & pUserId & "','" & pClientIP & "')")
                        End With
                        Try

                            If log.IsInfoEnabled Then log.Info(methodBaseName & " Inserting the Location Group Id Allocation  " & _
                                            "details to user :'" & pUserId & "' with the following SQL... " & vbCrLf & _sbSQL.ToString & vbCrLf)
                            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString), _trans)
                        Catch ex As Exception
                            _trans.Rollback()
                            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                                _sbSQL.ToString & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
                            Return ATPAR_E_LOCALDBINSERTFAIL

                        Finally
                            _sbSQL.Remove(0, _sbSQL.Length)
                        End Try
                    End If

                Next
                _trans.Commit()
                Return ATPAR_OK
            End If
        End If


    End Function

    ''' <summary>
    ''' To copy the same Location Details of Logged in User to selected user
    ''' </summary>
    ''' <param name="pDsSelectedLocGrps">Selected Records Dataset to Copy to selected user</param>
    ''' <param name="pUserID">Logged in User</param>
    ''' <param name="pSeletedUserID">Selected User to which Data is being copied</param>
    ''' <param name="pOrgGrpId">Org Group Id of the User</param>
    ''' <param name="pLocGrpId">Location Group Id</param>
    ''' <returns>ATPAR_OK on Success, else E_SERVERERROR</returns>
    ''' <remarks></remarks>

    Public Function CopyLocationDetails(ByRef pDsSelectedLocGrps As DataSet, ByVal pUserID As String, _
                                ByVal pSeletedUserID As String, ByVal pOrgGrpId As String, _
                                ByVal pLocGrpId As String, ByVal pAppId As Integer, _
                                ByVal pClientIP As String, ByVal pDeviceTokenEntry() As String) As Long _
                                Implements IAtpar_WebTrans.CopyLocationDetails

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserID
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Dim _strSQL As String
        Dim _sbSQL As New StringBuilder
        Dim pBlnLocGrpAllocated As Boolean = False
        Dim _statusCode As Long = -1
        Dim _strLocGrpId As String = String.Empty
        Try

            If pDsSelectedLocGrps.Tables.Count > 0 Then
                If pDsSelectedLocGrps.Tables(0).Rows.Count > 0 Then
                    If log.IsInfoEnabled Then log.Info(methodBaseName & " :pDsSelectedLocGrps.Tables(0).Rows.Count : " & pDsSelectedLocGrps.Tables(0).Rows.Count)
                    For intCnt As Integer = 0 To pDsSelectedLocGrps.Tables(0).Rows.Count - 1
                        _strLocGrpId = pDsSelectedLocGrps.Tables(0).Rows(intCnt).Item("LOC_GROUP_ID").ToString()
                        Try
                            _statusCode = CheckLocations(pUserID, pSeletedUserID, _strLocGrpId, pOrgGrpId, pBlnLocGrpAllocated, pAppId)

                            If _statusCode <> ATPAR_OK Then
                                If log.IsWarnEnabled Then log.Warn(methodBaseName & " Failed to check if Locations " & _
                                                                  "allocated with statuscode " & _statusCode & vbCrLf)
                                Return E_SERVERERROR
                            End If

                        Catch ex As Exception
                            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to check if Locations " & _
                                                                 "allocated " & ex.ToString & vbCrLf)
                            Return E_SERVERERROR
                        End Try
                        If pBlnLocGrpAllocated Then
                            If pDsSelectedLocGrps.Tables(0).Rows(intCnt).Item("CHK_VALUE") = "1" Then

                                With _sbSQL
                                    .Append(" INSERT INTO MT_ATPAR_LOC_GROUP_ALLOCATION(APP_ID,ORG_GROUP_ID,LOC_GROUP_ID,USER_ID,")
                                    .Append(" LAST_UPDATE_DATE,LAST_UPDATE_USER,LAST_CLIENT_ADDRESS) ")
                                    .Append(" VALUES('" & pAppId & "','" & pOrgGrpId & "','" & _strLocGrpId & "',")
                                    .Append(" '" & pSeletedUserID & "','" & Now() & "','" & pUserID & "','" & pClientIP & "')")
                                End With

                                Try
                                    If log.IsInfoEnabled Then log.Info(methodBaseName & " Insert into allocation " & _
                                                   "table with the following table " & _sbSQL.ToString & vbCrLf)
                                    m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString()))
                                Catch sqlEx As SqlException
                                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                     _sbSQL.ToString & vbCrLf & "Exception is : " & sqlEx.ToString & vbCrLf)
                                    Return ATPAR_E_LOCALDBINSERTFAIL
                                Finally
                                    _sbSQL.Remove(0, _sbSQL.Length)
                                End Try
                            End If
                        End If
                    Next
                End If
            End If
            Return ATPAR_OK
        Catch sqlEx As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                 _strSQL & vbCrLf & "Exception is : " & sqlEx.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBCOPYFAIL
        End Try
    End Function

    ''' <summary>
    ''' To Move the same Location Details of Logged in User to selected user
    ''' </summary>
    ''' <param name="pDsSelectedLocGrps">Selected Records Dataset to Copy to selected user</param>
    ''' <param name="pUserID">Logged in User</param>
    ''' <param name="pSeletedUserID">Selected User to which Data is being Moved</param>
    ''' <param name="pOrgGrpId">Org Group Id of the User</param>
    ''' <param name="pLocGrpId">Location Group Id</param>
    ''' <returns>ATPAR_OK on Success, else E_SERVERERROR</returns>
    ''' <remarks></remarks>
    Public Function MoveLocationDetails(ByRef pDsSelectedLocGrps As DataSet, ByVal pUserIDToMove As String, _
                                        ByVal pSeletedUserID As String, ByVal pOrgGrpId As String, _
                                        ByVal pLocGrpId As String, ByVal pAppId As Integer, _
                                        ByVal pClientIP As String, ByVal pUserId As String, _
                                        ByVal pDeviceTokenEntry() As String) As Long _
                                        Implements IAtpar_WebTrans.MoveLocationDetails

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserId
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Dim _strSQL As New StringBuilder
        Dim _sbSQL As New StringBuilder
        Dim pBlnLocGrpAllocated As Boolean = False
        Dim _statusCode As Long = -1
        Dim _intRecCnt As Integer
        Dim _trans As SqlTransaction
        Try
            'sqlConnect.Open()
            '_trans = sqlConnect.BeginTransaction()

            'sqlConnect.Open()
            '_trans = sqlConnect.BeginTransaction()
            If pDsSelectedLocGrps.Tables.Count > 0 Then
                If pDsSelectedLocGrps.Tables(0).Rows.Count > 0 Then
                    If log.IsInfoEnabled Then log.Info(methodBaseName & " :pDsSelectedLocGrps.Tables(0).Rows.Count : " & pDsSelectedLocGrps.Tables(0).Rows.Count)
                    For intCnt As Integer = 0 To pDsSelectedLocGrps.Tables(0).Rows.Count - 1
                        Try
                            _statusCode = CheckLocations(pUserId, pSeletedUserID, pDsSelectedLocGrps.Tables(0).Rows(intCnt).Item("LOC_GROUP_ID"), pOrgGrpId, pBlnLocGrpAllocated, pAppId)

                            If _statusCode <> ATPAR_OK Then
                                If log.IsWarnEnabled Then log.Warn(methodBaseName & " Failed to check if Locations " & _
                                                                  "allocated with statuscode " & _statusCode & vbCrLf)
                                Return E_SERVERERROR
                            End If

                        Catch ex As Exception
                            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to check if Locations " & _
                                                    "allocated " & ex.ToString & vbCrLf)
                            Return E_SERVERERROR
                        End Try
                        If pDsSelectedLocGrps.Tables(0).Rows(intCnt).Item("CHK_VALUE") = "1" Then
                            If pBlnLocGrpAllocated Then
                                With _sbSQL
                                    .Append(" INSERT INTO MT_ATPAR_LOC_GROUP_ALLOCATION(APP_ID,ORG_GROUP_ID,LOC_GROUP_ID,USER_ID,")
                                    .Append(" LAST_UPDATE_DATE,LAST_UPDATE_USER,LAST_CLIENT_ADDRESS) ")
                                    .Append(" VALUES('" & pAppId & "','" & pOrgGrpId & "','" & pDsSelectedLocGrps.Tables(0).Rows(intCnt).Item("LOC_GROUP_ID") & "',")
                                    .Append(" '" & pSeletedUserID & "','" & Now() & "','" & pUserId & "','" & pClientIP & "')")
                                End With
                                Try
                                    If log.IsInfoEnabled Then log.Info(methodBaseName & " Insert into allocation " & _
                                                   "table with the following table " & _sbSQL.ToString & vbCrLf)
                                    m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString))
                                Catch sqlEx As SqlException
                                    '_trans.Rollback()
                                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                     _sbSQL.ToString & vbCrLf & "Exception is : " & sqlEx.ToString & vbCrLf)
                                    Return ATPAR_E_LOCALDBINSERTFAIL
                                Finally
                                    _sbSQL.Remove(0, _sbSQL.Length)
                                End Try
                            End If
                            Try
                                With _strSQL
                                    .Append(" DELETE FROM MT_ATPAR_LOC_GROUP_ALLOCATION WHERE ORG_GROUP_ID='" & pOrgGrpId & "'  AND ")
                                    .Append(" LOC_GROUP_ID='" & pDsSelectedLocGrps.Tables(0).Rows(intCnt).Item("LOC_GROUP_ID") & "' ")
                                    .Append(" AND APP_ID='" & pAppId & "' AND USER_ID='" & pUserIDToMove & "' ")
                                End With
                                If log.IsInfoEnabled Then log.Info(methodBaseName & " Query to Delete from allocation " & _
                                                                    "table with the following table " & _strSQL.ToString() & vbCrLf)
                                m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL.ToString))
                            Catch sqlEx As SqlException
                                '_trans.Rollback()
                                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                 _strSQL.ToString & vbCrLf & "Exception is : " & sqlEx.ToString & vbCrLf)
                                Return ATPAR_E_LOCALDBDELETEFAIL
                            End Try
                        End If
                    Next
                End If
            End If
            '_trans.Commit()
            Return ATPAR_OK

        Catch sqlEx As Exception
            '_trans.Rollback()
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
             _strSQL.ToString & vbCrLf & "Exception is : " & sqlEx.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBMOVEFAIL
        End Try
    End Function

    ''' <summary>
    ''' To Delete the selected same  Location Details of Logged in User in  selected user Records
    ''' </summary>
    ''' <param name="pDsSelectedLocGrps">Selected Records Dataset to Delete for selected user</param>
    ''' <param name="pUserID">Logged in User</param>
    ''' <returns>ATPAR_OK on Success, else E_SERVERERROR</returns>
    ''' <remarks></remarks>
    Public Function DeleteLocationDetails(ByRef pDsSelectedLocGrps As DataSet, _
                                          ByVal pUserID As String, ByVal pAppId As Integer, _
                                          ByVal pOrgGrpId As String, ByVal pDeviceTokenEntry() As String) As Long _
                                          Implements IAtpar_WebTrans.DeleteLocationDetails

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserID
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Dim _sbSQL As New StringBuilder

        If pDsSelectedLocGrps.Tables.Count > 0 Then
            If pDsSelectedLocGrps.Tables(0).Rows.Count > 0 Then
                If log.IsDebugEnabled Then log.Debug(methodBaseName & " :pDsSelectedLocGrps.Tables(0).Rows.Count : " & pDsSelectedLocGrps.Tables(0).Rows.Count)
                For intCnt As Integer = 0 To pDsSelectedLocGrps.Tables(0).Rows.Count - 1
                    If pDsSelectedLocGrps.Tables(0).Rows(intCnt).Item("CHK_VALUE") = "1" Then
                        Try
                            With _sbSQL
                                .Append(" DELETE FROM MT_ATPAR_LOC_GROUP_ALLOCATION WHERE ORG_GROUP_ID='" & pOrgGrpId & "'  AND ")
                                .Append(" LOC_GROUP_ID='" & pDsSelectedLocGrps.Tables(0).Rows(intCnt).Item("LOC_GROUP_ID") & "' ")
                                .Append(" AND APP_ID='" & pAppId & "' AND USER_ID='" & pUserID & "' ")
                            End With

                            If log.IsInfoEnabled Then log.Info(methodBaseName & " Deleting the Location from the allocated  " & _
                               "user: " & pUserID & " with the following SQL....." & vbCrLf & _sbSQL.ToString & vbCrLf)
                            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString))
                        Catch sqlEx As SqlException
                            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                             _sbSQL.ToString & vbCrLf & "Exception is : " & sqlEx.ToString & vbCrLf)
                            Return ATPAR_E_LOCALDBDELETEFAIL
                        Finally
                            _sbSQL.Remove(0, _sbSQL.Length)
                        End Try
                    End If
                Next
            End If
        End If
    End Function


    Private Function CheckLocations(ByVal pUserID As String, ByVal pSelectedUserId As String, ByVal pLocGrpId As String, _
                            ByVal pOrgGrpId As String, ByRef pBlnLocGrpAllocated As Boolean, _
                            ByVal pAppId As Integer) As Long

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserID

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sbSQL As New StringBuilder
        Dim intRecCnt As Integer

        With _sbSQL
            .Append("SELECT COUNT(*) FROM MT_ATPAR_LOC_GROUP_ALLOCATION ")
            .Append("WHERE ORG_GROUP_ID = '" & pOrgGrpId & "' ")
            .Append("AND LOC_GROUP_ID ='" & pLocGrpId & "' ")
            .Append("AND USER_ID ='" & pSelectedUserId & "'")
            .Append("AND APP_ID ='" & pAppId & "'")
        End With

        Try
            If log.IsInfoEnabled Then log.Info(methodBaseName & " Checking if Location is allocated to the " & _
                                                 "user: " & pSelectedUserId & " with the following SQL....." & vbCrLf & _sbSQL.ToString & vbCrLf)
            intRecCnt = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString))
            If log.IsDebugEnabled Then log.Debug(methodBaseName & " intRecCnt :" & intRecCnt)
        Catch ex As SqlException
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                _sbSQL.ToString & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBSELECTFAIL
            Exit Function
        End Try

        If intRecCnt > 0 Then
            pBlnLocGrpAllocated = False
        Else
            pBlnLocGrpAllocated = True
        End If
        If log.IsDebugEnabled Then log.Debug(methodBaseName & " pBlnLocGrpAllocated  :" & pBlnLocGrpAllocated)
        Return ATPAR_OK

    End Function

    Private Function CheckLocationMembers(ByVal pLocId As String, ByVal pOrgGrpId As String, ByVal pLocGrpId As String, _
                        ByVal pOrgId As String, ByRef pBlnLocAllocated As Boolean, ByVal _trans As SqlTransaction) As Long

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sbSQL As New StringBuilder
        Dim intRecCnt As Integer

        With _sbSQL
            .Append("SELECT COUNT(*) FROM MT_ATPAR_LOC_GROUP_MEMBERS ")
            .Append("WHERE ORG_GROUP_ID = '" & pOrgGrpId & "' ")
            .Append("AND LOC_GROUP_ID ='" & pLocGrpId & "' ")
            .Append("AND ORG_ID ='" & pOrgId & "'")
            .Append("AND LOCATION_ID ='" & pLocId & "'")
        End With

        Try
            If log.IsInfoEnabled Then log.Info(methodBaseName & " Checking if Location  is allocated to the " & _
                                                 "LOC_GROUP_ID: " & pLocGrpId & " with the following SQL....." & vbCrLf & _sbSQL.ToString & vbCrLf)
            intRecCnt = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString), _trans)
            If log.IsDebugEnabled Then log.Debug(methodBaseName & " intRecCnt :" & intRecCnt)
        Catch ex As SqlException
            _trans.Rollback()
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                _sbSQL.ToString & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBSELECTFAIL
            Exit Function
        End Try

        If intRecCnt > 0 Then
            pBlnLocAllocated = False
        Else
            pBlnLocAllocated = True
        End If
        If log.IsDebugEnabled Then log.Debug(methodBaseName & " pBlnLocAllocated  :" & pBlnLocAllocated)
        Return ATPAR_OK

    End Function

    ''' <summary>
    ''' To get Users of selected Org Group
    ''' </summary> 
    ''' <param name="pOrgGrpId">Org Group ID</param>
    ''' <param name="pDsUsers">Allocated Users as Dataset</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function GetOrgGroupUsers(ByVal pOrgGrpId As String, _
                                     ByRef pDsUsers As DataSet, _
                                     ByVal pDeviceTokenEntry() As String) As Long _
                                     Implements IAtpar_WebTrans.GetOrgGroupUsers

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strSQL As String = String.Empty

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try

            _strSQL = String.Empty

            _strSQL = " SELECT  A.FIRST_NAME + ' ' + A.MIDDLE_INITIAL + ' ' + A.LAST_NAME + ' (' + A.USER_ID + ')' AS FULLNAME,A.USER_ID  FROM  MT_ATPAR_USER A ," & _
                      " MT_ATPAR_USER_ORG_GROUPS B WHERE B.ORG_GROUP_ID='" & pOrgGrpId & "' AND A.USER_ID = B.USER_ID  "
            If log.IsInfoEnabled Then log.Info(methodBaseName & " to get the users allocated to that Org Group " & _
                                                ": " & pOrgGrpId & " with the following SQL....." & vbCrLf & _strSQL & vbCrLf)

            pDsUsers = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))
            If pDsUsers.Tables.Count > 0 Then
                If pDsUsers.Tables(0).Rows.Count = 0 Then
                    Return E_NORECORDFOUND
                End If
            End If
            Return ATPAR_OK
        Catch ex As SqlException
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBSELECTFAIL
            Exit Function
        End Try

    End Function

    ''' <summary>
    ''' To get selected Org Group Id description
    ''' </summary> 
    ''' <param name="pOrgGrpId">Org Group ID</param>
    ''' <param name="pOrgGrpName">Org Group Name</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function GetOrgGroupName(ByVal pOrgGrpId As String, _
                                    ByRef pOrgGrpName As String, _
                                    ByVal pDeviceTokenEntry() As String) As Long _
                                    Implements IAtpar_WebTrans.GetOrgGroupName

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strSQL As String = String.Empty

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try

            _strSQL = String.Empty

            _strSQL = "SELECT ORG_GROUP_NAME FROM MT_ATPAR_ORG_GROUPS WHERE ORG_GROUP_ID='" & pOrgGrpId & "'"
            If log.IsInfoEnabled Then log.Info(methodBaseName & " to get the users allocated to that Org Group " & _
                                                ": " & pOrgGrpId & " with the following SQL....." & vbCrLf & _strSQL & vbCrLf)

            pOrgGrpName = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(_strSQL))

            Return ATPAR_OK
        Catch ex As SqlException
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBSELECTFAIL
            Exit Function
        End Try

    End Function

    Public Function GetExcludedLocations(ByVal pUserId As String, _
                                 ByRef pDsExcludedLocs As DataSet, ByVal pDeviceTokenEntry() As String) As Long _
                                 Implements IAtpar_WebTrans.GetExcludedLocations

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserId
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        Dim _strSQL As String = String.Empty
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try


        _strSQL = " SELECT SETID,LOCATION FROM MT_DELV_EXCLUDE_LOC "


        If log.IsInfoEnabled Then log.Info(methodBaseName & ":Query to get the setid and location from middle tier database:" & _strSQL)


        Try
            pDsExcludedLocs = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))


        Catch sqlex As SqlException

            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                 _strSQL & vbCrLf & "Exception is : " & sqlex.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBSELECTFAIL
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                             _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
            Return E_SERVERERROR
        End Try






    End Function

#End Region

#Region "    Profile Upload"

    ''' <summary>
    ''' Used to Upload Profile Data 
    ''' </summary>
    ''' <param name="pSvrUserID">User ID</param>
    ''' <param name="pDSExcelProfileData">Profile Dataset</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Private Function Do_UploadProfileData_Flow(ByVal pSvrUserID As String, ByRef pDsExcelProfileData As DataSet, ByVal pDeviceTokenEntry() As String) As Long

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pSvrUserID
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            If pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRef.ToString).Rows.Count = 0 Then
                Return E_NORECORDFOUND
            Else
                Dim dRow As DataRow = pDsExcelProfileData.Tables(Enum_OrgGroupData.SUMMARY.ToString).NewRow()
                pDsExcelProfileData.Tables(Enum_ProfileData.SUMMARY.ToString).Rows.Add(dRow)
                pDsExcelProfileData.Tables(Enum_ProfileData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.TOTAL_REC_CNT) = pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRef.ToString).Rows.Count
                pDsExcelProfileData.Tables(Enum_ProfileData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.SUCCESS_CNT) = 0
                pDsExcelProfileData.Tables(Enum_ProfileData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.FAILURE_CNT) = 0
                pDsExcelProfileData.Tables(Enum_ProfileData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.ADDED_CNT) = 0
                pDsExcelProfileData.Tables(Enum_ProfileData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.UPDATED_CNT) = 0
            End If
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown while Creating DataRow in Summary Table is.." & vbCrLf & ex.ToString)
            Return E_SERVERERROR
        End Try

        Try
            Dim _StatusCode As Long = -1
            Dim _intProfileCountExists As Integer = 0
            Dim _strSQL As String = String.Empty
            Dim _strProfileID As String = String.Empty
            Dim _strProfileDescr As String = String.Empty
            Dim _strMode As String = String.Empty
            Dim _dsProfileDefaultData As New DataSet
            Dim _strUserId As String = pSvrUserID
            Dim _strProfileTemplateID As String = String.Empty
            Dim _strParameterTemplateID As String = String.Empty
            Dim _strMenuTemplateID As String = String.Empty
            Dim _strScreenDisplayTemplateID As String = String.Empty
            Dim _strAccess As String = String.Empty
            Dim _strErrorMsg As String = String.Empty
            Dim _sbErrorString As New StringBuilder
            Dim _blnMandatory As Boolean = False
            Dim _strCtrlText As String = String.Empty
            Dim _strErrMsg As String = String.Empty
            Dim _blnValidData As Boolean = False
            Dim _blnValidateParameters As Boolean = False
            Dim _blnValidateMenuData As Boolean = False
            Dim _blnValidateScreenDisplayData As Boolean = False
            Dim _dsSaveDataset As New DataSet
            Dim _blnChangeProfileClienttoServer As Boolean = False
            Dim _strClientIPAddr As String = String.Empty
            Dim _strProfileTemplateRefError As String = String.Empty

            With pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRef.ToString)
                For intProfileCnt As Integer = 0 To .Rows.Count - 1

                    If Trim(.Rows(intProfileCnt).Item(Enum_ProfileTemplateRef.ProfileID).ToString) = String.Empty Then
                        If _sbErrorString.ToString = String.Empty Then
                            _sbErrorString.Append(" ProfileID ")
                        End If
                        _blnMandatory = True
                    End If
                    If Trim(.Rows(intProfileCnt).Item(Enum_ProfileTemplateRef.Description).ToString) = String.Empty Then
                        If _sbErrorString.ToString = String.Empty Then
                            _sbErrorString.Append("Description ")
                        Else
                            _sbErrorString.Append(", Description ")
                        End If
                        _blnMandatory = True
                    End If
                    If Trim(.Rows(intProfileCnt).Item(Enum_ProfileTemplateRef.ProfileTemplateID).ToString) = String.Empty Then
                        If _sbErrorString.ToString = String.Empty Then
                            _sbErrorString.Append("ProfileTemplateID ")
                        Else
                            _sbErrorString.Append(", ProfileTemplateID ")
                        End If
                        _blnMandatory = True
                    End If
                    If Trim(.Rows(intProfileCnt).Item(Enum_ProfileTemplateRef.ScreenDisplayTemplateID).ToString) = String.Empty Then
                        If _sbErrorString.ToString = String.Empty Then
                            _sbErrorString.Append("ScreenDisplayTemplateID ")
                        Else
                            _sbErrorString.Append(", ScreenDisplayTemplateID ")
                        End If
                        _blnMandatory = True
                    End If
                    If Trim(.Rows(intProfileCnt).Item(Enum_ProfileTemplateRef.MenuAccessTemplateID).ToString) = String.Empty Then
                        If _sbErrorString.ToString = String.Empty Then
                            _sbErrorString.Append("MenuAccessTemplateID ")
                        Else
                            _sbErrorString.Append(", MenuAccessTemplateID ")
                        End If
                        _blnMandatory = True
                    End If
                    If Trim(.Rows(intProfileCnt).Item(Enum_ProfileTemplateRef.ProfileParameterTemplateID).ToString) = String.Empty Then
                        If _sbErrorString.ToString = String.Empty Then
                            _sbErrorString.Append("ProfileParameterTemplateID ")
                        Else
                            _sbErrorString.Append(", ProfileParameterTemplateID ")
                        End If
                        _blnMandatory = True
                    End If
                    If _blnMandatory Then
                        _sbErrorString.Append(" is/are Mandatory Field")
                        pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(intProfileCnt).Item("ERROR_MESSAGE") = _sbErrorString.ToString
                        _sbErrorString = Nothing
                        _sbErrorString = New StringBuilder
                        _blnMandatory = False
                        Continue For
                    Else
                        _sbErrorString = Nothing
                        _sbErrorString = New StringBuilder
                    End If

                    'ProfileID and Profile description VALIDATION
                    _strErrMsg = String.Empty
                    _strCtrlText = Trim(.Rows(intProfileCnt).Item(Enum_ProfileTemplateRef.ProfileID).ToString)
                    If _strCtrlText = "admin" Then
                        _strErrMsg = "You are not authorised to change the profile " & _strCtrlText
                        If log.IsDebugEnabled Then log.Debug(_strErrMsg)
                    End If
                    If _strCtrlText.Length > 50 Then
                        _strErrMsg = "  Number of characters cannot be more than 50 for Profile ID " & .Rows(intProfileCnt).Item(Enum_ProfileTemplateRef.ProfileID).ToString
                        If log.IsDebugEnabled Then log.Debug(_strErrMsg)
                    ElseIf Not Regex.IsMatch(_strCtrlText, "^[a-zA-Z0-9_-]+$") Then
                        _strErrMsg = "Profile ID - Use only letters (a-z), numbers (0-9), the underscore (_), and -"
                        If log.IsDebugEnabled Then log.Debug(_strErrMsg)
                    End If
                    _strCtrlText = Trim(.Rows(intProfileCnt).Item(Enum_ProfileTemplateRef.Description).ToString)
                    _strCtrlText = _strCtrlText.Replace(" ", "")
                    If _strCtrlText.Length > 50 Then
                        If Not String.IsNullOrEmpty(_strErrMsg) Then
                            _strErrMsg = _strErrMsg & ", " & "  Number of characters cannot be more than 50 for Profile Description " & .Rows(intProfileCnt).Item(Enum_ProfileTemplateRef.Description).ToString
                        Else
                            _strErrMsg = "  Number of characters cannot be more than 50 for Profile Description " & .Rows(intProfileCnt).Item(Enum_ProfileTemplateRef.Description).ToString
                        End If
                        If log.IsDebugEnabled Then log.Debug(_strErrMsg)
                    ElseIf Not Regex.IsMatch(_strCtrlText, "^[a-zA-Z0-9_-]+$") Then
                        If Not String.IsNullOrEmpty(_strErrMsg) Then
                            _strErrMsg = _strErrMsg & ", " & "Profile Description - Use only letters (a-z), numbers (0-9), the underscore (_), and -"
                        Else
                            _strErrMsg = "Profile Description - Use only letters (a-z), numbers (0-9), the underscore (_), and -"
                        End If
                        If log.IsDebugEnabled Then log.Debug(_strErrMsg)
                    End If

                    If _strErrMsg <> String.Empty Then
                        pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(intProfileCnt).Item("ERROR_MESSAGE") = _strErrMsg
                        Continue For
                    End If

                    _strProfileID = String.Empty
                    _strProfileDescr = String.Empty
                    _strProfileTemplateID = String.Empty
                    _strParameterTemplateID = String.Empty
                    _strMenuTemplateID = String.Empty
                    _strScreenDisplayTemplateID = String.Empty
                    _strProfileTemplateRefError = String.Empty
                    _strAccess = String.Empty
                    _strErrorMsg = String.Empty
                    _blnValidData = False
                    _blnValidateParameters = False
                    _blnValidateMenuData = False
                    _blnValidateScreenDisplayData = False


                    _strProfileID = Trim(.Rows(intProfileCnt).Item(Enum_ProfileTemplateRef.ProfileID).ToString)
                    _strProfileDescr = Trim(.Rows(intProfileCnt).Item(Enum_ProfileTemplateRef.Description).ToString)
                    _strProfileTemplateID = Trim(.Rows(intProfileCnt).Item(Enum_ProfileTemplateRef.ProfileTemplateID).ToString)
                    _strParameterTemplateID = Trim(.Rows(intProfileCnt).Item(Enum_ProfileTemplateRef.ProfileParameterTemplateID).ToString)
                    _strMenuTemplateID = Trim(.Rows(intProfileCnt).Item(Enum_ProfileTemplateRef.MenuAccessTemplateID).ToString)
                    _strScreenDisplayTemplateID = Trim(.Rows(intProfileCnt).Item(Enum_ProfileTemplateRef.ScreenDisplayTemplateID).ToString)

                    'Check if the profile exists or not
                    If Not String.IsNullOrEmpty(_strProfileID) Then
                        Try
                            _strSQL = "SELECT COUNT(PROFILE_ID) FROM MT_ATPAR_PROFILE WHERE PROFILE_ID='" & _strProfileID & "'"

                            If log.IsInfoEnabled Then log.Info(_strSQL)

                            _intProfileCountExists = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(_strSQL))
                        Catch ex As Exception
                            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute the SQL... " _
                                                                                    & _strSQL & vbCrLf & _
                                                                                    " Exception is : " & _
                                                                                    ex.ToString & vbCrLf)
                            Return E_SERVERERROR
                        End Try
                    End If

                    'Set the strMode variable as Add or Edit
                    If _intProfileCountExists = 0 Then
                        _strMode = AddEdit_Enum.ADD.ToString
                    Else
                        _strMode = AddEdit_Enum.EDIT.ToString
                    End If

                    'If Profile exists, call the existing function GetProfileInfo with profileId value other wise with empty value
                    Try
                        If _strMode = AddEdit_Enum.EDIT.ToString Then
                            _StatusCode = GetProfileInfo(_strUserId, _dsProfileDefaultData, _strProfileID, pDeviceTokenEntry)
                        Else
                            _StatusCode = GetProfileInfo(_strUserId, _dsProfileDefaultData, String.Empty, pDeviceTokenEntry)
                        End If

                        If _StatusCode <> ATPAR_OK Then
                            If log.IsWarnEnabled Then log.Warn("StatusCode Returned from GetProfileInfo is :" & _StatusCode & ": for ProfileID :" & _strProfileID & ":")
                            pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(intProfileCnt).Item("ERROR_MESSAGE") = CONST_PROFILE_CREATION_FAILED
                            Continue For
                        End If
                    Catch ex As Exception
                        If log.IsFatalEnabled Then log.Fatal("Exception Thrown in calling GetProfileInfo " & methodBaseName & " is..." & vbCrLf & ex.ToString)
                        Return E_SERVERERROR
                    End Try

                    'CheckProductAccess function call
                    Try
                        If Not String.IsNullOrEmpty(_strProfileTemplateID) And Not String.IsNullOrEmpty(_strParameterTemplateID) Then
                            _StatusCode = CheckProductAccess(pDsExcelProfileData, _strProfileTemplateID, _strAccess, _strProfileID)
                            If _StatusCode <> ATPAR_OK Then
                                If log.IsWarnEnabled Then log.Warn("StatusCode Returned from CheckProductAccess is :" & _StatusCode & ": for ProfileID :" & _strProfileID & ":")
                                pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(intProfileCnt).Item("ERROR_MESSAGE") = CONST_PROFILE_CREATION_FAILED
                                Continue For
                            End If
                        End If
                    Catch ex As Exception
                        If log.IsFatalEnabled Then log.Fatal("Exception Thrown in calling CheckProductAccess " & methodBaseName & " is..." & vbCrLf & ex.ToString)
                        Return E_SERVERERROR
                    End Try

                    If _strAccess = CONST_HHT_WEB_ACCESS Then
                        If Not String.IsNullOrEmpty(_strScreenDisplayTemplateID) Then
                            _blnValidateScreenDisplayData = True
                            If Not String.IsNullOrEmpty(_strMenuTemplateID) Then
                                _blnValidateMenuData = True
                            End If
                        End If
                    ElseIf _strAccess = CONST_HHT_ACCESS Then
                        If Not String.IsNullOrEmpty(_strScreenDisplayTemplateID) Then
                            _blnValidateScreenDisplayData = True
                        End If
                    ElseIf _strAccess = CONST_WEB_ACCESS Then
                        If Not String.IsNullOrEmpty(_strMenuTemplateID) Then
                            _blnValidateMenuData = True
                        End If
                    ElseIf _strAccess = CONST_NO_ACCESS Then
                        _blnValidData = True
                    ElseIf _strAccess = CONST_PROFILETEMPLATEID_IS_MANDATORY Then
                        If _strMode = AddEdit_Enum.ADD.ToString Then
                            pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(intProfileCnt).Item("ERROR_MESSAGE") = CONST_PROFILE_CREATION_FAILED & vbCrLf & CONST_PROFILETEMPLATEID_IS_MANDATORY
                        Else
                            pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(intProfileCnt).Item("ERROR_MESSAGE") = CONST_PROFILE_UPDATION_FAILED & vbCrLf & CONST_PROFILETEMPLATEID_IS_MANDATORY
                        End If
                        Continue For
                    ElseIf _strAccess = CONST_NO_ATPAR_ACCESS Then
                        If _strMode = AddEdit_Enum.ADD.ToString Then
                            pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(intProfileCnt).Item("ERROR_MESSAGE") = CONST_PROFILE_CREATION_FAILED & vbCrLf & CONST_NO_ATPAR_ACCESS
                        Else
                            pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(intProfileCnt).Item("ERROR_MESSAGE") = CONST_PROFILE_UPDATION_FAILED & vbCrLf & CONST_NO_ATPAR_ACCESS
                        End If
                        Continue For
                    End If

                    If _blnValidateScreenDisplayData Then
                        'Validate ScreendisplayTemplateId
                        Try
                            _StatusCode = ValidateScreenDisplayTemplateId(pDsExcelProfileData, _dsProfileDefaultData, _strProfileTemplateID, _strScreenDisplayTemplateID, _strErrorMsg, _strMode)
                            If _StatusCode <> ATPAR_OK Then
                                If log.IsWarnEnabled Then log.Warn("StatusCode Returned from ValidateScreenDisplayTemplateId is :" & _StatusCode & ": for ProfileID :" & _strProfileID & ":")
                                pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(intProfileCnt).Item("ERROR_MESSAGE") = CONST_PROFILE_CREATION_FAILED
                                Continue For
                            Else
                                _blnValidateParameters = True
                            End If
                            If Not _strErrorMsg = String.Empty Then
                                If _strMode = AddEdit_Enum.ADD.ToString Then
                                    _strProfileTemplateRefError = CONST_PROFILE_CREATION_FAILED & vbCrLf & CONST_INVALID_SCREENDISPLAY_DATA
                                Else
                                    _strProfileTemplateRefError = CONST_PROFILE_UPDATION_FAILED & vbCrLf & CONST_INVALID_SCREENDISPLAY_DATA
                                End If
                                Dim _dr As DataRow
                                _dr = pDsExcelProfileData.Tables(Enum_ProfileData.ProfileScreendisplayErrorData.ToString).NewRow
                                _dr.Item("PROFILE_ID") = _strProfileID
                                _dr.Item("PROFILE_TEMPLATEID") = _strProfileTemplateID
                                _dr.Item("SCREEN_TEMPLATEID") = _strScreenDisplayTemplateID
                                _dr.Item("ERROR_MESSAGE") = _strErrorMsg
                                pDsExcelProfileData.Tables(Enum_ProfileData.ProfileScreendisplayErrorData.ToString).Rows.Add(_dr)
                            End If
                        Catch ex As Exception
                            pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(intProfileCnt).Item("ERROR_MESSAGE") = CONST_PROFILE_CREATION_FAILED
                            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in ValidateScreenDisplayTemplateId " & methodBaseName & " is...." & vbCrLf & ex.ToString)
                            Continue For
                        End Try

                    End If
                    If _blnValidateMenuData Then
                        'Validate MenuTemplateId
                        Try
                            _StatusCode = ValidateMenuTemplateId(pDsExcelProfileData, _dsProfileDefaultData, _strProfileTemplateID, _strMenuTemplateID, _strErrorMsg, _strProfileID)
                            If _StatusCode <> ATPAR_OK Then
                                If log.IsWarnEnabled Then log.Warn("StatusCode Returned from ValidateMenuTemplateId is :" & _StatusCode & ": for ProfileID :" & _strProfileID & ":")
                                pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(intProfileCnt).Item("ERROR_MESSAGE") = CONST_PROFILE_CREATION_FAILED
                                Continue For
                            Else
                                _blnValidateParameters = True
                            End If
                            If _strErrorMsg = CONST_NO_ATPAR_MENU_ACCESS Then
                                If _strMode = AddEdit_Enum.ADD.ToString Then
                                    If log.IsWarnEnabled Then log.Warn(" Can not remove access for ATPAR product in Profile Setup for ProfileID :" & _strProfileID)
                                    pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(intProfileCnt).Item("ERROR_MESSAGE") = CONST_PROFILE_CREATION_FAILED & vbCrLf & CONST_INVALID_MENU_DATA
                                Else
                                    If log.IsWarnEnabled Then log.Warn(" Can not remove access for ATPAR product in Profile Setup for ProfileID :" & _strProfileID)
                                    pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(intProfileCnt).Item("ERROR_MESSAGE") = CONST_PROFILE_UPDATION_FAILED & vbCrLf & CONST_INVALID_MENU_DATA
                                End If
                                Dim _dr As DataRow
                                _dr = pDsExcelProfileData.Tables(Enum_ProfileData.ProfileMenusErrorData.ToString).NewRow
                                _dr.Item("PROFILE_ID") = _strProfileID
                                _dr.Item("PROFILE_TEMPLATEID") = _strProfileTemplateID
                                _dr.Item("MENU_TEMPLATEID") = _strMenuTemplateID
                                _dr.Item("ERROR_MESSAGE") = _strErrorMsg
                                pDsExcelProfileData.Tables(Enum_ProfileData.ProfileMenusErrorData.ToString).Rows.Add(_dr)
                                Continue For
                            End If
                            If Not _strErrorMsg = String.Empty Then
                                If Not String.IsNullOrEmpty(_strProfileTemplateRefError) Then
                                    _strProfileTemplateRefError = _strProfileTemplateRefError & ", " & vbCrLf & CONST_INVALID_MENU_DATA
                                Else
                                    If _strMode = AddEdit_Enum.ADD.ToString Then
                                        _strProfileTemplateRefError = CONST_PROFILE_CREATION_FAILED & vbCrLf & CONST_INVALID_MENU_DATA
                                    Else
                                        _strProfileTemplateRefError = CONST_PROFILE_UPDATION_FAILED & vbCrLf & CONST_INVALID_MENU_DATA
                                    End If
                                End If
                                Dim _dr As DataRow
                                _dr = pDsExcelProfileData.Tables(Enum_ProfileData.ProfileMenusErrorData.ToString).NewRow
                                _dr.Item("PROFILE_ID") = _strProfileID
                                _dr.Item("PROFILE_TEMPLATEID") = _strProfileTemplateID
                                _dr.Item("MENU_TEMPLATEID") = _strMenuTemplateID
                                _dr.Item("ERROR_MESSAGE") = _strErrorMsg
                                pDsExcelProfileData.Tables(Enum_ProfileData.ProfileMenusErrorData.ToString).Rows.Add(_dr)
                            End If
                        Catch ex As Exception
                            pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(intProfileCnt).Item("ERROR_MESSAGE") = CONST_PROFILE_CREATION_FAILED
                            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in ValidateMenuTemplateId " & methodBaseName & " is...." & vbCrLf & ex.ToString)
                            Continue For
                        End Try
                    End If

                    'ValidatingColumnNames 
                    Try

                        _strProfileTemplateRefError = ValidateProfileColumnNames(pDsExcelProfileData)

                        If log.IsDebugEnabled Then log.Debug("Invalid Column Name" & _strProfileTemplateRefError)

                        If _strProfileTemplateRefError <> String.Empty Then
                            pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(intProfileCnt).Item("ERROR_MESSAGE") = CONST_NOT_VALID_PARAMETER & _strProfileTemplateRefError
                        Else
                            _blnValidateParameters = True
                        End If
                    Catch ex As Exception
                        If log.IsFatalEnabled Then log.Fatal("Exception Thrown in ValidColumnNames " & methodBaseName & " is...." & vbCrLf & ex.ToString)
                        Return E_SERVERERROR
                    End Try

                    If _blnValidateParameters Then
                        'ValidateParameterTemplateid
                        If _StatusCode = ATPAR_OK Then
                            Try
                                _StatusCode = ValidateParameterTemplateId(pDsExcelProfileData, _dsProfileDefaultData, _strProfileTemplateID, _strParameterTemplateID, _strErrorMsg)
                                If _StatusCode <> ATPAR_OK Then
                                    If log.IsWarnEnabled Then log.Warn("StatusCode Returned from ValidateParameterTemplateId is :" & _StatusCode & ": for ProfileID :" & _strProfileID & ":")
                                    pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(intProfileCnt).Item("ERROR_MESSAGE") = CONST_PROFILE_CREATION_FAILED & vbCrLf & CONST_INVALID_PARAMETERS_DATA
                                    Continue For
                                End If
                                If Not _strErrorMsg = String.Empty Then
                                    If Not String.IsNullOrEmpty(_strProfileTemplateRefError) Then
                                        _strProfileTemplateRefError = _strProfileTemplateRefError & ", " & vbCrLf & CONST_INVALID_PARAMETERS_DATA
                                    Else
                                        If _strMode = AddEdit_Enum.ADD.ToString Then
                                            _strProfileTemplateRefError = CONST_PROFILE_CREATION_FAILED & vbCrLf & CONST_INVALID_PARAMETERS_DATA
                                        Else
                                            _strProfileTemplateRefError = CONST_PROFILE_UPDATION_FAILED & vbCrLf & CONST_INVALID_PARAMETERS_DATA
                                        End If
                                    End If
                                    Dim _drErrorParameters As DataRow
                                    _drErrorParameters = pDsExcelProfileData.Tables(Enum_ProfileData.ProfileParametersErrorData.ToString).NewRow
                                    _drErrorParameters.Item("PROFILE_ID") = _strProfileID
                                    _drErrorParameters.Item("PROFILE_TEMPLATEID") = _strProfileTemplateID
                                    _drErrorParameters.Item("PARAMETER_TEMPLATEID") = _strParameterTemplateID
                                    _drErrorParameters.Item("ERROR_MESSAGE") = _strErrorMsg
                                    pDsExcelProfileData.Tables(Enum_ProfileData.ProfileParametersErrorData.ToString).Rows.Add(_drErrorParameters)
                                End If
                            Catch ex As Exception
                                pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(intProfileCnt).Item("ERROR_MESSAGE") = CONST_PROFILE_CREATION_FAILED & vbCrLf & CONST_INVALID_PARAMETERS_DATA
                                If log.IsFatalEnabled Then log.Fatal("Exception Thrown in ValidateParameterTemplateId " & methodBaseName & " is...." & vbCrLf & ex.ToString)
                                Continue For
                            End Try

                            'ValidateProfileParameterData
                            Try
                                _strErrorMsg = String.Empty
                                _StatusCode = ValidateProfileParametersData(pDsExcelProfileData, _dsProfileDefaultData, _strParameterTemplateID, _strErrorMsg)

                                If _StatusCode <> ATPAR_OK Then
                                    If log.IsWarnEnabled Then log.Warn("StatusCode Returned from ValidateProfileParametersData is :" & _StatusCode & ": for ProfileID :" & _strProfileID & ":")
                                    pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(intProfileCnt).Item("ERROR_MESSAGE") = CONST_PROFILE_CREATION_FAILED & vbCrLf & CONST_INVALID_PARAMETERS_DATA
                                    Continue For
                                End If

                                If log.IsDebugEnabled Then log.Debug("_strValidInput for ValidateProfileParametersData : " & _strErrorMsg)

                                If Not _strErrorMsg = String.Empty Then
                                    If Not String.IsNullOrEmpty(_strProfileTemplateRefError) Then
                                        _strProfileTemplateRefError = _strProfileTemplateRefError & ", " & vbCrLf & CONST_INVALID_PARAMETERS_DATA
                                    Else
                                        If _strMode = AddEdit_Enum.ADD.ToString Then
                                            _strProfileTemplateRefError = CONST_PROFILE_CREATION_FAILED & vbCrLf & CONST_INVALID_PARAMETERS_DATA
                                        Else
                                            _strProfileTemplateRefError = CONST_PROFILE_UPDATION_FAILED & vbCrLf & CONST_INVALID_PARAMETERS_DATA
                                        End If
                                    End If
                                    Dim _drParameters As DataRow
                                    _drParameters = pDsExcelProfileData.Tables(Enum_ProfileData.ProfileParametersErrorData.ToString).NewRow
                                    _drParameters.Item("PROFILE_ID") = _strProfileID
                                    _drParameters.Item("PROFILE_TEMPLATEID") = _strProfileTemplateID
                                    _drParameters.Item("PARAMETER_TEMPLATEID") = _strParameterTemplateID
                                    _drParameters.Item("ERROR_MESSAGE") = _strErrorMsg
                                    pDsExcelProfileData.Tables(Enum_ProfileData.ProfileParametersErrorData.ToString).Rows.Add(_drParameters)
                                End If
                            Catch ex As Exception
                                pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(intProfileCnt).Item("ERROR_MESSAGE") = CONST_PROFILE_CREATION_FAILED & vbCrLf & CONST_INVALID_PARAMETERS_DATA
                                If log.IsFatalEnabled Then log.Fatal("Exception Thrown in ValidateProfileParametersData " & methodBaseName & " is...." & vbCrLf & ex.ToString)
                                Continue For
                            End Try

                            'Populate Profile parameters
                            Try
                                _StatusCode = PopulateProfileParameters(pDsExcelProfileData, _dsProfileDefaultData, _strProfileTemplateID, _strParameterTemplateID)
                                If _StatusCode <> ATPAR_OK Then
                                    Dim _drParameters As DataRow
                                    _drParameters = pDsExcelProfileData.Tables(Enum_ProfileData.ProfileParametersErrorData.ToString).NewRow
                                    _drParameters.Item("PROFILE_ID") = _strProfileID
                                    _drParameters.Item("PROFILE_TEMPLATEID") = _strProfileTemplateID
                                    _drParameters.Item("PARAMETER_TEMPLATEID") = _strParameterTemplateID
                                    _drParameters.Item("ERROR_MESSAGE") = _strErrorMsg
                                    pDsExcelProfileData.Tables(Enum_ProfileData.ProfileParametersErrorData.ToString).Rows.Add(_drParameters)
                                Else
                                    _blnValidData = True
                                End If
                            Catch ex As Exception
                                pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(intProfileCnt).Item("ERROR_MESSAGE") = CONST_PROFILE_CREATION_FAILED
                                If log.IsFatalEnabled Then log.Fatal("Exception Thrown in PopulateProfileParameters " & methodBaseName & " is...." & vbCrLf & ex.ToString)
                                Continue For
                            End Try

                        End If
                    End If

                    If Not String.IsNullOrEmpty(_strProfileTemplateRefError) Then
                        pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(intProfileCnt).Item("ERROR_MESSAGE") = _strProfileTemplateRefError
                        Continue For
                    End If

                    'Populate the data to be inserted/Update into dataset
                    If (_blnValidData) Then
                        Try
                            _StatusCode = PopulateProfileDataset(pDsExcelProfileData, _dsProfileDefaultData, _strProfileTemplateID, _
                                                                                        _strParameterTemplateID, _strMode, _dsSaveDataset, _blnChangeProfileClienttoServer)
                            If _StatusCode <> ATPAR_OK Then
                                If log.IsWarnEnabled Then log.Warn("StatusCode Returned from PopulateProfileDataset is :" & _StatusCode & ": for ProfileID :" & _strProfileID & ":")
                                pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(intProfileCnt).Item("ERROR_MESSAGE") = CONST_PROFILE_INVALID_DATA
                                Continue For
                            End If
                        Catch ex As Exception
                            pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(intProfileCnt).Item("ERROR_MESSAGE") = CONST_PROFILE_CREATION_FAILED
                            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in PopulateProfileDataset " & methodBaseName & " is...." & vbCrLf & ex.ToString)
                            Continue For
                        End Try
                    End If

                    'Calling SaveProfileInfo Function
                    If _StatusCode = ATPAR_OK Then
                        Try
                            If _strMode = AddEdit_Enum.ADD.ToString Then
                                _StatusCode = SaveProfileInfo(_strMode, _strProfileID, Trim(_strProfileDescr), _strUserId, _strClientIPAddr, _dsSaveDataset, _blnChangeProfileClienttoServer, pDeviceTokenEntry, True)
                            ElseIf _strMode = AddEdit_Enum.EDIT.ToString Then
                                _StatusCode = SaveProfileInfo(_strMode, _strProfileID, Trim(_strProfileDescr), _strUserId, _strClientIPAddr, _dsSaveDataset, _blnChangeProfileClienttoServer, pDeviceTokenEntry, True)
                            End If

                            If log.IsDebugEnabled Then log.Debug(" StatusCode Returned from SaveProfileInfo " & _StatusCode)

                            If _StatusCode <> ATPAR_OK Then
                                If log.IsWarnEnabled Then log.Warn("StatusCode Returned from SaveProfileInfo is :" & _StatusCode & ": for ProfileID :" & _strProfileID & ":")
                                pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(intProfileCnt).Item("ERROR_MESSAGE") = CONST_PROFILE_INVALID_DATA
                                Continue For
                            End If
                        Catch ex As Exception
                            pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(intProfileCnt).Item("ERROR_MESSAGE") = CONST_PROFILE_CREATION_FAILED
                            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in SaveProfileInfo " & methodBaseName & " is...." & vbCrLf & ex.ToString)
                            Continue For
                        End Try
                    End If

                    If _StatusCode = ATPAR_OK Then
                        If _strMode = AddEdit_Enum.ADD.ToString Then
                            pDsExcelProfileData.Tables(Enum_ProfileData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.ADDED_CNT) += 1
                            pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(intProfileCnt).Item("ERROR_MESSAGE") = CONST_PROFILE_CREATION_SUCCESS
                        Else
                            pDsExcelProfileData.Tables(Enum_ProfileData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.UPDATED_CNT) += 1
                            pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(intProfileCnt).Item("ERROR_MESSAGE") = CONST_PROFILE_UPDATION_SUCCESS
                        End If
                    Else
                        If _strMode = AddEdit_Enum.ADD.ToString Then
                            If log.IsWarnEnabled Then log.Warn("Profile Creation Failed:" & _strProfileID & ":")
                            pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(intProfileCnt).Item("ERROR_MESSAGE") = CONST_PROFILE_CREATION_FAILED
                            Continue For
                        Else
                            If log.IsWarnEnabled Then log.Warn("Profile Updation Failed:" & _strProfileID & ":")
                            pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(intProfileCnt).Item("ERROR_MESSAGE") = CONST_PROFILE_UPDATION_FAILED
                            Continue For
                        End If
                    End If

                Next
            End With

            pDsExcelProfileData.Tables(Enum_ProfileData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.SUCCESS_CNT) = pDsExcelProfileData.Tables(Enum_ProfileData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.ADDED_CNT) + pDsExcelProfileData.Tables(Enum_ProfileData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.UPDATED_CNT)
            pDsExcelProfileData.Tables(Enum_ProfileData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.FAILURE_CNT) = pDsExcelProfileData.Tables(Enum_ProfileData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.TOTAL_REC_CNT) - pDsExcelProfileData.Tables(Enum_ProfileData.SUMMARY.ToString).Rows(0).Item(Enum_Upload_Summary.SUCCESS_CNT)
            pDsExcelProfileData.AcceptChanges()

            Try
                For i As Integer = pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows.Count - 1 To 0 Step -1
                    If pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(i).Item(5).ToString = CONST_PROFILE_CREATION_SUCCESS Or pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(i).Item(5).ToString = CONST_PROFILE_UPDATION_SUCCESS Then
                        pDsExcelProfileData.Tables(Enum_ProfileData.ProfileTemplateRefErrorData.ToString).Rows(i).Delete()
                    End If
                Next
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal("Exception Thrown while updating ErrorData Table is..." & vbCrLf & ex.ToString)
                Return E_SERVERERROR
            End Try

            pDsExcelProfileData.AcceptChanges()

            If log.IsDebugEnabled Then log.Debug("End Of The Function " & methodBaseName)

            Return ATPAR_OK

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in Main Try " & methodBaseName & " is..." & vbCrLf & ex.ToString)
            Return E_SERVERERROR
        End Try

    End Function

    ''' <summary>
    ''' Used to Get the Product Access  
    ''' </summary>
    ''' <param name="pDSExcelProfileData">Profile Excel Dataset</param>
    ''' <param name="pProfileTemplateId">ProfileTemplateId</param>
    ''' <param name="pAccess">Access</param>
    ''' <param name="pProfileId">ProfileId</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Private Function CheckProductAccess(ByVal pDSExcelProfileData As DataSet, _
                                        ByVal pProfileTemplateId As String, _
                                        ByRef pAccess As String, _
                                        ByVal pProfileId As String) As Long

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)


        Try
            pAccess = String.Empty

            Dim _drProfileTemplateID() As DataRow
            _drProfileTemplateID = pDSExcelProfileData.Tables(Enum_ProfileData.ProfileSetup.ToString).Select("ProfileTemplateID = '" & pProfileTemplateId & "'")

            If log.IsDebugEnabled Then log.Debug("ProfileTemplateID  count in ProfileSetup Table " & methodBaseName & " is .. " & _drProfileTemplateID.Length)

            If _drProfileTemplateID.Length = 0 Then
                pAccess = CONST_PROFILETEMPLATEID_IS_MANDATORY
                Return ATPAR_OK
            End If

            'Check Admin profile settings
            If UCase(pProfileId) = UCase(adminProfile) Then
                Dim _drAdminCount() As DataRow
                _drAdminCount = pDSExcelProfileData.Tables(Enum_ProfileData.ProfileSetup.ToString).Select("ProfileTemplateID = '" & pProfileTemplateId & "'" & _
                                                                                          " and  [Web(Y/N)] = '" & YesNo_Enum.N.ToString & "' and [App_Id] = '" & CONST_ATPAR_APPID & "' ")

                If log.IsDebugEnabled Then log.Debug("ProfileTemplateID  count in ProfileSetup Table for admin profile " & methodBaseName & " is .. " & _drAdminCount.Length)

                If _drAdminCount.Length > 0 Then
                    pAccess = CONST_NO_ATPAR_ACCESS
                    Return ATPAR_OK
                End If
            End If

            Dim _drWebRowCount() As DataRow
            _drWebRowCount = pDSExcelProfileData.Tables(Enum_ProfileData.ProfileSetup.ToString).Select("ProfileTemplateID = '" & pProfileTemplateId & "'" & _
                                                                                          " and  [Web(Y/N)] = '" & YesNo_Enum.Y.ToString & "' ")

            If log.IsDebugEnabled Then log.Debug("ProfileTemplateID  WEB rows count in ProfileSetup Table " & methodBaseName & " is .. " & _drWebRowCount.Length)

            Dim _drHHTRowCount() As DataRow
            _drHHTRowCount = pDSExcelProfileData.Tables(Enum_ProfileData.ProfileSetup.ToString).Select("ProfileTemplateID = '" & pProfileTemplateId & "'" & _
                                                                                          " and  [HHT(Y/N)] = '" & YesNo_Enum.Y.ToString & "' ")

            If log.IsDebugEnabled Then log.Debug("ProfileTemplateID  HHT rows count in ProfileSetup Table " & methodBaseName & " is .. " & _drHHTRowCount.Length)

            If _drWebRowCount.Length = 0 And _drHHTRowCount.Length = 0 Then
                pAccess = CONST_NO_ACCESS
            Else
                If _drWebRowCount.Length > 0 And _drHHTRowCount.Length > 0 Then
                    pAccess = CONST_HHT_WEB_ACCESS
                ElseIf _drWebRowCount.Length > 0 And _drHHTRowCount.Length = 0 Then
                    pAccess = CONST_WEB_ACCESS
                ElseIf _drWebRowCount.Length = 0 And _drHHTRowCount.Length > 0 Then
                    pAccess = CONST_HHT_ACCESS
                End If
            End If

            Return ATPAR_OK

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in Main Try " & methodBaseName & " is..." & vbCrLf & ex.ToString)
            Return E_SERVERERROR
        End Try


    End Function

    ''' <summary>
    ''' Validate Profile Column Names
    ''' </summary>
    ''' <param name="pDsExcelProfileData">Profile Parameters Dataset</param>
    ''' <returns>Err Message</returns>
    ''' <remarks></remarks>
    Private Function ValidateProfileColumnNames(ByVal pDsExcelProfileData As DataSet) As String
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        Dim strErrMsg As String = String.Empty
        If log.IsDebugEnabled Then log.Debug(methodBaseName)
        Try
            For Each dc As DataColumn In pDsExcelProfileData.Tables(Enum_ProfileData.ProfileParameters.ToString).Columns
                Dim strName As String = dc.ColumnName.ToString
                If strName <> "PROFILE_PARAM_TEMPLATE_ID" Then
                    strName = strName.Substring(strName.IndexOf("_") + 1)
                    If Not [Enum].IsDefined(GetType(AppParameters_Enum), strName) Then
                        strErrMsg = " Parameter ID :" & strName & " is not defined in atpar application parameters enum "
                        If log.IsDebugEnabled Then log.Debug(strErrMsg)
                        Return strErrMsg
                    End If
                End If
            Next
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in " & methodBaseName & ", Validating Column Names" & vbCrLf & ex.ToString)
            Return "E_SERVERERROR"
        End Try


    End Function

    ''' <summary>
    ''' Used to Validate ParameterTemplateId
    ''' </summary>
    ''' <param name="pDSExcelProfileData">Profile Excel Dataset</param>
    ''' <param name="pProfileTemplateId">ProfileTemplateId</param>
    ''' <param name="pParameterTemplateId">ParameterTemplateId</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Private Function ValidateParameterTemplateId(ByRef pDSExcelProfileData As DataSet, _
                                                 ByRef pDSProfileDefaultData As DataSet, _
                                                 ByVal pProfileTemplateId As String, _
                                                 ByVal pParameterTemplateId As String, _
                                                 ByRef pErrorMessage As String) As Long

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)
        Dim _strValidInput As String = String.Empty
        Dim _sbErrorString As New StringBuilder
        Dim _blnMandatory As Boolean = False
        Dim _StatusCode As Long
        pErrorMessage = String.Empty

        Try
            Dim _drParameters() As DataRow
            _drParameters = pDSExcelProfileData.Tables(Enum_ProfileData.ProfileParameters.ToString).Select("PROFILE_PARAM_TEMPLATE_ID = '" & pParameterTemplateId & "'")
            If log.IsDebugEnabled Then log.Debug("ProfileParamTemplateID  count in ProfileParameters Table " & methodBaseName & " is .. " & _drParameters.Length)

            If _drParameters.Length = 0 Then
                pErrorMessage = CONST_PARAMETERTEMPLATEID_IS_MANDATORY
                Return ATPAR_OK
            End If

            'Check If mandatory fields existing or not
            If _drParameters.Length > 0 Then
                For Each _dr As DataRow In _drParameters
                    _strValidInput = String.Empty
                    If _dr.Item("PROFILE_PARAM_TEMPLATE_ID") Is DBNull.Value Then
                        If _sbErrorString.ToString = String.Empty Then
                            _sbErrorString.Append("ProfileParamTemplateID ")
                        End If
                        _blnMandatory = True
                    ElseIf String.IsNullOrEmpty(_dr.Item("PROFILE_PARAM_TEMPLATE_ID").ToString) Then
                        If _sbErrorString.ToString = String.Empty Then
                            _sbErrorString.Append("ProfileParamTemplateID ")
                        End If
                        _blnMandatory = True
                    End If
                    'CartCount
                    If _dr.Table.Columns.Contains(EnumApps.CartCount & "_" & AppParameters_Enum.ITEM_COUNT_HIGH_PCT.ToString) Then
                        If _dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.ITEM_COUNT_HIGH_PCT.ToString) Is DBNull.Value Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("CartCount Item Count High% ")
                            Else
                                _sbErrorString.Append(", CartCount Item Count High% ")
                            End If
                            _blnMandatory = True
                        ElseIf _dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.ITEM_COUNT_HIGH_PCT.ToString) = String.Empty Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("CartCount Item Count High% ")
                            Else
                                _sbErrorString.Append(", CartCount Item Count High% ")
                            End If
                            _blnMandatory = True
                        End If
                    End If
                    If _dr.Table.Columns.Contains(EnumApps.CartCount & "_" & AppParameters_Enum.ITEM_COUNT_LOW_PCT.ToString) Then
                        If _dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.ITEM_COUNT_LOW_PCT.ToString) Is DBNull.Value Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("CartCount Item Count Low% ")
                            Else
                                _sbErrorString.Append(", CartCount Item Count Low% ")
                            End If
                            _blnMandatory = True
                        ElseIf String.IsNullOrEmpty(_dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.ITEM_COUNT_LOW_PCT.ToString)) Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("CartCount Item Count Low% ")
                            Else
                                _sbErrorString.Append(", CartCount Item Count Low% ")
                            End If
                            _blnMandatory = True
                        End If
                    End If
                    If _dr.Table.Columns.Contains(EnumApps.CartCount & "_" & AppParameters_Enum.QTY_OPTION.ToString) Then
                        If _dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.QTY_OPTION.ToString) Is DBNull.Value Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("CartCount Default Count Option (Count/Request/None) ")
                            Else
                                _sbErrorString.Append(", CartCount Default Count Option (Count/Request/None) ")
                            End If
                            _blnMandatory = True
                        ElseIf String.IsNullOrEmpty(_dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.QTY_OPTION.ToString)) Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("CartCount Default Count Option (Count/Request/None) ")
                            Else
                                _sbErrorString.Append(", CartCount Default Count Option (Count/Request/None) ")
                            End If
                            _blnMandatory = True
                        End If
                    End If
                    If _dr.Table.Columns.Contains(EnumApps.CartCount & "_" & AppParameters_Enum.RESTRICT_COUNT_QTY.ToString) Then

                        If _dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.RESTRICT_COUNT_QTY.ToString) Is DBNull.Value Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("CartCount Max. allowable Count/Request Quantity ")
                            Else
                                _sbErrorString.Append(", CartCount Max. allowable Count/Request Quantity ")
                            End If
                            _blnMandatory = True
                        ElseIf String.IsNullOrEmpty(_dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.RESTRICT_COUNT_QTY.ToString)) Then

                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("CartCount Max. allowable Count/Request Quantity ")
                            Else
                                _sbErrorString.Append(", CartCount Max. allowable Count/Request Quantity ")
                            End If
                            _blnMandatory = True
                        End If
                    End If
                    If _dr.Table.Columns.Contains(EnumApps.CartCount & "_" & AppParameters_Enum.RESTRICT_COUNT_QTY_DIGITS.ToString) Then

                        If _dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.RESTRICT_COUNT_QTY_DIGITS.ToString) Is DBNull.Value Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("CartCount Max. allowable number of digits ")
                            Else
                                _sbErrorString.Append(", CartCount Max. allowable number of digits ")
                            End If
                            _blnMandatory = True
                        ElseIf String.IsNullOrEmpty(_dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.RESTRICT_COUNT_QTY_DIGITS.ToString)) Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("CartCount Max. allowable number of digits ")
                            Else
                                _sbErrorString.Append(", CartCount Max. allowable number of digits ")
                            End If
                            _blnMandatory = True
                        End If
                    End If
                    'STATUS_OF_REQUISITION
                    If _dr.Table.Columns.Contains(EnumApps.CartCount & "_" & AppParameters_Enum.STATUS_OF_REQUISITION.ToString) Then

                        If _dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.STATUS_OF_REQUISITION.ToString) Is DBNull.Value Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("CartCount Delivery Status of Material Requisition")
                            Else
                                _sbErrorString.Append(", CartCount Delivery Status of Material Requisition ")
                            End If
                            _blnMandatory = True
                        ElseIf String.IsNullOrEmpty(_dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.STATUS_OF_REQUISITION.ToString)) Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("CartCount Delivery Status of Material Requisition ")
                            Else
                                _sbErrorString.Append(", CartCount Delivery Status of Material Requisition ")
                            End If
                            _blnMandatory = True
                        End If
                    End If

                    'CycleCount
                    If _dr.Table.Columns.Contains(EnumApps.CycleCount & "_" & AppParameters_Enum.SYS_COUNT_PCT_DEVIATION.ToString) Then

                        If _dr.Item(EnumApps.CycleCount & "_" & AppParameters_Enum.SYS_COUNT_PCT_DEVIATION.ToString) Is DBNull.Value Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("CycleCount System Count deviation% ")
                            Else
                                _sbErrorString.Append(", CycleCount System Count deviation% ")
                            End If
                            _blnMandatory = True
                        ElseIf String.IsNullOrEmpty(_dr.Item(EnumApps.CycleCount & "_" & AppParameters_Enum.SYS_COUNT_PCT_DEVIATION.ToString)) Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("CycleCount System Count deviation% ")
                            Else
                                _sbErrorString.Append(", CycleCount System Count deviation% ")
                            End If
                            _blnMandatory = True

                        End If
                    End If
                    'Receiving
                    If _dr.Table.Columns.Contains(EnumApps.Receiving & "_" & AppParameters_Enum.DEFAULT_DATE_RANGE.ToString) Then

                        If _dr.Item(EnumApps.Receiving & "_" & AppParameters_Enum.DEFAULT_DATE_RANGE.ToString) Is DBNull.Value Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Receiving Default Date Range ")
                            Else
                                _sbErrorString.Append(", Receiving Default Date Range ")
                            End If
                            _blnMandatory = True
                        ElseIf String.IsNullOrEmpty(_dr.Item(EnumApps.Receiving & "_" & AppParameters_Enum.DEFAULT_DATE_RANGE.ToString)) Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Receiving Default Date Range ")
                            Else
                                _sbErrorString.Append(", Receiving Default Date Range ")
                            End If
                            _blnMandatory = True
                        End If
                    End If
                    If _dr.Table.Columns.Contains(EnumApps.Receiving & "_" & AppParameters_Enum.ITEM_RECV_HIGH_PCT.ToString) Then

                        If _dr.Item(EnumApps.Receiving & "_" & AppParameters_Enum.ITEM_RECV_HIGH_PCT.ToString) Is DBNull.Value Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Receiving Item Receive High ")
                            Else
                                _sbErrorString.Append(", Receiving Item Receive High ")
                            End If
                            _blnMandatory = True
                        ElseIf (String.IsNullOrEmpty(_dr.Item(EnumApps.Receiving & "_" & AppParameters_Enum.ITEM_RECV_HIGH_PCT.ToString))) Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Receiving Item Receive High ")
                            Else
                                _sbErrorString.Append(", Receiving Item Receive High ")
                            End If
                            _blnMandatory = True
                        End If
                    End If
                    If _dr.Table.Columns.Contains(EnumApps.Receiving & "_" & AppParameters_Enum.ITEM_RECV_LOW_PCT.ToString) Then

                        If _dr.Item(EnumApps.Receiving & "_" & AppParameters_Enum.ITEM_RECV_LOW_PCT.ToString) Is DBNull.Value Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Receiving Item Receive Low ")
                            Else
                                _sbErrorString.Append(", Receiving Item Receive Low ")
                            End If
                            _blnMandatory = True
                        ElseIf String.IsNullOrEmpty(_dr.Item(EnumApps.Receiving & "_" & AppParameters_Enum.ITEM_RECV_LOW_PCT.ToString)) Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Receiving Item Receive Low ")
                            Else
                                _sbErrorString.Append(", Receiving Item Receive Low ")
                            End If
                            _blnMandatory = True
                        End If
                    End If
                    If _dr.Table.Columns.Contains(EnumApps.Receiving & "_" & AppParameters_Enum.PO_IUT_RECEIVING.ToString) Then

                        If _dr.Item(EnumApps.Receiving & "_" & AppParameters_Enum.PO_IUT_RECEIVING.ToString) Is DBNull.Value Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Receiving Purchasing/Inter Unit/Both ")
                            Else
                                _sbErrorString.Append(", Receiving Purchasing/Inter Unit/Both ")
                            End If
                            _blnMandatory = True
                        ElseIf String.IsNullOrEmpty(_dr.Item(EnumApps.Receiving & "_" & AppParameters_Enum.PO_IUT_RECEIVING.ToString)) Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Receiving Purchasing/Inter Unit/Both ")
                            Else
                                _sbErrorString.Append(", Receiving Purchasing/Inter Unit/Both ")
                            End If
                            _blnMandatory = True
                        End If
                    End If

                    'Receiving print options  RECEIPT_DELIVER_PRINT_OPTIONS
                    If _dr.Table.Columns.Contains(EnumApps.Receiving & "_" & AppParameters_Enum.RECEIPT_DELIVER_PRINT_OPTIONS.ToString) Then

                        If _dr.Item(EnumApps.Receiving & "_" & AppParameters_Enum.RECEIPT_DELIVER_PRINT_OPTIONS.ToString) Is DBNull.Value Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Receipt Deliver print options ")
                            Else
                                _sbErrorString.Append(", Receipt Deliver print options ")
                            End If
                            _blnMandatory = True
                        ElseIf String.IsNullOrEmpty(_dr.Item(EnumApps.Receiving & "_" & AppParameters_Enum.RECEIPT_DELIVER_PRINT_OPTIONS.ToString)) Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Receipt Deliver print options ")
                            Else
                                _sbErrorString.Append(", Receipt Deliver print options ")
                            End If
                            _blnMandatory = True
                        End If
                    End If


                    'PickPlan
                    If _dr.Table.Columns.Contains(EnumApps.PickPlan & "_" & AppParameters_Enum.ITEM_PICK_HIGH_PCT.ToString) Then

                        If _dr.Item(EnumApps.PickPlan & "_" & AppParameters_Enum.ITEM_PICK_HIGH_PCT.ToString.ToString) Is DBNull.Value Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Item Pick High ")
                            Else
                                _sbErrorString.Append(", Item Pick High ")
                            End If
                            _blnMandatory = True
                        ElseIf String.IsNullOrEmpty(_dr.Item(EnumApps.PickPlan & "_" & AppParameters_Enum.ITEM_PICK_HIGH_PCT.ToString.ToString)) Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Item Pick High ")
                            Else
                                _sbErrorString.Append(", Item Pick High ")
                            End If
                            _blnMandatory = True
                        End If
                    End If
                    If _dr.Table.Columns.Contains(EnumApps.PickPlan & "_" & AppParameters_Enum.ITEM_PICK_LOW_PCT.ToString) Then

                        If _dr.Item(EnumApps.PickPlan & "_" & AppParameters_Enum.ITEM_PICK_LOW_PCT.ToString) Is DBNull.Value Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Item Pick Low ")
                            Else
                                _sbErrorString.Append(", Item Pick Low ")
                            End If
                            _blnMandatory = True
                        ElseIf String.IsNullOrEmpty(_dr.Item(EnumApps.PickPlan & "_" & AppParameters_Enum.ITEM_PICK_LOW_PCT.ToString)) Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Item Pick Low ")
                            Else
                                _sbErrorString.Append(", Item Pick Low ")
                            End If
                            _blnMandatory = True
                        End If
                    End If
                    If _dr.Table.Columns.Contains(EnumApps.PickPlan & "_" & AppParameters_Enum.SHIPPING_LABEL_PRINT_OPTIONS.ToString) Then

                        If _dr.Item(EnumApps.PickPlan & "_" & AppParameters_Enum.SHIPPING_LABEL_PRINT_OPTIONS.ToString) Is DBNull.Value Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Shipping Label Print Options ")
                            Else
                                _sbErrorString.Append(", Shipping Label Print Options ")
                            End If
                            _blnMandatory = True
                        ElseIf String.IsNullOrEmpty(_dr.Item(EnumApps.PickPlan & "_" & AppParameters_Enum.SHIPPING_LABEL_PRINT_OPTIONS.ToString)) Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Shipping Label Print Options ")
                            Else
                                _sbErrorString.Append(", Shipping Label Print Options ")
                            End If
                            _blnMandatory = True
                        End If
                    End If
                    'Deliver
                    If _dr.Table.Columns.Contains(EnumApps.Deliver & "_" & AppParameters_Enum.DEFAULT_DATE_RANGE.ToString) Then

                        If _dr.Item(EnumApps.Deliver & "_" & AppParameters_Enum.DEFAULT_DATE_RANGE.ToString) Is DBNull.Value Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Deliver Default Date Range ")
                            Else
                                _sbErrorString.Append(", Deliver Default Date Range ")
                            End If
                            _blnMandatory = True
                        ElseIf String.IsNullOrEmpty(_dr.Item(EnumApps.Deliver & "_" & AppParameters_Enum.DEFAULT_DATE_RANGE.ToString)) Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Deliver Default Date Range ")
                            Else
                                _sbErrorString.Append(", Deliver Default Date Range ")
                            End If
                            _blnMandatory = True
                        End If
                    End If
                    'PutAway
                    If _dr.Table.Columns.Contains(EnumApps.PutAway & "_" & AppParameters_Enum.ALLOW_LESS_QTY.ToString) Then

                        If _dr.Item(EnumApps.PutAway & "_" & AppParameters_Enum.ALLOW_LESS_QTY.ToString) Is DBNull.Value Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Allow less than Base Quantity ")
                            Else
                                _sbErrorString.Append(", Allow less than Base Quantity ")
                            End If
                            _blnMandatory = True
                        ElseIf String.IsNullOrEmpty(_dr.Item(EnumApps.PutAway & "_" & AppParameters_Enum.ALLOW_LESS_QTY.ToString)) Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Allow less than Base Quantity ")
                            Else
                                _sbErrorString.Append(", Allow less than Base Quantity ")
                            End If
                            _blnMandatory = True
                        End If
                    End If
                    If _dr.Table.Columns.Contains(EnumApps.PutAway & "_" & AppParameters_Enum.ITEM_PUTAWAY_HIGH_PCT.ToString) Then

                        If _dr.Item(EnumApps.PutAway & "_" & AppParameters_Enum.ITEM_PUTAWAY_HIGH_PCT.ToString) Is DBNull.Value Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Item Putaway High ")
                            Else
                                _sbErrorString.Append(", Item Putaway High ")
                            End If
                            _blnMandatory = True
                        ElseIf String.IsNullOrEmpty(_dr.Item(EnumApps.PutAway & "_" & AppParameters_Enum.ITEM_PUTAWAY_HIGH_PCT.ToString)) Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Item Putaway High ")
                            Else
                                _sbErrorString.Append(", Item Putaway High ")
                            End If
                            _blnMandatory = True
                        End If
                    End If
                    If _dr.Table.Columns.Contains(EnumApps.PutAway & "_" & AppParameters_Enum.ITEM_PUTAWAY_LOW_PCT.ToString) Then

                        If _dr.Item(EnumApps.PutAway & "_" & AppParameters_Enum.ITEM_PUTAWAY_LOW_PCT.ToString) Is DBNull.Value Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Item Putaway Low ")
                            Else
                                _sbErrorString.Append(", Item Putaway Low ")
                            End If
                            _blnMandatory = True
                        ElseIf String.IsNullOrEmpty(_dr.Item(EnumApps.PutAway & "_" & AppParameters_Enum.ITEM_PUTAWAY_LOW_PCT.ToString)) Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Item Putaway Low ")
                            Else
                                _sbErrorString.Append(", Item Putaway Low ")
                            End If
                            _blnMandatory = True
                        End If
                    End If
                    If _dr.Table.Columns.Contains(EnumApps.PutAway & "_" & AppParameters_Enum.PO_IUT_RECEIVING.ToString) Then

                        If _dr.Item(EnumApps.PutAway & "_" & AppParameters_Enum.PO_IUT_RECEIVING.ToString) Is DBNull.Value Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Putaway Purchasing/Inter Unit Receiving ")
                            Else
                                _sbErrorString.Append(", Putaway Purchasing/Inter Unit Receiving ")
                            End If
                            _blnMandatory = True
                        ElseIf String.IsNullOrEmpty(_dr.Item(EnumApps.PutAway & "_" & AppParameters_Enum.PO_IUT_RECEIVING.ToString)) Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Putaway Purchasing/Inter Unit Receiving ")
                            Else
                                _sbErrorString.Append(", Putaway Purchasing/Inter Unit Receiving ")
                            End If
                            _blnMandatory = True
                        End If
                    End If
                    'TrackIT
                    If _dr.Table.Columns.Contains(EnumApps.TrackIT & "_" & AppParameters_Enum.DEFAULT_DATE_RANGE.ToString) Then

                        If _dr.Item(EnumApps.TrackIT & "_" & AppParameters_Enum.DEFAULT_DATE_RANGE.ToString) Is DBNull.Value Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("TrackIT Default Date Range ")
                            Else
                                _sbErrorString.Append(", TrackIT Default Date Range ")
                            End If
                            _blnMandatory = True
                        ElseIf String.IsNullOrEmpty(_dr.Item(EnumApps.TrackIT & "_" & AppParameters_Enum.DEFAULT_DATE_RANGE.ToString)) Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("TrackIT Default Date Range ")
                            Else
                                _sbErrorString.Append(", TrackIT Default Date Range ")
                            End If
                            _blnMandatory = True
                        End If
                    End If
                    'StockIssue
                    If _dr.Table.Columns.Contains(EnumApps.StockIssue & "_" & AppParameters_Enum.RESTRICT_ISSUE_QTY.ToString) Then

                        If _dr.Item(EnumApps.StockIssue & "_" & AppParameters_Enum.RESTRICT_ISSUE_QTY.ToString) Is DBNull.Value Then
                            If log.IsDebugEnabled Then log.Debug(methodBaseName & "hi")
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("StockIssue Max. allowable Issue Quantity ")
                            Else
                                _sbErrorString.Append(", StockIssue Max. allowable Issue Quantity ")
                            End If
                            _blnMandatory = True
                        ElseIf String.IsNullOrEmpty(_dr.Item(EnumApps.StockIssue & "_" & AppParameters_Enum.RESTRICT_ISSUE_QTY.ToString)) Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("StockIssue Max. allowable Issue Quantity ")
                            Else
                                _sbErrorString.Append(", StockIssue Max. allowable Issue Quantity ")
                            End If
                            _blnMandatory = True
                        End If
                    End If
                    If _dr.Table.Columns.Contains(EnumApps.StockIssue & "_" & AppParameters_Enum.RESTRICT_ISSUE_QTY_DIGITS.ToString) Then

                        If _dr.Item(EnumApps.StockIssue & "_" & AppParameters_Enum.RESTRICT_ISSUE_QTY_DIGITS.ToString) Is DBNull.Value Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("StockIssue Max. allowable number of digits ")
                            Else
                                _sbErrorString.Append(", StockIssue Max. allowable number of digits ")
                            End If
                            _blnMandatory = True
                        ElseIf String.IsNullOrEmpty(_dr.Item(EnumApps.StockIssue & "_" & AppParameters_Enum.RESTRICT_ISSUE_QTY_DIGITS.ToString)) Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("StockIssue Max. allowable number of digits ")
                            Else
                                _sbErrorString.Append(", StockIssue Max. allowable number of digits ")
                            End If
                            _blnMandatory = True
                        End If
                    End If
                    'Point Of Use
                    If _dr.Table.Columns.Contains(EnumApps.PointOfUse & "_" & AppParameters_Enum.DEFAULT_POU_SCREEN.ToString) Then

                        If _dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.DEFAULT_POU_SCREEN.ToString) Is DBNull.Value Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Point Of Use Default POU Screen ")
                            Else
                                _sbErrorString.Append(", Point Of Use Default POU Screen ")
                            End If
                            _blnMandatory = True
                        ElseIf String.IsNullOrEmpty(_dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.DEFAULT_POU_SCREEN.ToString)) Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Point Of Use Default POU Screen ")
                            Else
                                _sbErrorString.Append(", Point Of Use Default POU Screen ")
                            End If
                            _blnMandatory = True
                        End If
                    End If
                    If _dr.Table.Columns.Contains(EnumApps.PointOfUse & "_" & AppParameters_Enum.POU_CASECART_ACCESS.ToString) Then

                        If _dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.POU_CASECART_ACCESS.ToString) Is DBNull.Value Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Point Of Use Access to POU / CaseCart Menu ")
                            Else
                                _sbErrorString.Append(", Point Of Use Access to POU / CaseCart Menu ")
                            End If
                            _blnMandatory = True
                        ElseIf String.IsNullOrEmpty(_dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.POU_CASECART_ACCESS.ToString)) Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Point Of Use Access to POU / CaseCart Menu ")
                            Else
                                _sbErrorString.Append(", Point Of Use Access to POU / CaseCart Menu ")
                            End If
                            _blnMandatory = True
                        End If
                    End If
                    If _dr.Table.Columns.Contains(EnumApps.PointOfUse & "_" & AppParameters_Enum.POU_CASECART_ACCESS.ToString) Then

                        If _dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.POU_CASECART_ACCESS.ToString) Is DBNull.Value Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Point Of Use Access to POU / CaseCart Menu ")
                            Else
                                _sbErrorString.Append(", Point Of Use Access to POU / CaseCart Menu ")
                            End If
                            _blnMandatory = True
                        ElseIf String.IsNullOrEmpty(_dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.POU_CASECART_ACCESS.ToString)) Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Point Of Use Access to POU / CaseCart Menu ")
                            Else
                                _sbErrorString.Append(", Point Of Use Access to POU / CaseCart Menu ")
                            End If
                            _blnMandatory = True
                        End If
                    End If
                    If _dr.Table.Columns.Contains(EnumApps.PointOfUse & "_" & AppParameters_Enum.MAX_ALLOW_QTY.ToString) Then

                        If _dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.MAX_ALLOW_QTY.ToString) Is DBNull.Value Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Point Of Use Max. allowable Quantity ")
                            Else
                                _sbErrorString.Append(", Point Of Use Max. allowable Quantity ")
                            End If
                            _blnMandatory = True
                        ElseIf String.IsNullOrEmpty(_dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.MAX_ALLOW_QTY.ToString)) Then
                            If _sbErrorString.ToString = String.Empty Then
                                _sbErrorString.Append("Point Of Use Max. allowable Quantity ")
                            Else
                                _sbErrorString.Append(", Point Of Use Max. allowable Quantity ")
                            End If
                            _blnMandatory = True
                        End If
                    End If
                    If _blnMandatory Then
                        _sbErrorString.Append(" is/are Mandatory Field")
                        If Not String.IsNullOrEmpty(pErrorMessage) Then
                            pErrorMessage = pErrorMessage & ", " & _sbErrorString.ToString
                        Else
                            pErrorMessage = _sbErrorString.ToString
                        End If
                        _sbErrorString = Nothing
                        _sbErrorString = New StringBuilder
                        _blnMandatory = False
                        Continue For
                    Else
                        _sbErrorString = Nothing
                        _sbErrorString = New StringBuilder
                    End If
                Next
            End If
            Return ATPAR_OK

        Catch ex As Exception
            pDSExcelProfileData.Tables(Enum_ProfileData.ProfileParametersErrorData.ToString).Rows(0).Item("ERROR_MESSAGE") = CONST_PROFILE_CREATION_FAILED
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in Main Try " & methodBaseName & " is..." & vbCrLf & ex.ToString)
            Return E_SERVERERROR
        End Try


    End Function

    ''' <summary>
    ''' To Validate the Profile Parameters
    ''' </summary>
    ''' <param name="pDSExcelProfileData">dataset</param>
    ''' <param name="pParameterTemplateId">pParameterTemplateId</param>
    ''' <returns>String Message</returns>
    ''' <remarks></remarks>
    Private Function ValidateProfileParametersData(ByVal pDSExcelProfileData As DataSet, ByVal pDSProfileDefaultData As DataSet, ByVal pParameterTemplateId As String, _
                                         ByRef pErrorMessage As String) As Long

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            Dim strChars As String = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
            Dim strNumbers As String = "0123456789"
            Dim strYN As String = "YN"
            Dim strValid As String = String.Empty
            Dim ch As String = String.Empty
            Dim strCtrlText As String = String.Empty
            Dim _sbErrorString As New StringBuilder
            Dim _dblCartMaxValue As Double
            Dim _dblCartMaxDigits As Double
            Dim _dblSIMaxDigits As Double
            Dim _dblSIMaxValue As Double
            Dim _dblSIMaxAllowableDigits As Double

            'To fetch cartcount RESTRICT_COUNT_QTY parameter Maximum value
            Dim _drCartCountMaxValue() As DataRow
            _drCartCountMaxValue = pDSProfileDefaultData.Tables("PARAMS").Select("PARAMETER_ID = '" & AppParameters_Enum.RESTRICT_COUNT_QTY.ToString & "'" & _
                                                                               " AND APP_ID='" & EnumApps.CartCount & "'")
            If _drCartCountMaxValue.Length > 0 Then
                _dblCartMaxValue = _drCartCountMaxValue(0).Item("MAX_VALUE")
            End If

            If log.IsDebugEnabled Then log.Debug(methodBaseName & " Max. allowable Count/Request Quantity MaxValue for CartCount:" & _dblCartMaxValue)

            'To fetch cartcount RESTRICT_COUNT_QTY_DIGITS parameter Maximum value
            Dim _drDefaultMaxDigits() As DataRow
            _drDefaultMaxDigits = pDSProfileDefaultData.Tables("PARAMS").Select("PARAMETER_ID = '" & AppParameters_Enum.RESTRICT_COUNT_QTY_DIGITS.ToString & "'" & _
                                                                                " AND APP_ID='" & EnumApps.CartCount & "'")
            If _drDefaultMaxDigits.Length > 0 Then
                _dblCartMaxDigits = _drDefaultMaxDigits(0).Item("MAX_VALUE")
            End If

            If log.IsDebugEnabled Then log.Debug(methodBaseName & " Max. allowable number of digits MaxValue for CartCount:" & _dblCartMaxDigits)

            'To fetch stockissue RESTRICT_ISSUE_QTY parameter Maximum value
            Dim _drStockIssueMaxValue() As DataRow
            _drStockIssueMaxValue = pDSProfileDefaultData.Tables("PARAMS").Select("PARAMETER_ID = '" & AppParameters_Enum.RESTRICT_ISSUE_QTY.ToString & "'" & _
                                                                               " AND APP_ID='" & EnumApps.StockIssue & "'")
            If _drStockIssueMaxValue.Length > 0 Then
                _dblSIMaxValue = _drStockIssueMaxValue(0).Item("MAX_VALUE")
            End If

            If log.IsDebugEnabled Then log.Debug(methodBaseName & " Max. allowable Issue Quantity MaxValue for StockIssue:" & _dblSIMaxValue)

            'To fetch stockissue RESTRICT_ISSUE_QTY_DIGITS parameter Maximum value
            Dim _drStockIssueMaxDigits() As DataRow
            _drStockIssueMaxDigits = pDSProfileDefaultData.Tables("PARAMS").Select("PARAMETER_ID = '" & AppParameters_Enum.RESTRICT_ISSUE_QTY_DIGITS.ToString & "'" & _
                                                                                " AND APP_ID='" & EnumApps.StockIssue & "'")
            If _drStockIssueMaxDigits.Length > 0 Then
                _dblSIMaxDigits = _drStockIssueMaxDigits(0).Item("MAX_VALUE")
            End If

            If log.IsDebugEnabled Then log.Debug(methodBaseName & " Max. allowable number of digits MaxValue for Stockissue:" & _dblSIMaxDigits)



            Dim _drSPOUMaxDigits() As DataRow
            _drSPOUMaxDigits = pDSProfileDefaultData.Tables("PARAMS").Select("PARAMETER_ID = '" & AppParameters_Enum.MAX_ALLOW_QTY.ToString & "'" & _
                                                                                " AND APP_ID='" & EnumApps.PointOfUse & "'")
            If _drSPOUMaxDigits.Length > 0 Then
                _dblSIMaxAllowableDigits = _drSPOUMaxDigits(0).Item("MAX_VALUE")
            End If

            If log.IsDebugEnabled Then log.Debug(methodBaseName & " Max. allowable number of digits MaxValue for POU:" & _dblSIMaxAllowableDigits)


            Dim _drParameters() As DataRow
            _drParameters = pDSExcelProfileData.Tables(Enum_ProfileData.ProfileParameters.ToString).Select("PROFILE_PARAM_TEMPLATE_ID = '" & pParameterTemplateId & "'")

            If log.IsDebugEnabled Then log.Debug("ProfileParamTemplateID  row count in ProfileParameters Table " & methodBaseName & " is .. " & _drParameters.Length)

            'Check If mandatory fields existing or not
            If _drParameters.Length > 0 Then
                For Each dr As DataRow In _drParameters
                    '/// Cart Count///'
                    'Item Count High%
                    If dr.Table.Columns.Contains(EnumApps.CartCount & "_" & AppParameters_Enum.ITEM_COUNT_HIGH_PCT.ToString) Then
                        strCtrlText = Trim(dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.ITEM_COUNT_HIGH_PCT.ToString).ToString)
                        If Not String.IsNullOrEmpty(strCtrlText) Then
                            If Not Regex.IsMatch(strCtrlText, "^[0-9]+$") Then
                                _sbErrorString.Append("Item Count High% - Please enter a positive numeric value.")
                                If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                            End If
                        End If
                    End If
                    'Item Count Low%
                    If dr.Table.Columns.Contains(EnumApps.CartCount & "_" & AppParameters_Enum.ITEM_COUNT_LOW_PCT.ToString) Then
                        strCtrlText = Trim(dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.ITEM_COUNT_LOW_PCT.ToString).ToString)
                        If Not String.IsNullOrEmpty(strCtrlText) Then
                            If Not Regex.IsMatch(strCtrlText, "^[0-9]+$") Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Item Count Low% - Please enter a positive numeric value.")
                                Else
                                    _sbErrorString.Append(", Item Count Low% - Please enter a positive numeric value.")
                                End If
                                If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                            End If
                        End If
                    End If
                    'Max. allowable Count/Request Quantity
                    If dr.Table.Columns.Contains(EnumApps.CartCount & "_" & AppParameters_Enum.RESTRICT_COUNT_QTY.ToString) Then
                        strCtrlText = Trim(dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.RESTRICT_COUNT_QTY.ToString).ToString)
                        If Not String.IsNullOrEmpty(strCtrlText) Then
                            If Not Regex.IsMatch(strCtrlText, "^[0-9.]+$") Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("CartCount Max. allowable Count/Request Quantity - Please enter a positive numeric value.")
                                Else
                                    _sbErrorString.Append(", CartCount Max. allowable Count/Request Quantity - Please enter a positive numeric value.")
                                End If
                                If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                            Else
                                If CDbl(strCtrlText.ToString()) > 0 Then
                                    If CDbl(strCtrlText.ToString()) > _dblCartMaxValue Then
                                        If _sbErrorString.ToString = String.Empty Then
                                            _sbErrorString.Append("CartCount Max. allowable Count/Request Quantity - Please enter less than or equal to " & _dblCartMaxValue)
                                        Else
                                            _sbErrorString.Append(", CartCount Max. allowable Count/Request Quantity - Please enter less than or equal to " & _dblCartMaxValue)
                                        End If
                                        If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                                    End If
                                Else
                                    If _sbErrorString.ToString = String.Empty Then
                                        _sbErrorString.Append("CartCount Max. allowable Count/Request Quantity - Can not be zero ")
                                    Else
                                        _sbErrorString.Append(", CartCount Max. allowable Count/Request Quantity - Can not be zero ")
                                    End If
                                    If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                                End If
                            End If
                        End If
                    End If

                    'Max. allowable number of digits 
                    If dr.Table.Columns.Contains(EnumApps.CartCount & "_" & AppParameters_Enum.RESTRICT_COUNT_QTY_DIGITS.ToString) Then
                        strCtrlText = Trim(dr.Item(EnumApps.CartCount & "_" & AppParameters_Enum.RESTRICT_COUNT_QTY_DIGITS.ToString).ToString)
                        If Not String.IsNullOrEmpty(strCtrlText) Then
                            If Not Regex.IsMatch(strCtrlText, "^[0-9]+$") Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("CartCount Max. allowable number of digits - Please enter a positive numeric value.")
                                Else
                                    _sbErrorString.Append(", CartCount Max. allowable number of digits - Please enter a positive numeric value.")
                                End If
                                If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                            Else
                                If CDbl(strCtrlText.ToString()) > 0 Then
                                    If CDbl(strCtrlText.ToString()) > _dblCartMaxDigits Then
                                        If _sbErrorString.ToString = String.Empty Then
                                            _sbErrorString.Append("CartCount Max. allowable number of digits - Please enter less than or equal to " & _dblCartMaxDigits)
                                        Else
                                            _sbErrorString.Append(", CartCount Max. allowable number of digits - Please enter less than or equal to " & _dblCartMaxDigits)
                                        End If
                                        If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                                    End If
                                Else
                                    If _sbErrorString.ToString = String.Empty Then
                                        _sbErrorString.Append("CartCount Max. allowable number of digits - Can not be zero ")
                                    Else
                                        _sbErrorString.Append(", CartCount Max. allowable number of digits - Can not be zero ")
                                    End If
                                    If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                                End If
                            End If
                        End If
                    End If
                    '/// Cycle Count///'
                    'System Count deviation%
                    If dr.Table.Columns.Contains(EnumApps.CycleCount & "_" & AppParameters_Enum.SYS_COUNT_PCT_DEVIATION.ToString) Then
                        strCtrlText = Trim(dr.Item(EnumApps.CycleCount & "_" & AppParameters_Enum.SYS_COUNT_PCT_DEVIATION.ToString).ToString)
                        If Not String.IsNullOrEmpty(strCtrlText) Then
                            If Not Regex.IsMatch(strCtrlText, "^[0-9]+$") Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("System Count deviation% - Please enter a positive numeric value.")
                                Else
                                    _sbErrorString.Append(", System Count deviation% - Please enter a positive numeric value.")
                                End If
                                If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                            End If
                        End If
                    End If
                    '/// Receiving ///'
                    'DEFAULT_DATE_RANGE
                    If dr.Table.Columns.Contains(EnumApps.Receiving & "_" & AppParameters_Enum.DEFAULT_DATE_RANGE.ToString) Then
                        strCtrlText = Trim(dr.Item(EnumApps.Receiving & "_" & AppParameters_Enum.DEFAULT_DATE_RANGE.ToString).ToString)
                        If Not String.IsNullOrEmpty(strCtrlText) Then
                            If Not Regex.IsMatch(strCtrlText, "^[0-9]+$") Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Default date range - Please enter a positive numeric value.")
                                Else
                                    _sbErrorString.Append(", Default date range - Please enter a positive numeric value.")
                                End If
                                If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                            ElseIf strCtrlText.Length > 2 Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Default date range - Number of digits cannot be more than 3.")
                                Else
                                    _sbErrorString.Append(", Default date range - Number of digits cannot be more than 3.")
                                End If
                                If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                            End If
                        End If
                    End If

                    'Item Receive High
                    If dr.Table.Columns.Contains(EnumApps.Receiving & "_" & AppParameters_Enum.ITEM_RECV_HIGH_PCT.ToString) Then
                        strCtrlText = Trim(dr.Item(EnumApps.Receiving & "_" & AppParameters_Enum.ITEM_RECV_HIGH_PCT.ToString).ToString)
                        If Not String.IsNullOrEmpty(strCtrlText) Then
                            If Not Regex.IsMatch(strCtrlText, "^[0-9]+$") Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Item Receive High - Please enter a positive numeric value.")
                                Else
                                    _sbErrorString.Append(", Item Receive High - Please enter a positive numeric value.")
                                End If
                                If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                            End If
                        End If
                    End If

                    'Item Receive Low
                    If dr.Table.Columns.Contains(EnumApps.Receiving & "_" & AppParameters_Enum.ITEM_RECV_LOW_PCT.ToString) Then
                        strCtrlText = Trim(dr.Item(EnumApps.Receiving & "_" & AppParameters_Enum.ITEM_RECV_LOW_PCT.ToString).ToString)
                        If Not String.IsNullOrEmpty(strCtrlText) Then
                            If Not Regex.IsMatch(strCtrlText, "^[0-9]+$") Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Item Receive Low - Please enter a positive numeric value.")
                                Else
                                    _sbErrorString.Append(", Item Receive Low - Please enter a positive numeric value.")
                                End If
                                If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                            End If
                        End If
                    End If

                    ' RECEIPT_DELIVER_PRINT_OPTIONS

                    If dr.Table.Columns.Contains(EnumApps.Receiving & "_" & AppParameters_Enum.RECEIPT_DELIVER_PRINT_OPTIONS.ToString) Then
                        strCtrlText = Trim(dr.Item(EnumApps.Receiving & "_" & AppParameters_Enum.RECEIPT_DELIVER_PRINT_OPTIONS.ToString).ToString)
                        If Not String.IsNullOrEmpty(strCtrlText) Then
                            If Not Regex.IsMatch(strCtrlText, "^[0-9]+$") Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Receipt Deliver print options - Please enter a positive numeric value.")
                                Else
                                    _sbErrorString.Append(", Receipt Deliver print options - Please enter a positive numeric value.")
                                End If
                                If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                            ElseIf (CInt(strCtrlText) > 4 Or CInt(strCtrlText) < 1) Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append(" The valid Receipt Deliver print options are 1,2,3,4.")
                                Else
                                    _sbErrorString.Append(", The valid Receipt Deliver print options are 1,2,3,4.")
                                End If

                                If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                            End If
                        End If
                    End If


                    '/// PickPlan ///'
                    'Item Pick High
                    If dr.Table.Columns.Contains(EnumApps.PickPlan & "_" & AppParameters_Enum.ITEM_PICK_HIGH_PCT.ToString) Then
                        strCtrlText = Trim(dr.Item(EnumApps.PickPlan & "_" & AppParameters_Enum.ITEM_PICK_HIGH_PCT.ToString).ToString)
                        If Not String.IsNullOrEmpty(strCtrlText) Then
                            If Not Regex.IsMatch(strCtrlText, "^[0-9]+$") Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Item Pick High - Please enter a positive numeric value.")
                                Else
                                    _sbErrorString.Append(", Item Pick High - Please enter a positive numeric value.")
                                End If
                                If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                            End If
                        End If
                    End If
                    'Item Pick Low
                    If dr.Table.Columns.Contains(EnumApps.PickPlan & "_" & AppParameters_Enum.ITEM_PICK_LOW_PCT.ToString) Then
                        strCtrlText = Trim(dr.Item(EnumApps.PickPlan & "_" & AppParameters_Enum.ITEM_PICK_LOW_PCT.ToString).ToString)
                        If Not String.IsNullOrEmpty(strCtrlText) Then
                            If Not Regex.IsMatch(strCtrlText, "^[0-9]+$") Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Item Pick Low - Please enter a positive numeric value.")
                                Else
                                    _sbErrorString.Append(", Item Pick Low - Please enter a positive numeric value.")
                                End If
                                If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                            End If
                        End If
                    End If
                    'SHIPPING_LABEL_PRINT_OPTIONS
                    If dr.Table.Columns.Contains(EnumApps.PickPlan & "_" & AppParameters_Enum.SHIPPING_LABEL_PRINT_OPTIONS.ToString) Then
                        strCtrlText = Trim(dr.Item(EnumApps.PickPlan & "_" & AppParameters_Enum.SHIPPING_LABEL_PRINT_OPTIONS.ToString).ToString)
                        If Not String.IsNullOrEmpty(strCtrlText) Then
                            If Not Regex.IsMatch(strCtrlText, "^[0-9]+$") Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Shipping Label Print Options - Please enter a positive numeric value.")
                                Else
                                    _sbErrorString.Append(", Shipping Label Print Options - Please enter a positive numeric value.")
                                End If
                                If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                            ElseIf (CInt(strCtrlText) > 5 Or CInt(strCtrlText) < 1) Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append(" The valid Shipping Label Print Options are 1,2,3,4.")
                                Else
                                    _sbErrorString.Append(", The valid Shipping Label Print Options are 1,2,3,4.")
                                End If

                                If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                            End If
                        End If
                    End If
                    '/// Deliver ///'
                    'DEFAULT_DATE_RANGE
                    If dr.Table.Columns.Contains(EnumApps.Deliver & "_" & AppParameters_Enum.DEFAULT_DATE_RANGE.ToString) Then
                        strCtrlText = Trim(dr.Item(EnumApps.Deliver & "_" & AppParameters_Enum.DEFAULT_DATE_RANGE.ToString).ToString)
                        If Not String.IsNullOrEmpty(strCtrlText) Then
                            If Not Regex.IsMatch(strCtrlText, "^[0-9]+$") Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Default date range - Please enter a positive numeric value.")
                                Else
                                    _sbErrorString.Append(", Default date range - Please enter a positive numeric value.")
                                End If
                                If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                            ElseIf strCtrlText.Length > 2 Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Default date range - Number of digits cannot be more than 3.")
                                Else
                                    _sbErrorString.Append(", Default date range - Number of digits cannot be more than 3.")
                                End If
                                If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                            End If
                        End If
                    End If

                    '/// PutAway ///'
                    'Item Putaway High
                    If dr.Table.Columns.Contains(EnumApps.PutAway & "_" & AppParameters_Enum.ITEM_PUTAWAY_HIGH_PCT.ToString) Then
                        strCtrlText = Trim(dr.Item(EnumApps.PutAway & "_" & AppParameters_Enum.ITEM_PUTAWAY_HIGH_PCT.ToString).ToString)
                        If Not String.IsNullOrEmpty(strCtrlText) Then
                            If Not Regex.IsMatch(strCtrlText, "^[0-9]+$") Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Item Putaway High - Please enter a positive numeric value.")
                                Else
                                    _sbErrorString.Append(", Item Putaway High - Please enter a positive numeric value.")
                                End If
                                If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                            End If
                        End If
                    End If
                    'Item Putaway Low
                    If dr.Table.Columns.Contains(EnumApps.PutAway & "_" & AppParameters_Enum.ITEM_PUTAWAY_LOW_PCT.ToString) Then
                        strCtrlText = Trim(dr.Item(EnumApps.PutAway & "_" & AppParameters_Enum.ITEM_PUTAWAY_LOW_PCT.ToString).ToString)
                        If Not String.IsNullOrEmpty(strCtrlText) Then
                            If Not Regex.IsMatch(strCtrlText, "^[0-9]+$") Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Item Putaway Low - Please enter a positive numeric value.")
                                Else
                                    _sbErrorString.Append(", Item Putaway Low - Please enter a positive numeric value.")
                                End If
                                If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                            End If
                        End If
                    End If
                    '/// TrackIT ///'
                    'DEFAULT_DATE_RANGE
                    If dr.Table.Columns.Contains(EnumApps.TrackIT & "_" & AppParameters_Enum.DEFAULT_DATE_RANGE.ToString) Then
                        strCtrlText = Trim(dr.Item(EnumApps.TrackIT & "_" & AppParameters_Enum.DEFAULT_DATE_RANGE.ToString).ToString)
                        If Not String.IsNullOrEmpty(strCtrlText) Then
                            If Not Regex.IsMatch(strCtrlText, "^[0-9]+$") Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Default date range - Please enter a positive numeric value.")
                                Else
                                    _sbErrorString.Append(", Default date range - Please enter a positive numeric value.")
                                End If
                                If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                            ElseIf strCtrlText.Length > 2 Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Default date range - Number of digits cannot be more than 3.")
                                Else
                                    _sbErrorString.Append(", Default date range - Number of digits cannot be more than 3.")
                                End If
                                If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                            End If
                        End If
                    End If
                    '/// StockIssue ///'
                    'Default Unit Of measure
                    If dr.Table.Columns.Contains(EnumApps.StockIssue & "_" & AppParameters_Enum.DEFAULT_UOM.ToString) Then
                        strCtrlText = Trim(dr.Item(EnumApps.StockIssue & "_" & AppParameters_Enum.DEFAULT_UOM.ToString).ToString)
                        If Not String.IsNullOrEmpty(strCtrlText) Then
                            If Not Regex.IsMatch(strCtrlText, "^[a-zA-Z0-9_-]+$") Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("Default Unit Of measure - Please enter characters or numbers or _.")
                                Else
                                    _sbErrorString.Append(", Default Unit Of measure - Please enter characters or numbers or _")
                                End If
                                If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                            End If
                        End If
                    End If

                    'Max. allowable Issue Quantity 
                    If dr.Table.Columns.Contains(EnumApps.StockIssue & "_" & AppParameters_Enum.RESTRICT_ISSUE_QTY.ToString) Then
                        strCtrlText = Trim(dr.Item(EnumApps.StockIssue & "_" & AppParameters_Enum.RESTRICT_ISSUE_QTY.ToString).ToString)
                        If Not String.IsNullOrEmpty(strCtrlText) Then
                            If Not Regex.IsMatch(strCtrlText, "^[0-9.]+$") Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("StockIssue Max. allowable Issue Quantity - Please enter a positive numeric value.")
                                Else
                                    _sbErrorString.Append(", StockIssue Max. allowable Issue Quantity - Please enter a positive numeric value.")
                                End If
                                If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                            Else
                                If CDbl(strCtrlText.ToString()) > 0 Then
                                    If CDbl(strCtrlText.ToString()) > _dblSIMaxValue Then
                                        If _sbErrorString.ToString = String.Empty Then
                                            _sbErrorString.Append("StockIssue Max. allowable Issue Quantity - Please enter less than or equal to " & _dblSIMaxValue)
                                        Else
                                            _sbErrorString.Append(", StockIssue Max. allowable Issue Quantity - Please enter less than or equal to " & _dblSIMaxValue)
                                        End If
                                        If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                                    End If
                                Else
                                    If _sbErrorString.ToString = String.Empty Then
                                        _sbErrorString.Append("StockIssue Max. allowable Issue Quantity - Can not be zero ")
                                    Else
                                        _sbErrorString.Append(", StockIssue Max. allowable Issue Quantity - Can not be zero ")
                                    End If
                                    If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                                End If
                            End If
                        End If
                    End If

                    'Max. allowable number of digits 
                    If dr.Table.Columns.Contains(EnumApps.StockIssue & "_" & AppParameters_Enum.RESTRICT_ISSUE_QTY_DIGITS.ToString) Then
                        strCtrlText = Trim(dr.Item(EnumApps.StockIssue & "_" & AppParameters_Enum.RESTRICT_ISSUE_QTY_DIGITS.ToString).ToString)
                        If Not String.IsNullOrEmpty(strCtrlText) Then
                            If Not Regex.IsMatch(strCtrlText, "^[0-9]+$") Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("StockIssue Max. allowable number of digits - Please enter a positive numeric value.")
                                Else
                                    _sbErrorString.Append(", StockIssue Max. allowable number of digits - Please enter a positive numeric value.")
                                End If
                                If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                            Else
                                If CDbl(strCtrlText.ToString()) > 0 Then
                                    If CDbl(strCtrlText.ToString()) > _dblSIMaxDigits Then
                                        If _sbErrorString.ToString = String.Empty Then
                                            _sbErrorString.Append("StockIssue Max. allowable number of digits - Please enter less than or equal to " & _dblSIMaxDigits)
                                        Else
                                            _sbErrorString.Append(", StockIssue Max. allowable number of digits - Please enter less than or equal to " & _dblSIMaxDigits)
                                        End If
                                        If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                                    End If
                                Else
                                    If _sbErrorString.ToString = String.Empty Then
                                        _sbErrorString.Append("StockIssue Max. allowable number of digits - Can not be zero ")
                                    Else
                                        _sbErrorString.Append(", StockIssue Max. allowable number of digits - Can not be zero ")
                                    End If
                                    If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                                End If
                            End If
                        End If
                    End If

                    '///POU///'
                    'Max. allowable Quantity 
                    If dr.Table.Columns.Contains(EnumApps.PointOfUse & "_" & AppParameters_Enum.MAX_ALLOW_QTY.ToString) Then
                        strCtrlText = Trim(dr.Item(EnumApps.PointOfUse & "_" & AppParameters_Enum.MAX_ALLOW_QTY.ToString).ToString)
                        If Not String.IsNullOrEmpty(strCtrlText) Then
                            If Not Regex.IsMatch(strCtrlText, "^[0-9.]+$") Then
                                If _sbErrorString.ToString = String.Empty Then
                                    _sbErrorString.Append("PointOfUse Max. allowable Issue Quantity - Please enter a positive numeric value.")
                                Else
                                    _sbErrorString.Append(", PointOfUse Max. allowable Issue Quantity - Please enter a positive numeric value.")
                                End If
                                If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                            Else
                                If CDbl(strCtrlText.ToString()) > 0 Then
                                    If CDbl(strCtrlText.ToString()) > _dblSIMaxAllowableDigits Then
                                        If _sbErrorString.ToString = String.Empty Then
                                            _sbErrorString.Append("PointOfUse Max. allowable Issue Quantity - Please enter less than or equal to " & _dblSIMaxAllowableDigits)
                                        Else
                                            _sbErrorString.Append(", PointOfUse Max. allowable Issue Quantity - Please enter less than or equal to " & _dblSIMaxAllowableDigits)
                                        End If
                                        If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                                    End If
                                Else
                                    If _sbErrorString.ToString = String.Empty Then
                                        _sbErrorString.Append("PointOfUse Max. allowable Issue Quantity - Can not be zero ")
                                    Else
                                        _sbErrorString.Append(", PointOfUse Max. allowable Issue Quantity - Can not be zero ")
                                    End If
                                    If log.IsDebugEnabled Then log.Debug(_sbErrorString.ToString)
                                End If
                            End If
                        End If
                    End If

                    If Not String.IsNullOrEmpty(pErrorMessage) Then
                        pErrorMessage = pErrorMessage & ", " & _sbErrorString.ToString
                        _sbErrorString = Nothing
                        _sbErrorString = New StringBuilder
                    Else
                        pErrorMessage = _sbErrorString.ToString
                        _sbErrorString = Nothing
                        _sbErrorString = New StringBuilder
                    End If

                Next
            End If

            Return ATPAR_OK

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in " & methodBaseName & ",   " & vbCrLf & ex.ToString)
            Return E_SERVERERROR
        End Try

    End Function


    ''' <summary>
    ''' Used to Validate MenuTemplateId
    ''' </summary>
    ''' <param name="pDSExcelProfileData">Profile Excel Dataset</param>
    ''' <param name="pProfileTemplateId">ProfileTemplateId</param>
    ''' <param name="pMenuTemplateId">MenuTemplateId</param>
    ''' <param name="pErrorMessage">ErrorMessage</param>
    ''' <param name="pProfileID">ProfileID</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Private Function ValidateMenuTemplateId(ByVal pDSExcelProfileData As DataSet, _
                                            ByRef pDSProfileDefaultData As DataSet, _
                                            ByVal pProfileTemplateId As String, _
                                            ByVal pProfileMenuTemplateId As String, _
                                            ByRef pErrorMessage As String, _
                                            ByVal pProfileID As String) As Long

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sbErrMsg As New StringBuilder

        Try

            pErrorMessage = String.Empty
            'Check whether ProfileMenuTemplateID exists in ProfileMenus table

            Dim _drMenuTemplateID() As DataRow
            _drMenuTemplateID = pDSExcelProfileData.Tables(Enum_ProfileData.ProfileMenus.ToString).Select("ProfileMenuTemplateID = '" & pProfileMenuTemplateId & "'")
            If log.IsDebugEnabled Then log.Debug("_drMenuTemplateID menus row count in ProfileMenus Table " & methodBaseName & " is .. " & _drMenuTemplateID.Length)
            If _drMenuTemplateID.Length = 0 Then
                pErrorMessage = CONST_SCREENTEMPLATEID_IS_MANDATORY
                Return ATPAR_OK
            End If

            'Loop  product access from ProfileSetupTable(for ProfileTemplateid)
            Dim _drProductSetup() As DataRow
            _drProductSetup = pDSExcelProfileData.Tables(Enum_ProfileData.ProfileSetup.ToString).Select("ProfileTemplateID = '" & pProfileTemplateId & "'" & _
                                                           " and  [Web(Y/N)] = '" & YesNo_Enum.Y.ToString & "' ")

            If log.IsDebugEnabled Then log.Debug("ProfileTemplateID Product row count in Profile SetUp Table " & methodBaseName & " is .. " & _drProductSetup.Length)

            If _drProductSetup.Length > 0 Then
                For Each _drProduct As DataRow In _drProductSetup

                    Dim _drMenuRowCount() As DataRow
                    _drMenuRowCount = pDSExcelProfileData.Tables(Enum_ProfileData.ProfileMenus.ToString).Select("ProfileMenuTemplateID = '" & pProfileMenuTemplateId & "'" & _
                                                                                                               "and  [App_Id] =' " & _drProduct.Item(1) & " ' ")

                    If log.IsDebugEnabled Then log.Debug("pProfileMenuTemplateId menus row count in ProfileMenus Table " & methodBaseName & " is .. " & _drMenuRowCount.Length)

                    If _drMenuRowCount.Length = 0 Then
                        If log.IsWarnEnabled Then log.Warn(methodBaseName & " No Menu Access for the MenuTemplateID is :" & pProfileMenuTemplateId)
                        pErrorMessage = CONST_NO_MENU_ACCESS & " for " & pProfileMenuTemplateId
                    End If

                    If _drProduct.Item(1) = CONST_ATPAR_APPID Then
                        Dim _AtparMenu() As DataRow
                        _AtparMenu = pDSExcelProfileData.Tables(Enum_ProfileData.ProfileMenus.ToString).Select("ProfileMenuTemplateID = '" & pProfileMenuTemplateId & "'" & _
                                                                                          " and  [App_Id] =' " & _drProduct.Item(1) & " ' and  [Select (Y/N)]= '" & YesNo_Enum.N.ToString & "' ")
                        If _AtparMenu.Length > 0 Then
                            If UCase(pProfileID) = UCase(adminProfile) Then
                                If log.IsWarnEnabled Then log.Warn(" Can not remove access for ATPAR product in Profile Setup for ProfileID :" & pProfileID)
                                pErrorMessage = CONST_NO_ATPAR_MENU_ACCESS
                                Return ATPAR_OK
                            End If
                        End If
                    End If

                    'Loop  datarows returned  for the menuTemplateId  and for specific product from ProfileMenus table
                    If _drMenuRowCount.Length > 0 Then

                        For Each _drMenu As DataRow In _drMenuRowCount
                            Dim _intMenuSeqNo As Integer = 0
                            'Check Select Field Value
                            With _sbErrMsg
                                If _drMenu.Item(5) = YesNo_Enum.Y.ToString Then
                                    'Check MenuSeqno is numeric
                                    If (_drMenu.Item(6) Is DBNull.Value) Then
                                        If log.IsWarnEnabled Then log.Warn(methodBaseName & "Menu Seq is Mandatory in MenuTemplateID is :" & pProfileMenuTemplateId)
                                        If Not String.IsNullOrEmpty(pErrorMessage) Then
                                            If Not (_drMenu.Item(2) Is DBNull.Value) Then
                                                '.Append(pErrorMessage)
                                                .Append(CONST_ERR_COMMA_SEPARATOR)
                                                .Append(_drMenu.Item(2))
                                            End If
                                            If Not (_drMenu.Item(3) Is DBNull.Value) Then
                                                '.Append(pErrorMessage)
                                                .Append(CONST_ERR_SEPARATOR)
                                                .Append(_drMenu.Item(3))
                                            End If
                                            If Not (_drMenu.Item(4) Is DBNull.Value) Then
                                                '.Append(pErrorMessage)
                                                .Append(CONST_ERR_SEPARATOR)
                                                .Append(_drMenu.Item(4))
                                            End If
                                            If Not (_drMenu.Item(6) Is DBNull.Value) Then
                                                '.Append(pErrorMessage)
                                                .Append(CONST_ERR_SEPARATOR)
                                                .Append(_drMenu.Item(6))
                                            End If
                                            '.Append(pErrorMessage)
                                            .Append(CONST_ERR_SEPARATOR)
                                            .Append(CONST_MENUSEQ_IS_MANDATORY)
                                        Else
                                            .Append(_drMenu.Item(2))
                                            .Append(CONST_ERR_SEPARATOR)
                                            .Append(_drMenu.Item(3))
                                            .Append(CONST_ERR_SEPARATOR)
                                            .Append(_drMenu.Item(4))
                                            .Append(CONST_ERR_SEPARATOR)
                                            .Append(_drMenu.Item(6))
                                            .Append(CONST_ERR_SEPARATOR)
                                            .Append(CONST_MENUSEQ_IS_MANDATORY)
                                        End If
                                    End If
                                    If Not (_drMenu.Item(6) Is DBNull.Value) Then
                                        If (Not IsNumeric(_drMenu.Item(6))) Then
                                            If log.IsWarnEnabled Then log.Warn(methodBaseName & "Menu Seq is not Numeric MenuTemplateID is :" & pProfileMenuTemplateId)
                                            If Not String.IsNullOrEmpty(pErrorMessage) Then
                                                '.Append(pErrorMessage)
                                                .Append(CONST_ERR_COMMA_SEPARATOR)
                                                .Append(vbCrLf)
                                                .Append(_drMenu.Item(2))
                                                .Append(CONST_ERR_SEPARATOR)
                                                .Append(_drMenu.Item(3))
                                                .Append(CONST_ERR_SEPARATOR)
                                                .Append(_drMenu.Item(4))
                                                .Append(CONST_ERR_SEPARATOR)
                                                .Append(_drMenu.Item(6))
                                                .Append(CONST_ERR_SEPARATOR)
                                                .Append(CONST_MENUSEQ_NOT_NUMERIC)
                                            Else
                                                .Append(_drMenu.Item(2))
                                                .Append(CONST_ERR_SEPARATOR)
                                                .Append(_drMenu.Item(3))
                                                .Append(CONST_ERR_SEPARATOR)
                                                .Append(_drMenu.Item(4))
                                                .Append(CONST_ERR_SEPARATOR)
                                                .Append(_drMenu.Item(6))
                                                .Append(CONST_ERR_SEPARATOR)
                                                .Append(CONST_MENUSEQ_NOT_NUMERIC)
                                            End If
                                        End If
                                    End If

                                    If (IsNumeric(_drMenu.Item(6))) And (Not _drMenu.Item(6) Is DBNull.Value) Then
                                        _intMenuSeqNo = _drMenu.Item(6)
                                    End If

                                    If _drMenu.Item(6).ToString.Length > 2 Then
                                        If log.IsWarnEnabled Then log.Warn(methodBaseName & "Profile Menu Access - Sequence Number should be 0-99 :" & pProfileMenuTemplateId)
                                        If Not String.IsNullOrEmpty(pErrorMessage) Then
                                            '.Append(pErrorMessage)
                                            .Append(CONST_ERR_COMMA_SEPARATOR)
                                            .Append(vbCrLf)
                                            .Append(_drMenu.Item(2))
                                            .Append(CONST_ERR_SEPARATOR)
                                            .Append(_drMenu.Item(3))
                                            .Append(CONST_ERR_SEPARATOR)
                                            .Append(_drMenu.Item(4))
                                            .Append(CONST_ERR_SEPARATOR)
                                            .Append(_drMenu.Item(6))
                                            .Append(CONST_ERR_SEPARATOR)
                                            .Append(CONST_MENUSEQ_NOT_VALID)
                                        Else
                                            .Append(_drMenu.Item(2))
                                            .Append(CONST_ERR_SEPARATOR)
                                            .Append(_drMenu.Item(3))
                                            .Append(CONST_ERR_SEPARATOR)
                                            .Append(_drMenu.Item(4))
                                            .Append(CONST_ERR_SEPARATOR)
                                            .Append(_drMenu.Item(6))
                                            .Append(CONST_ERR_SEPARATOR)
                                            .Append(CONST_MENUSEQ_NOT_VALID)
                                        End If
                                    End If
                                End If
                            End With
                            'To Update the default dataset with changed values
                            Try
                                Dim _dr() As DataRow
                                _dr = pDSProfileDefaultData.Tables("MENUS").Select("APP_ID = '" & _drMenu.Item(1) & "'" & _
                                                                                         " AND  MENU_NAME= '" & _drMenu.Item(4) & "' ")
                                
                                '_dr(0).Item("CHKSTATUS") = _drMenu.Item(5)

                                'If _intMenuSeqNo > 0 Then
                                '    _dr(0).Item("MENU_SEQ_NO") = _intMenuSeqNo
                                'Else
                                '    _dr(0).Item("MENU_SEQ_NO") = System.DBNull.Value
                                'End If

                            Catch ex As Exception
                                If log.IsFatalEnabled Then log.Fatal("Exception Thrown in Updating the default dataset with changed values  " & methodBaseName & " is..." & vbCrLf & ex.ToString)
                                Return E_SERVERERROR
                            End Try

                            If Not String.IsNullOrEmpty(pErrorMessage) Then
                                pErrorMessage = pErrorMessage & _sbErrMsg.ToString
                            Else
                                pErrorMessage = _sbErrMsg.ToString
                            End If
                            _sbErrMsg.Remove(0, _sbErrMsg.Length)
                        Next
                    End If
                Next
                pDSProfileDefaultData.AcceptChanges()
                If log.IsDebugEnabled Then log.Debug("pErrorMessage  in MenuError table  :" & pErrorMessage)
            End If
            Return ATPAR_OK
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in Main Try " & methodBaseName & " is..." & vbCrLf & ex.ToString)
            Return E_SERVERERROR
        Finally
            _sbErrMsg = Nothing
        End Try


    End Function

    ''' <summary>
    ''' Used to Validate ScreenDisplayTemplateId
    ''' </summary>
    ''' <param name="pDSExcelProfileData">Profile Excel Dataset</param>
    ''' <param name="pDSProfileDefaultData">Profile Default Dataset</param>
    ''' <param name="pProfileTemplateId">ProfileTemplateId</param>
    ''' <param name="pScreenDisplayTemplateId">ScreenDisplayTemplateId</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Private Function ValidateScreenDisplayTemplateId(ByVal pDSExcelProfileData As DataSet, _
                                            ByRef pDSProfileDefaultData As DataSet, _
                                            ByVal pProfileTemplateId As String, _
                                            ByVal pScreenDisplayTemplateId As String, _
                                            ByRef pErrorMessage As String, _
                                            ByVal pMode As String) As Long

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sbErrMsg As New StringBuilder

        Try
            Dim _strDefaultDisplayfield As String = String.Empty
            Dim _strMandatoryToggle As String = String.Empty
            Dim _strToggleField As String = String.Empty
            pErrorMessage = String.Empty
            Dim _drProductAccess() As DataRow
            _drProductAccess = pDSExcelProfileData.Tables(Enum_ProfileData.ProfileSetup.ToString).Select("ProfileTemplateID = '" & pProfileTemplateId & "'")
            If _drProductAccess.Length > 0 Then
                For Each _drProduct As DataRow In _drProductAccess
                    Dim _drExcelScreenDisplay() As DataRow

                    If _drProduct.Item(1) = "0" Then
                        'For Atpar Product there is no ScreenDisplay, so skipping the loop 
                        Continue For
                    End If

                    _drExcelScreenDisplay = pDSExcelProfileData.Tables(Enum_ProfileData.Screendisplay.ToString).Select("ProfileScreenTemplateID = '" & pScreenDisplayTemplateId & "'" & _
                                                                                      " and  [App_Id]= '" & _drProduct.Item(1) & "' ")
                    If log.IsDebugEnabled Then log.Debug("ScreenDisplayTemplateId menus row count in Screendisplay Table " & methodBaseName & " is .. " & _drExcelScreenDisplay.Length)


                    'ScreenDisplay TemplateID Validation
                    If _drExcelScreenDisplay.Length = 0 Then
                        pErrorMessage = CONST_SCREENTEMPLATEID_IS_MANDATORY
                        Continue For
                    End If

                    If _drExcelScreenDisplay.Length > 0 Then
                        'Getrow from default data with product, screen Name and ColumnName
                        For Each _dr As DataRow In _drExcelScreenDisplay

                            _strDefaultDisplayfield = String.Empty
                            _strMandatoryToggle = String.Empty
                            _strToggleField = String.Empty

                            Dim _drDefaultdata() As DataRow
                            _drDefaultdata = pDSProfileDefaultData.Tables("SCREENDISPLAY").Select("APP_ID = '" & _dr.Item(1) & "'" & _
                                                                   " and  SCREEN_NAME= '" & _dr.Item(3) & "' and COLUMN_HEADER = '" & _dr.Item(5) & "'")

                            If _drDefaultdata.Length = 1 Then
                                'Populate - Default Display Field , Mandatory_ Toggle, Toggle_Field
                                If Not _drDefaultdata(0).Item("DEFAULT_DISPLAY_FIELD") Is DBNull.Value Then
                                    _strDefaultDisplayfield = _drDefaultdata(0).Item("DEFAULT_DISPLAY_FIELD")
                                End If
                                If Not _drDefaultdata(0).Item("MANDATORY_TOGGLE") Is DBNull.Value Then
                                    _strMandatoryToggle = _drDefaultdata(0).Item("MANDATORY_TOGGLE")
                                End If
                                If Not _drDefaultdata(0).Item("TOGGLE_FIELD") Is DBNull.Value Then
                                    _strToggleField = _drDefaultdata(0).Item("TOGGLE_FIELD")
                                End If
                            End If

                            With _sbErrMsg
                                'Check Display Value 
                                If _dr.Item(4) = YesNo_Enum.N.ToString Then

                                    'Check Default Display Field =Y
                                    If _strDefaultDisplayfield = YesNo_Enum.Y.ToString Then
                                        If log.IsWarnEnabled Then log.Warn(methodBaseName & " Minimum Default display fields: have to be Selected for product,screen and field name is " & _
                                                                         ": " & _dr.Item(2) & " product," & _dr.Item(3) & " screen name," & _dr.Item(5) & ": field name In : " & pScreenDisplayTemplateId)
                                        If Not String.IsNullOrEmpty(pErrorMessage) Then
                                            .Append(CONST_ERR_COMMA_SEPARATOR)
                                            .Append(vbCrLf)
                                        End If
                                        .Append(_dr.Item(2))
                                        .Append(CONST_ERR_SEPARATOR)
                                        .Append(_dr.Item(3))
                                        .Append(CONST_ERR_SEPARATOR)
                                        .Append(_dr.Item(5))
                                        .Append(CONST_ERR_SEPARATOR)
                                        .Append(CONST_SELECT_DEFAULT_DISPLAY_FIELD)
                                    Else
                                        'Check if Label, Order, Width, ToggleDescription and Toggle Order values exists or not
                                        If Not _dr.Item(6) Is DBNull.Value And Not _dr.Item(7) Is DBNull.Value And Not _dr.Item(8) Is DBNull.Value Then
                                            'Check if ToggleDescription and Toggle Order values exists or not
                                            If Not _dr.Item(9) Is DBNull.Value Then
                                                If _dr.Item(10) Is DBNull.Value Then
                                                    If log.IsWarnEnabled Then log.Warn(methodBaseName & " Mandatory toggle filed should be Selected :" & _
                                                                               ": " & _dr.Item(2) & " product," & _dr.Item(3) & " screen name," & _dr.Item(5) & ": field name In : " & pScreenDisplayTemplateId)
                                                    If Not String.IsNullOrEmpty(pErrorMessage) Then
                                                        .Append(CONST_ERR_COMMA_SEPARATOR)
                                                        .Append(vbCrLf)
                                                    End If
                                                    .Append(_dr.Item(2))
                                                    .Append(CONST_ERR_SEPARATOR)
                                                    .Append(_dr.Item(3))
                                                    .Append(CONST_ERR_SEPARATOR)
                                                    .Append(_dr.Item(5))
                                                    .Append(CONST_ERR_SEPARATOR)
                                                    .Append(CONST_MANDATORY_TOGGLE_FIELD)
                                                End If
                                            End If
                                            If Not _dr.Item(10) Is DBNull.Value Then
                                                If _dr.Item(9) Is DBNull.Value Then
                                                    If log.IsWarnEnabled Then log.Warn(methodBaseName & " Mandatory toggle filed should be Selected :" & _
                                                                                                                             ": " & _dr.Item(2) & " product," & _dr.Item(3) & " screen name," & _dr.Item(5) & ": field name In : " & pScreenDisplayTemplateId)
                                                    If Not String.IsNullOrEmpty(pErrorMessage) Then
                                                        .Append(CONST_ERR_COMMA_SEPARATOR)
                                                        .Append(vbCrLf)
                                                    End If
                                                    .Append(_dr.Item(2))
                                                    .Append(CONST_ERR_SEPARATOR)
                                                    .Append(_dr.Item(3))
                                                    .Append(CONST_ERR_SEPARATOR)
                                                    .Append(_dr.Item(5))
                                                    .Append(CONST_ERR_SEPARATOR)
                                                    .Append(CONST_MANDATORY_TOGGLE_FIELD)
                                                End If
                                                If IsNumeric(_dr.Item(10)) Then
                                                    If _dr.Item(10).ToString.Length > 2 Then
                                                        If log.IsWarnEnabled Then log.Warn(methodBaseName & " Order and toggle order should be 0 to 99 :" & _
                                                                                              ": " & _dr.Item(2) & " product," & _dr.Item(3) & " screen name," & _dr.Item(5) & ": field name In : " & pScreenDisplayTemplateId)
                                                        If Not String.IsNullOrEmpty(pErrorMessage) Then
                                                            .Append(CONST_ERR_COMMA_SEPARATOR)
                                                            .Append(vbCrLf)
                                                        End If
                                                        .Append(_dr.Item(2))
                                                        .Append(CONST_ERR_SEPARATOR)
                                                        .Append(_dr.Item(3))
                                                        .Append(CONST_ERR_SEPARATOR)
                                                        .Append(_dr.Item(5))
                                                        .Append(CONST_ERR_SEPARATOR)
                                                        .Append(CONST_SCREENDISPLAY_NOT_VALID)
                                                    End If
                                                Else
                                                    If log.IsWarnEnabled Then log.Warn(methodBaseName & "  toggle order should Numeric :" & _
                                                                                              ": " & _dr.Item(2) & " product," & _dr.Item(3) & " screen name," & _dr.Item(5) & ": field name In : " & pScreenDisplayTemplateId)
                                                    If Not String.IsNullOrEmpty(pErrorMessage) Then
                                                        .Append(CONST_ERR_COMMA_SEPARATOR)
                                                        .Append(vbCrLf)
                                                    End If
                                                    .Append(_dr.Item(2))
                                                    .Append(CONST_ERR_SEPARATOR)
                                                    .Append(_dr.Item(3))
                                                    .Append(CONST_ERR_SEPARATOR)
                                                    .Append(_dr.Item(5))
                                                    .Append(CONST_ERR_SEPARATOR)
                                                    .Append(CONST_NOT_VALID_DATA)

                                                End If
                                            End If
                                            If Not _dr.Item(9) Is DBNull.Value And Not _dr.Item(10) Is DBNull.Value Then
                                                If _strToggleField = Toggle_Enum.I.ToString Then
                                                    If log.IsWarnEnabled Then log.Warn(methodBaseName & " Mandatory toggle filed :" & _
                                                                         ": " & _dr.Item(2) & " product," & _dr.Item(3) & " screen name," & _dr.Item(5) & ": field name In : " & pScreenDisplayTemplateId)
                                                    If Not String.IsNullOrEmpty(pErrorMessage) Then
                                                        .Append(CONST_ERR_COMMA_SEPARATOR)
                                                        .Append(vbCrLf)
                                                    End If
                                                    .Append(_dr.Item(2))
                                                    .Append(CONST_ERR_SEPARATOR)
                                                    .Append(_dr.Item(3))
                                                    .Append(CONST_ERR_SEPARATOR)
                                                    .Append(_dr.Item(5))
                                                    .Append(CONST_ERR_SEPARATOR)
                                                    .Append(CONST_MANDATORY_TOGGLE_FIELD)
                                                Else
                                                    'ValidateData Order, Width, toggle Order should be numeric 7,8,10
                                                    If Not IsNumeric(_dr.Item(7) And _dr.Item(8)) Then
                                                        If log.IsWarnEnabled Then log.Warn(methodBaseName & " Order, Width and toggle order should be numeric  :" & _
                                                                         ": " & _dr.Item(2) & " product," & _dr.Item(3) & " screen name," & _dr.Item(5) & ": field name In : " & pScreenDisplayTemplateId)
                                                        If Not String.IsNullOrEmpty(pErrorMessage) Then
                                                            .Append(CONST_ERR_COMMA_SEPARATOR)
                                                            .Append(vbCrLf)
                                                        End If
                                                        .Append(_dr.Item(2))
                                                        .Append(CONST_ERR_SEPARATOR)
                                                        .Append(_dr.Item(3))
                                                        .Append(CONST_ERR_SEPARATOR)
                                                        .Append(_dr.Item(5))
                                                        .Append(CONST_ERR_SEPARATOR)
                                                        .Append(CONST_NOT_VALID_DATA)

                                                    Else
                                                        If (_dr.Item(7).ToString.Length > 2) Then
                                                            If Not String.IsNullOrEmpty(pErrorMessage) Then
                                                                .Append(CONST_ERR_COMMA_SEPARATOR)
                                                                .Append(vbCrLf)
                                                            End If
                                                            .Append(_dr.Item(2))
                                                            .Append(CONST_ERR_SEPARATOR)
                                                            .Append(_dr.Item(3))
                                                            .Append(CONST_ERR_SEPARATOR)
                                                            .Append(_dr.Item(5))
                                                            .Append(CONST_ERR_SEPARATOR)
                                                            .Append(CONST_SCREENDISPLAY_NOT_VALID)
                                                        End If
                                                        If (_dr.Item(8).ToString.Length > 4) Then
                                                            If Not String.IsNullOrEmpty(pErrorMessage) Then
                                                                .Append(CONST_ERR_COMMA_SEPARATOR)
                                                                .Append(vbCrLf)
                                                            End If
                                                            .Append(_dr.Item(2))
                                                            .Append(CONST_ERR_SEPARATOR)
                                                            .Append(_dr.Item(3))
                                                            .Append(CONST_ERR_SEPARATOR)
                                                            .Append(_dr.Item(5))
                                                            .Append(CONST_ERR_SEPARATOR)
                                                            .Append(CONST_SCREENDISPLAY_COLUMN_WIDTH)

                                                        End If
                                                    End If
                                                End If
                                            Else
                                                'If Mandatory_toggle  =Y 
                                                If _strMandatoryToggle = YesNo_Enum.Y.ToString Then
                                                    If log.IsWarnEnabled Then log.Warn(methodBaseName & " Mandatory toggle filed should be Selected :" & _
                                                                         ": " & _dr.Item(2) & " product," & _dr.Item(3) & " screen name," & _dr.Item(5) & ": field name In : " & pScreenDisplayTemplateId)
                                                    If Not String.IsNullOrEmpty(pErrorMessage) Then
                                                        .Append(CONST_ERR_COMMA_SEPARATOR)
                                                        .Append(vbCrLf)
                                                    End If
                                                    .Append(_dr.Item(2))
                                                    .Append(CONST_ERR_SEPARATOR)
                                                    .Append(_dr.Item(3))
                                                    .Append(CONST_ERR_SEPARATOR)
                                                    .Append(_dr.Item(5))
                                                    .Append(CONST_ERR_SEPARATOR)
                                                    .Append(CONST_MANDATORY_TOGGLE_FIELD)
                                                Else
                                                    'ValidateData Order, Width should be numeric 7,8
                                                    If Not IsNumeric(_dr.Item(7) And _dr.Item(8)) Then
                                                        If log.IsWarnEnabled Then log.Warn(methodBaseName & " Order, Width and toggle order should be numeric  :" & _
                                                                         ": " & _dr.Item(2) & " product," & _dr.Item(3) & " screen name," & _dr.Item(5) & ": field name In : " & pScreenDisplayTemplateId)
                                                        If Not String.IsNullOrEmpty(pErrorMessage) Then
                                                            .Append(CONST_ERR_COMMA_SEPARATOR)
                                                            .Append(vbCrLf)
                                                        End If
                                                        .Append(_dr.Item(2))
                                                        .Append(CONST_ERR_SEPARATOR)
                                                        .Append(_dr.Item(3))
                                                        .Append(CONST_ERR_SEPARATOR)
                                                        .Append(_dr.Item(5))
                                                        .Append(CONST_ERR_SEPARATOR)
                                                        .Append(CONST_NOT_VALID_DATA)
                                                    Else
                                                        If (_dr.Item(7).ToString.Length > 2) Then
                                                            If Not String.IsNullOrEmpty(pErrorMessage) Then
                                                                .Append(CONST_ERR_COMMA_SEPARATOR)
                                                                .Append(vbCrLf)
                                                            End If
                                                            .Append(_dr.Item(2))
                                                            .Append(CONST_ERR_SEPARATOR)
                                                            .Append(_dr.Item(3))
                                                            .Append(CONST_ERR_SEPARATOR)
                                                            .Append(_dr.Item(5))
                                                            .Append(CONST_ERR_SEPARATOR)
                                                            .Append(CONST_SCREENDISPLAY_NOT_VALID)

                                                        End If
                                                        If (_dr.Item(8).ToString.Length > 4) Then
                                                            If Not String.IsNullOrEmpty(pErrorMessage) Then
                                                                .Append(CONST_ERR_COMMA_SEPARATOR)
                                                                .Append(vbCrLf)
                                                            End If
                                                            .Append(_dr.Item(2))
                                                            .Append(CONST_ERR_SEPARATOR)
                                                            .Append(_dr.Item(3))
                                                            .Append(CONST_ERR_SEPARATOR)
                                                            .Append(_dr.Item(5))
                                                            .Append(CONST_ERR_SEPARATOR)
                                                            .Append(CONST_SCREENDISPLAY_COLUMN_WIDTH)

                                                        End If
                                                    End If
                                                End If
                                            End If
                                        Else
                                            If log.IsWarnEnabled Then log.Warn(methodBaseName & " Mandatory fields are missing for  :" & _
                                                                         ": " & _dr.Item(2) & " product," & _dr.Item(3) & " screen name," & _dr.Item(5) & ": field name In : " & pScreenDisplayTemplateId)
                                            If Not String.IsNullOrEmpty(pErrorMessage) Then
                                                .Append(CONST_ERR_COMMA_SEPARATOR)
                                                .Append(vbCrLf)
                                            End If
                                            .Append(_dr.Item(2))
                                            .Append(CONST_ERR_SEPARATOR)
                                            .Append(_dr.Item(3))
                                            .Append(CONST_ERR_SEPARATOR)
                                            .Append(_dr.Item(5))
                                            .Append(CONST_ERR_SEPARATOR)
                                            .Append(CONST_MANDATORY_FIELDS_MISSING)
                                        End If
                                    End If
                                Else
                                    'Check if Label, Order, Width, ToggleDescription and Toggle Order values exists or not
                                    If Not _dr.Item(6) Is DBNull.Value And Not _dr.Item(7) Is DBNull.Value And Not _dr.Item(8) Is DBNull.Value Then
                                        'Check if ToggleDescription and Toggle Order values exists or not
                                        If Not _dr.Item(9) Is DBNull.Value Then
                                            If _dr.Item(10) Is DBNull.Value Then
                                                If log.IsWarnEnabled Then log.Warn(methodBaseName & " Mandatory toggle filed should be Selected :" & _
                                                                           ": " & _dr.Item(2) & " product," & _dr.Item(3) & " screen name," & _dr.Item(5) & ": field name In : " & pScreenDisplayTemplateId)
                                                If Not String.IsNullOrEmpty(pErrorMessage) Then
                                                    .Append(CONST_ERR_COMMA_SEPARATOR)
                                                    .Append(vbCrLf)
                                                End If
                                                .Append(_dr.Item(2))
                                                .Append(CONST_ERR_SEPARATOR)
                                                .Append(_dr.Item(3))
                                                .Append(CONST_ERR_SEPARATOR)
                                                .Append(_dr.Item(5))
                                                .Append(CONST_ERR_SEPARATOR)
                                                .Append(CONST_MANDATORY_TOGGLE_FIELD)
                                            End If
                                        End If
                                        If Not _dr.Item(10) Is DBNull.Value Then
                                            If _dr.Item(9) Is DBNull.Value Then
                                                If log.IsWarnEnabled Then log.Warn(methodBaseName & " Mandatory toggle filed should be Selected :" & _
                                                                                                                         ": " & _dr.Item(2) & " product," & _dr.Item(3) & " screen name," & _dr.Item(5) & ": field name In : " & pScreenDisplayTemplateId)
                                                If Not String.IsNullOrEmpty(pErrorMessage) Then
                                                    .Append(CONST_ERR_COMMA_SEPARATOR)
                                                    .Append(vbCrLf)
                                                End If
                                                .Append(_dr.Item(2))
                                                .Append(CONST_ERR_SEPARATOR)
                                                .Append(_dr.Item(3))
                                                .Append(CONST_ERR_SEPARATOR)
                                                .Append(_dr.Item(5))
                                                .Append(CONST_ERR_SEPARATOR)
                                                .Append(CONST_MANDATORY_TOGGLE_FIELD)

                                            End If
                                            If IsNumeric(_dr.Item(10)) Then
                                                If _dr.Item(10).ToString.Length > 2 Then
                                                    If log.IsWarnEnabled Then log.Warn(methodBaseName & " Order and toggle order should be 0 to 99 :" & _
                                                                                          ": " & _dr.Item(2) & " product," & _dr.Item(3) & " screen name," & _dr.Item(5) & ": field name In : " & pScreenDisplayTemplateId)
                                                    If Not String.IsNullOrEmpty(pErrorMessage) Then
                                                        .Append(CONST_ERR_COMMA_SEPARATOR)
                                                        .Append(vbCrLf)
                                                    End If
                                                    .Append(_dr.Item(2))
                                                    .Append(CONST_ERR_SEPARATOR)
                                                    .Append(_dr.Item(3))
                                                    .Append(CONST_ERR_SEPARATOR)
                                                    .Append(_dr.Item(5))
                                                    .Append(CONST_ERR_SEPARATOR)
                                                    .Append(CONST_SCREENDISPLAY_NOT_VALID)

                                                End If
                                            Else
                                                If log.IsWarnEnabled Then log.Warn(methodBaseName & "  toggle order should Numeric :" & _
                                                                                          ": " & _dr.Item(2) & " product," & _dr.Item(3) & " screen name," & _dr.Item(5) & ": field name In : " & pScreenDisplayTemplateId)
                                                If Not String.IsNullOrEmpty(pErrorMessage) Then
                                                    .Append(CONST_ERR_COMMA_SEPARATOR)
                                                    .Append(vbCrLf)
                                                End If
                                                .Append(_dr.Item(2))
                                                .Append(CONST_ERR_SEPARATOR)
                                                .Append(_dr.Item(3))
                                                .Append(CONST_ERR_SEPARATOR)
                                                .Append(_dr.Item(5))
                                                .Append(CONST_ERR_SEPARATOR)
                                                .Append(CONST_NOT_VALID_DATA)
                                            End If
                                        End If
                                        If Not _dr.Item(9) Is DBNull.Value And Not _dr.Item(10) Is DBNull.Value Then
                                            If _strToggleField = Toggle_Enum.I.ToString Then
                                                If log.IsWarnEnabled Then log.Warn(methodBaseName & " Mandatory toggle filed should be Selected :" & _
                                                                         ": " & _dr.Item(2) & " product," & _dr.Item(3) & " screen name," & _dr.Item(5) & ": field name In : " & pScreenDisplayTemplateId)
                                                If Not String.IsNullOrEmpty(pErrorMessage) Then
                                                    .Append(CONST_ERR_COMMA_SEPARATOR)
                                                    .Append(vbCrLf)
                                                End If
                                                .Append(_dr.Item(2))
                                                .Append(CONST_ERR_SEPARATOR)
                                                .Append(_dr.Item(3))
                                                .Append(CONST_ERR_SEPARATOR)
                                                .Append(_dr.Item(5))
                                                .Append(CONST_ERR_SEPARATOR)
                                                .Append(CONST_MANDATORY_TOGGLE_FIELD)
                                            Else
                                                'ValidateData Order, Width, toggle Order should be numeric 7,8,10
                                                If Not IsNumeric(_dr.Item(7) And _dr.Item(8)) Then
                                                    If log.IsWarnEnabled Then log.Warn(methodBaseName & " Order, Width and toggle order should be numeric  :" & _
                                                                         ": " & _dr.Item(2) & " product," & _dr.Item(3) & " screen name," & _dr.Item(5) & ": field name In : " & pScreenDisplayTemplateId)
                                                    If Not String.IsNullOrEmpty(pErrorMessage) Then
                                                        .Append(CONST_ERR_COMMA_SEPARATOR)
                                                        .Append(vbCrLf)
                                                    End If
                                                    .Append(_dr.Item(2))
                                                    .Append(CONST_ERR_SEPARATOR)
                                                    .Append(_dr.Item(3))
                                                    .Append(CONST_ERR_SEPARATOR)
                                                    .Append(_dr.Item(5))
                                                    .Append(CONST_ERR_SEPARATOR)
                                                    .Append(CONST_NOT_VALID_DATA)
                                                Else
                                                    If (_dr.Item(7).ToString.Length > 2) Then
                                                        If Not String.IsNullOrEmpty(pErrorMessage) Then
                                                            .Append(CONST_ERR_COMMA_SEPARATOR)
                                                            .Append(vbCrLf)
                                                        End If
                                                        .Append(_dr.Item(2))
                                                        .Append(CONST_ERR_SEPARATOR)
                                                        .Append(_dr.Item(3))
                                                        .Append(CONST_ERR_SEPARATOR)
                                                        .Append(_dr.Item(5))
                                                        .Append(CONST_ERR_SEPARATOR)
                                                        .Append(CONST_SCREENDISPLAY_NOT_VALID)
                                                    End If
                                                    If (_dr.Item(8).ToString.Length > 4) Then
                                                        If Not String.IsNullOrEmpty(pErrorMessage) Then
                                                            .Append(CONST_ERR_COMMA_SEPARATOR)
                                                            .Append(vbCrLf)
                                                        End If
                                                        .Append(_dr.Item(2))
                                                        .Append(CONST_ERR_SEPARATOR)
                                                        .Append(_dr.Item(3))
                                                        .Append(CONST_ERR_SEPARATOR)
                                                        .Append(_dr.Item(5))
                                                        .Append(CONST_ERR_SEPARATOR)
                                                        .Append(CONST_SCREENDISPLAY_COLUMN_WIDTH)
                                                    End If
                                                End If
                                            End If
                                        Else
                                            'If Mandatory_toggle  =Y 
                                            If _strMandatoryToggle = YesNo_Enum.Y.ToString Then
                                                If log.IsWarnEnabled Then log.Warn(methodBaseName & " Mandatory toggle filed should be Selected :" & _
                                                                         ": " & _dr.Item(2) & " product," & _dr.Item(3) & " screen name," & _dr.Item(5) & ": field name In : " & pScreenDisplayTemplateId)
                                                If Not String.IsNullOrEmpty(pErrorMessage) Then
                                                    .Append(CONST_ERR_COMMA_SEPARATOR)
                                                    .Append(vbCrLf)
                                                End If
                                                .Append(_dr.Item(2))
                                                .Append(CONST_ERR_SEPARATOR)
                                                .Append(_dr.Item(3))
                                                .Append(CONST_ERR_SEPARATOR)
                                                .Append(_dr.Item(5))
                                                .Append(CONST_ERR_SEPARATOR)
                                                .Append(CONST_MANDATORY_TOGGLE_FIELD)

                                            Else
                                                'ValidateData Order, Width should be numeric 7,8
                                                If Not IsNumeric(_dr.Item(7) And _dr.Item(8)) Then
                                                    If log.IsWarnEnabled Then log.Warn(methodBaseName & " Order, Width and toggle order should be numeric  :" & _
                                                                         ": " & _dr.Item(2) & " product," & _dr.Item(3) & " screen name," & _dr.Item(5) & ": field name In : " & pScreenDisplayTemplateId)
                                                    If Not String.IsNullOrEmpty(pErrorMessage) Then
                                                        .Append(CONST_ERR_COMMA_SEPARATOR)
                                                        .Append(vbCrLf)
                                                    End If
                                                    .Append(_dr.Item(2))
                                                    .Append(CONST_ERR_SEPARATOR)
                                                    .Append(_dr.Item(3))
                                                    .Append(CONST_ERR_SEPARATOR)
                                                    .Append(_dr.Item(5))
                                                    .Append(CONST_ERR_SEPARATOR)
                                                    .Append(CONST_NOT_VALID_DATA)
                                                Else
                                                    If (_dr.Item(7).ToString.Length > 2) Then
                                                        If Not String.IsNullOrEmpty(pErrorMessage) Then
                                                            .Append(CONST_ERR_COMMA_SEPARATOR)
                                                            .Append(vbCrLf)
                                                        End If
                                                        .Append(_dr.Item(2))
                                                        .Append(CONST_ERR_SEPARATOR)
                                                        .Append(_dr.Item(3))
                                                        .Append(CONST_ERR_SEPARATOR)
                                                        .Append(_dr.Item(5))
                                                        .Append(CONST_ERR_SEPARATOR)
                                                        .Append(CONST_SCREENDISPLAY_NOT_VALID)
                                                    End If
                                                    If (_dr.Item(8).ToString.Length > 4) Then
                                                        If Not String.IsNullOrEmpty(pErrorMessage) Then
                                                            .Append(CONST_ERR_COMMA_SEPARATOR)
                                                            .Append(vbCrLf)
                                                        End If
                                                        .Append(_dr.Item(2))
                                                        .Append(CONST_ERR_SEPARATOR)
                                                        .Append(_dr.Item(3))
                                                        .Append(CONST_ERR_SEPARATOR)
                                                        .Append(_dr.Item(5))
                                                        .Append(CONST_ERR_SEPARATOR)
                                                        .Append(CONST_SCREENDISPLAY_COLUMN_WIDTH)
                                                    End If
                                                End If
                                            End If
                                        End If
                                    Else
                                        If log.IsWarnEnabled Then log.Warn(methodBaseName & " Mandatory fields are missing for  :" & _dr.Item(5) & ": In : " & pScreenDisplayTemplateId)
                                        If Not String.IsNullOrEmpty(pErrorMessage) Then
                                            .Append(CONST_ERR_COMMA_SEPARATOR)
                                            .Append(vbCrLf)
                                        End If
                                        .Append(_dr.Item(2))
                                        .Append(CONST_ERR_SEPARATOR)
                                        .Append(_dr.Item(3))
                                        .Append(CONST_ERR_SEPARATOR)
                                        .Append(_dr.Item(5))
                                        .Append(CONST_ERR_SEPARATOR)
                                        .Append(CONST_MANDATORY_FIELDS_MISSING)
                                    End If
                                End If
                            End With
                            'To Update the default dataset with changed values
                            Try
                                Dim _drScreenDisplay() As DataRow
                                Dim _strHeader As String = String.Empty
                                Dim _strOrder As String = String.Empty
                                Dim _strWidth As String = String.Empty
                                Dim _strToggleOrder As String = String.Empty
                                Dim _strToggleDescr As String = String.Empty

                                _drScreenDisplay = pDSProfileDefaultData.Tables("SCREENDISPLAY").Select("APP_ID = '" & _dr.Item(1) & "'" & _
                                                                             " AND  SCREEN_NAME= '" & _dr.Item(3) & "' AND DEFAULT_COLUMN_HEADER = '" & _dr.Item(5) & "' ")

                                If _drScreenDisplay.Length > 0 Then
                                    'To Update ChangeFlag column when data change for DISPLAY_FIELD
                                    If _drScreenDisplay(0).Item("DISPLAY_FIELD") <> IIf(_dr.Item(4) = YesNo_Enum.Y.ToString, YesNo_Enum.Y.ToString, YesNo_Enum.N.ToString) Then
                                        _drScreenDisplay(0).Item("CHANGEFLAG") = YesNo_Enum.Y.ToString
                                    End If
                                    _drScreenDisplay(0).Item("DISPLAY_FIELD") = _dr.Item(4)

                                    If Not _dr.Item(6) Is DBNull.Value Then
                                        _strHeader = _dr.Item(6)
                                    End If
                                    If Not _dr.Item(7) Is DBNull.Value Then
                                        _strOrder = _dr.Item(7)
                                    End If
                                    If Not _dr.Item(8) Is DBNull.Value Then
                                        _strWidth = _dr.Item(8)
                                    End If
                                    If Not _dr.Item(9) Is DBNull.Value Then
                                        _strToggleDescr = _dr.Item(9)
                                    End If
                                    If Not _dr.Item(10) Is DBNull.Value Then
                                        _strToggleOrder = _dr.Item(10)
                                    End If

                                    'To Update ChangeFlag column when data change for coulmn header
                                    If Not String.IsNullOrEmpty(Trim(_strHeader)) Then
                                        If _drScreenDisplay(0).Item("COLUMN_HEADER") <> _strHeader Then
                                            _drScreenDisplay(0).Item("CHANGEFLAG") = YesNo_Enum.Y.ToString
                                        End If
                                    End If

                                    If String.IsNullOrEmpty(Trim(_strHeader)) Then
                                        _drScreenDisplay(0).Item("COLUMN_HEADER") = System.DBNull.Value
                                    Else
                                        _drScreenDisplay(0).Item("COLUMN_HEADER") = _strHeader
                                    End If

                                    'To Update ChangeFlag column when data change for order
                                    If Not String.IsNullOrEmpty(Trim(_strOrder)) Then
                                        If _drScreenDisplay(0).Item("COLUMN_ORDER") <> _strOrder Then
                                            _drScreenDisplay(0).Item("CHANGEFLAG") = YesNo_Enum.Y.ToString
                                        End If
                                    End If

                                    If String.IsNullOrEmpty(Trim(_strOrder)) Then
                                        _drScreenDisplay(0).Item("COLUMN_ORDER") = System.DBNull.Value
                                    Else
                                        _drScreenDisplay(0).Item("COLUMN_ORDER") = _strOrder
                                    End If

                                    'To Update ChangeFlag column when data change for width
                                    If Not String.IsNullOrEmpty(Trim(_strWidth)) Then
                                        If _drScreenDisplay(0).Item("COLUMN_WIDTH") <> _strWidth Then
                                            _drScreenDisplay(0).Item("CHANGEFLAG") = YesNo_Enum.Y.ToString
                                        End If
                                    End If

                                    If String.IsNullOrEmpty(Trim(_strWidth)) Then
                                        _drScreenDisplay(0).Item("COLUMN_WIDTH") = System.DBNull.Value
                                    Else
                                        _drScreenDisplay(0).Item("COLUMN_WIDTH") = _strWidth
                                    End If

                                    'To Update ChangeFlag column when data change for toggle order
                                    If Not _drScreenDisplay(0).Item("TOGGLE_ORDER") Is DBNull.Value Then
                                        If Not String.IsNullOrEmpty(_strToggleOrder) Then
                                            If _drScreenDisplay(0).Item("TOGGLE_ORDER") <> _strToggleOrder Then
                                                _drScreenDisplay(0).Item("CHANGEFLAG") = YesNo_Enum.Y.ToString
                                            End If
                                        End If
                                    End If
                                    If String.IsNullOrEmpty(Trim(_strToggleOrder)) Then
                                        _drScreenDisplay(0).Item("TOGGLE_ORDER") = String.Empty
                                    Else
                                        _drScreenDisplay(0).Item("TOGGLE_ORDER") = _strToggleOrder
                                    End If

                                    'To Update ChangeFlag column when data change for toggle Description
                                    If Not _drScreenDisplay(0).Item("DEFAULT_TOGGLE_TEXT") Is DBNull.Value Then
                                        If Not String.IsNullOrEmpty(_strToggleDescr) Then
                                            If _drScreenDisplay(0).Item("DEFAULT_TOGGLE_TEXT") <> _strToggleDescr Then
                                                _drScreenDisplay(0).Item("CHANGEFLAG") = YesNo_Enum.Y.ToString
                                            End If
                                        End If
                                    End If
                                    If String.IsNullOrEmpty(Trim(_strToggleDescr)) Then
                                        _drScreenDisplay(0).Item("DEFAULT_TOGGLE_TEXT") = String.Empty
                                    Else
                                        _drScreenDisplay(0).Item("DEFAULT_TOGGLE_TEXT") = _strToggleDescr
                                    End If

                                End If

                            Catch ex As Exception
                                If log.IsFatalEnabled Then log.Fatal(" Exception Thrown in To Update the default dataset with changed values " & methodBaseName & " is..." & vbCrLf & ex.ToString)
                                Return E_SERVERERROR
                            End Try

                            If Not String.IsNullOrEmpty(pErrorMessage) Then
                                pErrorMessage = pErrorMessage & _sbErrMsg.ToString
                            Else
                                pErrorMessage = _sbErrMsg.ToString
                            End If
                            _sbErrMsg.Remove(0, _sbErrMsg.Length)

                        Next
                    End If
                Next
                pDSProfileDefaultData.AcceptChanges()

            End If

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(" Exception Thrown in Main Try " & methodBaseName & " is..." & vbCrLf & ex.ToString)
            Return E_SERVERERROR
        Finally
            _sbErrMsg = Nothing
        End Try

        Return ATPAR_OK

    End Function

    ''' <summary>
    ''' Used to Populate ProfileParameters
    ''' </summary>
    ''' <param name="pDSExcelProfileData">Profile Excel Dataset</param>
    ''' <param name="pDSProfileDefaultData">Profile Default Dataset </param>
    ''' <param name="pProfileTemplateId">ProfileTemplateId</param>
    ''' <param name="pParameterTemplateId">ParameterTemplateId</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Private Function PopulateProfileParameters(ByVal pDSExcelProfileData As DataSet, _
                                               ByRef pDSProfileDefaultData As DataSet, _
                                               ByVal pProfileTemplateId As String, _
                                               ByVal pParameterTemplateId As String) As Long

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            Dim _drProductSetup() As DataRow
            _drProductSetup = pDSExcelProfileData.Tables(Enum_ProfileData.ProfileSetup.ToString).Select("ProfileTemplateID = '" & pProfileTemplateId & "'")

            If _drProductSetup.Length > 0 Then
                For Each _drProduct As DataRow In _drProductSetup
                    Dim _drParameters() As DataRow
                    _drParameters = pDSExcelProfileData.Tables(Enum_ProfileData.ProfileParameters.ToString).Select("PROFILE_PARAM_TEMPLATE_ID = '" & pParameterTemplateId & "'")

                    If log.IsDebugEnabled Then log.Debug("ProfileParamTemplateID  row count in ProfileParameters Table " & methodBaseName & " is .. " & _drParameters.Length)
                    If _drParameters.Length > 0 Then
                        For Each _dr As DataRow In _drParameters
                            For Each _dc As DataColumn In _dr.Table.Columns
                                Dim _drProfileparameters As DataRow
                                Dim strParameterID As String = _dc.ColumnName.ToString
                                Dim strAppID As String = _dc.ColumnName.ToString
                                If strParameterID <> "PROFILE_PARAM_TEMPLATE_ID" Then
                                    strParameterID = strParameterID.Substring(strParameterID.IndexOf("_") + 1)
                                    strAppID = strAppID.Substring(0, strAppID.IndexOf("_"))
                                    'To Update the default dataset with changed values
                                    Dim _drDefaultParams() As DataRow
                                    _drDefaultParams = pDSProfileDefaultData.Tables("PARAMS").Select("APP_ID = '" & strAppID & "'" & _
                                                                            " AND  PARAMETER_ID= '" & strParameterID & "' ")
                                    If _drDefaultParams.Length > 0 Then
                                        _drDefaultParams(0).Item("PARAMETER_VALUE") = _dr.Item(_dc.ColumnName.ToString).ToString
                                    End If
                                End If
                            Next
                        Next
                    End If
                Next
                pDSProfileDefaultData.AcceptChanges()

            End If

            Return ATPAR_OK

        Catch ex As Exception
            pDSExcelProfileData.Tables(Enum_ProfileData.ProfileParametersErrorData.ToString).Rows(0).Item("ERROR_MESSAGE") = CONST_PROFILE_INVALID_DATA
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in  " & methodBaseName & " is..." & vbCrLf & ex.ToString)
            Return E_SERVERERROR
        End Try


    End Function

    ''' <summary>
    ''' Used to Populate the data to be inserted/Update into dataset
    ''' </summary>
    ''' <param name="pDSExcelProfileData">Profile Excel Dataset</param>
    ''' <param name="pDSProfileDefaultData">Profile Default Dataset </param>
    ''' <param name="pProfileTemplateId">ProfileTemplateId</param>
    ''' <param name="pParameterTemplateId">ParameterTemplateId</param>
    ''' <param name="pMode">pMode</param>
    ''' <param name="pDSAddUpdateProfile">Add Update Profile dataset</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Private Function PopulateProfileDataset(ByVal pDSExcelProfileData As DataSet, _
                                              ByVal pDSProfileDefaultData As DataSet, _
                                              ByVal pProfileTemplateId As String, _
                                              ByVal pParameterTemplateId As String, _
                                              ByVal pMode As String, _
                                              ByRef pDSAddUpdateProfile As DataSet, _
                                              ByRef pblnChangeProfileClienttoServer As Boolean) As Long

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _StatusCode As Long
        Dim _intDefaultServerCount As Integer
        Dim _intDefaultClientCount As Integer
        Dim _intExcelServerCount As Integer
        Dim _intExcelClientCount As Integer
        Dim _dtProfile As New DataTable
        Dim _dtMenus As New DataTable
        Dim _dtParams As New DataTable
        Dim _dtScreenDisplay As New DataTable
        Dim _itemRow As DataRow
        Dim _intRowCnt As Integer
        pDSAddUpdateProfile = New DataSet

        Try
            If pMode = AddEdit_Enum.ADD.ToString Then
                'Populate Variable strChangeProfileClienttoServer = False
                pblnChangeProfileClienttoServer = False
            Else

                'Populate the ServerCount and Client Count from ServerCount and ClientCount tablesProfileDefaultDataSet(dataset from GetProfileInfo) 
                If pDSProfileDefaultData.Tables.Count > 0 Then
                    _intDefaultServerCount = pDSProfileDefaultData.Tables("ServerCount").Rows(0).Item("COUNTS")
                    _intDefaultClientCount = pDSProfileDefaultData.Tables("ClientCount").Rows(0).Item("COUNTS")
                End If

                'And Get ServerCount and ClientCount from ProfileSetupTable from profileExcelDataSet
                Dim _drWebRowCount() As DataRow
                _drWebRowCount = pDSExcelProfileData.Tables(Enum_ProfileData.ProfileSetup.ToString).Select("ProfileTemplateID = '" & pProfileTemplateId & "'" & _
                                                                                              " and  [Web(Y/N)] = '" & YesNo_Enum.Y.ToString & "' ")

                If log.IsDebugEnabled Then log.Debug("ProfileTemplateID  WEB rows count in ProfileSetup Table in " & methodBaseName & " is .. " & _drWebRowCount.Length)
                _intExcelServerCount = _drWebRowCount.Length

                Dim _drHHTRowCount() As DataRow
                _drHHTRowCount = pDSExcelProfileData.Tables(Enum_ProfileData.ProfileSetup.ToString).Select("ProfileTemplateID = '" & pProfileTemplateId & "'" & _
                                                                                              " and  [HHT(Y/N)] = '" & YesNo_Enum.Y.ToString & "' ")

                If log.IsDebugEnabled Then log.Debug("ProfileTemplateID  HHT rows count in ProfileSetup Table in  " & methodBaseName & " is .. " & _drHHTRowCount.Length)
                _intExcelClientCount = _drHHTRowCount.Length

                If _intDefaultServerCount = 0 And _intExcelClientCount > 0 Then
                    'Populate Variable strChangeProfileClienttoServer = True
                    pblnChangeProfileClienttoServer = True
                Else
                    pblnChangeProfileClienttoServer = False
                End If
            End If

            'Build the AddUpldate dataset with tables for PROFILE, SCREENDISPLAY, PARAMS,MENUS
            _dtProfile = New DataTable("PROFILE")
            _dtProfile.Columns.Add("APP_ID", Type.GetType("System.String"))
            _dtProfile.Columns.Add("SERVER_USER", Type.GetType("System.String"))
            _dtProfile.Columns.Add("CLIENT_USER", Type.GetType("System.String"))

            _dtScreenDisplay = New DataTable("SCREENDISPLAY")
            _dtScreenDisplay.Columns.Add("APP_ID", Type.GetType("System.String"))
            _dtScreenDisplay.Columns.Add("SCREEN_NAME", Type.GetType("System.String"))
            _dtScreenDisplay.Columns.Add("FIELD_NAME", Type.GetType("System.String"))
            _dtScreenDisplay.Columns.Add("COLUMN_HEADER", Type.GetType("System.String"))
            _dtScreenDisplay.Columns.Add("COLUMN_ORDER", Type.GetType("System.String"))
            _dtScreenDisplay.Columns.Add("COLUMN_WIDTH", Type.GetType("System.String"))
            _dtScreenDisplay.Columns.Add("DISPLAY_FIELD", Type.GetType("System.String"))
            _dtScreenDisplay.Columns.Add("DEFAULT_TOGGLE_TEXT", Type.GetType("System.String"))
            _dtScreenDisplay.Columns.Add("TOGGLE_ORDER", Type.GetType("System.String"))
            _dtScreenDisplay.Columns.Add("TOGGLE_FIELD", Type.GetType("System.String"))

            _dtParams = New DataTable("PARAMS")
            _dtParams.Columns.Add("APP_ID", Type.GetType("System.String"))
            _dtParams.Columns.Add("PARAMETER_ID", Type.GetType("System.String"))
            _dtParams.Columns.Add("PARAMETER_VALUE", Type.GetType("System.String"))

            _dtMenus = New DataTable("MENUS")
            _dtMenus.Columns.Add("APP_ID", Type.GetType("System.String"))
            _dtMenus.Columns.Add("MENU_CODE", Type.GetType("System.String"))
            _dtMenus.Columns.Add("MENU_SEQ_NO", Type.GetType("System.String"))
            _dtMenus.Columns.Add("CHKSTATUS", Type.GetType("System.String"))

            'Get the datarows from for ProfileSetup table In excelDataSet  for ProfileTemplateId Loop the datarows

            Dim _drProfileSetUp() As DataRow
            _drProfileSetUp = pDSExcelProfileData.Tables(Enum_ProfileData.ProfileSetup.ToString).Select("ProfileTemplateID = '" & pProfileTemplateId & "'")

            If _drProfileSetUp.Length > 0 Then
                Dim _strServerAccess As String = String.Empty
                Dim _strClientAccess As String = String.Empty
                Dim _intAppID As Integer = 0
                For Each _drxcelProfile As DataRow In _drProfileSetUp

                    _strServerAccess = String.Empty
                    _strClientAccess = String.Empty

                    Dim _dr() As DataRow
                    _dr = pDSProfileDefaultData.Tables("PROFILES").Select("APP_ID = '" & _drxcelProfile.Item(1) & "'")
                    If _dr.Length > 0 Then

                        If Not _dr(0).Item("SERVER_USER") Is DBNull.Value Then
                            _strServerAccess = _dr(0).Item("SERVER_USER")
                        End If
                        If Not _dr(0).Item("CLIENT_USER") Is DBNull.Value Then
                            _strClientAccess = _dr(0).Item("CLIENT_USER")
                        End If

                        _intAppID = _drxcelProfile.Item(1)


                        'To bind changed data only
                        If _strServerAccess <> IIf(_drxcelProfile.Item(3) = YesNo_Enum.Y.ToString, YesNo_Enum.Y.ToString, YesNo_Enum.N.ToString) _
                          Or _strClientAccess <> IIf(_drxcelProfile.Item(4) = YesNo_Enum.Y.ToString, YesNo_Enum.Y.ToString, YesNo_Enum.N.ToString) Then
                            _itemRow = _dtProfile.NewRow
                            _itemRow("APP_ID") = _drxcelProfile.Item(1)
                            _itemRow("SERVER_USER") = IIf(_drxcelProfile.Item(3) = YesNo_Enum.Y.ToString, YesNo_Enum.Y.ToString, YesNo_Enum.N.ToString)
                            _itemRow("CLIENT_USER") = IIf(_drxcelProfile.Item(4) = YesNo_Enum.Y.ToString, YesNo_Enum.Y.ToString, YesNo_Enum.N.ToString)
                            _dtProfile.Rows.Add(_itemRow)
                        End If

                        'To Get ScreenDisplay Data, when client check only
                        If _drxcelProfile.Item(4) = YesNo_Enum.Y.ToString Then
                            If pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows.Count > 0 Then
                                If pMode = AddEdit_Enum.ADD.ToString Then
                                    For _intRowCnt = 0 To pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows.Count - 1
                                        If pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("APP_ID") = _intAppID Then
                                            _itemRow = _dtScreenDisplay.NewRow()
                                            _itemRow("APP_ID") = pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("APP_ID")
                                            _itemRow("SCREEN_NAME") = pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("SCREEN_NAME")
                                            _itemRow("FIELD_NAME") = pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("FIELD_NAME")
                                            _itemRow("COLUMN_HEADER") = pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("COLUMN_HEADER")
                                            _itemRow("COLUMN_ORDER") = pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("COLUMN_ORDER")
                                            _itemRow("COLUMN_WIDTH") = pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("COLUMN_WIDTH")
                                            _itemRow("DISPLAY_FIELD") = pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("DISPLAY_FIELD")
                                            _itemRow("DEFAULT_TOGGLE_TEXT") = pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("DEFAULT_TOGGLE_TEXT")
                                            _itemRow("TOGGLE_ORDER") = pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("TOGGLE_ORDER")
                                            _itemRow("TOGGLE_FIELD") = pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("TOGGLE_FIELD")
                                            _dtScreenDisplay.Rows.Add(_itemRow)
                                        End If
                                    Next
                                Else    'In Edit Mode
                                    For _intRowCnt = 0 To pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows.Count - 1
                                        If pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("APP_ID") = _intAppID Then
                                            If pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("CHANGEFLAG") = YesNo_Enum.Y.ToString Then
                                                _itemRow = _dtScreenDisplay.NewRow()
                                                _itemRow("APP_ID") = pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("APP_ID")
                                                _itemRow("SCREEN_NAME") = pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("SCREEN_NAME")
                                                _itemRow("FIELD_NAME") = pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("FIELD_NAME")
                                                _itemRow("COLUMN_HEADER") = pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("COLUMN_HEADER")
                                                _itemRow("COLUMN_ORDER") = pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("COLUMN_ORDER")
                                                _itemRow("COLUMN_WIDTH") = pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("COLUMN_WIDTH")
                                                _itemRow("DISPLAY_FIELD") = pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("DISPLAY_FIELD")
                                                _itemRow("DEFAULT_TOGGLE_TEXT") = pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("DEFAULT_TOGGLE_TEXT")
                                                _itemRow("TOGGLE_ORDER") = pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("TOGGLE_ORDER")
                                                _itemRow("TOGGLE_FIELD") = pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("TOGGLE_FIELD")
                                                _dtScreenDisplay.Rows.Add(_itemRow)
                                            End If
                                            'To Get Newly Added APP Parameters in Edit Mode

                                            If (_strServerAccess = YesNo_Enum.N.ToString And IIf(_drxcelProfile.Item(3) = YesNo_Enum.Y.ToString, YesNo_Enum.Y.ToString, YesNo_Enum.N.ToString) = YesNo_Enum.Y.ToString) Or _
                                                   (_strClientAccess = YesNo_Enum.N.ToString And IIf(_drxcelProfile.Item(4) = YesNo_Enum.Y.ToString, YesNo_Enum.Y.ToString, YesNo_Enum.N.ToString) = YesNo_Enum.Y.ToString) Then
                                                _itemRow = _dtScreenDisplay.NewRow()
                                                _itemRow("APP_ID") = pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("APP_ID")
                                                _itemRow("SCREEN_NAME") = pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("SCREEN_NAME")
                                                _itemRow("FIELD_NAME") = pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("FIELD_NAME")
                                                _itemRow("COLUMN_HEADER") = pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("COLUMN_HEADER")
                                                _itemRow("COLUMN_ORDER") = pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("COLUMN_ORDER")
                                                _itemRow("COLUMN_WIDTH") = pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("COLUMN_WIDTH")
                                                _itemRow("DISPLAY_FIELD") = pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("DISPLAY_FIELD")
                                                _itemRow("DEFAULT_TOGGLE_TEXT") = pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("DEFAULT_TOGGLE_TEXT")
                                                _itemRow("TOGGLE_ORDER") = pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("TOGGLE_ORDER")
                                                _itemRow("TOGGLE_FIELD") = pDSProfileDefaultData.Tables("SCREENDISPLAY").Rows(_intRowCnt).Item("TOGGLE_FIELD")
                                                _dtScreenDisplay.Rows.Add(_itemRow)
                                            End If
                                        End If
                                    Next
                                End If
                            End If
                        End If 'ScreenDisplay

                        'To Get Parameters Data, either server or client check
                        Try
                            If _drxcelProfile.Item(3) = YesNo_Enum.Y.ToString Or _drxcelProfile.Item(4) = YesNo_Enum.Y.ToString Then
                                If pDSProfileDefaultData.Tables("PARAMS").Rows.Count > 0 Then
                                    If pMode = AddEdit_Enum.ADD.ToString Then
                                        For _intRowCnt = 0 To pDSProfileDefaultData.Tables("PARAMS").Rows.Count - 1
                                            If pDSProfileDefaultData.Tables("PARAMS").Rows(_intRowCnt).Item("APP_ID") = _intAppID Then
                                                _itemRow = _dtParams.NewRow()
                                                _itemRow("APP_ID") = pDSProfileDefaultData.Tables("PARAMS").Rows(_intRowCnt).Item("APP_ID")
                                                _itemRow("PARAMETER_ID") = pDSProfileDefaultData.Tables("PARAMS").Rows(_intRowCnt).Item("PARAMETER_ID")
                                                _itemRow("PARAMETER_VALUE") = pDSProfileDefaultData.Tables("PARAMS").Rows(_intRowCnt).Item("PARAMETER_VALUE")
                                                _dtParams.Rows.Add(_itemRow)
                                            End If
                                        Next
                                    Else
                                        For _intRowCnt = 0 To pDSProfileDefaultData.Tables("PARAMS").Rows.Count - 1
                                            If pDSProfileDefaultData.Tables("PARAMS").Rows(_intRowCnt).Item("APP_ID") = _intAppID Then
                                                If pDSProfileDefaultData.Tables("PARAMS").Rows(_intRowCnt).Item("PARAMETER_VALUE") <> pDSProfileDefaultData.Tables("PARAMS").Rows(_intRowCnt).Item("PARAMETER_COMP_VALUE") Then
                                                    _itemRow = _dtParams.NewRow()
                                                    _itemRow("APP_ID") = pDSProfileDefaultData.Tables("PARAMS").Rows(_intRowCnt).Item("APP_ID")
                                                    _itemRow("PARAMETER_ID") = pDSProfileDefaultData.Tables("PARAMS").Rows(_intRowCnt).Item("PARAMETER_ID")
                                                    _itemRow("PARAMETER_VALUE") = pDSProfileDefaultData.Tables("PARAMS").Rows(_intRowCnt).Item("PARAMETER_VALUE")
                                                    _dtParams.Rows.Add(_itemRow)
                                                End If
                                                'To Get Newly Added APP Parameters in Edit Mode
                                                If (_strServerAccess = YesNo_Enum.N.ToString And IIf(_strServerAccess = YesNo_Enum.Y.ToString, YesNo_Enum.Y.ToString, YesNo_Enum.N.ToString) = YesNo_Enum.Y.ToString) Or _
                                                            (_strClientAccess = YesNo_Enum.N.ToString And IIf(_strClientAccess = YesNo_Enum.Y.ToString, YesNo_Enum.Y.ToString, YesNo_Enum.N.ToString) = YesNo_Enum.Y.ToString) Then
                                                    _itemRow = _dtParams.NewRow()
                                                    _itemRow("APP_ID") = pDSProfileDefaultData.Tables("PARAMS").Rows(_intRowCnt).Item("APP_ID")
                                                    _itemRow("PARAMETER_ID") = pDSProfileDefaultData.Tables("PARAMS").Rows(_intRowCnt).Item("PARAMETER_ID")
                                                    _itemRow("PARAMETER_VALUE") = pDSProfileDefaultData.Tables("PARAMS").Rows(_intRowCnt).Item("PARAMETER_VALUE")
                                                    _dtParams.Rows.Add(_itemRow)
                                                End If
                                            End If
                                        Next
                                    End If
                                End If
                            End If 'Param Data
                        Catch ex As Exception
                            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in binding data in Param Data  " & methodBaseName & " is..." & vbCrLf & ex.ToString)
                            Return E_SERVERERROR
                        End Try


                        'To Get Menu Access Data, when ServerCheck only
                        If _drxcelProfile.Item(3) = YesNo_Enum.Y.ToString Then
                            If pDSProfileDefaultData.Tables("MENUS").Rows.Count > 0 Then
                                For _intRowCnt = 0 To pDSProfileDefaultData.Tables("MENUS").Rows.Count - 1
                                    If pDSProfileDefaultData.Tables("MENUS").Rows(_intRowCnt).Item("APP_ID") = _intAppID Then
                                        _itemRow = _dtMenus.NewRow()
                                        _itemRow("APP_ID") = pDSProfileDefaultData.Tables("MENUS").Rows(_intRowCnt).Item("APP_ID")
                                        _itemRow("MENU_CODE") = pDSProfileDefaultData.Tables("MENUS").Rows(_intRowCnt).Item("MENU_CODE")
                                        _itemRow("MENU_SEQ_NO") = pDSProfileDefaultData.Tables("MENUS").Rows(_intRowCnt).Item("MENU_SEQ_NO")
                                        _itemRow("CHKSTATUS") = pDSProfileDefaultData.Tables("MENUS").Rows(_intRowCnt).Item("CHKSTATUS")
                                        _dtMenus.Rows.Add(_itemRow)
                                    End If
                                Next
                            End If
                        End If 'Menu Data

                        If log.IsDebugEnabled Then log.Debug("To Get Menu Access Data " & _strServerAccess)

                    End If
                Next
                pDSAddUpdateProfile.Tables.Add(_dtProfile)
                pDSAddUpdateProfile.Tables.Add(_dtScreenDisplay)
                pDSAddUpdateProfile.Tables.Add(_dtParams)
                pDSAddUpdateProfile.Tables.Add(_dtMenus)
            End If

            Return ATPAR_OK

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in  " & methodBaseName & " is..." & vbCrLf & ex.ToString)
            Return E_SERVERERROR
        End Try

    End Function

#End Region

#Region "   Barcode Translations "

    ''' <summary>
    ''' To get Barcode Transalation values based on User ID
    ''' </summary>
    ''' <param name="pUserID">User ID</param>
    ''' <param name="pdsBarcodeValues">dsBarcodeValues Dataset</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function GetBarcodeTranslationValues(ByVal pUserID As String, _
                                                ByRef pdsBarcodeValues As DataSet, _
                                                ByVal pDeviceTokenEntry() As String) As Long _
                                                Implements IAtpar_WebTrans.GetBarcodeTranslationValues

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserID
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sbSQL As New StringBuilder

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            With _sbSQL
                .Append("SELECT SYMBOLOGY_TYPE, BARCODE_LENGTH, DESCRIPTION, ")
                .Append("ID_START_POSITION, LENGTH, UPDATE_USERID, ")
                .Append("CONVERT(NVARCHAR(10),UPDATE_DATE,101) AS UPDATE_DATE ")
                .Append("FROM MT_ATPAR_BARCODE_SYMBOLOGY")
            End With

            If log.IsInfoEnabled Then log.Info(_sbSQL.ToString)

            pdsBarcodeValues = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString))

            Return ATPAR_OK

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute the SQL... " _
                                                                                    & _sbSQL.ToString & vbCrLf & _
                                                                                    " Exception is : " & _
                                                                                    ex.ToString & vbCrLf)
            Return E_SERVERERROR
        Finally
            _sbSQL = Nothing
        End Try

    End Function

    ''' <summary>
    ''' To Add Barcode Transalation values based on User ID
    ''' </summary>
    ''' <param name="pUserID">User ID</param>
    ''' <param name="pdsBarcodeValues">dsBarcodeValues Dataset</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function AddBarcodeTranslation(ByVal pUserID As String, _
                                          ByVal pdsBarcodeValues As DataSet, _
                                          ByVal pDeviceTokenEntry() As String) As Long _
                                          Implements IAtpar_WebTrans.AddBarcodeTranslation

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserID
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sbSQL As New StringBuilder

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try

            If pdsBarcodeValues.Tables.Count > 0 Then

                With _sbSQL
                    .Append(" INSERT INTO MT_ATPAR_BARCODE_SYMBOLOGY(SYMBOLOGY_TYPE,BARCODE_LENGTH,DESCRIPTION,ID_START_POSITION,")
                    .Append(" LENGTH,UPDATE_USERID,UPDATE_DATE) ")
                    .Append(" VALUES('" & pdsBarcodeValues.Tables(0).Rows(0).Item("SYMBOLOGY_TYPE") & "', ")
                    .Append("'" & pdsBarcodeValues.Tables(0).Rows(0).Item("BARCODE_LENGTH") & "',")
                    .Append("'" & pdsBarcodeValues.Tables(0).Rows(0).Item("DESCRIPTION") & "',")
                    .Append(" '" & pdsBarcodeValues.Tables(0).Rows(0).Item("ID_START_POSITION") & "',")
                    .Append("'" & pdsBarcodeValues.Tables(0).Rows(0).Item("LENGTH") & "',")
                    .Append("'" & pUserID & "',")
                    .Append("'" & Now & "')")
                End With

                If log.IsInfoEnabled Then log.Info(_sbSQL.ToString)

                m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString))

            End If

            Return ATPAR_OK

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute the SQL... " _
                                                                                    & _sbSQL.ToString & vbCrLf & _
                                                                                    " Exception is : " & _
                                                                                    ex.ToString & vbCrLf)
            Return E_SERVERERROR
        Finally
            _sbSQL = Nothing
        End Try

    End Function


    ''' <summary>
    ''' To Update Barcode Transalation values based on User ID
    ''' </summary>
    ''' <param name="pUserID">User ID</param>
    ''' <param name="pdsBarcodeValues">dsBarcodeValues Dataset</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function UpdateBarcodeTranslation(ByVal pUserID As String, _
                                             ByVal pdsEditBarcodeValues As DataSet, _
                                             ByVal pDeviceTokenEntry() As String) As Long _
                                             Implements IAtpar_WebTrans.UpdateBarcodeTranslation

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserID
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sbSQL As New StringBuilder

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try

            If pdsEditBarcodeValues.Tables.Count > 0 Then

                With _sbSQL
                    .Append(" UPDATE MT_ATPAR_BARCODE_SYMBOLOGY SET ")
                    .Append(" DESCRIPTION = '" & pdsEditBarcodeValues.Tables(0).Rows(0).Item("DESCRIPTION") & "',")
                    .Append(" ID_START_POSITION = '" & pdsEditBarcodeValues.Tables(0).Rows(0).Item("ID_START_POSITION") & "',")
                    .Append(" LENGTH = '" & pdsEditBarcodeValues.Tables(0).Rows(0).Item("LENGTH") & "',")
                    .Append(" UPDATE_USERID = '" & pUserID & "',")
                    .Append(" UPDATE_DATE = '" & Now & "'")
                    .Append(" WHERE SYMBOLOGY_TYPE = '" & pdsEditBarcodeValues.Tables(0).Rows(0).Item("SYMBOLOGY_TYPE") & "' ")
                    .Append(" AND BARCODE_LENGTH = '" & pdsEditBarcodeValues.Tables(0).Rows(0).Item("BARCODE_LENGTH") & "' ")
                End With

                If log.IsInfoEnabled Then log.Info(_sbSQL.ToString)

                m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString))

            End If

            Return ATPAR_OK

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute the SQL... " _
                                                                                    & _sbSQL.ToString & vbCrLf & _
                                                                                    " Exception is : " & _
                                                                                    ex.ToString & vbCrLf)
            Return E_SERVERERROR
        Finally
            _sbSQL = Nothing
        End Try

    End Function

    ''' <summary>
    ''' To Delete Barcode Transalation values based on SymbologyType and BarcodeLength
    ''' </summary>
    ''' <param name="pUserID">User ID</param>
    ''' <param name="pSymbologyType">SymbologyType </param>
    ''' <param name="pBarcodeLength">BarcodeLength </param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function DeleteBarcodeTranslation(ByVal pSymbologyType As String, _
                                             ByVal pBarcodeLength As String, _
                                             ByVal pUserId As String, _
                                             ByVal pDeviceTokenEntry() As String) As Long _
                                             Implements IAtpar_WebTrans.DeleteBarcodeTranslation

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserId
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sbSQL As New StringBuilder

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try

            With _sbSQL
                .Append(" DELETE FROM MT_ATPAR_BARCODE_SYMBOLOGY WHERE ")
                .Append(" SYMBOLOGY_TYPE = '" & pSymbologyType & "'")
                .Append(" AND BARCODE_LENGTH = '" & pBarcodeLength & "'")
            End With

            If log.IsInfoEnabled Then log.Info(_sbSQL.ToString)

            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString))

            Return ATPAR_OK

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute the SQL... " _
                                                                                    & _sbSQL.ToString & vbCrLf & _
                                                                                    " Exception is : " & _
                                                                                    ex.ToString & vbCrLf)
            Return E_SERVERERROR
        Finally
            _sbSQL = Nothing
        End Try

    End Function

    ''' <summary>
    ''' To Check For Existing Barcode Transalation values based on SymbologyType and BarcodeLength
    ''' </summary>
    ''' <param name="pUserID">User ID</param>
    ''' <param name="pSymbologyType">SymbologyType </param>
    ''' <param name="pBarcodeLength">BarcodeLength </param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function CheckForExistingBarCodeTranslation(ByVal pSymbologyType As String, _
                                             ByVal pBarcodeLength As String, _
                                             ByVal pUserId As String, _
                                             ByRef pintSymbologyTypeExists As Integer, _
                                             ByVal pDeviceTokenEntry() As String) As Long _
                                             Implements IAtpar_WebTrans.CheckForExistingBarCodeTranslation

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserId
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sbSQL As New StringBuilder

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try

            With _sbSQL
                .Append(" SELECT COUNT(SYMBOLOGY_TYPE) FROM MT_ATPAR_BARCODE_SYMBOLOGY WHERE ")
                .Append(" SYMBOLOGY_TYPE = '" & pSymbologyType & "'")
                .Append(" AND BARCODE_LENGTH = '" & pBarcodeLength & "'")
            End With

            If log.IsInfoEnabled Then log.Info(_sbSQL.ToString)

            pintSymbologyTypeExists = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString))

            Return ATPAR_OK

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute the SQL... " _
                                                                                    & _sbSQL.ToString & vbCrLf & _
                                                                                    " Exception is : " & _
                                                                                    ex.ToString & vbCrLf)
            Return E_SERVERERROR
        Finally
            _sbSQL = Nothing
        End Try

    End Function


#End Region

#Region "Inventory Items"
    Public Function InsertInventoryItems(ByVal pDsInsertData As DataSet, _
                                         ByVal pAltStorLoc1 As String, _
                                         ByVal pAltStorLoc2 As String, _
                                         ByVal pDeviceTokenEntry() As String) As Long _
                                         Implements IAtpar_WebTrans.InsertInventoryItems


        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)
        Dim _sbInsertSQL As New StringBuilder
        Dim _sbSelectSQL As New StringBuilder
        'Dim intCnt As Integer
        Dim _strSQL As String
        Dim _strSelectSQL As String
        Dim _ItemCnt As Integer
        Dim _statusCode As Long = -1
        Dim pIntCnt As Integer
        Dim _sbSQL As New StringBuilder
        Dim _strOrgGrpId As String

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        If pDsInsertData.Tables(0).Rows.Count > 0 Then
            Dim pOrgGrpId As String = pDsInsertData.Tables(0).Rows(0).Item("ORG_GROUP_ID").ToString
            Dim pOrgId As String = pDsInsertData.Tables(0).Rows(0).Item("ORG_ID").ToString
            Dim pItmId As String = pDsInsertData.Tables(0).Rows(0).Item("INV_ITEM_ID").ToString
            Dim pUom As String = pDsInsertData.Tables(0).Rows(0).Item("UOM").ToString
            Dim pDfltStorLoc As String = pDsInsertData.Tables(0).Rows(0).Item("STOR_LOC").ToString
            'Dim pAltStorLoc1 As String = pDsInsertData.Tables(0).Rows(0).Item("ALT_STOR_LOC1").ToString
            'Dim pAltStorLoc2 As String = pDsInsertData.Tables(0).Rows(0).Item("ALT_STOR_LOC2").ToString
            Dim pChrgCode As String = pDsInsertData.Tables(0).Rows(0).Item("CHARGE_CODE").ToString
            Dim pLotId As String = pDsInsertData.Tables(0).Rows(0).Item("LOT_ID").ToString
            Dim pSerialId As String = pDsInsertData.Tables(0).Rows(0).Item("SERIAL_ID").ToString
            Dim pQOH As Integer = CInt(pDsInsertData.Tables(0).Rows(0).Item("QUANTITY_ON_HAND"))
            Dim pReplnType As String = pDsInsertData.Tables(0).Rows(0).Item("REPLENISHMENT_TYPE").ToString
            Dim pStatus As String = pDsInsertData.Tables(0).Rows(0).Item("STATUS")


            'Check if Item Exists in PAR_MNGT_ITEM

            _strSQL = "SELECT COUNT(*) FROM PAR_MNGT_ITEM WHERE ITEM_ID = '" & pItmId & "'"

            If log.IsInfoEnabled Then log.Info(methodBaseName & ":Query to get the existance of ItemId in PAR_MNGT_ITEM : " & pItmId & ":" & _strSQL & vbCrLf)

            Try
                _ItemCnt = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(_strSQL))
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the inventory item details " & vbCrLf & _
                                                                   " with the following SQL :" & _strSQL & vbCrLf & _
                                                                   " Exception is:" & ex.ToString & vbCrLf)
                Return ATPAR_E_LOCALDBSELECTFAIL
            End Try
            If _ItemCnt = 0 Then
                Return PAR_NO_ITEMEXISTS

            ElseIf _ItemCnt > 0 Then
                Try
                    With _sbSQL
                        .Append(" SELECT MASTER_GROUP_ID FROM RM_ORG_UNITS ")
                        .Append(" WHERE ORG_ID = '" & pOrgId & "' ")
                    End With
                    _strOrgGrpId = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString))
                    If log.IsInfoEnabled Then log.Info(methodBaseName & " :Query to fetch the data from RM_ORG_UNITS: " & _sbSQL.ToString & " : ")
                Catch ex As Exception
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                    _sbSQL.ToString & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
                    Return ATPAR_E_LOCALDBSELECTFAIL
                End Try

                If _strOrgGrpId = "Select One" Or _strOrgGrpId = String.Empty Then
                    _strOrgGrpId = pOrgGrpId
                End If

                _strSelectSQL = "SELECT COUNT(*) FROM PAR_MNGT_ITEM WHERE ITEM_ID = '" & pItmId & "'" & _
                          " AND ORG_GROUP_ID='" & _strOrgGrpId & "'"

                If log.IsInfoEnabled Then log.Info(methodBaseName & ":Query to get the existance of ItemId of selected Org Group Id in PAR_MNGT_ITEM : " & pItmId & ":" & _strSelectSQL & vbCrLf)
                Try
                    _ItemCnt = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(_strSelectSQL))
                Catch ex As Exception
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the inventory count " & vbCrLf & _
                                                                     " with the following SQL :" & _strSelectSQL.ToString & vbCrLf & _
                                                                     " Exception is:" & ex.ToString & vbCrLf)
                    Return ATPAR_E_LOCALDBSELECTFAIL
                End Try

                If _ItemCnt = 0 Then
                    Return CRCT_E_ITEMDONOTEXIST
                End If
            End If

            Try
                'Check If Item already Exists

                _statusCode = CheckItemExistence(pOrgId, pItmId, pUom, pIntCnt, "", "", "")
                If _statusCode <> ATPAR_OK Then
                    If _statusCode = ATPAR_E_PRIMARYKEYVOILATION Then
                        Return ATPAR_E_PRIMARYKEYVOILATION
                    Else
                        Return E_SERVERERROR
                    End If
                    'End If
                Else
                    If _statusCode = ATPAR_OK Then

                        If pIntCnt > 0 Then
                            Return ATPAR_E_PRIMARYKEYVOILATION
                        End If
                        'Insert Item Details
                        With _sbInsertSQL
                            .Append(" INSERT INTO MT_ATPAR_PHYSICAL_INVENTORY(ORG_ID, INV_ITEM_ID, UOM, STOR_LOC, ")
                            .Append(" DEFAULT_LOC_FLAG, CHARGE_CODE,LOT_ID, SERIAL_ID, ")
                            .Append(" QUANTITY_ON_HAND, LAST_UPDATE_DATE, REPLENISHMENT_TYPE, STATUS) ")
                            .Append(" VALUES('" & pOrgId & "','" & pItmId & "','" & pUom & "', '" & pDfltStorLoc & "','Y',")
                            .Append(" '" & pChrgCode & "', '" & pLotId & "',")
                            .Append(" '" & pSerialId & "'," & pQOH & ",'" & Now() & "', ")
                            .Append(" '" & pReplnType & "','" & pStatus & "')")
                        End With

                        Try
                            If log.IsInfoEnabled Then log.Info(methodBaseName & " : Query to insert the data in to MT_ATPAR_PHYSICAL_INVENTORY:" & _sbInsertSQL.ToString & " : ")
                            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_sbInsertSQL.ToString))
                            'Return ATPAR_OK
                        Catch ex As Exception
                            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                        _sbInsertSQL.ToString & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
                            Return ATPAR_E_LOCALDBINSERTFAIL
                        Finally
                            _sbInsertSQL.Remove(0, _sbInsertSQL.Length)
                        End Try
                    End If

                    If pAltStorLoc1 <> String.Empty Then
                        Try
                            _sbInsertSQL = Nothing
                            _sbInsertSQL = New StringBuilder
                            'Insert Item Details
                            With _sbInsertSQL
                                .Append(" INSERT INTO MT_ATPAR_PHYSICAL_INVENTORY(ORG_ID, INV_ITEM_ID, UOM, STOR_LOC, ")
                                .Append(" DEFAULT_LOC_FLAG, CHARGE_CODE,LOT_ID, SERIAL_ID, ")
                                .Append(" QUANTITY_ON_HAND, LAST_UPDATE_DATE, REPLENISHMENT_TYPE, STATUS) ")
                                .Append(" VALUES('" & pOrgId & "','" & pItmId & "','" & pUom & "', '" & pAltStorLoc1 & "','N',")
                                .Append(" '" & pChrgCode & "', '" & pLotId & "',")
                                .Append(" '" & pSerialId & "'," & pQOH & ",'" & Now() & "', ")
                                .Append(" '" & pReplnType & "','" & pStatus & "')")
                            End With

                            Try
                                If log.IsInfoEnabled Then log.Info(methodBaseName & " : Query to insert the data in to MT_ATPAR_PHYSICAL_INVENTORY:" & _sbInsertSQL.ToString & " : ")
                                m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_sbInsertSQL.ToString))
                                'Return ATPAR_OK
                            Catch ex As Exception
                                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                            _sbInsertSQL.ToString & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
                                Return ATPAR_E_LOCALDBINSERTFAIL
                            Finally
                                _sbInsertSQL.Remove(0, _sbInsertSQL.Length)
                            End Try
                            'End If
                        Catch ex As Exception
                            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to check Existence of Items " & ex.ToString & vbCrLf)
                            Return E_SERVERERROR
                        End Try
                    End If

                    If pAltStorLoc2 <> String.Empty Then
                        Try
                            _sbInsertSQL = Nothing
                            _sbInsertSQL = New StringBuilder
                            'Insert Item Details
                            With _sbInsertSQL
                                .Append(" INSERT INTO MT_ATPAR_PHYSICAL_INVENTORY(ORG_ID, INV_ITEM_ID, UOM, STOR_LOC, ")
                                .Append(" DEFAULT_LOC_FLAG, CHARGE_CODE,LOT_ID, SERIAL_ID, ")
                                .Append(" QUANTITY_ON_HAND, LAST_UPDATE_DATE, REPLENISHMENT_TYPE, STATUS) ")
                                .Append(" VALUES('" & pOrgId & "','" & pItmId & "','" & pUom & "', '" & pAltStorLoc2 & "','N',")
                                .Append(" '" & pChrgCode & "', '" & pLotId & "',")
                                .Append(" '" & pSerialId & "'," & pQOH & ",'" & Now() & "', ")
                                .Append(" '" & pReplnType & "','" & pStatus & "')")
                            End With

                            Try
                                If log.IsInfoEnabled Then log.Info(methodBaseName & " : Query to insert the data in to MT_ATPAR_PHYSICAL_INVENTORY:" & _sbInsertSQL.ToString & " : ")
                                m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_sbInsertSQL.ToString))
                                'Return ATPAR_OK
                            Catch ex As Exception
                                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                            _sbInsertSQL.ToString & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
                                Return ATPAR_E_LOCALDBINSERTFAIL
                            Finally
                                _sbInsertSQL.Remove(0, _sbInsertSQL.Length)
                            End Try

                        Catch ex As Exception
                            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to check Existence of Items " & ex.ToString & vbCrLf)
                            Return E_SERVERERROR
                        End Try
                    End If

                End If
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to check Existence of Items " & ex.ToString & vbCrLf)
                Return E_SERVERERROR
            End Try

            Return ATPAR_OK

        End If
    End Function

    Public Function UpdateInventoryItems(ByVal dsUpdateItms As DataSet, ByVal pOldUOM As String, _
                                         ByVal pOldDefltStorloc As String, ByVal pAltStorLoc1 As String, _
                                         ByVal pOldAltStorLoc1 As String, ByVal pAltStorLoc2 As String, _
                                         ByVal pOldAltStorLoc2 As String, ByVal pDeviceTokenEntry() As String) As Long _
                                         Implements IAtpar_WebTrans.UpdateInventoryItems

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sbUpdateSQL As New StringBuilder
        Dim _sbSelectSQL As New StringBuilder
        Dim intCnt As Integer
        Dim _statusCode As Long = -1
        Dim pIntCnt As Integer = 0

        Dim pOrgId As String = dsUpdateItms.Tables(0).Rows(0).Item("ORG_ID").ToString
        Dim pItmId As String = dsUpdateItms.Tables(0).Rows(0).Item("INV_ITEM_ID").ToString
        Dim pUom As String = dsUpdateItms.Tables(0).Rows(0).Item("UOM").ToString
        Dim pDfltStorLoc As String = dsUpdateItms.Tables(0).Rows(0).Item("STOR_LOC").ToString
        Dim pChrgCode As String = dsUpdateItms.Tables(0).Rows(0).Item("CHARGE_CODE").ToString
        Dim pLotId As String = dsUpdateItms.Tables(0).Rows(0).Item("LOT_ID").ToString
        Dim pSerialId As String = dsUpdateItms.Tables(0).Rows(0).Item("SERIAL_ID").ToString
        Dim pQOH As Integer = CInt(dsUpdateItms.Tables(0).Rows(0).Item("QUANTITY_ON_HAND"))
        Dim pReplnType As String = dsUpdateItms.Tables(0).Rows(0).Item("REPLENISHMENT_TYPE").ToString
        Dim pStatus As String = dsUpdateItms.Tables(0).Rows(0).Item("STATUS")

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Dim _strSQL As String = String.Empty

        If pStatus = 1 Then

            Try
                _strSQL = " SELECT COUNT(*) FROM RM_PKPL_DETAILS WHERE BUSINESS_UNIT ='" & pOrgId & "'" & _
                                                          " AND ITEM_ID= '" & pItmId & "'"

                If log.IsDebugEnabled Then log.Debug(methodBaseName & " :Query to get the data from RM_PKPL_DETAILS: " & _strSQL & " : ")

                Dim qryValue As Integer
                qryValue = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(_strSQL))

                If qryValue > 0 Then
                    Return CRCT_S_CANNOTINACTIVATE
                End If

            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                    _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
                Return ATPAR_E_LOCALDBSELECTFAIL
            End Try

        End If

        Try


            If ((pOldUOM <> pUom) And (pOldDefltStorloc <> pDfltStorLoc) And (pOldAltStorLoc1 <> pAltStorLoc1) And (pOldAltStorLoc2 <> pAltStorLoc2)) Then
                If log.IsDebugEnabled Then log.Debug(methodBaseName & ":When all the storage locations and uom are changed:")
                Try
                    _statusCode = CheckItemExistence(pOrgId, pItmId, pUom, pIntCnt, pDfltStorLoc, pAltStorLoc1, pAltStorLoc2)
                    If _statusCode <> ATPAR_OK Then
                        Return E_SERVERERROR
                    Else
                        If pIntCnt = 0 Then
                            _statusCode = UpdateStorLocDtls(dsUpdateItms, pOldDefltStorloc, pDfltStorLoc, pOldUOM)

                            If _statusCode <> ATPAR_OK Then
                                If _statusCode = ATPAR_E_PRIMARYKEYVOILATION Then
                                    Return ATPAR_E_PRIMARYKEYVOILATION
                                Else
                                    Return E_SERVERERROR
                                End If

                            End If
                            _statusCode = UpdateStorLocDtls(dsUpdateItms, pOldAltStorLoc1, pAltStorLoc1, pOldUOM)

                            If _statusCode <> ATPAR_OK Then
                                If _statusCode = ATPAR_E_PRIMARYKEYVOILATION Then
                                    Return ATPAR_E_PRIMARYKEYVOILATION
                                Else
                                    Return E_SERVERERROR
                                End If

                            End If
                            _statusCode = UpdateStorLocDtls(dsUpdateItms, pOldAltStorLoc2, pAltStorLoc2, pOldUOM)

                            If _statusCode <> ATPAR_OK Then
                                If _statusCode = ATPAR_E_PRIMARYKEYVOILATION Then
                                    Return ATPAR_E_PRIMARYKEYVOILATION
                                Else
                                    Return E_SERVERERROR
                                End If

                            End If
                        Else
                            Return ATPAR_E_PRIMARYKEYVOILATION
                        End If
                    End If
                Catch ex As Exception

                End Try
            ElseIf ((pOldUOM <> pUom) And (pOldDefltStorloc <> pDfltStorLoc) And (pOldAltStorLoc1 <> pAltStorLoc1)) Then
                If log.IsDebugEnabled Then log.Debug(methodBaseName & ":When two storage locations and uom are changed :")
                Try
                    _statusCode = CheckItemExistence(pOrgId, pItmId, pUom, pIntCnt, pDfltStorLoc, pAltStorLoc1, String.Empty)
                    If _statusCode <> ATPAR_OK Then
                        Return E_SERVERERROR
                    Else
                        If pIntCnt = 0 Then
                            _statusCode = UpdateStorLocDtls(dsUpdateItms, pOldDefltStorloc, pDfltStorLoc, pOldUOM)

                            If _statusCode <> ATPAR_OK Then
                                If _statusCode = ATPAR_E_PRIMARYKEYVOILATION Then
                                    Return ATPAR_E_PRIMARYKEYVOILATION
                                Else
                                    Return E_SERVERERROR
                                End If

                            End If
                            _statusCode = UpdateStorLocDtls(dsUpdateItms, pOldAltStorLoc1, pAltStorLoc1, pOldUOM)

                            If _statusCode <> ATPAR_OK Then
                                If _statusCode = ATPAR_E_PRIMARYKEYVOILATION Then
                                    Return ATPAR_E_PRIMARYKEYVOILATION
                                Else
                                    Return E_SERVERERROR
                                End If

                            End If
                            _statusCode = UpdateInvItmData(dsUpdateItms, pOldDefltStorloc, pOldUOM, pOldAltStorLoc1, pOldAltStorLoc2)
                            If _statusCode <> ATPAR_OK Then
                                Return E_SERVERERROR
                            End If
                        Else
                            Return ATPAR_E_PRIMARYKEYVOILATION

                        End If

                    End If
                Catch ex As Exception

                End Try
            ElseIf ((pOldUOM <> pUom) And (pOldDefltStorloc <> pDfltStorLoc)) Then
                If log.IsDebugEnabled Then log.Debug(methodBaseName & ":When one storage location and uom are changed :")
                Try
                    _statusCode = CheckItemExistence(pOrgId, pItmId, pUom, pIntCnt, pDfltStorLoc, String.Empty, String.Empty)
                    If _statusCode <> ATPAR_OK Then
                        Return E_SERVERERROR
                    Else
                        If pIntCnt = 0 Then

                            _statusCode = UpdateInvItmData(dsUpdateItms, pOldDefltStorloc, pOldUOM, pOldAltStorLoc1, pOldAltStorLoc2)
                            If _statusCode <> ATPAR_OK Then
                                Return E_SERVERERROR
                            End If
                            _statusCode = UpdateStorLocDtls(dsUpdateItms, pOldDefltStorloc, pDfltStorLoc, pUom)

                            If _statusCode <> ATPAR_OK Then
                                If _statusCode = ATPAR_E_PRIMARYKEYVOILATION Then
                                    Return ATPAR_E_PRIMARYKEYVOILATION
                                Else
                                    Return E_SERVERERROR
                                End If
                            End If

                        Else
                            Return ATPAR_E_PRIMARYKEYVOILATION
                        End If

                    End If
                Catch ex As Exception

                End Try
            ElseIf ((pOldUOM <> pUom) And (pOldAltStorLoc1 <> pAltStorLoc1)) Then
                If log.IsDebugEnabled Then log.Debug(methodBaseName & ":When alternate storage location1 and uom are changed :")
                Try
                    _statusCode = CheckItemExistence(pOrgId, pItmId, pUom, pIntCnt, String.Empty, pAltStorLoc1, String.Empty)
                    If _statusCode <> ATPAR_OK Then
                        Return E_SERVERERROR
                    Else
                        If pIntCnt = 0 Then
                            _statusCode = UpdateInvItmData(dsUpdateItms, pOldDefltStorloc, pOldUOM, pOldAltStorLoc1, pOldAltStorLoc2)
                            If _statusCode <> ATPAR_OK Then
                                Return E_SERVERERROR
                            End If
                            _statusCode = UpdateStorLocDtls(dsUpdateItms, pOldAltStorLoc1, pAltStorLoc1, pUom)

                            If _statusCode <> ATPAR_OK Then
                                If _statusCode = ATPAR_E_PRIMARYKEYVOILATION Then
                                    Return ATPAR_E_PRIMARYKEYVOILATION
                                Else
                                    Return E_SERVERERROR
                                End If

                            End If

                        Else
                            Return ATPAR_E_PRIMARYKEYVOILATION
                        End If

                    End If
                Catch ex As Exception

                End Try
            ElseIf ((pOldUOM <> pUom) And (pOldAltStorLoc2 <> pAltStorLoc2)) Then
                If log.IsDebugEnabled Then log.Debug(methodBaseName & ":When alternate storage location2 and uom are changed :")
                Try
                    _statusCode = CheckItemExistence(pOrgId, pItmId, pUom, pIntCnt, String.Empty, String.Empty, pAltStorLoc2)
                    If _statusCode <> ATPAR_OK Then
                        Return E_SERVERERROR
                    Else
                        If pIntCnt = 0 Then
                            _statusCode = UpdateInvItmData(dsUpdateItms, pOldDefltStorloc, pOldUOM, pOldAltStorLoc1, pOldAltStorLoc2)
                            If _statusCode <> ATPAR_OK Then
                                Return E_SERVERERROR
                            End If
                            _statusCode = UpdateStorLocDtls(dsUpdateItms, pOldAltStorLoc2, pAltStorLoc2, pUom)

                            If _statusCode <> ATPAR_OK Then
                                If _statusCode = ATPAR_E_PRIMARYKEYVOILATION Then
                                    Return ATPAR_E_PRIMARYKEYVOILATION
                                Else
                                    Return E_SERVERERROR
                                End If

                            End If

                        Else
                            Return ATPAR_E_PRIMARYKEYVOILATION
                        End If

                    End If
                Catch ex As Exception

                End Try
            Else
                '''To check for default storage location
                If ((pDfltStorLoc <> String.Empty) And (pOldDefltStorloc <> String.Empty)) Then
                    If log.IsDebugEnabled Then log.Debug(":Checking for Default storage location existence:")
                    If (pOldDefltStorloc <> pDfltStorLoc) Then
                        'Check if Item Existence with same default storage location
                        _statusCode = CheckItemExistence(pOrgId, pItmId, pOldUOM, pIntCnt, pOldDefltStorloc, String.Empty, String.Empty)
                        If _statusCode <> ATPAR_OK Then
                            Return E_SERVERERROR
                        End If
                        If pIntCnt = 1 Then
                            pIntCnt = 0
                            If log.IsDebugEnabled Then log.Debug(":Checking for New Default storage location existence:")
                            'Check if Item Existence with same default storage location with new value
                            _statusCode = CheckItemExistence(pOrgId, pItmId, pUom, pIntCnt, pDfltStorLoc, String.Empty, String.Empty)
                            If _statusCode <> ATPAR_OK Then
                                Return E_SERVERERROR
                            End If
                            If pIntCnt = 0 Then

                                _statusCode = UpdateStorLocDtls(dsUpdateItms, pOldDefltStorloc, pDfltStorLoc, pOldUOM)

                                If _statusCode <> ATPAR_OK Then
                                    If _statusCode = ATPAR_E_PRIMARYKEYVOILATION Then
                                        Return ATPAR_E_PRIMARYKEYVOILATION
                                    Else
                                        Return E_SERVERERROR
                                    End If

                                End If
                            Else
                                Return ATPAR_E_PRIMARYKEYVOILATION
                            End If
                        End If
                    End If

                End If

                '''To check for alternate stroage location1
                'Checking for prev and new values - pOldAltStorLoc1
                If pOldAltStorLoc1 <> String.Empty Then
                    pIntCnt = 0
                    If log.IsDebugEnabled Then log.Debug(":Checking for alternate location1 existence:")
                    'Check if Item Existence with same alternate storage location1
                    _statusCode = CheckItemExistence(pOrgId, pItmId, pOldUOM, pIntCnt, String.Empty, pOldAltStorLoc1, String.Empty)
                    If _statusCode <> ATPAR_OK Then
                        Return E_SERVERERROR
                    End If
                    If pIntCnt = 1 Then

                        If (pAltStorLoc1 <> pOldAltStorLoc1) Then

                            'Update when both values are not empty
                            If ((pAltStorLoc1 <> String.Empty) And (pOldAltStorLoc1 <> String.Empty)) Then
                                If log.IsDebugEnabled Then log.Debug(":Checking for New alternate location1 existence:")
                                pIntCnt = 0
                                'Check if Item Existence with same alternate storage location1
                                _statusCode = CheckItemExistence(pOrgId, pItmId, pUom, pIntCnt, String.Empty, pAltStorLoc1, String.Empty)
                                If _statusCode <> ATPAR_OK Then
                                    If _statusCode = ATPAR_E_PRIMARYKEYVOILATION Then
                                        Return ATPAR_E_PRIMARYKEYVOILATION
                                    Else
                                        Return E_SERVERERROR
                                    End If
                                End If

                                If pIntCnt = 0 Then

                                    _statusCode = UpdateStorLocDtls(dsUpdateItms, pOldAltStorLoc1, pAltStorLoc1, pOldUOM)

                                    If _statusCode <> ATPAR_OK Then
                                        If _statusCode = ATPAR_E_PRIMARYKEYVOILATION Then
                                            Return ATPAR_E_PRIMARYKEYVOILATION
                                        Else
                                            Return E_SERVERERROR
                                        End If
                                    End If
                                Else
                                    Return ATPAR_E_PRIMARYKEYVOILATION
                                End If

                                'Delete record when new value is empty
                            ElseIf ((pAltStorLoc1 = String.Empty) And (pOldAltStorLoc1 <> String.Empty)) Then

                                _statusCode = DelStorLocDtls(dsUpdateItms, pOldAltStorLoc1, pOldUOM)
                                If _statusCode <> ATPAR_OK Then
                                    Return E_SERVERERROR
                                End If
                                'Insert record when new value is not empty and old value is empty
                            End If
                        End If
                    End If

                ElseIf pOldAltStorLoc1 = String.Empty Then
                    If ((pAltStorLoc1 <> String.Empty) And (pOldAltStorLoc1 = String.Empty)) Then
                        pIntCnt = 0
                        If log.IsDebugEnabled Then log.Debug(":Checking for New alternate location1 existence to insert when old value is empty:")

                        'Check if Item Existence with same alternate storage location1
                        _statusCode = CheckItemExistence(pOrgId, pItmId, pUom, pIntCnt, String.Empty, pAltStorLoc1, String.Empty)
                        If _statusCode <> ATPAR_OK Then
                            If _statusCode = ATPAR_E_PRIMARYKEYVOILATION Then
                                Return ATPAR_E_PRIMARYKEYVOILATION
                            Else
                                Return E_SERVERERROR
                            End If
                        End If
                        If pIntCnt = 0 Then
                            _statusCode = InsertStorLocDtls(dsUpdateItms, pAltStorLoc1)
                            If _statusCode <> ATPAR_OK Then

                                Return E_SERVERERROR
                            End If
                        Else
                            Return ATPAR_E_PRIMARYKEYVOILATION
                        End If
                    End If

                End If

                '''To check for alternate stroage location2
                'Checking for prev and new values - pOldAltStorLoc2
                pIntCnt = 0
                'Check if Item Existence with same alternate storage location1
                If pOldAltStorLoc2 <> String.Empty Then

                    If log.IsDebugEnabled Then log.Debug(":Checking for alternate location2 existence:")
                    _statusCode = CheckItemExistence(pOrgId, pItmId, pOldUOM, pIntCnt, String.Empty, String.Empty, pOldAltStorLoc2)
                    If _statusCode <> ATPAR_OK Then
                        Return E_SERVERERROR
                    End If
                    If pIntCnt = 1 Then

                        If (pAltStorLoc2 <> pOldAltStorLoc2) Then
                            'Update when both values are not empty
                            If ((pAltStorLoc2 <> String.Empty) And (pOldAltStorLoc2 <> String.Empty)) Then
                                If log.IsDebugEnabled Then log.Debug(":Checking for New alternate location1 existence:")
                                pIntCnt = 0
                                'Check if Item Existence with same alternate storage location1
                                _statusCode = CheckItemExistence(pOrgId, pItmId, pUom, pIntCnt, String.Empty, String.Empty, pAltStorLoc2)
                                If _statusCode <> ATPAR_OK Then
                                    If _statusCode = ATPAR_E_PRIMARYKEYVOILATION Then
                                        Return ATPAR_E_PRIMARYKEYVOILATION
                                    Else
                                        Return E_SERVERERROR
                                    End If
                                End If
                                If pIntCnt = 0 Then

                                    _statusCode = UpdateStorLocDtls(dsUpdateItms, pOldAltStorLoc2, pAltStorLoc2, pOldUOM)

                                    If _statusCode <> ATPAR_OK Then
                                        If _statusCode = ATPAR_E_PRIMARYKEYVOILATION Then
                                            Return ATPAR_E_PRIMARYKEYVOILATION
                                        Else
                                            Return E_SERVERERROR
                                        End If
                                    End If
                                Else
                                    Return ATPAR_E_PRIMARYKEYVOILATION
                                End If

                                'Delete record when new value is empty
                            ElseIf ((pAltStorLoc2 = String.Empty) And (pOldAltStorLoc2 <> String.Empty)) Then

                                _statusCode = DelStorLocDtls(dsUpdateItms, pOldAltStorLoc2, pOldUOM)
                                If _statusCode <> ATPAR_OK Then
                                    Return E_SERVERERROR
                                End If
                                'Insert record when new value is not empty and old value is empty
                            End If
                        End If
                    End If

                ElseIf pOldAltStorLoc2 = String.Empty Then
                    If ((pAltStorLoc2 <> String.Empty) And (pOldAltStorLoc2 = String.Empty)) Then
                        pIntCnt = 0
                        If log.IsDebugEnabled Then log.Debug(":Checking for New alternate location2 existence to insert when old value is empty:")
                        'Check if Item Existence with same alternate storage location1
                        _statusCode = CheckItemExistence(pOrgId, pItmId, pUom, pIntCnt, String.Empty, String.Empty, pAltStorLoc2)
                        If _statusCode <> ATPAR_OK Then
                            If _statusCode = ATPAR_E_PRIMARYKEYVOILATION Then
                                Return ATPAR_E_PRIMARYKEYVOILATION
                            Else
                                Return E_SERVERERROR
                            End If
                        End If
                        If pIntCnt = 0 Then
                            _statusCode = InsertStorLocDtls(dsUpdateItms, pAltStorLoc2)
                            If _statusCode <> ATPAR_OK Then

                                Return E_SERVERERROR
                            End If
                        Else
                            Return ATPAR_E_PRIMARYKEYVOILATION
                        End If
                    End If
                End If


                'When all the Storage Locations are same :
                If ((pOldDefltStorloc = pDfltStorLoc) And (pOldAltStorLoc1 = pAltStorLoc1) And (pOldAltStorLoc2 = pAltStorLoc2)) Then

                    Dim _recCnt As Integer
                    If (pOldUOM <> pUom) Then

                        pIntCnt = 0
                        If log.IsDebugEnabled Then log.Debug(":Checking for Item existence when all the storage locations are same:")

                        'Check if Item Existence with changed UOM 

                        _statusCode = CheckItemExistence(pOrgId, pItmId, pUom, _recCnt, String.Empty, String.Empty, String.Empty)

                        If _statusCode <> ATPAR_OK Then
                            If _statusCode = ATPAR_E_PRIMARYKEYVOILATION Then
                                Return ATPAR_E_PRIMARYKEYVOILATION
                            Else
                                Return E_SERVERERROR
                            End If
                        End If
                        If _recCnt = 0 Then

                            _statusCode = UpdateInvItmData(dsUpdateItms, pOldDefltStorloc, pOldUOM, pOldAltStorLoc1, pOldAltStorLoc2)
                            If _statusCode <> ATPAR_OK Then
                                Return E_SERVERERROR
                            End If
                        Else
                            Return ATPAR_E_PRIMARYKEYVOILATION
                        End If
                    Else
                        _statusCode = UpdateInvItmData(dsUpdateItms, pOldDefltStorloc, pOldUOM, pOldAltStorLoc1, pOldAltStorLoc2)
                        If _statusCode <> ATPAR_OK Then
                            Return E_SERVERERROR
                        End If
                    End If

                End If
            End If
            Return ATPAR_OK

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                            _sbUpdateSQL.ToString & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)

            Return ATPAR_E_LOCALDBUPDATEFAIL
        End Try
    End Function

    Public Function GetItemDetails(ByVal pOrgId As String, ByVal pOrgGrpId As String, _
                                   ByVal pItmId As String, ByRef dsItmsDtls As DataSet, _
                                   ByVal pDeviceTokenEntry() As String) As Long _
                                   Implements IAtpar_WebTrans.GetItemDetails

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sbSelectSQL As New StringBuilder
        Dim _sbSQL As New StringBuilder
        Dim _strOrgGrpId As String = String.Empty

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            With _sbSQL
                .Append(" SELECT MASTER_GROUP_ID FROM RM_ORG_UNITS ")
                .Append(" WHERE ORG_ID = '" & pOrgId & "' ")
            End With
            _strOrgGrpId = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString))
            If log.IsInfoEnabled Then log.Info(methodBaseName & " :Query to fetch the data from RM_ORG_UNITS: " & _sbSQL.ToString & " : ")
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                            _sbSQL.ToString & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBSELECTFAIL
        End Try

        If _strOrgGrpId = "Select One" Or _strOrgGrpId = String.Empty Then
            _strOrgGrpId = pOrgGrpId
        End If
        If log.IsDebugEnabled Then log.Debug(methodBaseName & " :Value of ORG_GROUP_ID: " & _strOrgGrpId & " : ")

        With _sbSelectSQL
            .Append(" SELECT ITEM_ID, SHORT_DESCR, CHARGE_CODE, REPLENISHMENT_TYPE, UNIT_OF_PROCUREMENT ")
            .Append(" FROM PAR_MNGT_ITEM ")
            .Append(" WHERE ORG_GROUP_ID = '" & _strOrgGrpId & "'  AND STATUS=0 ")
            If Not String.IsNullOrEmpty(pItmId) Then
                .Append(" AND ITEM_ID = '" & pItmId & "' ")
            End If
        End With
        Try
            If log.IsInfoEnabled Then log.Info(methodBaseName & " :Query to fetch the data from PAR_MNGT_ITEM: " & _sbSelectSQL.ToString & " : ")
            dsItmsDtls = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_sbSelectSQL.ToString))

            If dsItmsDtls.Tables(0).Rows.Count = 0 Then
                Return E_NORECORDFOUND
            Else
                Return ATPAR_OK
            End If
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                            _sbSelectSQL.ToString & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBSELECTFAIL
        End Try

    End Function

    Public Function GetOrgBusinessUnits(ByVal pOrgGrpId As String, ByVal pBusinessUnitType As String, _
                                        ByRef psDSBUList As System.Data.DataSet, _
                                        ByVal pDeviceTokenEntry() As String) As Long _
                                        Implements IAtpar_WebTrans.GetOrgBusinessUnits

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _StatusCode As Long
        Dim _sbSelect As New StringBuilder

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        'Condition to check whether butype is inventory or purchasing
        With _sbSelect
            .Append(" SELECT DISTINCT BUSINESS_UNIT FROM MT_ATPAR_ORG_GROUP_BUNITS  ")
            .Append(" WHERE ORG_GROUP_ID  = '" & pOrgGrpId & "' ")
            If pBusinessUnitType = BusinessType.Inventory Then
                _sbSelect.Append("AND BU_TYPE = '" & BU_TYPE_INVENTORY & "' ")
            End If
        End With

        If log.IsInfoEnabled Then log.Info(_sbSelect.ToString())

        Try
            psDSBUList = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_sbSelect.ToString))
            If psDSBUList.Tables(0).Rows.Count = 0 Then
                Return E_NORECORDFOUND
            Else
                Return ATPAR_OK
            End If


        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                            _sbSelect.ToString & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBSELECTFAIL
        End Try

        Return ATPAR_OK
    End Function

    Public Function UpdateOrgItemStatus(ByVal pOrgId As String, ByVal pItemId As String, ByVal pUom As String, _
                                        ByVal pDfltStorLoc As String, ByVal pAltStorLoc1 As String, _
                                        ByVal pAltStorLoc2 As String, ByVal pStatus As String, _
                                        ByVal pDeviceTokenEntry() As String) As Long _
                                        Implements IAtpar_WebTrans.UpdateOrgItemStatus

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _statusCode As Long = -1

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        'To Check if Item of a particular BUnit is part of open Pick Plan
        Dim _strSQL As String
        If pStatus = 1 Then
            _strSQL = " SELECT COUNT(*) FROM RM_PKPL_DETAILS WHERE BUSINESS_UNIT ='" & pOrgId & "'" & _
                                                      " AND ITEM_ID= '" & pItemId & "'"

            If log.IsDebugEnabled Then log.Debug(methodBaseName & " :Query to get the data from RM_PKPL_DETAILS: " & _strSQL & " : ")

            Try
                Dim qryValue As Integer
                qryValue = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(_strSQL))

                If qryValue > 0 Then
                    Return CRCT_S_CANNOTINACTIVATE
                End If

            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                    _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
                Return ATPAR_E_LOCALDBSELECTFAIL
            End Try
        End If

        Try
            _statusCode = ChangeStatus(pOrgId, pItemId, pUom, pDfltStorLoc, pStatus)
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ":Failed to change the status with an exception:" & "Exception is : " & ex.ToString & vbCrLf)
            Return E_SERVERERROR
        End Try

        If pAltStorLoc1 <> String.Empty Then
            Try
                _statusCode = ChangeStatus(pOrgId, pItemId, pUom, pAltStorLoc1, pStatus)
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & ":Failed to change the status with an exception:" & "Exception is : " & ex.ToString & vbCrLf)
                Return E_SERVERERROR
            End Try

        End If
        If pAltStorLoc2 <> String.Empty Then
            Try
                _statusCode = ChangeStatus(pOrgId, pItemId, pUom, pAltStorLoc2, pStatus)
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & ":Failed to change the status with an exception:" & "Exception is : " & ex.ToString & vbCrLf)
                Return E_SERVERERROR
            End Try

        End If
    End Function

    Public Function CheckItemExistence(ByVal pOrgId As String, _
                                       ByVal pItmId As String, ByVal pUOM As String, ByRef pIntCnt As Integer, _
                                       ByVal pDfltStorLoc As String, ByVal pAltStorLoc1 As String, ByVal pAltStorLoc2 As String) As Long
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sbSelectSQL As New StringBuilder
        Dim intCnt As Integer
        'Check if INV_ITEM_ID already Exists
        Try
            With _sbSelectSQL
                .Append(" SELECT COUNT(INV_ITEM_ID) FROM MT_ATPAR_PHYSICAL_INVENTORY WHERE ")
                .Append(" ORG_ID='" & pOrgId & "' AND INV_ITEM_ID='" & pItmId & "' ")
                If pUOM <> String.Empty Then
                    .Append(" AND UOM = '" & pUOM & "' ")
                End If


                If pDfltStorLoc <> String.Empty Then
                    .Append("  AND STOR_LOC IN ('" & pDfltStorLoc & "' ")
                End If

                If ((pDfltStorLoc <> String.Empty) And (pAltStorLoc1 <> String.Empty)) Then
                    .Append(" , '" & pAltStorLoc1 & "' ")
                ElseIf ((pDfltStorLoc = String.Empty) And (pAltStorLoc1 <> String.Empty)) Then
                    .Append("  AND STOR_LOC IN ('" & pAltStorLoc1 & "' ")
                End If


                If ((pDfltStorLoc <> String.Empty) And (pAltStorLoc1 <> String.Empty) And (pAltStorLoc2 <> String.Empty)) Then
                    .Append(" , '" & pAltStorLoc2 & "') ")
                ElseIf ((pDfltStorLoc = String.Empty) And (pAltStorLoc1 <> String.Empty) And (pAltStorLoc2 <> String.Empty)) Then
                    .Append(" , '" & pAltStorLoc2 & "') ")
                ElseIf ((pDfltStorLoc <> String.Empty) And (pAltStorLoc1 = String.Empty) And (pAltStorLoc2 <> String.Empty)) Then
                    .Append(" , '" & pAltStorLoc2 & "' )")
                ElseIf ((pDfltStorLoc = String.Empty) And (pAltStorLoc1 = String.Empty) And (pAltStorLoc2 <> String.Empty)) Then
                    .Append("  AND STOR_LOC IN ('" & pAltStorLoc2 & "' )")
                ElseIf ((pDfltStorLoc <> String.Empty) And (pAltStorLoc1 = String.Empty) And (pAltStorLoc2 = String.Empty)) Then
                    .Append(" )")
                ElseIf ((pDfltStorLoc <> String.Empty) And (pAltStorLoc1 <> String.Empty) And (pAltStorLoc2 = String.Empty)) Then
                    .Append(" )")
                ElseIf ((pDfltStorLoc = String.Empty) And (pAltStorLoc1 <> String.Empty) And (pAltStorLoc2 = String.Empty)) Then
                    .Append(" )")
                End If



            End With

            If log.IsInfoEnabled Then log.Info(methodBaseName & ":Query to find the duplicates if exists:" & _sbSelectSQL.ToString)
            pIntCnt = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(_sbSelectSQL.ToString))

            Return ATPAR_OK
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                        _sbSelectSQL.ToString & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBSELECTFAIL
        Finally
            _sbSelectSQL.Remove(0, _sbSelectSQL.Length)
        End Try

    End Function

    'To update the Item Details
    Public Function UpdateStorLocDtls(ByVal dsUpdateItms As DataSet, ByVal pOldStorLoc As String, _
                                      ByVal pNewStorLoc As String, ByVal pOldUOM As String) As Long

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)



        Dim pOrgId As String = dsUpdateItms.Tables(0).Rows(0).Item("ORG_ID").ToString
        Dim pItmId As String = dsUpdateItms.Tables(0).Rows(0).Item("INV_ITEM_ID").ToString
        Dim pUom As String = dsUpdateItms.Tables(0).Rows(0).Item("UOM").ToString
        Dim pChrgCode As String = dsUpdateItms.Tables(0).Rows(0).Item("CHARGE_CODE").ToString
        Dim pLotId As String = dsUpdateItms.Tables(0).Rows(0).Item("LOT_ID").ToString
        Dim pSerialId As String = dsUpdateItms.Tables(0).Rows(0).Item("SERIAL_ID").ToString
        Dim pQOH As Integer = CInt(dsUpdateItms.Tables(0).Rows(0).Item("QUANTITY_ON_HAND"))
        Dim pReplnType As String = dsUpdateItms.Tables(0).Rows(0).Item("REPLENISHMENT_TYPE").ToString
        Dim pStatus As String = dsUpdateItms.Tables(0).Rows(0).Item("STATUS")
        Dim _sbUpdateSQL As New StringBuilder
        Try

            'Update Item Details
            With _sbUpdateSQL
                .Append(" UPDATE MT_ATPAR_PHYSICAL_INVENTORY SET UOM= '" & pUom & "', STOR_LOC= '" & pNewStorLoc & "',")
                .Append(" CHARGE_CODE= '" & pChrgCode & "', LOT_ID= '" & pLotId & "', ")
                .Append(" SERIAL_ID= '" & pSerialId & "', QUANTITY_ON_HAND= " & pQOH & ", LAST_UPDATE_DATE= '" & Now() & "', ")
                .Append(" REPLENISHMENT_TYPE= '" & pReplnType & "', STATUS= '" & pStatus & "' ")
                .Append(" WHERE ORG_ID= '" & pOrgId & "' AND INV_ITEM_ID= '" & pItmId & "'")
                .Append(" AND UOM= '" & pOldUOM & "' ")
                .Append(" AND STOR_LOC = '" & pOldStorLoc & "' ")

            End With
            Try
                If log.IsInfoEnabled Then log.Info(methodBaseName & " :Query to update the data from MT_ATPAR_PHYSICAL_INVENTORY: " & _sbUpdateSQL.ToString & " : ")
                m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_sbUpdateSQL.ToString))
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                    _sbUpdateSQL.ToString & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
                Return ATPAR_E_LOCALDBUPDATEFAIL
            Finally
                _sbUpdateSQL.Remove(0, _sbUpdateSQL.Length)
            End Try
            Return ATPAR_OK
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to update Item storage location data: " & ex.ToString & vbCrLf)
            Return E_SERVERERROR
        End Try
    End Function

    '''To delete the Storage Location details
    Public Function DelStorLocDtls(ByVal dsUpdateItms As DataSet, ByVal pOldStorLoc As String, ByVal pOldUOM As String) As Long

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)


        Dim pOrgId As String = dsUpdateItms.Tables(0).Rows(0).Item("ORG_ID").ToString
        Dim pItmId As String = dsUpdateItms.Tables(0).Rows(0).Item("INV_ITEM_ID").ToString
        Dim pUom As String = dsUpdateItms.Tables(0).Rows(0).Item("UOM").ToString
        Dim pChrgCode As String = dsUpdateItms.Tables(0).Rows(0).Item("CHARGE_CODE").ToString
        Dim pLotId As String = dsUpdateItms.Tables(0).Rows(0).Item("LOT_ID").ToString
        Dim pSerialId As String = dsUpdateItms.Tables(0).Rows(0).Item("SERIAL_ID").ToString
        Dim pQOH As Integer = CInt(dsUpdateItms.Tables(0).Rows(0).Item("QUANTITY_ON_HAND"))
        Dim pReplnType As String = dsUpdateItms.Tables(0).Rows(0).Item("REPLENISHMENT_TYPE").ToString
        Dim pStatus As String = dsUpdateItms.Tables(0).Rows(0).Item("STATUS")
        Dim _sbDelSQL As New StringBuilder
        Try
            With _sbDelSQL
                .Append(" DELETE FROM MT_ATPAR_PHYSICAL_INVENTORY  ")
                .Append(" WHERE ORG_ID= '" & pOrgId & "' AND INV_ITEM_ID= '" & pItmId & "' ")
                .Append(" AND UOM= '" & pOldUOM & "' ")
                .Append(" AND STOR_LOC = '" & pOldStorLoc & "' ")

            End With

            Try
                If log.IsInfoEnabled Then log.Info(methodBaseName & " :Query to delete the data from MT_ATPAR_PHYSICAL_INVENTORY: " & _sbDelSQL.ToString & " : ")
                m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_sbDelSQL.ToString))
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                    _sbDelSQL.ToString & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
                Return ATPAR_E_LOCALDBDELETEFAIL
            Finally
                _sbDelSQL.Remove(0, _sbDelSQL.Length)
            End Try
            Return ATPAR_OK
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to delete Item  with an exception: " & ex.ToString & vbCrLf)
            Return E_SERVERERROR
        End Try
    End Function

    'To insert new values for the storlocation
    Public Function InsertStorLocDtls(ByVal dsUpdateItms As DataSet, ByVal pStorLoc As String) As Long

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)



        Dim _sbInsertSQL As New StringBuilder
        Dim pOrgId As String = dsUpdateItms.Tables(0).Rows(0).Item("ORG_ID").ToString
        Dim pItmId As String = dsUpdateItms.Tables(0).Rows(0).Item("INV_ITEM_ID").ToString
        Dim pUom As String = dsUpdateItms.Tables(0).Rows(0).Item("UOM").ToString
        Dim pChrgCode As String = dsUpdateItms.Tables(0).Rows(0).Item("CHARGE_CODE").ToString
        Dim pLotId As String = dsUpdateItms.Tables(0).Rows(0).Item("LOT_ID").ToString
        Dim pSerialId As String = dsUpdateItms.Tables(0).Rows(0).Item("SERIAL_ID").ToString
        Dim pQOH As Integer = CInt(dsUpdateItms.Tables(0).Rows(0).Item("QUANTITY_ON_HAND"))
        Dim pReplnType As String = dsUpdateItms.Tables(0).Rows(0).Item("REPLENISHMENT_TYPE").ToString
        Dim pStatus As String = dsUpdateItms.Tables(0).Rows(0).Item("STATUS")
        Dim _sbDelSQL As New StringBuilder
        Try
            'Insert Item Details
            With _sbInsertSQL
                .Append(" INSERT INTO MT_ATPAR_PHYSICAL_INVENTORY(ORG_ID, INV_ITEM_ID, UOM, STOR_LOC, ")
                .Append(" DEFAULT_LOC_FLAG, CHARGE_CODE,LOT_ID, SERIAL_ID, ")
                .Append(" QUANTITY_ON_HAND, LAST_UPDATE_DATE, REPLENISHMENT_TYPE, STATUS) ")
                .Append(" VALUES('" & pOrgId & "','" & pItmId & "','" & pUom & "', '" & pStorLoc & "','N',")
                .Append(" '" & pChrgCode & "', '" & pLotId & "',")
                .Append(" '" & pSerialId & "'," & pQOH & ",'" & Now() & "', ")
                .Append(" '" & pReplnType & "','" & pStatus & "')")
            End With

            Try
                If log.IsInfoEnabled Then log.Info(methodBaseName & " : Query to insert the data in to MT_ATPAR_PHYSICAL_INVENTORY:" & _sbInsertSQL.ToString & " : ")
                m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_sbInsertSQL.ToString))
                Return ATPAR_OK
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                            _sbInsertSQL.ToString & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
                Return ATPAR_E_LOCALDBINSERTFAIL
            Finally
                _sbInsertSQL.Remove(0, _sbInsertSQL.Length)
            End Try

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to insert Item with an exception: " & ex.ToString & vbCrLf)
            Return E_SERVERERROR
        End Try
    End Function

    'To change the status of the Item
    Public Function ChangeStatus(ByVal pOrgId As String, ByVal pItemId As String, ByVal pUom As String, _
                                 ByVal pDfltStorLoc As String, ByVal pStatus As String) As Long
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sbUpdateSQL As New StringBuilder
        Try

            With _sbUpdateSQL
                .Append(" UPDATE MT_ATPAR_PHYSICAL_INVENTORY SET STATUS= '" & pStatus & "'")
                .Append(" WHERE ORG_ID= '" & pOrgId & "' AND INV_ITEM_ID= '" & pItemId & "'")
                .Append(" AND UOM= '" & pUom & "' AND STOR_LOC= '" & pDfltStorLoc & "'")
            End With
            Try
                If log.IsInfoEnabled Then log.Info(methodBaseName & " :Query to update the data from MT_ATPAR_PHYSICAL_INVENTORY: " & _sbUpdateSQL.ToString & " : ")
                m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_sbUpdateSQL.ToString))
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                    _sbUpdateSQL.ToString & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)

                Return ATPAR_E_LOCALDBUPDATEFAIL
            End Try

            Return ATPAR_OK
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                            _sbUpdateSQL.ToString & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)

            Return ATPAR_E_LOCALDBUPDATEFAIL
        End Try

    End Function

    Public Function GetExistingItemDetails(ByVal pOrgId As String, ByVal pOrgGrpId As String, _
                                           ByRef pDsFinalData As DataSet, _
                                           ByVal pItmId As String, _
                                           ByVal pDeviceTokenEntry() As String) As Long _
                                           Implements IAtpar_WebTrans.GetExistingItemDetails

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sbSelectSQL As New StringBuilder
        Dim _dsDistctRec As DataSet
        Dim i As Integer
        Dim _sbSelSQL As New StringBuilder
        Dim _dsFinalData As DataSet
        Dim _intLoopCnt As Integer = 0
        Dim _strSearch As String = String.Empty

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try

            Dim _retTbl As DataTable
            Dim _retRow As DataRow


            'adding Columns to datatable
            _retTbl = Nothing
            _retTbl = New DataTable
            _retTbl.Columns.Add("ORG_ID", Type.GetType("System.String"))
            _retTbl.Columns.Add("INV_ITEM_ID", Type.GetType("System.String"))
            _retTbl.Columns.Add("SHORT_DESCR", Type.GetType("System.String"))
            _retTbl.Columns.Add("UOM", Type.GetType("System.String"))
            _retTbl.Columns.Add("STOR_LOC", Type.GetType("System.String"))
            _retTbl.Columns.Add("ALT_STOR_LOC1", Type.GetType("System.String"))
            _retTbl.Columns.Add("ALT_STOR_LOC2", Type.GetType("System.String"))
            _retTbl.Columns.Add("CHARGE_CODE", Type.GetType("System.String"))
            _retTbl.Columns.Add("LOT_ID", Type.GetType("System.String"))
            _retTbl.Columns.Add("SERIAL_ID", Type.GetType("System.String"))
            _retTbl.Columns.Add("QUANTITY_ON_HAND")
            _retTbl.Columns.Add("REPLENISHMENT_TYPE", Type.GetType("System.String"))
            _retTbl.Columns.Add("STATUS", Type.GetType("System.String"))
            _dsFinalData = New DataSet
            _sbSelSQL = Nothing
            _sbSelSQL = New StringBuilder

            With _sbSelSQL
                .Append(" SELECT DISTINCT MAPI.*, PMI.SHORT_DESCR FROM  ")
                .Append(" MT_ATPAR_PHYSICAL_INVENTORY MAPI , ")
                .Append(" PAR_MNGT_ITEM PMI , ")
                .Append(" RM_ORG_UNITS ROU ")
                .Append(" WHERE MAPI.ORG_ID = '" & pOrgId & "' AND ")
                If pItmId <> String.Empty Then
                    .Append(" MAPI.INV_ITEM_ID = '" & pItmId & "'  AND ")
                End If
                .Append(" PMI.ORG_GROUP_ID = (SELECT MASTER_GROUP_ID  ")
                .Append(" FROM RM_ORG_UNITS WHERE ORG_ID = '" & pOrgId & "' AND ORG_TYPE='I' )")
                .Append(" AND MAPI.INV_ITEM_ID = PMI.ITEM_ID AND ")
                .Append(" PMI.ORG_GROUP_ID = ROU.MASTER_GROUP_ID ")
                .Append(" ORDER BY MAPI.UOM ")
            End With

            Try
                If log.IsInfoEnabled Then log.Info(methodBaseName & " :Query to fetch the data from MT_ATPAR_PHYSICAL_INVENTORY: " & _sbSelSQL.ToString & " : ")
                _dsFinalData = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_sbSelSQL.ToString))

            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                _sbSelSQL.ToString & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)

                Return ATPAR_E_LOCALDBSELECTFAIL

            Finally
                _sbSelSQL.Remove(0, _sbSelSQL.Length)

            End Try

            If _dsFinalData.Tables(0).Rows.Count > 0 Then
                For _intCnt As Integer = 0 To _dsFinalData.Tables(0).Rows.Count - 1


                    If _dsFinalData.Tables(0).Rows(_intCnt).Item("DEFAULT_LOC_FLAG").ToString = "Y" Then

                        _retRow = _retTbl.NewRow()
                        _retRow("STOR_LOC") = _dsFinalData.Tables(0).Rows(_intCnt).Item("STOR_LOC")
                        _retRow("ORG_ID") = _dsFinalData.Tables(0).Rows(_intCnt).Item("ORG_ID")
                        _retRow("INV_ITEM_ID") = _dsFinalData.Tables(0).Rows(_intCnt).Item("INV_ITEM_ID")
                        _retRow("SHORT_DESCR") = _dsFinalData.Tables(0).Rows(_intCnt).Item("SHORT_DESCR")
                        _retRow("UOM") = _dsFinalData.Tables(0).Rows(_intCnt).Item("UOM")
                        _retRow("CHARGE_CODE") = _dsFinalData.Tables(0).Rows(_intCnt).Item("CHARGE_CODE")
                        _retRow("LOT_ID") = _dsFinalData.Tables(0).Rows(_intCnt).Item("LOT_ID")
                        _retRow("SERIAL_ID") = _dsFinalData.Tables(0).Rows(_intCnt).Item("SERIAL_ID")
                        _retRow("QUANTITY_ON_HAND") = _dsFinalData.Tables(0).Rows(_intCnt).Item("QUANTITY_ON_HAND")
                        _retRow("REPLENISHMENT_TYPE") = _dsFinalData.Tables(0).Rows(_intCnt).Item("REPLENISHMENT_TYPE")
                        _retRow("STATUS") = _dsFinalData.Tables(0).Rows(_intCnt).Item("STATUS")
                        _intLoopCnt = 0
                        _strSearch = String.Empty
                        _strSearch = "ORG_ID = '" & _dsFinalData.Tables(0).Rows(_intCnt).Item("ORG_ID") & "' AND INV_ITEM_ID = '" & _dsFinalData.Tables(0).Rows(_intCnt).Item("INV_ITEM_ID") & "' AND UOM= '" & _dsFinalData.Tables(0).Rows(_intCnt).Item("UOM") & "' AND DEFAULT_LOC_FLAG= 'N' "
                        Dim dr() As DataRow
                        dr = _dsFinalData.Tables(0).Select(_strSearch)
                        If dr.Length > 0 Then
                            If (dr.Length = 1) Then
                                If (dr(0).Item("DEFAULT_LOC_FLAG").ToString = "N") Then
                                    _retRow("ALT_STOR_LOC1") = dr(0).Item("STOR_LOC")
                                End If
                            ElseIf dr.Length = 2 Then
                                If (dr(1).Item("DEFAULT_LOC_FLAG").ToString = "N") Then
                                    _retRow("ALT_STOR_LOC2") = dr(1).Item("STOR_LOC")
                                    _retRow("ALT_STOR_LOC1") = dr(0).Item("STOR_LOC")
                                End If
                            End If
                        End If
                        _retTbl.Rows.Add(_retRow)
                    End If


                Next


            Else
                Return E_NORECORDFOUND
            End If


            pDsFinalData.Tables.Add(_retTbl)
            Return ATPAR_OK

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to Get Existing Item data " & ex.ToString & vbCrLf)
            Return E_SERVERERROR
        End Try
    End Function

    'To update the Inventory table other than the storage location fields
    Public Function UpdateInvItmData(ByVal dsUpdateItms As DataSet, ByVal pOldStorLoc As String, _
                                     ByVal pOldUOM As String, ByVal pOldAltStorLoc1 As String, ByVal pOldAltStorLoc2 As String) As Long

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)



        Dim pOrgId As String = dsUpdateItms.Tables(0).Rows(0).Item("ORG_ID").ToString
        Dim pItmId As String = dsUpdateItms.Tables(0).Rows(0).Item("INV_ITEM_ID").ToString
        Dim pUom As String = dsUpdateItms.Tables(0).Rows(0).Item("UOM").ToString
        Dim pChrgCode As String = dsUpdateItms.Tables(0).Rows(0).Item("CHARGE_CODE").ToString
        Dim pLotId As String = dsUpdateItms.Tables(0).Rows(0).Item("LOT_ID").ToString
        Dim pSerialId As String = dsUpdateItms.Tables(0).Rows(0).Item("SERIAL_ID").ToString
        Dim pQOH As Integer = CInt(dsUpdateItms.Tables(0).Rows(0).Item("QUANTITY_ON_HAND"))
        Dim pReplnType As String = dsUpdateItms.Tables(0).Rows(0).Item("REPLENISHMENT_TYPE").ToString
        Dim pStatus As String = dsUpdateItms.Tables(0).Rows(0).Item("STATUS")
        Dim _sbUpdateSQL As New StringBuilder
        Try

            'Update Item Details
            With _sbUpdateSQL
                .Append(" UPDATE MT_ATPAR_PHYSICAL_INVENTORY SET ")
                .Append(" LAST_UPDATE_DATE= '" & Now() & "', ")
                .Append(" UOM= '" & pUom & "' ,")
                If (pChrgCode <> String.Empty) Then
                    .Append(" CHARGE_CODE= '" & pChrgCode & "',")
                End If
                If ((pQOH <> 0) And (pQOH > 0)) Then
                    .Append(" QUANTITY_ON_HAND= '" & pQOH & "',")
                End If
                If (pReplnType <> String.Empty) Then
                    .Append(" REPLENISHMENT_TYPE= '" & pReplnType & "',")
                End If
                If (pStatus <> String.Empty) Then
                    .Append("  STATUS= '" & pStatus & "' ")
                End If
                .Append(" WHERE ORG_ID= '" & pOrgId & "' AND INV_ITEM_ID= '" & pItmId & "' AND UOM = '" & pOldUOM & "' ")
                .Append(" AND STOR_LOC IN ('" & pOldStorLoc & "'")
                If (pOldAltStorLoc1 <> String.Empty) Then
                    .Append(" , '" & pOldAltStorLoc1 & "' ")
                End If
                If (pOldAltStorLoc2 <> String.Empty) Then
                    .Append(" , '" & pOldAltStorLoc2 & "' ")
                End If
                .Append(" )")

            End With
            Try
                If log.IsInfoEnabled Then log.Info(methodBaseName & " :Query to update the data from MT_ATPAR_PHYSICAL_INVENTORY: " & _sbUpdateSQL.ToString & " : ")
                m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_sbUpdateSQL.ToString))
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " :Failed to execute SQL... " & _
                                                    _sbUpdateSQL.ToString & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
                Return ATPAR_E_LOCALDBUPDATEFAIL
            Finally
                _sbUpdateSQL.Remove(0, _sbUpdateSQL.Length)
            End Try
            Return ATPAR_OK
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " : Failed to update the Item data  with an exception:  " & ex.ToString & vbCrLf)
            Return E_SERVERERROR
        End Try
    End Function

#End Region


#Region " Configuration Related "

    ''' <summary>
    ''' To get Configuration Details
    ''' </summary> 
    ''' <param name="pSystemId">System Id</param>
    ''' <param name="pDsConfigDetails">Configuration Details as Dataset</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function GetConfigurationDetails(ByVal pSystemId As String, _
                                     ByRef pDsConfigDetails As DataSet, _
                                     ByVal pDeviceTokenEntry() As String) As Long _
                                     Implements IAtpar_WebTrans.GetConfigurationDetails

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sbSQL As New StringBuilder

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            _sbSQL.Append(" SELECT TAB_ID, PARAMETER_ID, FRIENDLY_NAME, DESCRIPTION, TYPE, VALIDATION_RULES, ")
            _sbSQL.Append(" DEFAULT_VALUE, PARAMETER_VALUE, TOOL_TIP_INFO, VALID_FOR_ERP, DISPLAY_FLAG, DISPLAY_ORDER ")
            _sbSQL.Append(" FROM MT_ATPAR_CONFIGURATION_SECTION_DTLS ORDER BY ")
            _sbSQL.Append(" TAB_ID,DISPLAY_ORDER;")
            _sbSQL.Append("SELECT ENTERPRISE_SYSTEM,TYPE,ENTERPRISE_VERSION,DOWNLOAD_FROM,UPLOAD_TO from MT_ATPAR_ENTERPRISE_SYSTEM_DETAILS ORDER BY ENTERPRISE_SYSTEM")

            If log.IsInfoEnabled Then log.Info(methodBaseName & " to get the configuration detais of the SystemId" & _
                                                ": " & pSystemId & " with the following SQL....." & vbCrLf & _sbSQL.ToString & vbCrLf)


            pDsConfigDetails = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString))


            ' Updates the Middle Tier database details in pDsConfigDetails dataset from the Master Table

            UpdateMTConfigDetailsFromMaster(pDsConfigDetails, pDeviceTokenEntry(TokenEntry_Enum.SystemId))

            If pDsConfigDetails.Tables.Count > 0 Then
                If pDsConfigDetails.Tables(0).Rows.Count = 0 Then
                    Return E_NORECORDFOUND
                End If
            End If
            Return ATPAR_OK
        Catch ex As SqlException
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                _sbSQL.ToString & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBSELECTFAIL
        End Try

    End Function

    Private Function UpdateMTConfigDetailsFromMaster(ByRef pDsConfigDetails As DataSet, ByVal pSystemID As String) As Long
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strFilter As String = String.Empty
        Dim _StatusCode As Long
        Try
            Dim pDsMiddleTierDetails As DataSet
            'Dim objAuthServ = New AtPar_AuthServices
            '_StatusCode = objAuthServ.GetSystemIDs(pDsMiddleTierDetails, pSystemID)

            If _StatusCode = ATPAR_OK Then
                Try
                    _strFilter = "TAB_ID='" & ConfigurationManager_Tabs.SYSTEMDBCONNECTION.ToString & "' AND PARAMETER_ID = "
                    Dim _drRow() As Data.DataRow

                    _drRow = pDsConfigDetails.Tables(0).Select(_strFilter & "'DATASOURCE'")
                    _drRow(0).Item("PARAMETER_VALUE") = pDsMiddleTierDetails.Tables(0).Rows(0)("DATASOURCE").ToString()

                    _drRow = pDsConfigDetails.Tables(0).Select(_strFilter & "'USERID'")
                    _drRow(0).Item("PARAMETER_VALUE") = pDsMiddleTierDetails.Tables(0).Rows(0)("USERID").ToString()

                    _drRow = pDsConfigDetails.Tables(0).Select(_strFilter & "'PASSWORD'")
                    _drRow(0).Item("PARAMETER_VALUE") = pDsMiddleTierDetails.Tables(0).Rows(0)("PASSWORD").ToString()

                    _drRow = pDsConfigDetails.Tables(0).Select(_strFilter & "'SERVER'")
                    _drRow(0).Item("PARAMETER_VALUE") = pDsMiddleTierDetails.Tables(0).Rows(0)("SERVER").ToString()

                    Return ATPAR_OK

                Catch ex As SqlException
                    If log.IsFatalEnabled Then log.Fatal("Failed to get the Middle Tier database details " & ex.ToString)
                    Return E_SERVERERROR
                End Try
            End If
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Failed to get the Middle Tier database details " & ex.ToString)
            _StatusCode = E_SERVERERROR
        End Try
        Return _StatusCode
    End Function

    ''' <summary>
    ''' To Save Configuration Details
    ''' </summary> 
    ''' <param name="pSystemId">System Id</param>
    ''' <param name="pUserId">User Id</param>
    ''' <param name="pDSSavedConfigurationDetails">Configuration Details as Dataset</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function SaveConfigurationDetails(ByVal pSystemId As String, ByVal pUserId As String, _
                                             ByVal pDSSavedConfigurationDetails As DataSet, _
                                             ByVal pDeviceTokenEntry() As String) As Long _
                                             Implements IAtpar_WebTrans.SaveConfigurationDetails

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sbSQL As New StringBuilder
        Dim _strSQL As String
        Dim _mtStatus As Long
        Dim _logStatus As Long
        Dim _ConfigStatus As Long
        Dim trans As SqlTransaction

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            sqlConnect = m_LocalDB.CreateConnection()
            sqlConnect.Open()
            trans = sqlConnect.BeginTransaction()

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Exception thrown while connecting to database is... " & ex.ToString)
            Return E_SERVERERROR
        End Try

        Try
            If pDSSavedConfigurationDetails.Tables(0).Rows.Count > 0 Then

                Try
                    _strSQL = "UPDATE MT_ATPAR_CONFIGURATION_SECTION_DTLS SET PARAMETER_VALUE=Null WHERE DISPLAY_FLAG='Y' "
                    If log.IsInfoEnabled Then log.Info(methodBaseName & "Executing the query : " & _strSQL)
                    m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), trans)
                Catch ex As Exception
                    trans.Rollback()
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & " call failed while Updating, and the Exception thrown is ... " & ex.ToString & _
                                                                                                        vbCrLf & " with the executed SQL.. " & _strSQL.ToString)
                    Return ATPAR_E_LOCALDBINSERTFAIL
                End Try

                For i As Int32 = 0 To pDSSavedConfigurationDetails.Tables(0).Rows.Count - 1

                    With _sbSQL
                        .Append("UPDATE MT_ATPAR_CONFIGURATION_SECTION_DTLS ")
                        .Append("SET PARAMETER_VALUE='" & pDSSavedConfigurationDetails.Tables(0).Rows(i).Item("PARAMETER_VALUE").ToString().TrimEnd() & "' ")
                        '.Append("WHERE SYSTEM_ID='" & pSystemId.TrimEnd() & "' ")
                        .Append("WHERE ")
                        .Append(" TAB_ID='" & pDSSavedConfigurationDetails.Tables(0).Rows(i).Item("TAB_ID").ToString().TrimEnd() & "' ")
                        .Append("AND PARAMETER_ID='" & pDSSavedConfigurationDetails.Tables(0).Rows(i).Item("PARAMETER_ID").ToString().TrimEnd() & "' ")
                    End With
                    If log.IsInfoEnabled Then log.Info(methodBaseName & "Executing the query : " & _sbSQL.ToString())
                    Try
                        m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString), trans)
                        _sbSQL.Remove(0, _sbSQL.Length)
                    Catch ex As SqlException
                        trans.Rollback()
                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " call failed while Updating, and the Exception thrown is ... " & ex.ToString & _
                                                                                                            vbCrLf & " with the executed SQL.. " & _sbSQL.ToString)
                        If ex.Number = 2627 Then
                            Return ATPAR_E_PRIMARYKEYVOILATION
                        End If
                    Catch ex As Exception
                        trans.Rollback()
                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " call failed while Updating, and the Exception thrown is ... " & ex.ToString & _
                                                                                                            vbCrLf & " with the executed SQL.. " & _sbSQL.ToString)
                        Return ATPAR_E_LOCALDBINSERTFAIL
                    End Try
                Next


                Try
                    _mtStatus = SaveMTConfigurationDetailsToSystemDB(pSystemId, pUserId, pDSSavedConfigurationDetails)
                    If (_mtStatus = ATPAR_OK) Then
                        _logStatus = SaveConfigurationDetailsToLogFiles(pUserId, pDSSavedConfigurationDetails, pDeviceTokenEntry)
                    Else
                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & "Exception thrown while saving Local DataBase details..")
                        Return _mtStatus
                    End If
                Catch ex As Exception
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & "Exception thrown while saving configuration details is.." & ex.ToString)
                    Return E_SERVERERROR
                End Try


                If (_mtStatus = ATPAR_OK And _logStatus = ATPAR_OK) Then
                    trans.Commit()

                    Dim objAtparBr As New AtParConfigFileReader

                    _ConfigStatus = objAtparBr.GetSystemConfigurationData(pSystemId, True)

                    If (_ConfigStatus = ATPAR_OK) Then
                    Else
                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & "Exception thrown while Geting Updated data into Cache..")
                        Return _ConfigStatus
                    End If

                    br_AtParUtilities = New AtPar_BusinessRules.Utilities
                    br_AtParUtilities.InitializeAtParSystem()

                    ''If _Con

                Else
                    trans.Rollback()
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & "Exception thrown while saving configuration details ")
                    Return _logStatus
                End If

            End If
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in " & methodBaseName & " is..." & ex.ToString)
            trans.Rollback()
            Return ATPAR_E_LOCALDBINSERTFAIL
        Finally
            sqlConnect.close()
            _sbSQL = Nothing
        End Try
    End Function

    ''' <summary>
    ''' To Save Atpar Database Details in Configuration Screen
    ''' </summary> 
    ''' <param name="pSystemId">System Id</param>
    ''' <param name="pUserId">User Id</param>
    ''' <param name="pDSSavedConfigurationDetails">Configuration Details as Dataset</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>

    Private Function SaveMTConfigurationDetailsToSystemDB(ByVal pSystemId As String, _
                                                         ByVal pUserId As String, _
                                                         ByVal pDSSavedConfigurationDetails As DataSet) As Long

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sbSQL As New StringBuilder
        Dim systemName As String = String.Empty
        Dim databaseSource As String = String.Empty
        Dim schemaName As String = String.Empty
        Dim userID As String = String.Empty
        Dim password As String = String.Empty
        Dim server As String = String.Empty
        Dim _strFilter As String = String.Empty


        Try

            If pDSSavedConfigurationDetails.Tables(0).Rows.Count > 0 Then

                _strFilter = "TAB_ID='" & ConfigurationManager_Tabs.SYSTEMDBCONNECTION.ToString & "'"
                ' pDSSavedConfigurationDetails.Tables(0).Select(_strFilter).Length

                If (pDSSavedConfigurationDetails.Tables(0).Select(_strFilter).Length > 0) Then

                    Dim _drRow() As Data.DataRow
                    _drRow = pDSSavedConfigurationDetails.Tables(0).Select(_strFilter & " AND PARAMETER_ID='DATASOURCE'")
                    databaseSource = _drRow(0).Item("PARAMETER_VALUE").ToString


                    _drRow = pDSSavedConfigurationDetails.Tables(0).Select(_strFilter & " AND PARAMETER_ID='USERID'")
                    userID = _drRow(0).Item("PARAMETER_VALUE").ToString

                    _drRow = pDSSavedConfigurationDetails.Tables(0).Select(_strFilter & " AND PARAMETER_ID='PASSWORD'")
                    password = _drRow(0).Item("PARAMETER_VALUE").ToString

                    _drRow = pDSSavedConfigurationDetails.Tables(0).Select(_strFilter & " AND PARAMETER_ID='SERVER'")
                    server = _drRow(0).Item("PARAMETER_VALUE").ToString



                    With _sbSQL
                        .Append("UPDATE MT_ATPAR_SYSTEM_DB ")
                        .Append("SET DATASOURCE='" & databaseSource & "' ")
                        .Append(",USERID='" & userID & "' ")
                        .Append(",PASSWORD='" & password & "' ")
                        .Append(",SERVER='" & server & "' ")
                        .Append(",LAST_UPDATE_USER='" & pUserId & "' ")
                        .Append(",LAST_UPDATE_DATE='" & Today.Date() & "' ")
                        .Append("WHERE SYSTEM_ID='" & pSystemId.Trim & "' ")
                    End With
                    Try
                        Dim _coldata As New System.Collections.Generic.Dictionary(Of String, String)
                        Dim _dbConnectionString As String = String.Empty
                        Dim _db As GenericDatabase = Nothing
                        Dim _cmd As System.Data.Common.DbCommand = Nothing

                        Dim _confData As Collection

                        If Not IsNothing(AppDomain.CurrentDomain.GetData("AtParConfigData")) Then
                            _confData = CType(AppDomain.CurrentDomain.GetData("AtParConfigData"), Collection)

                            _coldata = CType(_confData.Item("DBCONN_STRING"), Dictionary(Of String, String))

                            If Not IsNothing(_coldata) Then
                                If _coldata.Keys.Count > 0 Then
                                    Try
                                        If log.IsDebugEnabled Then log.Debug(methodBaseName & ": Getting all system details from Master Database :")

                                        _dbConnectionString = _coldata.Item(DBCONN_STRING.MASTER_DB.ToString)

                                        _db = New GenericDatabase(_dbConnectionString, System.Data.SqlClient.SqlClientFactory.Instance)

                                        _cmd = New SqlCommand
                                        _cmd.Connection = _db.CreateConnection
                                        _cmd.CommandType = CommandType.Text
                                        _cmd.CommandText = _sbSQL.ToString
                                        _db.ExecuteNonQuery(_cmd)

                                    Catch ex As Exception
                                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " call failed while Updating the Master database " & vbCrLf & _
                                                                                         " with the following SQL :" & _sbSQL.ToString & vbCrLf & _
                                                                                         " Exception is:" & ex.ToString & vbCrLf)
                                        Return ATPAR_E_LOCALDBSELECTFAIL
                                    End Try
                                Else
                                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to get Master database connection. Check conf.xml:")
                                    Return E_SERVERERROR
                                End If
                            Else
                                If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to get Master database connection. Check conf.xml:")
                                Return E_SERVERERROR
                            End If
                        Else
                            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ":No Data in Cache. Restart Atpar Application Service:")
                            Return E_SERVERERROR
                        End If

                    Catch ex As Exception
                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to get Master database connection :")
                        Return E_SERVERERROR
                    End Try


                    ''''''''''''''''''''

                End If
            End If

            Return ATPAR_OK
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " call failed while Updating, and the Exception thrown is ... " & ex.ToString)
            Return ATPAR_E_LOCALDBUPDATEFAIL

        End Try

    End Function


    Private Function SaveConfigurationDetailsToLogFiles(ByVal pUserId As String, ByVal pDSSavedConfigurationDetails As DataSet, _
                                                       ByVal pDeviceTokenEntry() As String) As Long
        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strSQL As New StringBuilder
        Dim strWPSelectedVal As String = String.Empty
        Dim strWSSelectedVal As String = String.Empty
        Dim strBRSelectedVal As String = String.Empty
        Dim _statusCode As Long
        Dim _strFilter As String = String.Empty

        Try

            If pDSSavedConfigurationDetails.Tables(0).Rows.Count > 0 Then

                _strFilter = "TAB_ID='" & ConfigurationManager_Tabs.LOG_CONFIG.ToString & "' AND PARAMETER_ID = '"

                Dim _drRow() As Data.DataRow
                _drRow = pDSSavedConfigurationDetails.Tables(0).Select(_strFilter & Log_Config.WEBPAGES_LOGLEVEL.ToString & "'")
                strWPSelectedVal = _drRow(0).Item("PARAMETER_VALUE").ToString

                _drRow = pDSSavedConfigurationDetails.Tables(0).Select(_strFilter & Log_Config.WEBSERVICES_LOGLEVEL.ToString & "'")
                strWSSelectedVal = _drRow(0).Item("PARAMETER_VALUE").ToString

                _drRow = pDSSavedConfigurationDetails.Tables(0).Select(_strFilter & Log_Config.BUSINESSRULE_LOGLEVEL.ToString & "'")
                strBRSelectedVal = _drRow(0).Item("PARAMETER_VALUE").ToString

                Try
                    _statusCode = UpdateLogConfigDetails(pUserId, strWPSelectedVal, strWSSelectedVal, strBRSelectedVal, pDeviceTokenEntry)
                    Return _statusCode
                Catch ex As Exception
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Exception thrown while calling UpdateLogConfigDetails is..." & ex.ToString)
                    Return E_SERVERERROR
                End Try

            End If

            Return ATPAR_OK
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("ATPAR_E_LOCALDBINSERTFAIL :" & ex.ToString)
            Throw New Exception(methodBaseName & " :Update to Configuration Log files Failed :Exception : ", ex)
            SaveConfigurationDetailsToLogFiles = ATPAR_E_LOCALDBINSERTFAIL
            Exit Function
        End Try

    End Function

    Public Function GetConfigurationConnections(ByVal pDataBase As String, ByVal pUserId As String, _
                                                ByVal pDSSavedConfigurationDetails As DataSet, _
                                                ByVal pDeviceTokenEntry() As String) As Long _
                                                Implements IAtpar_WebTrans.GetConfigurationConnections

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)
        Dim _strSQL As New StringBuilder

        Dim strDatabase As String = String.Empty
        Dim strDataSource As String = String.Empty
        Dim strServer As String = String.Empty
        Dim strUserID As String = String.Empty
        Dim strPassword As String = String.Empty
        Dim _strFilter As String = String.Empty

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            If pDSSavedConfigurationDetails.Tables(0).Rows.Count > 0 Then
                If pDataBase = DATABASE_TYPES.SQLSERVER.ToString Then

                    Try

                        _strFilter = "TAB_ID='" & ConfigurationManager_Tabs.REMOTEDBCONNECTION.ToString & "' AND PARAMETER_ID = "

                        Dim _drRow() As Data.DataRow

                        _drRow = pDSSavedConfigurationDetails.Tables(0).Select(_strFilter & "'DATABASE'")
                        strDatabase = _drRow(0).Item("PARAMETER_VALUE").ToString

                        _drRow = pDSSavedConfigurationDetails.Tables(0).Select(_strFilter & "'DATASOURCE'")
                        strDataSource = _drRow(0).Item("PARAMETER_VALUE").ToString

                        _drRow = pDSSavedConfigurationDetails.Tables(0).Select(_strFilter & "'SERVER'")
                        strServer = _drRow(0).Item("PARAMETER_VALUE").ToString

                        _drRow = pDSSavedConfigurationDetails.Tables(0).Select(_strFilter & "'USERID'")
                        strUserID = _drRow(0).Item("PARAMETER_VALUE").ToString

                        _drRow = pDSSavedConfigurationDetails.Tables(0).Select(_strFilter & "'PASSWORD'")
                        strPassword = _drRow(0).Item("PARAMETER_VALUE").ToString

                        Dim Cn As SqlConnection = New SqlConnection("user id=" + strUserID + "; password=" + strPassword + ";data source=" + _
                                                                                            strServer + "; initial catalog=" + strDataSource + ";")
                        Cn.Open()
                        If (Cn.State = ConnectionState.Open) Then
                            GetConfigurationConnections = ATPAR_OK
                            If log.IsFatalEnabled Then log.Fatal("Connection State for UserID - " & strUserID & ", DataSource " & strServer _
                                                                & ", Initial Catalog " & strDataSource & " is....:" & Cn.State.ToString() & ":")
                        Else
                            GetConfigurationConnections = ATPAR_OK
                        End If
                        Cn.Close()
                        Cn.Dispose()
                    Catch sqlex As SqlException
                        If log.IsFatalEnabled Then log.Fatal(GetSQLExceptionMessageString(sqlex))
                        GetConfigurationConnections = E_SERVERERROR
                        Exit Function

                    End Try

                End If

            End If

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Connection to specific server Failed " & ex.ToString)
            GetConfigurationConnections = E_SERVERERROR
            Exit Function


        End Try

    End Function


    Public Function GetOracleConnection(ByVal pstrDbConnString As String) As String Implements IAtpar_WebTrans.GetOracleConnection
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            Dim _db As GenericDatabase = Nothing
            _db = New GenericDatabase(pstrDbConnString, System.Data.OracleClient.OracleClientFactory.Instance)
            _db.CreateConnection()
            _db.CreateConnection.Open()
            _db.CreateConnection.Close()
            _db.CreateConnection.Dispose()
            Return "Connection Opened Successfully"
        Catch ex As Exception
            Return ex.ToString
        End Try

    End Function

    Public Function CheckRecall(ByVal pDeviceTokenEntry() As String, ByRef pRecallParameter As String) As Long Implements IAtpar_WebTrans.CheckRecall

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)
        Try
            pRecallParameter = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), CONFIGFILE.ATPAR_SYSTEM.ToString(), ATPAR_SYSTEM.RECALL_MGMT_IMPLEMENTED.ToString)
        Catch ex As Exception
            Return E_SERVERERROR
        End Try
        Return ATPAR_OK
    End Function

#End Region

    ''' <summary>
    ''' To Get EnterpriseSystem Value
    ''' </summary> 
    ''' <param name="pStrEnterpriseSystem">EnterpriseSystem</param>
    ''' <param name="pDeviceTokenEntry">DeviceTokenEntry</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function GetEnterpriseSystem(ByRef pStrEnterpriseSystem As String, ByVal pDeviceTokenEntry() As String) As Long _
                                 Implements IAtpar_WebTrans.GetEnterpriseSystem

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            pStrEnterpriseSystem = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), CONFIGFILE.ERP_SYS_DETAILS.ToString(), ERP_SYS_DETAILS.ENTERPRISESYSTEM.ToString)
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to get the enterprise system name " _
                                                                & ex.ToString & ":" & vbCrLf)
            Return E_SERVERERROR
        End Try

        Return ATPAR_OK

    End Function

    ''' <summary>
    ''' To Get ConfigData 
    ''' </summary> 
    ''' <param name="pDSConfigData">ConfigData dataset</param>
    ''' <param name="pDeviceTokenEntry">DeviceTokenEntry</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function PopulateConfigData(ByRef pDSConfigData As DataSet, ByVal pDeviceTokenEntry() As String) As Long _
                                 Implements IAtpar_WebTrans.PopulateConfigData

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strProtocol As String
        Dim _strServerName As String
        Dim _strSearchFilter As String
        Dim _strUserIDFilter As String
        Dim _strFirstNameFilter As String
        Dim _strLastNameFilter As String
        Dim _strErrorPath As String
        Dim _dtTbl As DataTable
        Dim _dtRow As DataRow

        Try
            _strProtocol = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), CONFIGFILE.LDAPCONFIG.ToString(), LDAPCONFIG.PROTOCOL.ToString)
            _strServerName = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), CONFIGFILE.LDAPCONFIG.ToString(), LDAPCONFIG.SERVERNAME.ToString)
            _strSearchFilter = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), CONFIGFILE.LDAPCONFIG.ToString(), LDAPCONFIG.SEARCHFILTER.ToString)
            _strUserIDFilter = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), CONFIGFILE.LDAPCONFIG.ToString(), LDAPCONFIG.USERID.ToString)
            _strFirstNameFilter = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), CONFIGFILE.LDAPCONFIG.ToString(), LDAPCONFIG.FIRSTNAME.ToString)
            _strLastNameFilter = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), CONFIGFILE.LDAPCONFIG.ToString(), LDAPCONFIG.LASTNAME.ToString)
            _strErrorPath = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), CONFIGFILE.SYSTEMPARAMETERS.ToString(), SYSTEMPARAMETERS.ERRORLOGPATH.ToString)

            _dtTbl = New DataTable
            _dtTbl.Columns.Add(LDAPCONFIG.PROTOCOL.ToString, Type.GetType("System.String"))
            _dtTbl.Columns.Add(LDAPCONFIG.SERVERNAME.ToString, Type.GetType("System.String"))
            _dtTbl.Columns.Add(LDAPCONFIG.SEARCHFILTER.ToString, Type.GetType("System.String"))
            _dtTbl.Columns.Add(LDAPCONFIG.USERID.ToString, Type.GetType("System.String"))
            _dtTbl.Columns.Add(LDAPCONFIG.FIRSTNAME.ToString, Type.GetType("System.String"))
            _dtTbl.Columns.Add(LDAPCONFIG.LASTNAME.ToString, Type.GetType("System.String"))
            _dtTbl.Columns.Add(SYSTEMPARAMETERS.ERRORLOGPATH.ToString, Type.GetType("System.String"))

            _dtRow = _dtTbl.NewRow()
            _dtRow.Item(LDAPCONFIG.PROTOCOL.ToString) = _strProtocol
            _dtRow.Item(LDAPCONFIG.SERVERNAME.ToString) = _strServerName
            _dtRow.Item(LDAPCONFIG.SEARCHFILTER.ToString) = _strSearchFilter
            _dtRow.Item(LDAPCONFIG.USERID.ToString) = _strUserIDFilter
            _dtRow.Item(LDAPCONFIG.FIRSTNAME.ToString) = _strFirstNameFilter
            _dtRow.Item(LDAPCONFIG.LASTNAME.ToString) = _strLastNameFilter
            _dtRow.Item(SYSTEMPARAMETERS.ERRORLOGPATH.ToString) = _strErrorPath

            _dtTbl.Rows.Add(_dtRow)
            pDSConfigData.Tables.Add(_dtTbl)

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to get the data  " _
                                                                & ex.ToString & ":" & vbCrLf)
            Return E_SERVERERROR
        End Try

        Return ATPAR_OK

    End Function


    Public Function GetUserProductivityReport(ByVal pfrmDt As String, ByVal ptoDt As String, ByVal puserId As String, _
                    ByVal pappId As String, ByVal pOrgGrpID As String, ByRef pDsProdDetails As DataSet, ByVal pDeviceTokenEntry() As String) As Long _
                    Implements IAtpar_WebTrans.GetUserProductivityReport

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sqlCmd As SqlCommand
        Dim _StatusCode As String = String.Empty
        Dim _strSQL As String = String.Empty

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try


        Try


            Dim sqlParms() As SqlParameter = New SqlParameter(6) {}

            sqlParms(0) = New SqlParameter("@Fromdate", SqlDbType.NVarChar)
            sqlParms(0).Value = pfrmDt

            sqlParms(1) = New SqlParameter("@Todate", SqlDbType.NVarChar)
            sqlParms(1).Value = ptoDt

            sqlParms(2) = New SqlParameter("@app_ID", SqlDbType.NVarChar)
            sqlParms(2).Value = pappId

            sqlParms(3) = New SqlParameter("@userID", SqlDbType.NVarChar)
            sqlParms(3).Value = puserId

            sqlParms(4) = New SqlParameter("@OrgGrp_ID", SqlDbType.NVarChar)
            sqlParms(4).Value = pOrgGrpID

            sqlParms(5) = New SqlParameter("@StatusCode", SqlDbType.Int)
            sqlParms(5).Direction = ParameterDirection.Output


            _sqlCmd = New SqlCommand
            _sqlCmd.Connection = m_LocalDB.CreateConnection
            _sqlCmd.CommandType = CommandType.StoredProcedure
            _sqlCmd.CommandText = "GetUserProductivityReportDetails"
            _sqlCmd.Parameters.Add(sqlParms(0))
            _sqlCmd.Parameters.Add(sqlParms(1))
            _sqlCmd.Parameters.Add(sqlParms(2))
            _sqlCmd.Parameters.Add(sqlParms(3))
            _sqlCmd.Parameters.Add(sqlParms(4))
            _sqlCmd.Parameters.Add(sqlParms(5))


            _strSQL = "DECLARE @P1 INT " & _
                      "SET @P1 = 0 " & vbCrLf & _
                      vbCrLf & _
                      "EXEC	" & _
                      "GetUserProductivityReportDetails" & vbCrLf & _
                      "@Fromdate = N'" & sqlParms(0).Value & "'," & vbCrLf & _
                      "@Todate = N'" & sqlParms(1).Value & "'," & vbCrLf & _
                      "@app_ID = N'" & sqlParms(2).Value & "'," & vbCrLf & _
                      "@userID = N'" & sqlParms(3).Value & "'," & vbCrLf & _
                      "@OrgGrp_ID = N'" & sqlParms(4).Value & "'," & vbCrLf & _
                      "@StatusCode = N''," & vbCrLf & _
                      vbCrLf & _
                      "SELECT	@P1 "

            If log.IsDebugEnabled Then log.Debug(_strSQL)

            Try
                pDsProdDetails = m_LocalDB.ExecuteDataSet(_sqlCmd)
                Return ATPAR_OK
            Catch sqlEx As SqlException
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute the following" & _
                                                                      " SQL...." & _strSQL & vbCrLf & _
                                                                      " Exception is : " & sqlEx.ToString _
                                                                      & vbCrLf)
                Return E_SERVERERROR
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute the following" & _
                                                                     " SQL...." & _strSQL & vbCrLf & _
                                                                     " Exception is : " & ex.ToString _
                                                                     & vbCrLf)
                Return E_SERVERERROR
            End Try


            _StatusCode = sqlParms(5).Value
            _sqlCmd.Parameters.Clear()

            If _StatusCode <> ATPAR_OK Then
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to Get the details from middle tier" & _
                                                                      " tables: StatusCode is : " & _StatusCode & _
                                                                       vbCrLf & " Failed to execute the" & _
                                                                       " SQL... " & vbCrLf & _strSQL & vbCrLf)
                Return E_SERVERERROR
            End If


        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to Get the details in middle tier" & _
                                                                  " tables: Exception is : " & ex.ToString & _
                                                                  vbCrLf)
            Return E_SERVERERROR
        End Try


        Return ATPAR_OK

    End Function


    Public Function GetReleaseOrders(ByVal pAppid As Integer, ByVal pUserId As String, ByVal pBunit As String, ByVal pOrdNo As String, _
                                    ByRef pDsRelOrdDetails As DataSet, _
                                     ByVal pDeviceTokenEntry() As String, ByVal pOrgGrpID As String, Optional ByVal Lflag As String = "", _
                                    Optional ByVal pTransId As String = "") As Long _
                                    Implements IAtpar_WebTrans.GetReleaseOrders

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sqlCmd As SqlCommand
        Dim _StatusCode As String = String.Empty
        Dim _strSQL As String = String.Empty
        Dim _strOrgGrpID As String = String.Empty
        Dim _sbUpdateSQL As New StringBuilder
        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        If String.IsNullOrEmpty(pOrgGrpID) Then

            _strOrgGrpID = pDeviceTokenEntry(TokenEntry_Enum.OrgGrpID)
        Else
            _strOrgGrpID = pOrgGrpID

        End If

        If Lflag = "Y" Then
            'Update Transcation Details 
            With _sbUpdateSQL
                .Append(" UPDATE MT_ATPAR_TRANSACTION SET STATUS= '" & AppTransactionStatus.Unlock & "' ")
                .Append(" WHERE APP_ID= " & pAppid & " AND TRANSACTION_ID IN (" & pTransId & ") ")
                .Append(" AND DOWNLOAD_USERID IN (" & pUserId & ") ")
                If log.IsInfoEnabled Then log.Info(_sbUpdateSQL)
            End With
            Try
                If log.IsInfoEnabled Then log.Info(methodBaseName & " :Query to update the data from MT_ATPAR_TRANSACTION: " & _sbUpdateSQL.ToString & " : ")
                m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_sbUpdateSQL.ToString))
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " :Failed to execute SQL... " & _
                                                    _sbUpdateSQL.ToString & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
                Return ATPAR_E_LOCALDBUPDATEFAIL
            Finally
                _sbUpdateSQL.Remove(0, _sbUpdateSQL.Length)
            End Try

        End If

        Try
            Dim sqlParms() As SqlParameter = New SqlParameter(6) {}

            sqlParms(0) = New SqlParameter("@pAppId", SqlDbType.NVarChar)
            sqlParms(0).Value = pAppid

            sqlParms(1) = New SqlParameter("@pOrgGrpId", SqlDbType.NVarChar)
            sqlParms(1).Value = _strOrgGrpID

            sqlParms(2) = New SqlParameter("@pUserID", SqlDbType.NVarChar)
            sqlParms(2).Value = pDeviceTokenEntry(TokenEntry_Enum.UserID)

            sqlParms(3) = New SqlParameter("@pBunit", SqlDbType.NVarChar)
            sqlParms(3).Value = pBunit

            sqlParms(4) = New SqlParameter("@pOrdNo", SqlDbType.NVarChar)
            sqlParms(4).Value = pOrdNo

            sqlParms(5) = New SqlParameter("@StatusCode", SqlDbType.Int)
            sqlParms(5).Direction = ParameterDirection.Output


            _sqlCmd = New SqlCommand
            _sqlCmd.Connection = m_LocalDB.CreateConnection
            _sqlCmd.CommandType = CommandType.StoredProcedure
            _sqlCmd.CommandText = "GetReleaseOrders"
            _sqlCmd.Parameters.Add(sqlParms(0))
            _sqlCmd.Parameters.Add(sqlParms(1))
            _sqlCmd.Parameters.Add(sqlParms(2))
            _sqlCmd.Parameters.Add(sqlParms(3))
            _sqlCmd.Parameters.Add(sqlParms(4))
            _sqlCmd.Parameters.Add(sqlParms(5))
            _strSQL = "DECLARE @P1 INT " & _
                      "SET @P1 = 0 " & vbCrLf & _
                      vbCrLf & _
                      "EXEC	" & _
                      "GetReleaseOrders" & vbCrLf & _
                      "@pAppId = N'" & sqlParms(0).Value & "'," & vbCrLf & _
                      "@pOrgGrpId = N'" & sqlParms(1).Value & "'," & vbCrLf & _
                      "@pUserID = N'" & sqlParms(2).Value & "'," & vbCrLf & _
                      "@pBunit = N'" & sqlParms(3).Value & "'," & vbCrLf & _
                      "@pOrdNo = N'" & sqlParms(4).Value & "'," & vbCrLf & _
                      "@StatusCode = N''," & vbCrLf & _
                      vbCrLf & _
                      "SELECT	@P1 "

            If log.IsDebugEnabled Then log.Debug(_strSQL)

            Try
                pDsRelOrdDetails = m_LocalDB.ExecuteDataSet(_sqlCmd)
                Return ATPAR_OK
            Catch sqlEx As SqlException
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute the following" & _
                                                                      " SQL...." & _strSQL & vbCrLf & _
                                                                      " Exception is : " & sqlEx.ToString _
                                                                      & vbCrLf)
                Return E_SERVERERROR
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute the following" & _
                                                                     " SQL...." & _strSQL & vbCrLf & _
                                                                     " Exception is : " & ex.ToString _
                                                                     & vbCrLf)
                Return E_SERVERERROR
            End Try

            _StatusCode = sqlParms(5).Value
            _sqlCmd.Parameters.Clear()

            If _StatusCode <> ATPAR_OK Then
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to Get the data from middle tier" & _
                                                                      " table: StatusCode is : " & _StatusCode & _
                                                                       vbCrLf & " Failed to execute the" & _
                                                                       " SQL... " & vbCrLf & _strSQL & vbCrLf)
                Return E_SERVERERROR
            End If

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to Get the details from middle tier" & _
                                                                  " tables: Exception is : " & ex.ToString & _
                                                                  vbCrLf)
            Return E_SERVERERROR
        End Try

        Return ATPAR_OK
    End Function

    ''' <summary>
    ''' Updates the user details through My Profile screen
    ''' </summary> 
    ''' <param name="pArrlstUserDetails">User Details List</param>
    ''' <param name="pDeviceTokenEntry">DeviceTokenEntry</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Function SaveUserDetails(ByVal pArrlstUserDetails As ArrayList, ByVal pDeviceTokenEntry() As String) As Long _
                            Implements IAtpar_WebTrans.SaveUserDetails

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sqlCmd As SqlCommand
        Dim _StatusCode As Long
        Dim _sbSQL As StringBuilder = Nothing
        Dim _trans As SqlTransaction = Nothing

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))

            'Create an Instance of Sql Transaction
            sqlConnect = m_LocalDB.CreateConnection()
            sqlConnect.Open()
            _trans = sqlConnect.BeginTransaction()
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            _sbSQL = New StringBuilder
            With _sbSQL
                .Append(" UPDATE MT_ATPAR_USER")
                .Append(" SET FIRST_NAME = '" & GetDatabaseString(pArrlstUserDetails(1)) & "', ")
                .Append(" LAST_NAME = '" & GetDatabaseString(pArrlstUserDetails(2)) & "', ")
                .Append(" MIDDLE_INITIAL = '" & GetDatabaseString(pArrlstUserDetails(3)) & "', ")
                .Append(" EMAIL_ID = '" & pArrlstUserDetails(4) & "', ")
                .Append(" PHONE1 = '" & pArrlstUserDetails(5) & "', ")
                .Append(" PHONE2 = '" & pArrlstUserDetails(6) & "', ")
                .Append(" FAX = '" & pArrlstUserDetails(7) & "', ")
                .Append(" PAGER = '" & pArrlstUserDetails(8) & "'")
                .Append(" WHERE USER_ID = '" & pArrlstUserDetails(0) & "'")
            End With

            If log.IsInfoEnabled Then log.Info(methodBaseName & vbCrLf & _sbSQL.ToString)

            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString), _trans)

            _sbSQL.Remove(0, _sbSQL.Length)

            _sbSQL = New StringBuilder
            With _sbSQL
                .Append(" UPDATE MT_ATPAR_USER_ACL")
                .Append(" SET RECORDS_PER_PAGE = '" & pArrlstUserDetails(9) & "', ")
                .Append(" DEFAULT_REPORT_DURATION = '" & pArrlstUserDetails(10) & "', ")
                .Append(" TOKEN_EXPIRY_PERIOD = '" & pArrlstUserDetails(11) & "', ")
                .Append(" IDLE_TIME = '" & pArrlstUserDetails(12) & "'")
                .Append(" WHERE USER_ID = '" & pArrlstUserDetails(0) & "'")
            End With

            If log.IsInfoEnabled Then log.Info(methodBaseName & vbCrLf & _sbSQL.ToString)

            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString), _trans)

            _trans.Commit()
            Return ATPAR_OK
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ":" & ex.ToString)
            _trans.Rollback()
            Return E_SERVERERROR
        Finally
            _trans = Nothing
            _sbSQL = Nothing
        End Try

    End Function

    Public Function GetOrgGroupIDS(ByRef _pDSOrgGroup As DataSet, _
                                   ByVal pDeviceTokenEntry() As String) As Long _
                                   Implements IAtpar_WebTrans.GetOrgGroupIDS

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strSQL As String

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try

            _strSQL = "SELECT ORG_GROUP_ID, ORG_GROUP_NAME FROM MT_ATPAR_ORG_GROUPS WHERE ORG_GROUP_ID<>'All'"

            If log.IsInfoEnabled Then log.Info(methodBaseName & "  Getting records from Org Groups with the following SQL..." & _strSQL & vbCrLf)
            Try
                _pDSOrgGroup = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))
            Catch sqlEx As SqlException
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute the following SQL...." & _strSQL & _
                                vbCrLf & " Exception is : " & sqlEx.ToString & vbCrLf)
                Return ATPAR_E_LOCALDBSELECTFAIL
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute the following SQL...." & _strSQL & _
                                vbCrLf & " Exception is : " & ex.ToString & vbCrLf)
                Return E_SERVERERROR
            End Try

            GetOrgGroupIDS = ATPAR_OK

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

    End Function

#Region "Activity report"
    Public Function GetActivityReportData(ByVal pfrmDt As String, ByVal ptoDt As String, _
                    ByVal pappId As String, ByVal Filter As Integer, ByRef pDsActivityDetails As DataSet, ByVal pDeviceTokenEntry() As String, _
                    ByVal pStrOrgGrpID As String) As Long _
                    Implements IAtpar_WebTrans.GetActivityReportData

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sqlCmd As SqlCommand
        Dim _StatusCode As String = String.Empty
        Dim _strSQL As String = String.Empty

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try


        Try

            Dim sqlParms() As SqlParameter = New SqlParameter(5) {}

            sqlParms(0) = New SqlParameter("@Frmdate", SqlDbType.NVarChar)
            sqlParms(0).Value = pfrmDt

            sqlParms(1) = New SqlParameter("@ToDate", SqlDbType.NVarChar)
            sqlParms(1).Value = ptoDt

            sqlParms(2) = New SqlParameter("@AppId", SqlDbType.NVarChar)
            sqlParms(2).Value = pappId

            sqlParms(3) = New SqlParameter("@UserID", SqlDbType.NVarChar)
            sqlParms(3).Value = pDeviceTokenEntry(TokenEntry_Enum.UserID)

            sqlParms(4) = New SqlParameter("@OrgGrpID", SqlDbType.NVarChar)
            sqlParms(4).Value = pStrOrgGrpID

            sqlParms(5) = New SqlParameter("@StatusCode", SqlDbType.Int)
            sqlParms(5).Direction = ParameterDirection.Output


            _sqlCmd = New SqlCommand
            _sqlCmd.Connection = m_LocalDB.CreateConnection
            _sqlCmd.CommandType = CommandType.StoredProcedure
            If log.IsDebugEnabled Then log.Debug(methodBaseName & ":Filter:" & Filter)

            If Filter = 0 Then
                _sqlCmd.CommandText = "GetActivityReportData"
            ElseIf Filter = 1 Then
                _sqlCmd.CommandText = "GetActivityReportDataByBU"
            ElseIf Filter = 2 Then
                _sqlCmd.CommandText = "GetActivityReportDataByUser"
            End If

            _sqlCmd.Parameters.Add(sqlParms(0))
            _sqlCmd.Parameters.Add(sqlParms(1))
            _sqlCmd.Parameters.Add(sqlParms(2))
            _sqlCmd.Parameters.Add(sqlParms(3))
            _sqlCmd.Parameters.Add(sqlParms(4))
            _sqlCmd.Parameters.Add(sqlParms(5))

            _strSQL = "DECLARE @P1 INT " & _
                      "SET @P1 = 0 " & vbCrLf & _
                      vbCrLf & _
                      "EXEC	" & _
                      "GetActivityReportData" & vbCrLf & _
                      "@Frmdate = N'" & sqlParms(0).Value & "'," & vbCrLf & _
                      "@ToDate = N'" & sqlParms(1).Value & "'," & vbCrLf & _
                      "@AppId = N'" & sqlParms(2).Value & "'," & vbCrLf & _
                      "@UserID = N'" & sqlParms(3).Value & "'," & vbCrLf & _
                      "@OrgGrpID = N'" & sqlParms(4).Value & "'," & vbCrLf & _
                      "@StatusCode = N''," & vbCrLf & _
                      vbCrLf & _
                      "SELECT	@P1 "

            If log.IsDebugEnabled Then log.Debug(_strSQL)

            Try
                pDsActivityDetails = m_LocalDB.ExecuteDataSet(_sqlCmd)
                Return ATPAR_OK
            Catch sqlEx As SqlException
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute the following" & _
                                                                      " SQL...." & _strSQL & vbCrLf & _
                                                                      " Exception is : " & sqlEx.ToString _
                                                                      & vbCrLf)
                Return E_SERVERERROR
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute the following" & _
                                                                     " SQL...." & _strSQL & vbCrLf & _
                                                                     " Exception is : " & ex.ToString _
                                                                     & vbCrLf)
                Return E_SERVERERROR
            End Try


            _StatusCode = sqlParms(5).Value
            _sqlCmd.Parameters.Clear()

            If _StatusCode <> ATPAR_OK Then
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to Get the details from middle tier" & _
                                                                      " tables: StatusCode is : " & _StatusCode & _
                                                                       vbCrLf & " Failed to execute the" & _
                                                                       " SQL... " & vbCrLf & _strSQL & vbCrLf)
                Return E_SERVERERROR
            End If


        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to Get the details in middle tier" & _
                                                                  " tables: Exception is : " & ex.ToString & _
                                                                  vbCrLf)
            Return E_SERVERERROR
        End Try


        Return ATPAR_OK

    End Function


#End Region

#Region "Manage Tokens"

    ''' <summary>
    ''' To get Access tokens
    ''' </summary>
    ''' <param name="pDSLiveTokens"></param>
    ''' <param name="pDeviceTokenEntry"></param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function GetLiveTokens(ByVal pChkValue As Integer, ByRef pDSLiveTokens As DataSet, ByVal pDeviceTokenEntry() As String) As Integer _
                                  Implements IAtpar_WebTrans.GetLiveTokens

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strProducts As String = String.Empty
        Dim _Cmd As SqlCommand
        Dim sqlParms() As SqlParameter = New SqlParameter(1) {}
        Dim _strSQL As String
        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            sqlParms(0) = New SqlParameter("@BlnChecked", SqlDbType.Int)
            sqlParms(0).Value = pChkValue

            _Cmd = New SqlCommand
            _Cmd.Connection = m_LocalDB.CreateConnection
            _Cmd.CommandType = CommandType.StoredProcedure
            _Cmd.CommandText = "GetLiveTokens"
            _Cmd.Parameters.Add(sqlParms(0))
            _Cmd.commandtimeout = 0


            _strSQL = "exec GetLiveTokens '" & sqlParms(0).Value & "' "

            If log.IsInfoEnabled Then log.Info(methodBaseName & " Getting the GetLiveTokens with the" & _
                                                                  " following.... " & _strSQL & vbCrLf)
            Try
                pDSLiveTokens = m_LocalDB.ExecuteDataSet(_Cmd)
            Catch sqlEx As SqlException
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute the following" & _
                                                                      " SQL...." & _strSQL & vbCrLf & _
                                                                      " Exception is : " & sqlEx.ToString & _
                                                                      vbCrLf)
                Return ATPAR_E_LOCALDBSELECTFAIL
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute the following" & _
                                                                     " SQL...." & _strSQL & vbCrLf & _
                                                                     " Exception is : " & ex.ToString & _
                                                                     vbCrLf)
                Return E_SERVERERROR
            End Try

            If pDSLiveTokens.Tables(0).Rows.Count = 0 Then
                Return E_NORECORDFOUND
            Else
                Return ATPAR_OK
            End If

            _Cmd.Parameters.Clear()
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get LiveTokens " & vbCrLf & _
                                                                   " with the following SQL :" & _strSQL.ToString & vbCrLf & _
                                                                   " Exception is:" & ex.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBSELECTFAIL
        End Try

    End Function


    ''' <summary>
    ''' To Delete Exipred Access tokens
    ''' </summary>
    ''' <param name="pDeviceTokenEntry"></param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function RunTokenGC(ByVal pDeviceTokenEntry() As String) As Long _
                                  Implements IAtpar_WebTrans.RunTokenGC

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strSQL As String = String.Empty

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            _strSQL = "DELETE FROM MT_ATPAR_TOKENS WHERE EXPIRY_TIME < GETUTCDATE() "

            If log.IsInfoEnabled Then log.Info(_strSQL)

            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL))

            RunTokenGC = ATPAR_OK

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get RunTokenGC " & vbCrLf & _
                                                                   " with the following SQL :" & _strSQL & vbCrLf & _
                                                                   " Exception is:" & ex.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBSELECTFAIL
        End Try

    End Function


    ''' <summary>
    ''' To delete selected access Token from the grid
    ''' </summary>
    ''' <param name="strAccessToken">user selected Token</param>
    ''' <param name="pDeviceTokenEntry">DeviceTokenEntry</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function DeleteTokenEntry(ByVal strAccessToken As String, ByVal pDeviceTokenEntry() As String) As Long _
                                  Implements IAtpar_WebTrans.DeleteTokenEntry

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _strSQL As String = String.Empty

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            _strSQL = "DELETE FROM MT_ATPAR_TOKENS WHERE ACCESS_TOKEN = '" & strAccessToken & "'"

            If log.IsInfoEnabled Then log.Info(_strSQL)

            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL))

            DeleteTokenEntry = ATPAR_OK

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get DeleteTokenEntry " & vbCrLf & _
                                                                   " with the following SQL :" & _strSQL & vbCrLf & _
                                                                   " Exception is:" & ex.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBSELECTFAIL
        End Try

    End Function

#End Region

#Region "Storage Zones"
    ''' <summary>
    ''' To Create the Stoarge Zone Groups for the User
    ''' </summary>
    ''' <param name="pGroupId">Zone Group ID</param>
    ''' <param name="pGroupDescr">Zone Group Description<</param>
    ''' <param name="pUserId">Group creating User - Logged in User</param>
    ''' <param name="pOrgId">Logged in User Org Group Id</param>
    ''' <returns>ATPAR_OK on Success, else E_SERVERERROR</returns>
    ''' <remarks></remarks>
    Public Function InsertStorageZoneGroups(ByVal pZoneId As String, ByVal pZoneDescr As String, _
                                         ByVal pUserId As String, ByVal pOrgId As String, _
                                         ByVal pDeviceTokenEntry() As String) As Long _
                                         Implements IAtpar_WebTrans.InsertStorageZoneGroups
        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserId
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Dim _sbSQL As New StringBuilder
        Dim _strSQL As String = String.Empty
        Dim intCnt As Integer
        Try
            _strSQL = " SELECT COUNT(STORAGE_ZONE_ID) FROM MT_ATPAR_STORAGE_ZONE WHERE STORAGE_ZONE_ID='" & pZoneId & "' " & _
                      " AND ORG_GROUP_ID='" & pOrgId & "' "
            If log.IsInfoEnabled Then log.Info(methodBaseName & ":Query to find the duplicates if exists:" & _strSQL)
            intCnt = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(_strSQL))
            If intCnt > 0 Then
                Return ATPAR_E_LOCGRPIDALREADYEXISTS
            End If
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                        _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
            Return ATPAR_E_LOCGRPIDALREADYEXISTS
        End Try

        With _sbSQL
            .Append("INSERT INTO MT_ATPAR_STORAGE_ZONE(ORG_GROUP_ID,STORAGE_ZONE_ID,STORAGE_ZONE_DESCR,STATUS,LAST_UPDATE_DATE,LAST_UPDATE_USER) ")
            .Append("VALUES('" & pOrgId & "','" & pZoneId & "','" & Replace(substituteString(pZoneDescr), "'", "''") & "',1,'" & Now() & "','" & pUserId & "')")
        End With
        Try
            If log.IsInfoEnabled Then log.Info(methodBaseName & " : Query to insert the data in to MT_ATPAR_STORAGE_ZONE:" & _sbSQL.ToString & " : ")
            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString))

            Return ATPAR_OK
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                        _sbSQL.ToString & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBINSERTFAIL
        End Try
    End Function

    ''' <summary>
    ''' To get the Storage Zone Groups Created by the user
    ''' </summary>
    ''' <param name="pGroupId">Zone Group ID</param>
    ''' <param name="pOrgId">Logged in User Org Group Id</param>
    ''' <param name="dsLocGrps">Output Dataset </param>
    ''' <returns>ATPAR_OK on Success, else E_SERVERERROR</returns>
    ''' <remarks></remarks>
    Public Function GetStorageZoneGroups(ByVal pZoneGrpId As String, ByVal pZoneGrpDescr As String, _
                                      ByVal pOrgId As String, ByRef dsZoneGrps As DataSet, _
                                      ByVal pDeviceTokenEntry() As String) As Long _
                                      Implements IAtpar_WebTrans.GetStorageZoneGroups

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Dim _strSQL As String = String.Empty
        pOrgId = Trim(pOrgId)
        pZoneGrpId = Trim(pZoneGrpId)
        pZoneGrpDescr = Trim(pZoneGrpDescr)
        _strSQL = " SELECT STORAGE_ZONE_ID,ORG_GROUP_ID,STORAGE_ZONE_DESCR,STATUS FROM MT_ATPAR_STORAGE_ZONE   "
        If Not String.IsNullOrEmpty(pOrgId) Then
            If pOrgId <> "ALL" Then
                _strSQL &= " WHERE  ORG_GROUP_ID = '" & pOrgId & "'"
            End If
        End If
        If Not String.IsNullOrEmpty(pZoneGrpId) Then
            If pOrgId <> "ALL" Then
                _strSQL &= " AND STORAGE_ZONE_ID LIKE '" & pZoneGrpId & "%'"
            Else
                _strSQL &= " WHERE STORAGE_ZONE_ID LIKE '" & pZoneGrpId & "%'"
            End If
        End If
        If Not String.IsNullOrEmpty(pZoneGrpDescr) Then
            If pOrgId <> "ALL" Then
                _strSQL &= " AND STORAGE_ZONE_DESCR LIKE '" & Replace(substituteString(pZoneGrpDescr), "'", "''") & "%'"
            ElseIf pOrgId = "ALL" And pZoneGrpId = String.Empty Then
                _strSQL &= " WHERE STORAGE_ZONE_DESCR LIKE '" & Replace(substituteString(pZoneGrpDescr), "'", "''") & "%'"
            End If

        End If
        Try
            If log.IsInfoEnabled Then log.Info(methodBaseName & " :Query to fetch the data from MT_ATPAR_STORAGE_ZONE: " & _strSQL & " : ")
            dsZoneGrps = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))
            If dsZoneGrps.Tables(0).Rows.Count = 0 Then
                Return E_NORECORDFOUND
            Else
                Return ATPAR_OK
            End If
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                            _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBSELECTFAIL
        End Try
    End Function


    ''' <summary>
    ''' To get the Storage Levels  from ERP and Middle based on Zone Group Ids
    ''' </summary>
    ''' <param name="pBUnit">Org Id - required Business Unit</param>
    ''' <param name="pLocId">required Lcation Id</param>
    ''' <param name="pAppId">App Id</param>
    ''' <param name="pUserId">Logged in User</param>
    ''' <param name="pOrgGroupId">Logged in User Org Group Id</param>
    ''' <param name="pLocGroupId">Zone Group ID</param>
    ''' <param name="pDsLocations">Return Dataset with the required values</param>
    ''' <returns>ATPAR_OK on Success, else E_SERVERERROR</returns>
    ''' <remarks></remarks>
    Public Function GetZoneStorageLevelDetails(ByVal pBUnit As String, ByVal pArea As String, ByVal pAppId As Integer, _
                                       ByVal pUserId As String, ByVal pOrgGroupId As String, ByVal pZoneGroupId As String, _
                                       ByRef pDsStorageLevels As DataSet, ByVal pDeviceTokenEntry() As String) As Long _
                                       Implements IAtpar_WebTrans.GetZoneStorageLevelDetails


        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserId
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Dim _strSQL As String = String.Empty
        Dim _StatusCode As Long = -1


        Dim _defaultBUnit As String = String.Empty
        Dim _atparParameters As Atpar_Application_Parameters
        _atparParameters = Atpar_Application_Parameters.CreateInstance(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Dim _atparTransaction As AtPar_Application_Transactions
        _atparTransaction = AtPar_Application_Transactions.CreateInstance(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Dim _className As String
        Dim _classType As Type
        Dim _reflectObject As Object
        Dim _methodName As MethodInfo
        Dim m_erpObjAssy As Assembly
        Dim _erpObjName As String = String.Empty
        Dim _remoteSchema As String
        Dim pInputParameters, pOutputParameters As New DataSet
        Dim _pick_header_dt, _pick_BusinessUnits, _pick_output, _pickPreReqData As New DataTable
        Dim _drHeader, _drPreReq As DataRow
        Dim _drBusinessUnit As DataRow
        Dim _dsBunits As DataSet
        Dim objAtparBr As New AtPar_BusinessRules.AtPar_Utils
        Dim cartsManagedInAtPar As String = String.Empty
        Dim _dsBunitsAllocated As DataSet

        Dim _intBunitCnt As Integer
        Dim _sbSQL As New StringBuilder
        'Checking for Business Unit whether it is assigned to Current User ORG GROUP or not
        _strSQL = " SELECT COUNT(BUSINESS_UNIT) FROM MT_ATPAR_ORG_GROUP_BUNITS  "

        If Not String.IsNullOrEmpty(pOrgGroupId) Then
            If pOrgGroupId <> "ALL" Then
                _strSQL &= " WHERE ORG_GROUP_ID = '" & pOrgGroupId & "'"
            End If
        End If
        If Not String.IsNullOrEmpty(pBUnit) Then
            If pOrgGroupId <> "ALL" Then
                _strSQL &= " AND BUSINESS_UNIT = '" & pBUnit & "'"
            ElseIf pOrgGroupId = "ALL" Then
                _strSQL &= " WHERE BUSINESS_UNIT = '" & pBUnit & "'"
            End If
        End If


        Try
            If log.IsInfoEnabled Then log.Info(methodBaseName & ":Query to fetch the data:" & _strSQL)
            _intBunitCnt = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(_strSQL))
            If _intBunitCnt > 0 Then
                If log.IsDebugEnabled Then log.Debug(methodBaseName & ":Business Unit is assigned :")
            Else
                If log.IsDebugEnabled Then log.Debug(methodBaseName & ":Business Unit is Not assigned :" & pBUnit)
                Return ATPAR_E_ASSIGN_ORGBUS
            End If
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                     _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBSELECTFAIL
        End Try

        'To Create Header table for pInputParameters dataset
        Try
            _pick_header_dt = ApplicationDataSetDefns.CreateAtParTableDefn(ApplicationDataSetDefns.Get_Pick_Header_Defns, DataSet_Type.HEADERS.ToString)
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in " & methodBaseName & " is.. " & vbCrLf & ex.ToString)
            Return E_SERVERERROR
        End Try

        'To Create Business Units table for pInputParameters dataset
        Try
            _pick_BusinessUnits = ApplicationDataSetDefns.CreateAtParTableDefn(ApplicationDataSetDefns.Get_BusinessUnits_Defns, DataSet_Type.BUSINESSUNITS.ToString)
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in " & methodBaseName & " is.. " & vbCrLf & ex.ToString)
            Return E_SERVERERROR
        End Try

        'To Create PreReq parameters table for pInputParameters dataset
        Try
            _pickPreReqData = ApplicationDataSetDefns.CreateAtParTableDefn(ApplicationDataSetDefns.Get_Params_Defns, DataSet_Type.PREREQDATA.ToString)
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in " & methodBaseName & " is.. " & vbCrLf & ex.ToString)
            Return E_SERVERERROR
        End Try

        _remoteSchema = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), CONFIGFILE.REMOTEDBCONNECTION.ToString(), REMOTEDBCONNECTION.SCHEMA.ToString())

        _drHeader = _pick_header_dt.NewRow()

        _drHeader.Item(Get_Pick_Header_Enum.BUSINESS_UNIT) = pBUnit
        _drHeader.Item(Get_Pick_Header_Enum.LOCATIONNAME) = pArea
        _drHeader.Item(Get_Pick_Header_Enum.STATUS) = 1


        _pick_header_dt.Rows.Add(_drHeader)


        _drPreReq = _pickPreReqData.NewRow()
        _drPreReq.Item(Get_Pick_Header_PreReqData_Enum.REMOTE_SCHEMA) = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), CONFIGFILE.REMOTEDBCONNECTION.ToString(), REMOTEDBCONNECTION.SCHEMA.ToString())
        _drPreReq.Item(Get_Pick_Header_PreReqData_Enum.REMOTE_DB_TYPE) = GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), CONFIGFILE.REMOTEDBCONNECTION.ToString(), REMOTEDBCONNECTION.DATABASE.ToString()) 'GetConfigData(EName(Of CONFIGFILE)(CONFIGFILE.REMOTEDBCONNECTION), REMOTEDBCONNECTION.DATABASE.ToString)
        _pickPreReqData.Rows.Add(_drPreReq)


        pInputParameters.Tables.Add(_pick_header_dt)

        pInputParameters.Tables.Add(_pickPreReqData)



        Try
            If log.IsDebugEnabled Then log.Debug(methodBaseName & ": before calling get business units:")

            objAtparBr = New AtPar_BusinessRules.AtPar_Utils
            'TODO :: Need to get  confirmation about BusinessUnit Type : I/P or ALL

            _StatusCode = objAtparBr.GetBusinessUnits(pUserId, BusinessType.AllBunits, _dsBunits, pDeviceTokenEntry)



            If _StatusCode <> ATPAR_OK Then
                If log.IsWarnEnabled Then log.Warn(methodBaseName & ":Failed to fetch the data with the status code : " & _StatusCode)
                Return E_SERVERERROR
            ElseIf _StatusCode = E_NORECORDFOUND Then
                If log.IsWarnEnabled Then log.Warn(methodBaseName & ":No Data Found : " & _StatusCode)
                Return E_NORECORDFOUND
            End If

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in " & methodBaseName & " is.. " & vbCrLf & ex.ToString)
            Return E_SERVERERROR
        Finally
            If Not objAtparBr Is Nothing Then
                objAtparBr = Nothing
            End If
        End Try

        For intCnt As Integer = 0 To _dsBunits.Tables(0).Rows.Count - 1

            _drBusinessUnit = _pick_BusinessUnits.NewRow()

            _drBusinessUnit.Item(0) = _dsBunits.Tables(0).Rows(intCnt).Item("BUSINESS_UNIT")

            _pick_BusinessUnits.Rows.Add(_drBusinessUnit)

        Next
        pInputParameters.Tables.Add(_pick_BusinessUnits)
        pInputParameters.AcceptChanges()
        'For ParManagement Installation check

        'ERP call
        Dim _strERPType As String = String.Empty
        Try
            Try
                _erpObjName = CONST_ATPAR & "_" & GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), _
                             EName(Of CONFIGFILE)(CONFIGFILE.ERP_SYS_DETAILS), ERP_SYS_DETAILS.DOWNLOADFROM.ToString)

                CreateERPObject(_erpObjName, m_erpObjAssy)
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to Create ERP Object .... " & _erpObjName _
                                    & vbCrLf & "Exception thrown is..." & ex.ToString)
                Return CRCT_E_ERPCOMPCREATION
            End Try

            _className = _erpObjName & ".GetStorageLevels"
            _classType = m_erpObjAssy.GetType(_className)
            _methodName = _classType.GetMethod("GetStorageLevels")
            _reflectObject = Activator.CreateInstance(_classType)

            Dim args As Object() = {pInputParameters, pOutputParameters, pDeviceTokenEntry}


            _StatusCode = _methodName.Invoke(_reflectObject, args)

            pDsStorageLevels = args(1)

            If _StatusCode <> ATPAR_OK Then
                If log.IsWarnEnabled Then log.Warn(_StatusCode)
                If _StatusCode = E_REMOTEERROR Then
                    Return E_SERVERERROR
                Else
                    Return _StatusCode
                End If
            End If


        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the data from ERP..... " & _
                                                 vbCrLf & ":Exception thrown is..." & ex.ToString)
            Return E_SERVERERROR
        End Try

        Dim dcCol1 As New DataColumn
        dcCol1.ColumnName = "CHK_VALUE"
        dcCol1.DefaultValue = 0
        pDsStorageLevels.Tables(0).Columns.Add(dcCol1)

        'ROWINDEX column is added to track down selected locations on the web screen,particularly useful when paging is applied
        Dim dcCol3 As New DataColumn
        dcCol3.ColumnName = "ROWINDEX"
        dcCol3.DefaultValue = 0
        pDsStorageLevels.Tables(0).Columns.Add(dcCol3)

        Dim dcCol4 As New DataColumn
        dcCol4.ColumnName = "CHK_ALLOCATED"
        dcCol4.DefaultValue = 0
        pDsStorageLevels.Tables(0).Columns.Add(dcCol4)

        ' The value in this column will decide whether the row has to be deleted or added
        Dim dcCol5 As New DataColumn
        dcCol5.ColumnName = "PERFORM_ACTION"
        dcCol5.DefaultValue = 0
        pDsStorageLevels.Tables(0).Columns.Add(dcCol5)

        'Getting the data from MT_ATPAR_STORAGE_ZONE_GROUP_DETAILS
        Dim _dsLocationsAllocated As DataSet
        Dim i As Integer = 0
        Dim j As Integer = 0

        _strSQL = "SELECT ORG_GROUP_ID,STORAGE_ZONE_ID,ORG_ID,STORAGE_AREA,STOR_LEVEL_1,STOR_LEVEL_2,STOR_LEVEL_3,STOR_LEVEL_4" & _
                    " FROM MT_ATPAR_ZONE_STORAGE_LEVELS "

        If Not String.IsNullOrEmpty(pZoneGroupId) Then
            _strSQL &= " WHERE STORAGE_ZONE_ID = '" & pZoneGroupId & "'"
        End If
        If Not String.IsNullOrEmpty(pOrgGroupId) Then
            If pOrgGroupId <> "ALL" Then
                _strSQL &= " AND  ORG_GROUP_ID = '" & pOrgGroupId & "'"
            End If
        End If
        If Not String.IsNullOrEmpty(pBUnit) Then
            _strSQL &= " AND ORG_ID = '" & pBUnit & "'"
        End If
        If Not String.IsNullOrEmpty(pArea) Then
            _strSQL &= " AND STORAGE_AREA LIKE '" & pArea & "%'"
        End If



        Try
            If log.IsInfoEnabled Then log.Info(methodBaseName & ":Query to fetch the data:" & _strSQL)
            _dsLocationsAllocated = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                     _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)

            Return ATPAR_E_LOCALDBSELECTFAIL
        End Try

        Try
            If _dsLocationsAllocated.Tables(0).Rows.Count = 0 Then
                For i = 0 To pDsStorageLevels.Tables(0).Rows.Count - 1
                    pDsStorageLevels.Tables(0).Rows(i).Item("CHK_VALUE") = "0"
                    pDsStorageLevels.Tables(0).Rows(i).Item("CHK_ALLOCATED") = "0"
                    pDsStorageLevels.Tables(0).Rows(i).Item("PERFORM_ACTION") = "0"
                Next
            ElseIf _dsLocationsAllocated.Tables(0).Rows.Count > 0 Then

                'TODO : Need to remove loops
                For j = 0 To pDsStorageLevels.Tables(0).Rows.Count - 1

                    pDsStorageLevels.Tables(0).Rows(j).Item("PERFORM_ACTION") = "0"

                    For i = 0 To _dsLocationsAllocated.Tables(0).Rows.Count - 1

                        If (pDsStorageLevels.Tables(0).Rows(j).Item("STORAGE_AREA") = _dsLocationsAllocated.Tables(0).Rows(i).Item("STORAGE_AREA")) _
                        And (pDsStorageLevels.Tables(0).Rows(j).Item("STOR_LEVEL_1") = _dsLocationsAllocated.Tables(0).Rows(i).Item("STOR_LEVEL_1")) _
                        And (pDsStorageLevels.Tables(0).Rows(j).Item("STOR_LEVEL_2") = _dsLocationsAllocated.Tables(0).Rows(i).Item("STOR_LEVEL_2")) _
                        And (pDsStorageLevels.Tables(0).Rows(j).Item("STOR_LEVEL_3") = _dsLocationsAllocated.Tables(0).Rows(i).Item("STOR_LEVEL_3")) _
                         And (pDsStorageLevels.Tables(0).Rows(j).Item("STOR_LEVEL_4") = _dsLocationsAllocated.Tables(0).Rows(i).Item("STOR_LEVEL_4")) _
                        And (pDsStorageLevels.Tables(0).Rows(j).Item("BUSINESS_UNIT") = _dsLocationsAllocated.Tables(0).Rows(i).Item("ORG_ID")) Then
                            'Checking whether Middle Tire DB UserId Column is same as Selected User Id in the Webpages or not.

                            If log.IsInfoEnabled Then log.Info(methodBaseName & ":Condition :True")
                            If _dsLocationsAllocated.Tables(0).Rows(i).Item("STORAGE_ZONE_ID") = pZoneGroupId Then
                                pDsStorageLevels.Tables(0).Rows(j).Item("CHK_VALUE") = "1"
                                pDsStorageLevels.Tables(0).Rows(j).Item("CHK_ALLOCATED") = "1"
                            End If
                        End If
                    Next 'for i = 0 To _dsLocationsAllocated.Tables(0).Rows.Count - 1
                Next 'for j = 0 To pDsStorageLevels.Tables(0).Rows.Count - 1
            End If
            With pDsStorageLevels.Tables(0)
                For i = 0 To .Rows.Count - 1
                    .Rows(i).Item("ROWINDEX") = i
                Next
                .AcceptChanges()
            End With

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Remote Call failed " & ex.ToString)
            Return E_SERVERERROR
        End Try



    End Function

    ''' <summary>
    ''' To insert the Location details for the logged in user with the Location group id details
    ''' </summary>
    ''' <param name="pOrgGroupId">Logged in User Org Group Id</param>
    ''' <param name="pZoneGroupId">Zone Group ID</param>
    ''' <param name="pDsZoneStorageLevels">Dataset with details to insert </param>
    ''' <param name="pDeviceTokenEntry">DeviceTokenEntry Enum</param>
    ''' <returns>ATPAR_OK on Success, else E_SERVERERROR</returns>
    ''' <remarks></remarks>
    Public Function InsertZoneStorageLevels(ByVal pOrgGroupId As String, ByVal pZoneGroupId As String, _
                                            ByVal pDsZoneStorageLevels As DataSet, ByVal pDeviceTokenEntry() As String) As Long _
                                          Implements IAtpar_WebTrans.InsertZoneStorageLevels

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Dim _trans As SqlTransaction

        Try
            sqlConnect = m_LocalDB.CreateConnection()
            sqlConnect.Open()
            _trans = sqlConnect.BeginTransaction()

            Dim _strSQL As String = String.Empty
            Dim _strOrgId As String = String.Empty
            Dim _sbSQL As New StringBuilder
            Dim _strStorageArea As String = String.Empty
            Dim _strStor_Level1 As String = String.Empty
            Dim _strStor_Level2 As String = String.Empty
            Dim _strStor_Level3 As String = String.Empty
            Dim _strStor_Level4 As String = String.Empty


            Dim _statusCode As Long = -1
            Dim _dsZoneDetails As New DataSet
            Dim _dvZoneDetails As New DataView
            Dim _dtZoneDetails As New DataTable

            If log.IsDebugEnabled Then log.Debug(methodBaseName & " : pZoneGroupId in BR: " & pZoneGroupId & " : ")

            If pDsZoneStorageLevels.Tables.Count > 0 Then
                If pDsZoneStorageLevels.Tables(0).Rows.Count > 0 Then

                    If log.IsDebugEnabled Then log.Debug(methodBaseName & " :pDsZoneStorageLevels.Tables(0).Rows.Count : " & pDsZoneStorageLevels.Tables(0).Rows.Count)

                    ' to check which rows needs to be deleted
                    _dvZoneDetails = pDsZoneStorageLevels.Tables(0).DefaultView
                    _dvZoneDetails.RowFilter = "PERFORM_ACTION = " & Perform_Action.DELETE
                    _dtZoneDetails = _dvZoneDetails.ToTable()
                    _dsZoneDetails.Tables.Clear()
                    _dsZoneDetails.Tables.Add(_dtZoneDetails)

                    ' to delete the rows which are un checked in the data grid
                    If _dsZoneDetails.Tables.Count > 0 Then
                        If _dsZoneDetails.Tables(0).Rows.Count Then

                            For intLocCnt As Integer = 0 To _dsZoneDetails.Tables(0).Rows.Count - 1
                                _strOrgId = String.Empty
                                _strSQL = String.Empty
                                _strOrgId = _dsZoneDetails.Tables(0).Rows(intLocCnt).Item("BUSINESS_UNIT").ToString
                                _strStorageArea = String.Empty
                                _strStorageArea = _dsZoneDetails.Tables(0).Rows(intLocCnt).Item("STORAGE_AREA").ToString()
                                _strStor_Level1 = String.Empty
                                _strStor_Level1 = _dsZoneDetails.Tables(0).Rows(intLocCnt).Item("STOR_LEVEL_1").ToString()
                                _strStor_Level2 = String.Empty
                                _strStor_Level2 = _dsZoneDetails.Tables(0).Rows(intLocCnt).Item("STOR_LEVEL_2").ToString()
                                _strStor_Level3 = String.Empty
                                _strStor_Level3 = _dsZoneDetails.Tables(0).Rows(intLocCnt).Item("STOR_LEVEL_3").ToString()
                                _strStor_Level4 = String.Empty
                                _strStor_Level4 = _dsZoneDetails.Tables(0).Rows(intLocCnt).Item("STOR_LEVEL_4").ToString()

                                _strSQL = " DELETE FROM MT_ATPAR_ZONE_STORAGE_LEVELS WHERE STORAGE_ZONE_ID = '" & pZoneGroupId & "' "
                                _strSQL &= " AND STORAGE_AREA = '" & _strStorageArea & "'"
                                _strSQL &= " AND STOR_LEVEL_1 = '" & _strStor_Level1 & "'"
                                _strSQL &= " AND STOR_LEVEL_2 = '" & _strStor_Level2 & "'"
                                _strSQL &= " AND STOR_LEVEL_3 = '" & _strStor_Level3 & "'"
                                _strSQL &= " AND STOR_LEVEL_4 = '" & _strStor_Level4 & "'"
                                If Not String.IsNullOrEmpty(_strOrgId) Then
                                    _strSQL &= " AND ORG_ID = '" & _strOrgId & "'"
                                End If
                              
                                If Not String.IsNullOrEmpty(pOrgGroupId) Then
                                    _strSQL &= " AND ORG_GROUP_ID = '" & pOrgGroupId & "'"
                                End If
                                Try
                                    If log.IsInfoEnabled Then log.Info(methodBaseName & " :Query to delete the data from MT_ATPAR_ZONE_STORAGE_LEVELS: " & _strSQL & " : ")
                                    m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), _trans)
                                Catch ex As Exception
                                    _trans.rollback()
                                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                                        _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
                                    Return ATPAR_E_LOCALDBDELETEFAIL
                                End Try
                            Next
                        End If
                    End If

                    ' to find out the rows which are newly checked in the grid
                    _dvZoneDetails = pDsZoneStorageLevels.Tables(0).DefaultView
                    _dvZoneDetails.RowFilter = "PERFORM_ACTION = " & Perform_Action.ADD
                    _dtZoneDetails = _dvZoneDetails.ToTable()
                    _dsZoneDetails.Tables.Clear()
                    _dsZoneDetails.Tables.Add(_dtZoneDetails)

                    ' to insert the rows which are newly checked in the grid
                    If _dsZoneDetails.Tables.Count > 0 Then
                        If _dsZoneDetails.Tables(0).Rows.Count Then
                            For intRowCnt As Integer = 0 To _dsZoneDetails.Tables(0).Rows.Count - 1
                                _strOrgId = String.Empty
                                _strOrgId = _dsZoneDetails.Tables(0).Rows(intRowCnt).Item("BUSINESS_UNIT").ToString
                                _strStorageArea = String.Empty
                                _strStorageArea = Replace(_dsZoneDetails.Tables(0).Rows(intRowCnt).Item("STORAGE_AREA").ToString(), "'", "''")
                                _strStor_Level1 = String.Empty
                                _strStor_Level1 = _dsZoneDetails.Tables(0).Rows(intRowCnt).Item("STOR_LEVEL_1").ToString()
                                _strStor_Level2 = String.Empty
                                _strStor_Level2 = _dsZoneDetails.Tables(0).Rows(intRowCnt).Item("STOR_LEVEL_2").ToString()
                                _strStor_Level3 = String.Empty
                                _strStor_Level3 = _dsZoneDetails.Tables(0).Rows(intRowCnt).Item("STOR_LEVEL_3").ToString()
                                _strStor_Level4 = String.Empty
                                _strStor_Level4 = _dsZoneDetails.Tables(0).Rows(intRowCnt).Item("STOR_LEVEL_4").ToString()

                                With _sbSQL
                                    .Append("INSERT INTO MT_ATPAR_ZONE_STORAGE_LEVELS(")
                                    .Append("ORG_GROUP_ID, ")
                                    .Append("STORAGE_ZONE_ID, ")
                                    .Append("ORG_ID, ")
                                    .Append("STORAGE_AREA, ")
                                    .Append("STOR_LEVEL_1, ")
                                    .Append("STOR_LEVEL_2, ")
                                    .Append("STOR_LEVEL_3, ")
                                    .Append("STOR_LEVEL_4, ")
                                    .Append(" LAST_UPDATE_DATE, ")
                                    .Append("LAST_UPDATE_USER) ")
                                    .Append("VALUES(")
                                    .Append("'" & pOrgGroupId & "',")
                                    .Append("'" & pZoneGroupId & "',")
                                    .Append("'" & _strOrgId & "',")
                                    .Append("'" & _strStorageArea & "',")
                                    .Append("'" & _strStor_Level1 & "',")
                                    .Append("'" & _strStor_Level2 & "',")
                                    .Append("'" & _strStor_Level3 & "',")
                                    .Append("'" & _strStor_Level4 & "',")
                                    .Append("'" & Now() & "',")
                                    .Append("'" & pDeviceTokenEntry(TokenEntry_Enum.UserID) & "')")
                                End With

                                Try
                                    If log.IsInfoEnabled Then log.Info(methodBaseName & vbCrLf & _sbSQL.ToString)
                                    m_LocalDB.ExecuteNonQuery(_trans, CommandType.Text, _sbSQL.ToString)
                                Catch ex As Exception
                                    _trans.Rollback()
                                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                                        _sbSQL.ToString & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
                                    Return ATPAR_E_LOCALDBINSERTFAIL
                                Finally
                                    _sbSQL.Remove(0, _sbSQL.Length)
                                End Try
                            Next
                        End If
                    End If
                    _trans.Commit()
                    Return ATPAR_OK
                End If
            Else
                _trans.Rollback()
                Return E_SERVERERROR
            End If
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ":Remote Call failed: " & ex.ToString)
            _trans.Rollback()
            Return E_SERVERERROR
        Finally
            _trans = Nothing
            sqlConnect = Nothing
        End Try
    End Function

    Public Function GetUserStorageZones(ByVal pUserId As String, ByVal pOrgGroupId As String, ByVal pZoneGroupId As String, _
                              ByVal pDisplayMode As String, ByVal pAppId As Integer, ByRef pDsZoneGrps As DataSet, _
                              ByVal pDeviceTokenEntry() As String) As Long _
                              Implements IAtpar_WebTrans.GetUserStorageZones


        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Dim _strSQL As String = String.Empty

        _strSQL = " SELECT STORAGE_ZONE_ID,STORAGE_ZONE_DESCR FROM MT_ATPAR_STORAGE_ZONE WHERE STATUS=1   "
        If Not String.IsNullOrEmpty(pOrgGroupId) Then
            If pOrgGroupId <> "ALL" Then
                _strSQL &= " AND ORG_GROUP_ID = '" & pOrgGroupId & "'"
            End If
        End If
        Try
            If log.IsInfoEnabled Then log.Info(methodBaseName & " :Query to fetch the data from MT_ATPAR_STORAGE_ZONE: " & _strSQL & " : ")
            pDsZoneGrps = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                            _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBSELECTFAIL
        End Try

        Dim dcCol1 As New DataColumn
        dcCol1.ColumnName = "CHK_VALUE"
        dcCol1.DefaultValue = 0
        pDsZoneGrps.Tables(0).Columns.Add(dcCol1)

        Dim dcCol2 As New DataColumn
        dcCol2.ColumnName = "USER_ID"
        dcCol2.DefaultValue = String.Empty
        pDsZoneGrps.Tables(0).Columns.Add(dcCol2)

        'ROWINDEX column is added to track down selected locations on the web screen, 
        'particularly useful when paging is applied
        Dim dcCol3 As New DataColumn
        dcCol3.ColumnName = "ROWINDEX"
        dcCol3.DefaultValue = 0
        pDsZoneGrps.Tables(0).Columns.Add(dcCol3)

        Dim dcCol4 As New DataColumn
        dcCol4.ColumnName = "CHK_ALLOCATED"
        dcCol4.DefaultValue = 0
        pDsZoneGrps.Tables(0).Columns.Add(dcCol4)
        'Getting the data from MT_ATPAR_LOC_GROUP_MEMBERS
        Dim _dsLocationsAllocated As DataSet
        Dim _dsUsers As DataSet
        Dim _strUsers As String = String.Empty
        Dim i As Integer = 0
        Dim j As Integer = 0

        'To get the data which is assigned
        _strSQL = "SELECT ORG_GROUP_ID,STORAGE_ZONE_ID,USER_ID FROM MT_ATPAR_STORAGE_ZONES_ALLOCATION  WHERE USER_ID='" & pUserId & "' AND APP_ID='" & pAppId & "'  "
        If Not String.IsNullOrEmpty(pOrgGroupId) Then
            If pOrgGroupId <> "ALL" Then
                _strSQL &= " AND ORG_GROUP_ID = '" & pOrgGroupId & "'"
            End If
        End If
        If Not String.IsNullOrEmpty(pZoneGroupId) Then
            _strSQL &= " AND STORAGE_ZONE_ID LIKE '" & pZoneGroupId & "%'"
        End If

        Try
            If log.IsInfoEnabled Then log.Info(methodBaseName & ":Query to fetch the data:" & _strSQL)
            _dsLocationsAllocated = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                     _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)

            Return ATPAR_E_LOCALDBSELECTFAIL
        End Try


        Try
            If _dsLocationsAllocated.Tables(0).Rows.Count = 0 Then
                For i = 0 To pDsZoneGrps.Tables(0).Rows.Count - 1

                    'To get the Users with same data
                    _strSQL = String.Empty
                    _strSQL = "SELECT  DISTINCT B.FIRST_NAME + ' ' + B.MIDDLE_INITIAL + ' ' + B.LAST_NAME + ' (' + B.USER_ID + ')' AS USERNAME " & _
                              "FROM MT_ATPAR_STORAGE_ZONES_ALLOCATION A, MT_ATPAR_USER B WHERE A.USER_ID = B.USER_ID AND " & _
                              "STORAGE_ZONE_ID = '" & pDsZoneGrps.Tables(0).Rows(i).Item("STORAGE_ZONE_ID") & "'"

                    If Not String.IsNullOrEmpty(pOrgGroupId) Then
                        If pOrgGroupId <> "ALL" Then
                            _strSQL &= " AND ORG_GROUP_ID = '" & pOrgGroupId & "'"
                        End If
                    End If

                    Try
                        If log.IsInfoEnabled Then log.Info(methodBaseName & ":Query to fetch the Allocated Zones to users when NoData :" & _strSQL)
                        _dsUsers = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))
                    Catch ex As Exception
                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                 _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)

                        Return ATPAR_E_LOCALDBSELECTFAIL
                    End Try
                    _strUsers = String.Empty
                    If _dsUsers.Tables.Count > 0 Then
                        If _dsUsers.Tables(0).Rows.Count > 0 Then
                            For _intCnt As Integer = 0 To _dsUsers.Tables(0).Rows.Count - 1
                                _strUsers = _strUsers & IIf((_strUsers <> ""), ",", "")
                                _strUsers = _strUsers & _dsUsers.Tables(0).Rows(_intCnt).Item("USERNAME").ToString
                            Next
                        End If
                    End If
                    'Updating the data
                    pDsZoneGrps.Tables(0).Rows(i).Item("USER_ID") = _strUsers
                    pDsZoneGrps.Tables(0).Rows(i).Item("CHK_VALUE") = "0"
                    pDsZoneGrps.Tables(0).Rows(i).Item("CHK_ALLOCATED") = "0"
                Next
            ElseIf _dsLocationsAllocated.Tables(0).Rows.Count > 0 Then

                'TODO : Need to remove loops
                For j = 0 To pDsZoneGrps.Tables(0).Rows.Count - 1
                    For i = 0 To _dsLocationsAllocated.Tables(0).Rows.Count - 1

                        'To get the Users with same data
                        _strSQL = String.Empty
                        _strSQL = "SELECT  DISTINCT A.USER_ID, B.FIRST_NAME + ' ' + B.MIDDLE_INITIAL + ' ' + B.LAST_NAME + ' (' + B.USER_ID + ')' AS USERNAME " & _
                              "FROM MT_ATPAR_STORAGE_ZONES_ALLOCATION A, MT_ATPAR_USER B WHERE A.USER_ID = B.USER_ID AND " & _
                              "STORAGE_ZONE_ID = '" & pDsZoneGrps.Tables(0).Rows(j).Item("STORAGE_ZONE_ID") & "'"

                        If Not String.IsNullOrEmpty(pOrgGroupId) Then
                            If pOrgGroupId <> "ALL" Then
                                _strSQL &= " AND ORG_GROUP_ID = '" & pOrgGroupId & "'"
                            End If
                        End If

                        Try
                            If log.IsInfoEnabled Then log.Info(methodBaseName & ":Query to fetch the Allocated Zones to users when Data Found:" & _strSQL)
                            _dsUsers = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))
                        Catch ex As Exception
                            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                     _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)

                            Return ATPAR_E_LOCALDBSELECTFAIL
                        End Try
                        _strUsers = String.Empty
                        If _dsUsers.Tables.Count > 0 Then
                            If _dsUsers.Tables(0).Rows.Count > 0 Then
                                For _intCnt As Integer = 0 To _dsUsers.Tables(0).Rows.Count - 1
                                    _strUsers = _strUsers & IIf((_strUsers <> ""), ",", "")
                                    _strUsers = _strUsers & _dsUsers.Tables(0).Rows(_intCnt).Item("USERNAME").ToString
                                Next
                            End If
                        End If

                        If log.IsDebugEnabled Then log.Debug(methodBaseName & ":Users string:" & _strUsers)
                        pDsZoneGrps.Tables(0).Rows(j).Item("USER_ID") = _strUsers

                        'Updating the data
                        If pDsZoneGrps.Tables(0).Rows(j).Item("STORAGE_ZONE_ID") = _dsLocationsAllocated.Tables(0).Rows(i).Item("STORAGE_ZONE_ID") Then
                            pDsZoneGrps.Tables(0).Rows(j).Item("CHK_VALUE") = "1"
                            pDsZoneGrps.Tables(0).Rows(j).Item("CHK_ALLOCATED") = "1"
                        End If
                    Next 'for i = 0 To _dsLocationsAllocated.Tables(0).Rows.Count - 1
                Next 'for j = 0 To pDsZoneGrps.Tables(0).Rows.Count - 1
            End If
            With pDsZoneGrps.Tables(0)
                For i = 0 To .Rows.Count - 1
                    .Rows(i).Item("ROWINDEX") = i
                Next
                .AcceptChanges()
            End With

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Remote Call failed " & ex.ToString)
            Return E_SERVERERROR
        End Try

    End Function

    Public Function InsertUserStorageZones(ByVal pOrgGroupId As String, ByVal pZoneGroupId As String, _
                              ByVal pAssignedUserId As String, ByVal pDsZoneGrps As DataSet, _
                               ByVal pAppId As Integer, ByVal pDeviceTokenEntry() As String) As Long _
                              Implements IAtpar_WebTrans.InsertUserStorageZones

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        If log.IsDebugEnabled Then log.Debug(methodBaseName & "pZoneGroupId:" & pZoneGroupId)

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Dim _trans As SqlTransaction
        sqlConnect = m_LocalDB.CreateConnection()
        sqlConnect.Open()
        _trans = sqlConnect.BeginTransaction()

        Dim _strSQL As String = String.Empty
        Dim _sbSQL As New StringBuilder

        _strSQL = "DELETE FROM MT_ATPAR_STORAGE_ZONES_ALLOCATION WHERE  ORG_GROUP_ID  = '" & pOrgGroupId & "'  AND USER_ID = '" & pAssignedUserId & "' AND APP_ID = '" & pAppId & "' "
        If Not String.IsNullOrEmpty(pZoneGroupId) Then
            _strSQL = _strSQL & "AND STORAGE_ZONE_ID Like '" & pZoneGroupId & "%' "
        End iF

        Try
            If log.IsInfoEnabled Then log.Info(methodBaseName & " :Query to delete the data from MT_ATPAR_STORAGE_ZONES_ALLOCATION: " & _strSQL & " : ")
            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), _trans)
        Catch ex As Exception
            _trans.rollback()
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)

            Return ATPAR_E_LOCALDBDELETEFAIL
        End Try

        If pDsZoneGrps.Tables.Count > 0 Then
            If pDsZoneGrps.Tables(0).Rows.Count > 0 Then

                If log.IsInfoEnabled Then log.Info(methodBaseName & " :pDsZoneGrps.Tables(0).Rows.Count : " & pDsZoneGrps.Tables(0).Rows.Count)
                For intCnt As Integer = 0 To pDsZoneGrps.Tables(0).Rows.Count - 1

                    If pDsZoneGrps.Tables(0).Rows(intCnt).Item("CHK_VALUE") = "1" Then
                        With _sbSQL
                            .Append(" INSERT INTO MT_ATPAR_STORAGE_ZONES_ALLOCATION(APP_ID,ORG_GROUP_ID,STORAGE_ZONE_ID,USER_ID,")
                            .Append(" LAST_UPDATE_DATE,LAST_UPDATE_USER) ")
                            .Append(" VALUES('" & pAppId & "','" & pOrgGroupId & "','" & pDsZoneGrps.Tables(0).Rows(intCnt).Item("STORAGE_ZONE_ID") & "',")
                            .Append(" '" & pAssignedUserId & "','" & Now() & "','" & pDeviceTokenEntry(TokenEntry_Enum.UserID) & "')")
                        End With
                        Try

                            If log.IsInfoEnabled Then log.Info(methodBaseName & " Inserting the Location Group Id Allocation  " & _
                                            "details to user :'" & pAssignedUserId & "' with the following SQL... " & vbCrLf & _sbSQL.ToString & vbCrLf)
                            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString), _trans)
                        Catch ex As Exception
                            _trans.Rollback()
                            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                                _sbSQL.ToString & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
                            Return ATPAR_E_LOCALDBINSERTFAIL

                        Finally
                            _sbSQL.Remove(0, _sbSQL.Length)
                        End Try
                    End If

                Next
                _trans.Commit()
                Return ATPAR_OK
            End If
        End If


    End Function

    Public Function UpdateZones(ByVal pZoneId As String, ByVal pZoneDesc As String, ByVal pStatus As Integer, _
                    ByVal pOrgGrpId As String, ByVal pUserId As String, ByVal pDeviceTokenEntry() As String) As Long _
                    Implements IAtpar_WebTrans.UpdateZones

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserId
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Dim _trans As SqlTransaction
        sqlConnect = m_LocalDB.CreateConnection()
        sqlConnect.Open()
        _trans = sqlConnect.BeginTransaction()

        '''
        'Here status :
        '0' - Zone Delete
        '1' - Zone Update
        '''
        Dim _strSQL As String = String.Empty
        Dim _intCnt As Integer
        Try
            _strSQL = "SELECT COUNT(*) FROM MT_ATPAR_STORAGE_ZONES_ALLOCATION WHERE STORAGE_ZONE_ID='" & pZoneId & "'   AND ORG_GROUP_ID='" & pOrgGrpId & "'"
            '  AND ORG_GROUP_ID='" & pOrgGrpId & "' AND USER_ID = '" & pUserId & "'"
            Try
                If log.IsInfoEnabled Then log.Info(methodBaseName & " :To check the existance of allocation: " & _strSQL & " : ")
                _intCnt = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(_strSQL), _trans)
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                    _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)

                Return ATPAR_E_LOCALDBSELECTFAIL
            End Try
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                            _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)

            Return ATPAR_E_LOCALDBSELECTFAIL
        End Try
        If _intCnt > 0 And pStatus = 0 Then
            Return ATPAR_E_CANNOTUPDATESTATUS
        End If
        Try
            _strSQL = " DELETE FROM  MT_ATPAR_ZONE_STORAGE_LEVELS  WHERE STORAGE_ZONE_ID='" & pZoneId & "'" & _
                      " AND ORG_GROUP_ID='" & pOrgGrpId & "'"
            Try
                If log.IsInfoEnabled Then log.Info(methodBaseName & " :Query to delete the data from MT_ATPAR_STORAGE_ZONES_ALLOCATION: " & _strSQL & " : ")
                m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), _trans)
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                    _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)

                Return ATPAR_E_LOCALDBUPDATEFAIL
            End Try
            _strSQL = String.Empty
            _strSQL = " DELETE FROM  MT_ATPAR_STORAGE_ZONE  WHERE STORAGE_ZONE_ID='" & pZoneId & "'" & _
                      " AND ORG_GROUP_ID='" & pOrgGrpId & "'"
            Try
                If log.IsInfoEnabled Then log.Info(methodBaseName & " :Query to delete the data from MT_ATPAR_STORAGE_ZONE: " & _strSQL & " : ")
                m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), _trans)
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                    _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)

                Return ATPAR_E_LOCALDBUPDATEFAIL
            End Try
            _trans.Commit()
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                            _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
            _trans.Rollback()
            Return ATPAR_E_LOCALDBUPDATEFAIL
        End Try
    End Function

#End Region

#Region "Dynamic Report"

    Public Function GetDynamicReport(ByVal pAppId As String, ByVal pOrgGroupId As String, ByVal pObjectId As String, ByVal pPrinterType As String, _
                                    ByRef pDsReportDetails As DataSet, _
                                    ByVal pDeviceTokenEntry() As String) As Long _
                                     Implements IAtpar_WebTrans.GetDynamicReport

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try


        Dim _strSQL As String = String.Empty
        Dim _intCnt As Integer
        Try
            _strSQL = "SELECT * FROM MT_ATPAR_PRINT_FIELD_DEFAULTS WHERE APP_ID=" + pAppId + " AND SECTION='HEADER' AND OBJECT_ID='" + pObjectId + "' ORDER BY LINE_NO " & _
                      " ; SELECT * FROM MT_ATPAR_PRINT_FIELD_DEFAULTS WHERE APP_ID=" + pAppId + " AND SECTION='DETAILS' AND OBJECT_ID='" + pObjectId + "' ORDER BY LINE_NO " & _
                      " ; SELECT PDF.APP_ID,PDF.OBJECT_ID,PDF.LINE_NO,PDF.FIELD_NAME,PDF.FIELD_TYPE,PT.TEXT_VALUE," & _
                      " PDF.FIELD_GROUP, PT.ROW_POSITION, PT.COLUMN_POSITION, PT.DISPLAY_NAME, PT.VISIBLE " & _
                      ",PDF.FIELD_SIZE ,PT.ALIGNMENT,PT.HEADERFONT,PT.VALUEFONT,PDF.SECTION FROM  MT_ATPAR_PRINT_FIELD_DEFAULTS PDF,MT_ATPAR_PRINT_LABEL_DETAILS PT" & _
                      " WHERE PDF.APP_ID=PT.APP_ID AND PDF.OBJECT_ID=PT.OBJECT_ID AND " & _
                      " PDF.FIELD_NAME=PT.FIELD_NAME AND PDF.LINE_NO=PT.LINE_NO AND SECTION='HEADER' AND PDF.OBJECT_ID='" + pObjectId + "' AND  PDF.APP_ID=" + pAppId + " " & _
                      " ; SELECT PDF.APP_ID,PDF.OBJECT_ID,PDF.LINE_NO,PDF.FIELD_NAME,PDF.FIELD_TYPE,PT.TEXT_VALUE," & _
                      " PDF.FIELD_GROUP, PT.ROW_POSITION, PT.COLUMN_POSITION, PT.DISPLAY_NAME, PT.VISIBLE " & _
                      ",PDF.FIELD_SIZE ,PT.ALIGNMENT,PT.HEADERFONT,PT.VALUEFONT,PDF.SECTION FROM  MT_ATPAR_PRINT_FIELD_DEFAULTS PDF,MT_ATPAR_PRINT_LABEL_DETAILS PT" & _
                      " WHERE PDF.APP_ID=PT.APP_ID AND PDF.OBJECT_ID=PT.OBJECT_ID AND " & _
                      " PDF.FIELD_NAME=PT.FIELD_NAME AND PDF.LINE_NO=PT.LINE_NO AND SECTION='DETAILS' AND PDF.OBJECT_ID='" + pObjectId + "' AND PDF.APP_ID=" + pAppId + "" & _
                      " ; SELECT  DISTINCT HEADERFONT,VALUEFONT  FROM  MT_ATPAR_PRINT_LABEL_DETAILS PLD,MT_ATPAR_PRINT_FIELD_DEFAULTS PLH WHERE PLH.APP_ID = PLD.APP_ID And PLH.OBJECT_ID = PLD.OBJECT_ID AND VISIBLE=1 AND PLH.LINE_NO=PLD.LINE_NO AND PLD.TEXT_VALUE='TEXT' AND PLD.APP_ID ='" + pAppId + "' AND PLD.OBJECT_ID='" + pObjectId + "' AND SECTION='HEADER'" & _
                      " ; SELECT  DISTINCT HEADERFONT,VALUEFONT FROM  MT_ATPAR_PRINT_LABEL_DETAILS PLD,MT_ATPAR_PRINT_FIELD_DEFAULTS PLH WHERE PLH.APP_ID = PLD.APP_ID And PLH.OBJECT_ID = PLD.OBJECT_ID AND VISIBLE=1 AND PLH.LINE_NO=PLD.LINE_NO AND PLD.TEXT_VALUE='VALUE' AND PLD.APP_ID ='" + pAppId + "' AND PLD.OBJECT_ID='" + pObjectId + "' AND SECTION='DETAILS' "

            Try
                If log.IsInfoEnabled Then log.Info(methodBaseName & ":Query to fetch the data:" & _strSQL)
                pDsReportDetails = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                    _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)

                Return ATPAR_E_LOCALDBSELECTFAIL
            End Try
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                            _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)

            Return ATPAR_E_LOCALDBSELECTFAIL
        End Try


    End Function

    Public Function SaveDynamicPrintReport(ByVal pAppId As String, ByVal pOrgGroupId As String, ByVal pPrinterType As String, _
                                 ByVal pObjectID As String, ByVal pObjectDesc As String, ByRef pDsReportDetails As DataSet, _
                                 ByVal pDeviceTokenEntry() As String) As Long _
                                  Implements IAtpar_WebTrans.SaveDynamicPrintReport

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = MethodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Dim _trans As SqlTransaction
        sqlConnect = m_LocalDB.CreateConnection()
        sqlConnect.Open()
        _trans = sqlConnect.BeginTransaction()

        Dim _strSQL As String = String.Empty
        Dim _sbSQL As New StringBuilder
        Dim _intCnt As Integer

        Try


            _strSQL = " DELETE FROM  MT_ATPAR_PRINT_LABEL_DETAILS WHERE APP_ID='" & pAppId & "' AND OBJECT_ID='" & pObjectID & "'"

            Try
                If log.IsInfoEnabled Then log.Info(methodBaseName & " :Query to delete the data from MT_ATPAR_PRINT_LABEL_DETAILS: " & _strSQL & " : ")
                m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), _trans)
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                    _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)

                Return ATPAR_E_LOCALDBUPDATEFAIL
            End Try

            _strSQL = String.Empty
            _strSQL = " DELETE FROM  MT_ATPAR_PRINT_OBJECTS_INFO WHERE APP_ID='" & pAppId & "' AND OBJECT_ID='" & pObjectID & "' AND PRINTER_TYPE='" & pPrinterType.Trim & "'"
            Try
                If log.IsInfoEnabled Then log.Info(methodBaseName & " :Query to delete the data from MT_ATPAR_PRINT_LABEL_HEADER : " & _strSQL & " : ")
                m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_strSQL), _trans)
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                    _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)

                Return ATPAR_E_LOCALDBUPDATEFAIL
            End Try

            If pDsReportDetails.Tables(0).Rows.Count > 0 Then

                For intCnt As Integer = 0 To pDsReportDetails.Tables(0).Rows.Count - 1
                    If intCnt = 0 Then
                        With _sbSQL
                            .Append(" INSERT INTO MT_ATPAR_PRINT_OBJECTS_INFO(APP_ID, OBJECT_ID, OBJECT_DESC, PRINTER_TYPE,OBJECT_TYPE )")
                            .Append(" VALUES('" & pAppId & "','" & pObjectID & "','" & pObjectDesc & "',")
                            .Append(" '" & pPrinterType & "','REPORT')")
                        End With

                        Try

                            If log.IsInfoEnabled Then log.Info(methodBaseName & " : Inserting the Dynamic Print Report Details  " & _sbSQL.ToString)
                            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString), _trans)
                        Catch ex As Exception
                            _trans.Rollback()
                            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                                _sbSQL.ToString & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
                            Return ATPAR_E_LOCALDBINSERTFAIL

                        Finally
                            _sbSQL.Remove(0, _sbSQL.Length)
                        End Try
                    End If

                    With _sbSQL
                        .Append(" INSERT INTO MT_ATPAR_PRINT_LABEL_DETAILS(APP_ID, OBJECT_ID,LINE_NO, FIELD_NAME,")
                        .Append(" TEXT_VALUE,ROW_POSITION, COLUMN_POSITION, DISPLAY_NAME, VISIBLE,HEADERFONT,VALUEFONT )")
                        .Append(" VALUES('" & pAppId & "','" & pObjectID & "','" & pDsReportDetails.Tables(0).Rows(intCnt).Item("LINE_NO") & "',")
                        .Append(" '" & pDsReportDetails.Tables(0).Rows(intCnt).Item("FIELD_NAME") & "','" & pDsReportDetails.Tables(0).Rows(intCnt).Item("TEXT_VALUE") & "',")
                        .Append(" '" & pDsReportDetails.Tables(0).Rows(intCnt).Item("ROW_POSITION") & "',")
                        .Append(" '" & pDsReportDetails.Tables(0).Rows(intCnt).Item("COLUMN_POSITION") & "','" & pDsReportDetails.Tables(0).Rows(intCnt).Item("DISPLAY_NAME") & "',")
                        .Append("'1','" & pDsReportDetails.Tables(0).Rows(intCnt).Item("HEADERFONT") & "','" & pDsReportDetails.Tables(0).Rows(intCnt).Item("VALUEFONT") & "')")

                    End With
                    Try

                        If log.IsInfoEnabled Then log.Info(methodBaseName & " : Inserting the Dynamic Print Report Details  " & _sbSQL.ToString)
                        m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString), _trans)
                    Catch ex As Exception
                        _trans.Rollback()
                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                            _sbSQL.ToString & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
                        Return ATPAR_E_LOCALDBINSERTFAIL

                    Finally
                        _sbSQL.Remove(0, _sbSQL.Length)
                    End Try
                Next
             
            End If
            _trans.Commit()
            Return ATPAR_OK

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                            _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
            _trans.Rollback()
            Return ATPAR_E_LOCALDBUPDATEFAIL
        End Try
    End Function

    Public Function GetDynamicPrintProducts(ByVal pUserID As String, ByRef pDsProducts As DataSet, ByVal pDeviceTokenEntry() As String) As Long _
                                     Implements IAtpar_WebTrans.GetDynamicPrintProducts


        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try


      
        Dim _strSQL As String = String.Empty

        Try

            _strSQL = " SELECT B.APP_ID, C.APP_NAME FROM MT_ATPAR_USER A, MT_ATPAR_PROFILE_APP_ACL B,MT_ATPAR_APP " & _
            " C WHERE A.PROFILE_ID = B.PROFILE_ID AND B.APP_ID = C.APP_ID AND " & _
            " B.SERVER_USER='Y' AND A.USER_ID = '" + pUserID + "' AND (B.APP_ID <> 0)  AND " & _
            " B.APP_ID IN (SELECT DISTINCT APP_ID FROM MT_ATPAR_PRINT_FIELD_DEFAULTS)"

            If log.IsInfoEnabled Then log.Info(_strSQL)

            pDsProducts = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))

            If pDsProducts.Tables(0).Rows.Count = 0 Then
                GetDynamicPrintProducts = E_NORECORDFOUND
                Exit Function
            Else
                GetDynamicPrintProducts = ATPAR_OK
            End If

            GetDynamicPrintProducts = ATPAR_OK

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to Get UserProducts " & vbCrLf & _
                                                           " with the following SQL :" & _strSQL & vbCrLf & _
                                                           " Exception is:" & ex.ToString & vbCrLf)
            GetDynamicPrintProducts = ATPAR_E_LOCALDBSELECTFAIL
            Exit Function
        End Try



    End Function

    Public Function GetDynamicPrintReportTypes(ByVal pAppId As Integer, ByRef pDsReportTypes As DataSet, _
                                                ByVal pDeviceTokenEntry() As String) As Long Implements IAtpar_WebTrans.GetDynamicPrintReportTypes
        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Dim _strSQL As String = String.Empty

        Try

            _strSQL = "SELECT DISTINCT (OBJECT_ID) FROM MT_ATPAR_PRINT_FIELD_DEFAULTS WHERE APP_ID=" + pAppId.ToString() + ""

            If log.IsInfoEnabled Then log.Info(_strSQL)

            pDsReportTypes = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))

            If pDsReportTypes.Tables(0).Rows.Count = 0 Then
                GetDynamicPrintReportTypes = E_NORECORDFOUND
                Exit Function
            Else
                GetDynamicPrintReportTypes = ATPAR_OK
            End If

            GetDynamicPrintReportTypes = ATPAR_OK

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to Get Report Types for Dynamic Print Report " & vbCrLf & _
                                                           " with the following SQL :" & _strSQL & vbCrLf & _
                                                           " Exception is:" & ex.ToString & vbCrLf)
            GetDynamicPrintReportTypes = ATPAR_E_LOCALDBSELECTFAIL
            Exit Function
        End Try



    End Function
#End Region

#Region "Data Archival"

    ''' <summary>
    ''' Getting list of products need to purge
    ''' </summary>
    ''' <param name="pDSApps"></param>
    ''' <param name="pDeviceTokenEntry"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function GetPurgeAppIDs(ByRef pDSApps As DataSet, ByVal pDeviceTokenEntry() As String) As Long _
                            Implements IAtpar_WebTrans.GetPurgeAppIDs

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sbSQL As New StringBuilder

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try

            With _sbSQL
                .Append("SELECT DISTINCT(A.APP_ID), B.APP_NAME ")
                .Append(" FROM MT_ATPAR_OBJECTS A ,")
                .Append(" MT_ATPAR_APP B  WHERE A.APP_ID= B.APP_ID AND A.PURGE_FLAG= 1 ")
            End With

            If log.IsInfoEnabled Then log.Info(_sbSQL.ToString)

            pDSApps = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString))

            If pDSApps.Tables(0).Rows.Count = 0 Then
                Return E_NORECORDFOUND
            Else
                Return ATPAR_OK
            End If

        Catch sqlex As SqlException
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the AppIDs " & vbCrLf & _
                                                                 " with the following SQL :" & _sbSQL.ToString & vbCrLf & _
                                                                 " Exception is:" & sqlex.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBSELECTFAIL
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the AppIDs " & vbCrLf & _
                                                                " with the following SQL :" & _sbSQL.ToString & vbCrLf & _
                                                                " Exception is:" & ex.ToString & vbCrLf)
            Return E_SERVERERROR
        End Try

    End Function

    ''' <summary>
    ''' To Archive data
    ''' </summary>
    ''' <param name="pAppId">Application ID</param>
    ''' <param name="pArchiveDate">Archival Date</param>
    ''' <param name="pDeviceTokenEntry">DeviceTokenEntry</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>
    Public Function DoArchivalData(ByVal pAppId As String, _
                                 ByVal pArchiveDate As String, _
                                 ByVal pDeviceTokenEntry() As String) As Long _
                                 Implements IAtpar_WebTrans.DoArchivalData

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.userID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _StatusCode As Long
        Dim _strArchiveServer As String = String.Empty
        Dim _strArchiveDataSource As String = String.Empty
        Dim _strArchiveUserID As String = String.Empty
        Dim _strArchivePwd As String = String.Empty
        Dim _dsArchiveDetails As New dataset
        Dim _drRow() As Data.DataRow
        Dim strDbConnectionString As String = String.Empty
        Dim RetMsg As String = String.Empty

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try

            Dim _strSQL As String = String.Empty

            _strSQL = "SELECT PARAMETER_ID, PARAMETER_VALUE FROM " & _
                      "MT_ATPAR_CONFIGURATION_SECTION_DTLS " & _
                      "WHERE TAB_ID = '" & ConfigurationManager_Tabs.SYSTEMDBCONNECTION.ToString & "'"
            Try
                If log.IsInfoEnabled Then log.Info(methodBaseName & " :Query to fetch the archive data base name from MT_ATPAR_CONFIGURATION_SECTION_DTLS: " & _strSQL & " : ")
                _dsArchiveDetails = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))

            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
                Return ATPAR_E_LOCALDBSELECTFAIL
            End Try

            If _dsArchiveDetails.Tables.Count > 0 Then
                If _dsArchiveDetails.Tables(0).Rows.Count > 0 Then
                    With _dsArchiveDetails

                        _drRow = .Tables(0).Select("PARAMETER_ID = 'ARCHIVE_SERVER'")
                        _strArchiveServer = _drRow(0).Item("PARAMETER_VALUE").ToString

                        _drRow = .Tables(0).Select("PARAMETER_ID = 'ARCHIVE_DATASOURCE'")
                        _strArchiveDataSource = _drRow(0).Item("PARAMETER_VALUE").ToString

                        _drRow = .Tables(0).Select("PARAMETER_ID = 'ARCHIVE_USERID'")
                        _strArchiveUserID = _drRow(0).Item("PARAMETER_VALUE").ToString

                        _drRow = .Tables(0).Select("PARAMETER_ID = 'ARCHIVE_PASSWORD'")
                        _strArchivePwd = _drRow(0).Item("PARAMETER_VALUE").ToString

                    End With
                End If
            End If

            If log.IsDebugEnabled Then log.Debug(methodBaseName & " Archive server is:" & _strArchiveServer)
            If log.IsDebugEnabled Then log.Debug(methodBaseName & " Archive database is:" & _strArchiveDataSource)
            If log.IsDebugEnabled Then log.Debug(methodBaseName & " Archive userID is:" & _strArchiveUserID)

            If Not String.IsNullOrEmpty(_strArchiveDataSource) And Not String.IsNullOrEmpty(_strArchiveUserID) _
               And Not String.IsNullOrEmpty(_strArchiveServer) And Not String.IsNullOrEmpty(_strArchivePwd) Then
                'Checking for Archive data base connection
                strDbConnectionString = "Server=" & _strArchiveServer & ";Database=" & _strArchiveDataSource & ";User ID=" & _strArchiveUserID & ";Password=" & Decrypt(_strArchivePwd) & ";Trusted_Connection=False"
                RetMsg = GetArchiveDataBaseConnection(strDbConnectionString)

                If RetMsg <> "Connection Successfull" Then
                    If log.IsWarnEnabled Then log.Warn(methodBaseName & " Please set valid archive datasource details in Configuration Manager Screen ")
                    Return E_INVALID_ARCHIVE_DATABASE
                End If
            Else
                If log.IsWarnEnabled Then log.Warn(methodBaseName & " Please set archive datasource details in Configuration Manager Screen ")
                Return E_NO_ARCHIVE_DATABASE
            End If
          

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to get archive database name and archive userid " _
                                                                & ex.ToString & ":" & vbCrLf)
            Return E_SERVERERROR
        End Try

        'To get the tables list for archiving


        'Data Archiving Process
        Try
            Dim sqlParms() As SqlParameter

            sqlParms = New SqlParameter(6) {}

            sqlParms(0) = New SqlParameter("@appId", SqlDbType.Int)
            sqlParms(0).Value = CInt(pAppId)

            sqlParms(1) = New SqlParameter("@archivaldate", SqlDbType.NVarChar)
            sqlParms(1).Value = pArchiveDate

            sqlParms(2) = New SqlParameter("@archivaldatasource", SqlDbType.NVarChar)
            sqlParms(2).Value = _strArchiveDataSource

            sqlParms(3) = New SqlParameter("@archivaluserid", SqlDbType.NVarChar)
            sqlParms(3).Value = _strArchiveUserID

            sqlParms(4) = New SqlParameter("@StatusCode", SqlDbType.Int)
            sqlParms(4).Direction = ParameterDirection.Output

            sqlParms(5) = New SqlParameter("@archivalscripts", SqlDbType.NVarChar, -1)
            sqlParms(5).Direction = ParameterDirection.Output

            Dim _Cmd As SqlCommand
            Try
                _Cmd = New SqlCommand

                _Cmd.Connection = m_LocalDB.CreateConnection
                _Cmd.CommandType = CommandType.StoredProcedure
                _Cmd.CommandTimeout = 0
                _Cmd.CommandText = "ATPAR_DATA_PURGE"
                _Cmd.Parameters.Add(sqlParms(0))
                _Cmd.Parameters.Add(sqlParms(1))
                _Cmd.Parameters.Add(sqlParms(2))
                _Cmd.Parameters.Add(sqlParms(3))
                _Cmd.Parameters.Add(sqlParms(4))
                _Cmd.Parameters.Add(sqlParms(5))

                If log.IsInfoEnabled Then log.Info(methodBaseName & " Getting the product parameters :" & _
                                                                      " exec ATPAR_DATA_PURGE " & _
                                                                      "'" & sqlParms(0).value & "', " & _
                                                                      "'" & sqlParms(1).value & "', " & _
                                                                      "'" & sqlParms(2).value & "', " & _
                                                                      "'" & sqlParms(3).value & "', " & _
                                                                      "'" & sqlParms(4).value & "', " & _
                                                                      "'" & sqlParms(5).value & "' ")
                m_LocalDB.ExecuteNonQuery(_Cmd)


            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Insert and delete scripts returned from Data Archival is:" & sqlParms(5).value)
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to archive data from middle tier:" & ex.ToString)
                Return E_SERVERERROR
            Finally
                _Cmd.dispose()
            End Try

            If log.IsDebugEnabled Then log.Debug(methodBaseName & " Insert and delete scripts returned from Data Archival is:" & sqlParms(5).value)

            _StatusCode = sqlParms(4).Value

            If _StatusCode <> ATPAR_OK Then
                If log.IsDebugEnabled Then log.Debug(methodBaseName & " _StatusCode returned for DataArchival is:" & _StatusCode)
                Return _StatusCode
            End If

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to archive data from middle tier" & _
                                                                 " tables: Exception is : " & ex.ToString & _
                                                                 vbCrLf)
            Return E_SERVERERROR
        End Try

        Return ATPAR_OK

    End Function

    Private Function GetArchiveDataBaseConnection(ByVal pdbConnectionString) As String
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _db As GenericDatabase = Nothing

        Try
            _db = New GenericDatabase(pdbConnectionString, System.Data.SqlClient.SqlClientFactory.Instance)
            _db.CreateConnection()
            _db.CreateConnection.Open()
            _db.CreateConnection.Close()
            _db.CreateConnection.Dispose()

            Return "Connection Successfull"

        Catch ex As Exception
            Return ex.ToString
        End Try

    End Function

#End Region

#Region "Audit Implementation"

    ''' <summary>
    '''  Audit Implementation 
    ''' </summary>
    ''' <param name="pUserID"></param>
    ''' <param name="pAppId"></param>
    ''' <param name="pStrFunctionName"></param>
    ''' <param name="pDsAuditData"></param>
    ''' <param name="pDeviceTokenEntry"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Function DoAuditData(ByVal pUserID As String, ByVal pAppId As String, _
                         ByVal pStrFunctionName As String, _
                         ByVal pDsAuditData As DataSet, _
                         ByVal pDeviceTokenEntry() As String) As Long _
                                 Implements IAtpar_WebTrans.DoAuditData

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.userID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _StatusCode As Long = -1
        Dim _dsAuditFields As New DataSet
        Dim _strSearch As String = String.Empty
        Dim _strSQL As String = String.Empty
        Dim strOldvalue As String = String.Empty
        Dim strNewvalue As String = String.Empty
        Dim _strMode As String = String.Empty
        Dim _ds As New DataSet

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        'To Get the Screen related field name, field value from the database
        Dim sqlParms() As SqlParameter

        sqlParms = New SqlParameter(3) {}

        sqlParms(0) = New SqlParameter("@pApp_ID", SqlDbType.NVarChar)
        sqlParms(0).Value = pAppId

        sqlParms(1) = New SqlParameter("@pStrFunctionName", SqlDbType.NVarChar)
        sqlParms(1).Value = pStrFunctionName

        sqlParms(2) = New SqlParameter("@StatusCode", SqlDbType.Int)
        sqlParms(2).Direction = ParameterDirection.Output

        If log.IsInfoEnabled Then
            log.Info("Calling GetAuditFields with the following syntax..")
            _strSQL = "exec GetAuditFields " & _
                                     "'" & sqlParms(0).Value & "', " & _
                                     "'" & sqlParms(1).Value & "', " & _
                                     "'" & sqlParms(2).Value & "' "
            log.Info(_strSQL)
        End If

        Dim _Cmd As SqlCommand
        Try
            _Cmd = New SqlCommand

            _Cmd.Connection = m_LocalDB.CreateConnection
            _Cmd.CommandType = CommandType.StoredProcedure
            _Cmd.CommandTimeout = 0
            _Cmd.CommandText = "GetAuditFields"
            _Cmd.Parameters.Add(sqlParms(0))
            _Cmd.Parameters.Add(sqlParms(1))
            _Cmd.Parameters.Add(sqlParms(2))

            _dsAuditFields = m_LocalDB.ExecuteDataSet(_Cmd)

        Catch sqlex As SqlException
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & vbCrLf & GetSQLExceptionMessageString(sqlex))
            Return ATPAR_E_LOCALDBSELECTFAIL
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("E_SERVERERROR :" & ex.ToString)
            Return E_SERVERERROR
        Finally
            _Cmd.Dispose()
        End Try

        Try
            If pStrFunctionName = CONST_MENU_CODE Then
                If _dsAuditFields.Tables.Count > 0 Then
                    For i As Integer = 0 To _dsAuditFields.Tables(0).Rows.Count - 1
                        _strSearch = String.Empty
                        _strSearch = "PARAMETER_ID = '" & _dsAuditFields.Tables(0).Rows(i).Item("FIELD_NAME") & "'" & _
                                    " AND TAB_ID = '" & _dsAuditFields.Tables(0).Rows(i).Item("SUBFUNCTION_NAME") & "'"
                        If pDsAuditData.Tables.Count > 0 Then
                            Dim dr() As DataRow = pDsAuditData.Tables(0).Select(_strSearch)
                            If dr.Length = 1 Then
                                strOldvalue = String.Empty
                                strNewvalue = String.Empty
                                If Not IsDBNull(dr(0).Item("PARAMETER_VALUE")) Then strNewvalue = dr(0).Item("PARAMETER_VALUE")
                                If Not IsDBNull(_dsAuditFields.Tables(0).Rows(i).Item("PARAMETER_VALUE")) Then strOldvalue = _dsAuditFields.Tables(0).Rows(i).Item("PARAMETER_VALUE")
                                If Not String.IsNullOrEmpty(strOldvalue) Or Not String.IsNullOrEmpty(strNewvalue) Then
                                    If strOldvalue.ToString <> strNewvalue.ToString Then
                                        Try
                                            'Inserting data in Audit table
                                            _StatusCode = InsertAuditInfo(pAppId, pStrFunctionName, _dsAuditFields.Tables(0).Rows(i).Item("SUBFUNCTION_NAME"), _
                                                                          _strSearch, pDeviceTokenEntry(TokenEntry_Enum.UserID), _dsAuditFields.Tables(0).Rows(i).Item("FIELD_NAME"), _
                                                                           strOldvalue, strNewvalue, pDeviceTokenEntry)
                                            If _StatusCode <> ATPAR_OK Then
                                                Return _StatusCode
                                            End If
                                        Catch ex As Exception
                                            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to insert the Audit info " & ex.ToString)
                                            Return ATPAR_E_LOCALDBINSERTFAIL
                                        End Try
                                    End If
                                End If
                            End If
                        End If
                    Next
                End If
            Else
                'This logic is for all Screens
                If _dsAuditFields.Tables.Count > 0 Then

                    Dim strSelQuery As String = String.Empty
                    Dim strtablename As String = String.Empty
                    Dim strKeyColumns As String = String.Empty
                    Dim strkeyfield As String = String.Empty
                    Dim strkeyValue As String = String.Empty
                    Dim strAuditField As String = String.Empty
                    Dim strPrevTblName As String = String.Empty
                    Dim drKeyFields() As DataRow
                    Dim strKeys() As String

                    'To form a select query to fetch the database related value with key values 
                    drKeyFields = _dsAuditFields.Tables(0).Select("KEY_FLAG='Y'")
                    strkeyfield = String.Empty
                    For Each drKeys As DataRow In drKeyFields
                        If Not String.IsNullOrEmpty(strkeyfield) Then
                            strkeyfield = strkeyfield & "," & drKeys.Item("FIELD_NAME").ToString
                        Else
                            strkeyfield = drKeys.Item("FIELD_NAME").ToString
                        End If
                    Next
                    If log.IsInfoEnabled Then log.Info(methodBaseName & " Getting Keys : " & strkeyfield)
                    For i As Integer = 0 To pDsAuditData.Tables(0).Rows.Count - 1
                        _strMode = String.Empty
                        'To check the mode whether the record is allocating or deleting
                        If pDsAuditData.Tables(0).Columns.Contains("RECORD_MODE") Then
                            _strMode = pDsAuditData.Tables(0).Rows(i).Item("RECORD_MODE").ToString
                        End If

                        strKeyColumns = String.Empty
                        If strkeyfield.Contains(",") Then
                            strKeys = Nothing
                            strKeys = Regex.Split(strkeyfield, ",")
                            For Each strRowfield As String In strKeys
                                strkeyValue = String.Empty
                                If strRowfield = "USER_ID" Then
                                    strkeyValue = pUserID
                                Else
                                    strkeyValue = pDsAuditData.Tables(0).Rows(i).Item(strRowfield).ToString
                                End If
                                If Not String.IsNullOrEmpty(strKeyColumns) Then
                                    strKeyColumns = strKeyColumns + "  AND " & strRowfield & "= " & "'" & strkeyValue & "'"
                                Else
                                    strKeyColumns = strRowfield & "= " & "'" & strkeyValue & "'"
                                End If
                            Next
                        Else
                            If strkeyfield = "USER_ID" Then
                                strkeyValue = pUserID
                            Else
                                strkeyValue = pDsAuditData.Tables(0).Rows(i).Item(strkeyfield).ToString
                            End If
                            strKeyColumns = strkeyfield & "= " & "'" & strkeyValue & "'"
                        End If

                        If log.IsInfoEnabled Then log.Info(methodBaseName & " Getting Key Columns : " & strKeyColumns)

                        'TO get the audit related old data from the table based on key values 
                        Dim _droldvalue() As DataRow
                        _droldvalue = _dsAuditFields.Tables(0).Select("KEY_FLAG='N'")

                        If _droldvalue.Length > 0 Then
                            strPrevTblName = String.Empty
                            For Each drAuditFields As DataRow In _droldvalue
                                strAuditField = String.Empty
                                strNewvalue = String.Empty
                                strOldvalue = String.Empty
                                strtablename = String.Empty
                                strSelQuery = String.Empty
                                strtablename = drAuditFields.Item("TABLE_NAME").ToString & " WHERE "
                                strAuditField = drAuditFields.Item("FIELD_NAME").ToString
                                strSelQuery = "SELECT * FROM " + strtablename + strKeyColumns

                                If strPrevTblName <> strtablename Then
                                    Try
                                        'this should return only one record
                                        If log.IsInfoEnabled Then log.Info(methodBaseName & " Getting old value from database with:" & strSelQuery)
                                        _ds = Nothing
                                        _ds = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(strSelQuery))
                                    Catch ex As Exception
                                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the Audit info " & vbCrLf & _
                                                                                                    " with the following SQL :" & strSelQuery & vbCrLf & _
                                                                                                    " Exception is:" & ex.ToString & vbCrLf)
                                        Return ATPAR_E_LOCALDBSELECTFAIL
                                    End Try
                                End If

                                If _ds.Tables(0).Rows.Count > 0 Then
                                    For intcnt As Integer = 0 To _ds.Tables(0).Rows.Count - 1
                                        If Not IsDBNull(_ds.Tables(0).Rows(intcnt).Item(strAuditField).ToString) Then strOldvalue = _ds.Tables(0).Rows(intcnt).Item(strAuditField).ToString Else strOldvalue = String.Empty
                                    Next
                                Else
                                    strOldvalue = String.Empty
                                End If

                                If String.IsNullOrEmpty(_strMode) Then
                                    If strAuditField = "PASSHASH" Then
                                        If Not IsDBNull(pDsAuditData.Tables(0).Rows(i).Item(strAuditField)) Then strNewvalue = pDsAuditData.Tables(0).Rows(i).Item(strAuditField) Else strNewvalue = strOldvalue
                                    Else
                                        If Not IsDBNull(pDsAuditData.Tables(0).Rows(i).Item(strAuditField)) Then strNewvalue = pDsAuditData.Tables(0).Rows(i).Item(strAuditField) Else strNewvalue = String.Empty
                                    End If
                                Else
                                    strNewvalue = String.Empty
                                End If
                        If log.IsInfoEnabled Then log.Info(methodBaseName & " Audit Field Name:" & strAuditField & ":Newvalue:" & strNewvalue & ":Oldvalue:" & strOldvalue)

                        If Not String.IsNullOrEmpty(strOldvalue) Or Not String.IsNullOrEmpty(strNewvalue) Then
                            If strOldvalue.ToString <> strNewvalue.ToString Then
                                Try
                                    'Inserting data in Audit table
                                    _StatusCode = InsertAuditInfo(pAppId, pStrFunctionName, " ", strKeyColumns, pDeviceTokenEntry(TokenEntry_Enum.UserID), _
                                                                  strAuditField, strOldvalue, strNewvalue, pDeviceTokenEntry)
                                    If _StatusCode <> ATPAR_OK Then
                                        Return _StatusCode
                                    End If
                                Catch ex As Exception
                                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to insert the Audit info " & ex.ToString)
                                    Return E_SERVERERROR
                                End Try
                            End If
                        End If
                        strPrevTblName = strtablename
                    Next
                        End If
                    Next
                End If
            End If

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to audit data from middle tier" & _
                                                                " tables: Exception is : " & ex.ToString & _
                                                                            vbCrLf)
            Return E_SERVERERROR
        Finally
        End Try

        Return ATPAR_OK
    End Function

    ''' <summary>
    ''' To Insert data in MT_ATPAR_AUDIT_INFO
    ''' </summary>
    ''' <param name="pAppId"></param>
    ''' <param name="pStrFunctionName"></param>
    ''' <param name="pStrSubFunctionName"></param>
    ''' <param name="pStrkeys"></param>
    ''' <param name="pStrUpdateUserId"></param>
    ''' <param name="pStrFieldName"></param>
    ''' <param name="pStrOldValue"></param>
    ''' <param name="pStrNewValue"></param>
    ''' <param name="pDeviceTokenEntry"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Function InsertAuditInfo(ByVal pAppId As String, ByVal pStrFunctionName As String, _
                             ByVal pStrSubFunctionName As String, ByVal pStrkeys As String, _
                             ByVal pStrUpdateUserId As String, ByVal pStrFieldName As String, _
                             ByVal pStrOldValue As String, ByVal pStrNewValue As String, _
                             ByVal pDeviceTokenEntry() As String) As Long

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sbSQL As New StringBuilder
        Try

            With _sbSQL
                .Append(" INSERT INTO MT_ATPAR_AUDIT_INFO ([APP_ID],[FUNCTION_NAME] , ")
                .Append(" [SUBFUNCTION_NAME] ,[KEY_VALUES],[UPDATE_USER_ID],")
                .Append(" [UPDATE_DATE] ,[FIELD_NAME] ,[OLD_VALUE],[NEW_VALUE]) ")
                .Append(" VALUES (" & pAppId & ",")
                .Append("'" & pStrFunctionName & "',")
                .Append("'" & pStrSubFunctionName & "' ,")
                .Append("'" & Replace(pStrkeys, "'", "''") & "',")
                .Append("'" & pStrUpdateUserId & "',")
                .Append("GETDATE(),")
                .Append("'" & pStrFieldName & "',")
                .Append("'" & Replace(pStrOldValue, "'", "''") & "',")
                .Append("'" & Replace(pStrNewValue, "'", "''") & "')")
            End With

            If log.IsInfoEnabled Then log.Info(methodBaseName & "Query to insert audit info:" & _sbSQL.ToString)

            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString))

            Return ATPAR_OK

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute the SQL... " _
                                                                    & _sbSQL.ToString & vbCrLf & _
                                                                    " Exception is : " & _
                                                                    ex.ToString & vbCrLf)
            Return E_SERVERERROR
        Finally
            _sbSQL = Nothing
        End Try

    End Function

#End Region

#Region "Atpar Dashboard"

    Public Function GetDashBoardDetails(ByRef _pDSDashBoardDtls As DataSet, _
                       ByVal pApp_ID As String, ByVal pOrgGrp_ID As String, ByVal pDate As String, ByVal pDeviceTokenEntry() As String) As Long _
        Implements IAtpar_WebTrans.GetDashBoardDetails

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sqlCmd As SqlCommand
        Dim _StatusCode As String = String.Empty
        Dim _strSQL As String = String.Empty

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try

            Dim sqlParms() As SqlParameter = New SqlParameter(4) {}

            sqlParms(0) = New SqlParameter("@OrgGrp_ID", SqlDbType.NVarChar)
            sqlParms(0).Value = pOrgGrp_ID

            sqlParms(1) = New SqlParameter("@date", SqlDbType.NVarChar)
            sqlParms(1).Value = pDate

            sqlParms(2) = New SqlParameter("@app_ID", SqlDbType.Int)
            sqlParms(2).Value = pApp_ID

            sqlParms(3) = New SqlParameter("@userID", SqlDbType.NVarChar)
            sqlParms(3).Value = pDeviceTokenEntry(TokenEntry_Enum.UserID)

            sqlParms(4) = New SqlParameter("@StatusCode", SqlDbType.Int)
            sqlParms(4).Direction = ParameterDirection.Output


            _sqlCmd = New SqlCommand
            _sqlCmd.Connection = m_LocalDB.CreateConnection
            _sqlCmd.CommandType = CommandType.StoredProcedure
            _sqlCmd.CommandText = "GetDashBoardDetails"
            _sqlCmd.Parameters.Add(sqlParms(0))
            _sqlCmd.Parameters.Add(sqlParms(1))
            _sqlCmd.Parameters.Add(sqlParms(2))
            _sqlCmd.Parameters.Add(sqlParms(3))
            _sqlCmd.Parameters.Add(sqlParms(4))


            _strSQL = "DECLARE @P1 INT " & _
                      "SET @P1 = 0 " & vbCrLf & _
                      vbCrLf & _
                      "EXEC	" & _
                      "GetDashBoardDetails" & vbCrLf & _
                      "@OrgGrp_ID = N'" & sqlParms(0).Value & "'," & vbCrLf & _
                      "@date = N'" & sqlParms(1).Value & "'," & vbCrLf & _
                      "@app_ID = N'" & sqlParms(2).Value & "'," & vbCrLf & _
                      "@userID = N'" & sqlParms(3).Value & "'," & vbCrLf & _
                      "@StatusCode = 0 " & vbCrLf & _
                      vbCrLf & _
                      "SELECT	@P1 "

            If log.IsDebugEnabled Then log.Debug(_strSQL)

            Try
                _pDSDashBoardDtls = m_LocalDB.ExecuteDataset(_sqlCmd)

                If (_pDSDashBoardDtls.Tables.Count > 0) Then
                    _pDSDashBoardDtls.Tables(0).TableName = "TblDailydtls"
                    _pDSDashBoardDtls.Tables(1).TableName = "TblWeekdtls"
                    _pDSDashBoardDtls.Tables(2).TableName = "TblMonthdtls"
                    _pDSDashBoardDtls.Tables(3).TableName = "TblRecalldtls"
                    _pDSDashBoardDtls.Tables(4).TableName = "TblDepLocdtls"
                    _pDSDashBoardDtls.Tables(5).TableName = "TblLocdtls"
                    _pDSDashBoardDtls.Tables(6).TableName = "TblExpiredProddtls"
                    _pDSDashBoardDtls.Tables(7).TableName = "TblExpiringProddtls"
                    _pDSDashBoardDtls.Tables(8).TableName = "TblLowStockData"
                    GetLowStockRep(_pDSDashBoardDtls.Tables(8), pOrgGrp_ID, pDeviceTokenEntry)

                    _pDSDashBoardDtls.AcceptChanges()
                End If

            Catch sqlEx As SqlException
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute the following" & _
                                                                      " SQL...." & _strSQL & vbCrLf & _
                                                                      " Exception is : " & sqlEx.ToString _
                                                                      & vbCrLf)
                Return E_SERVERERROR
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute the following" & _
                                                                     " SQL...." & _strSQL & vbCrLf & _
                                                                     " Exception is : " & ex.ToString _
                                                                     & vbCrLf)
                Return E_SERVERERROR
            End Try

            _StatusCode = sqlParms(4).Value
            _sqlCmd.Parameters.Clear()

            If _StatusCode <> ATPAR_OK Then
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to insert the data in middle tier" & _
                                                                      " tables: StatusCode is : " & _StatusCode & _
                                                                       vbCrLf & " Failed to execute the" & _
                                                                       " SQL... " & vbCrLf & _strSQL & vbCrLf)
                Return E_SERVERERROR
            End If

            Try
                _StatusCode = UpdateDashBoardItemDetails(_pDSDashBoardDtls, pDeviceTokenEntry(TokenEntry_Enum.UserID), pOrgGrp_ID, pDeviceTokenEntry)

                If _StatusCode <> ATPAR_OK Then
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get Item details data from ERP " & _
                                                                      " StatusCode is : " & _StatusCode)
                    Return E_SERVERERROR
                End If
            Catch ex As Exception
                If _StatusCode <> ATPAR_OK Then
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get Item details data from ERP " & _
                                                                          " StatusCode is : " & _StatusCode)
                    Return E_SERVERERROR
                End If
            End Try

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to Get the details in middle tier" & _
                                                                  " tables: Exception is : " & ex.ToString & _
                                                                  vbCrLf)
            Return E_SERVERERROR
        End Try

        Return ATPAR_OK
    End Function


    ''' <summary>
    ''' To get the Cart Details
    ''' </summary>
    ''' <param name="pCartId"></param>
    ''' <param name="pBUnit"></param>
    ''' <param name="pCartDetailsDS"></param>
    ''' <param name="pStrOrgGrpID"></param>
    ''' <param name="pSystemID"></param>
    ''' <param name="pProfileID"></param>
    ''' <returns>ATPAR_OK on Success, else Error code</returns>
    ''' <remarks></remarks>
    Private Function GetCartDtlsForDashBoardItems(ByVal pCartId As String, ByVal pBUnit As String, _
                                    ByRef pCartDetailsDS As DataSet, ByVal pStrOrgGrpID As String, _
                                    ByVal pSystemID As String, Optional ByVal pProfileID As String = "", _
                                    Optional ByVal pLocType As String = "") As Long

        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pSystemID


        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)
        Dim _reflectObject As Object

        Try

            Dim _atparParameters As Atpar_Application_Parameters
            Dim _orgParams As SortedList
            Dim _strItemDescrType As String
            Dim _strDefaultMfgItemID As String
            Dim _strItemPriceType As String
            Dim pInputParameters As New DataSet
            Dim pDeviceTokenEntry(8) As String
            pCartDetailsDS = New DataSet
            Dim _dsAtparCartDetails As DataSet

            Dim _className As String
            Dim _classType As Type
            Dim _methodName As MethodInfo
            Dim _erpObjName As String
            Dim _erpObjAssy As Assembly

            Dim _statusCode As Long
            Dim _chrCartManagedAtpar As Char

            Dim _strNDCType As String = String.Empty
            Dim _strUPNType As String = String.Empty

            Dim _profParams As New SortedList

            Try

                _orgParams = New SortedList
                _orgParams(AppParameters_Enum.ITEM_DESCR.ToString) = String.Empty
                _orgParams(AppParameters_Enum.DEFAULT_MFG_ITEM_ID.ToString) = String.Empty
                _orgParams(AppParameters_Enum.ITEM_PRICE.ToString) = String.Empty
                _orgParams(AppParameters_Enum.CARTS_MNGD_ATPAR.ToString) = String.Empty
                _atparParameters = Atpar_Application_Parameters.CreateInstance(pSystemID)
                _atparParameters.OrgGroupId = pStrOrgGrpID
                _atparParameters.ApplicationId = EnumApps.PointOfUse

                'Getting OrgParam Values
                _statusCode = _atparParameters.GetOrgGroupParamValues(_orgParams)

                If _statusCode <> ATPAR_OK Then
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the org group parameter" & _
                                                                        " values : StatusCode is : " & _
                                                                        _statusCode & vbCrLf)
                    Return _statusCode
                End If

                _strItemDescrType = _orgParams(AppParameters_Enum.ITEM_DESCR.ToString)
                _strDefaultMfgItemID = _orgParams(AppParameters_Enum.DEFAULT_MFG_ITEM_ID.ToString)
                _strItemPriceType = _orgParams(AppParameters_Enum.ITEM_PRICE.ToString)
                _chrCartManagedAtpar = _orgParams(AppParameters_Enum.CARTS_MNGD_ATPAR.ToString)
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the org group parameter" & _
                                                                        " values : Exception is : " & _
                                                                        ex.ToString & vbCrLf)
                Return E_SERVERERROR
            End Try

            'Not getting profile parameter values when there is no ProfileID
            If pProfileID <> "" And pProfileID <> String.Empty Then
                'Getting ProfileParam Values

                Try

                    _profParams(AppParameters_Enum.ITEM_UPN_TYPE_CODE.ToString) = String.Empty
                    _profParams(AppParameters_Enum.ITEM_NDC_TYPE_CODE.ToString) = String.Empty

                    _atparParameters.ApplicationId = EnumApps.PointOfUse
                    _atparParameters.ProfileId = pProfileID

                    _statusCode = _atparParameters.GetProfileParamValues(_profParams)
                    If _statusCode <> ATPAR_OK Then
                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the profile parameter" & _
                                                                            " values : StatusCode is : " & _
                                                                            _statusCode & vbCrLf)
                        Return _statusCode
                    End If
                    _strUPNType = _profParams(AppParameters_Enum.ITEM_UPN_TYPE_CODE.ToString)
                    _strNDCType = _profParams(AppParameters_Enum.ITEM_NDC_TYPE_CODE.ToString)

                Catch ex As Exception
                    If _statusCode <> ATPAR_OK Then
                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " failed to get Details from GetProfileParamValues function " & _
                                                                                                                " with StatusCode :" & _statusCode & ":")
                        Return _statusCode
                    End If
                End Try
            End If

            'Handling Location Type 
            If String.IsNullOrEmpty(pLocType) Then
                _statusCode = GetLocationType(pBUnit, pCartId, pLocType)
                If _statusCode <> ATPAR_OK Then
                    Return _statusCode
                End If
            End If

            'Create and Add tables to I/P dataset
            Dim _dtHdrData As DataTable
            Dim _dtPreReq As DataTable
            Dim _dtListView As DataTable
            Dim _dtOutPutHdr As DataTable
            Dim _dtOutPutDtl As DataTable
            Dim _dtOutPutLotSerial As DataTable
            Dim _drHdr As DataRow
            Dim _drPreReq As DataRow
            Dim _drListView As DataRow

            Try
                _dtHdrData = ApplicationDataSetDefns.CreateAtParTableDefn(ApplicationDataSetDefns.Get_Detail_Defns, _
                                                                            DataSet_Type.HEADERS.ToString)
                _dtPreReq = ApplicationDataSetDefns.CreateAtParTableDefn(ApplicationDataSetDefns.Get_Cart_PreReqData_Defns, _
                                                                            DataSet_Type.PREREQDATA.ToString)
                _dtListView = ApplicationDataSetDefns.CreateAtParTableDefn(ApplicationDataSetDefns.Get_Cart_Detail_ListView_RequiredParams, _
                                                                            DataSet_Type.PREREQLISTVIEWPARAMS.ToString)
                'O/P
                _dtOutPutHdr = ApplicationDataSetDefns.CreateAtParTableDefn(ApplicationDataSetDefns.Get_Cart_DetailOutput_Header_Defns, _
                                                                            DataSet_Type.HEADERS.ToString)
                _dtOutPutDtl = ApplicationDataSetDefns.CreateAtParTableDefn(ApplicationDataSetDefns.Get_Cart_DetailOutput_Details_Defns, _
                                                                            DataSet_Type.DETAILS.ToString)

                pCartDetailsDS.Tables.Add(_dtOutPutHdr)
                pCartDetailsDS.Tables.Add(_dtOutPutDtl)

                If pLocType = LocationType.I.ToString Then
                    _dtOutPutLotSerial = ApplicationDataSetDefns.CreateAtParTableDefn(ApplicationDataSetDefns.Get_Cart_DetailOutput_LotSerial_Defns, _
                                                                            DataSet_Type.LOTSERIAL_INFO.ToString)
                    pCartDetailsDS.Tables.Add(_dtOutPutLotSerial)

                End If

                If log.IsDebugEnabled Then log.Debug(methodBaseName & " After adding the tables to the" & _
                                        " dataset: pCartDetailsDS table count is :" & pCartDetailsDS.Tables.Count & vbCrLf)

                _drHdr = _dtHdrData.NewRow()

                _drHdr(Get_Detail_Defns_Enum.USER_ID) = String.Empty  'Requried in ERP component
                _drHdr(Get_Detail_Defns_Enum.BUSINESS_UNIT) = pBUnit
                _drHdr(Get_Detail_Defns_Enum.CART_ID) = pCartId
                _dtHdrData.Rows.Add(_drHdr)

                _drPreReq = _dtPreReq.NewRow()

                _drPreReq(Get_Cart_PreReqData_Enum.ITEM_PRICE) = _strItemPriceType
                _drPreReq(Get_Cart_PreReqData_Enum.ITEM_DESCR) = _strItemDescrType
                _drPreReq(Get_Cart_PreReqData_Enum.DEFAULT_MFG_ITEM_ID) = _strDefaultMfgItemID
                _drPreReq(Get_Cart_PreReqData_Enum.ITEM_UPN_TYPE_CODE) = _strUPNType
                _drPreReq(Get_Cart_PreReqData_Enum.ITEM_NDC_TYPE_CODE) = _strNDCType
                _drPreReq(Get_Cart_PreReqData_Enum.REMOTE_SCHEMA) = GetConfigData(pSystemID, EName(Of CONFIGFILE)(CONFIGFILE.REMOTEDBCONNECTION), _
                                                                                    REMOTEDBCONNECTION.SCHEMA.ToString)
                _drPreReq(Get_Cart_PreReqData_Enum.REMOTE_DB_TYPE) = GetConfigData(pSystemID, EName(Of CONFIGFILE)(CONFIGFILE.REMOTEDBCONNECTION), _
                                                                                    REMOTEDBCONNECTION.DATABASE.ToString)
                _dtPreReq.Rows.Add(_drPreReq)

                'TODO:  Need to confirm this
                _drListView = _dtListView.NewRow()
                _drListView(Get_Cart_Detail_ListView_Reqparams_Enum.CART_REPLEN_CTRL) = True
                _drListView(Get_Cart_Detail_ListView_Reqparams_Enum.CART_REPLEN_OPT) = True
                _drListView(Get_Cart_Detail_ListView_Reqparams_Enum.COMPARTMENT) = True
                _drListView(Get_Cart_Detail_ListView_Reqparams_Enum.CONS_NON_STOCK) = True
                _drListView(Get_Cart_Detail_ListView_Reqparams_Enum.COUNT_QTY) = True
                _drListView(Get_Cart_Detail_ListView_Reqparams_Enum.COUNT_REQUIRED) = False
                _drListView(Get_Cart_Detail_ListView_Reqparams_Enum.CUST_ITEM_NO) = True
                _drListView(Get_Cart_Detail_ListView_Reqparams_Enum.DESCR) = True
                _drListView(Get_Cart_Detail_ListView_Reqparams_Enum.FOQ) = True
                _drListView(Get_Cart_Detail_ListView_Reqparams_Enum.GTIN) = True
                _drListView(Get_Cart_Detail_ListView_Reqparams_Enum.INVENTORY_ITEM) = True
                _drListView(Get_Cart_Detail_ListView_Reqparams_Enum.ITEM_COUNT_ORDER) = True
                _drListView(Get_Cart_Detail_ListView_Reqparams_Enum.ITEM_ID) = True
                _drListView(Get_Cart_Detail_ListView_Reqparams_Enum.MAXIMUM_QTY) = True
                _drListView(Get_Cart_Detail_ListView_Reqparams_Enum.MFG_ITEM_ID) = True
                _drListView(Get_Cart_Detail_ListView_Reqparams_Enum.OPTIMAL_QTY) = True
                _drListView(Get_Cart_Detail_ListView_Reqparams_Enum.PRICE) = True
                _drListView(Get_Cart_Detail_ListView_Reqparams_Enum.PRINT_LATER_FLAG) = False
                _drListView(Get_Cart_Detail_ListView_Reqparams_Enum.UOM) = True
                _drListView(Get_Cart_Detail_ListView_Reqparams_Enum.UPC_ID) = True
                _drListView(Get_Cart_Detail_ListView_Reqparams_Enum.VNDR_ITEM_ID) = True

                _dtListView.Rows.Add(_drListView)

                pInputParameters.Tables.Add(_dtHdrData)
                pInputParameters.Tables.Add(_dtPreReq)
                pInputParameters.Tables.Add(_dtListView)
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to create or populate datatable" & _
                                                                        " with Exception... " & vbCrLf & _
                                                                        ex.ToString & vbCrLf)
                Return E_SERVERERROR
            End Try

            pDeviceTokenEntry(TokenEntry_Enum.UserID) = String.Empty
            pDeviceTokenEntry(TokenEntry_Enum.DeviceID) = String.Empty
            pDeviceTokenEntry(TokenEntry_Enum.DateTime) = String.Empty
            pDeviceTokenEntry(TokenEntry_Enum.ProfileID) = String.Empty
            pDeviceTokenEntry(TokenEntry_Enum.OrgGrpID) = String.Empty
            pDeviceTokenEntry(TokenEntry_Enum.AccessToken) = String.Empty
            pDeviceTokenEntry(TokenEntry_Enum.LdapUser) = String.Empty
            pDeviceTokenEntry(TokenEntry_Enum.ClientType) = ClientType.WEB
            pDeviceTokenEntry(TokenEntry_Enum.SystemId) = pSystemID

            'Calling ERP Component

            If log.IsDebugEnabled Then log.Debug(methodBaseName & " Calling ERP Component based on pLocType :" & pLocType)

            If pLocType = LocationType.P.ToString Then

                Try
                    _erpObjName = GetConfigData(pSystemID, CONFIGFILE.ERP_SYS_DETAILS.ToString(), ERP_SYS_DETAILS.DOWNLOADFROM.ToString())
                    _erpObjName = EnumApps.CartCount.ToString() & "_" & _erpObjName

                    If log.IsDebugEnabled Then log.Debug(methodBaseName & ": Component name is : " & _erpObjName & vbCrLf)

                    CreateERPObject(_erpObjName, _erpObjAssy)
                    _className = _erpObjName & ".GetDetails"
                    _classType = _erpObjAssy.GetType(_className)
                    _methodName = _classType.GetMethod("GetDetails")
                    _reflectObject = Activator.CreateInstance(_classType)

                    Dim args As Object() = {pInputParameters, pCartDetailsDS, pDeviceTokenEntry}

                    _statusCode = _methodName.Invoke(_reflectObject, args)

                    If _statusCode <> ATPAR_OK Then
                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & ":Failed in the remote call :" & _
                                            " Statuscode is : " & _statusCode & vbCrLf)
                        Return _statusCode
                    End If

                    pCartDetailsDS = args(1)

                Catch ex As Exception
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & ":Failed in the remote call : Exception" & _
                                                " is : " & ex.ToString & vbCrLf)
                    Return E_SERVERERROR
                End Try

            ElseIf pLocType = LocationType.A.ToString Then

                Try

                    _erpObjName = Erp_Obj_Name.CartCount_Atpar.ToString

                    If log.IsDebugEnabled Then log.Debug(methodBaseName & ": Component name is : " & _erpObjName & vbCrLf)

                    CreateERPObject(_erpObjName, _erpObjAssy)
                    _className = _erpObjName & ".GetDetails"
                    _classType = _erpObjAssy.GetType(_className)
                    _methodName = _classType.GetMethod("GetDetails")
                    _reflectObject = Activator.CreateInstance(_classType)

                    Dim args As Object() = {pInputParameters, pCartDetailsDS, pDeviceTokenEntry}

                    _statusCode = _methodName.Invoke(_reflectObject, args)
                    If _statusCode = E_NORECORDFOUND Then
                        If log.IsWarnEnabled Then log.Warn(methodBaseName & ": No Records found for the Cart :" & pCartId)
                    ElseIf _statusCode <> ATPAR_OK Then
                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & ":Failed in the remote call :" & _
                                            " Statuscode is : " & _statusCode & vbCrLf)
                        Return _statusCode
                    End If
                    pCartDetailsDS = args(1)

                Catch ex As Exception
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & ":Failed in the remote call : Exception" & _
                                                " is : " & ex.ToString & vbCrLf)
                    Return E_SERVERERROR
                End Try

            ElseIf pLocType = LocationType.I.ToString Then

                _statusCode = GetLocationDetails(pBUnit, _orgParams, _profParams, pCartDetailsDS, pDeviceTokenEntry)

                If _statusCode <> ATPAR_OK Then
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & ":Failed in GetLocationDetails :" & _
                                        " Statuscode is : " & _statusCode & vbCrLf)
                    Return _statusCode
                End If

            End If

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the cart items: Exception is: " _
                                                                & ex.ToString & vbCrLf)
            Return E_SERVERERROR
        Finally
            _reflectObject = Nothing
        End Try

        Return ATPAR_OK

    End Function

    ''' <summary>
    ''' GetDashBoardItemDetails
    ''' </summary>
    ''' <param name="pDashBoardDataDS"></param>
    ''' <param name="pUserId"></param>
    ''' <param name="pStrOrgGrpID"></param>
    ''' <param name="pDeviceTokenEntry"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function UpdateDashBoardItemDetails(ByRef pDashBoardDataDS As DataSet, ByVal pUserId As String, _
                                            ByVal pStrOrgGrpID As String, ByVal pDeviceTokenEntry() As String) As Long

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserId
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try



        Dim _statusCode As Long = -1

        '_pDSDashBoardDtls.Tables(5).TableName = "TblLocdtls"
        '_pDSDashBoardDtls.Tables(6).TableName = "TblExpiredProddtls"
        '_pDSDashBoardDtls.Tables(7).TableName = "TblExpiringProddtls"


        Try

            If (pDashBoardDataDS.Tables.Count > 0) Then

                Try
                    _statusCode = UpdateDashBoardItemTable(pDashBoardDataDS, pDeviceTokenEntry(TokenEntry_Enum.UserID), pStrOrgGrpID, pDeviceTokenEntry, "TblRecalldtls")

                    If _statusCode <> ATPAR_OK Then
                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get Item details data from ERP " & _
                                                                          " StatusCode is : " & _statusCode)
                        Return E_SERVERERROR
                    End If

                    _statusCode = UpdateDashBoardItemTable(pDashBoardDataDS, pDeviceTokenEntry(TokenEntry_Enum.UserID), pStrOrgGrpID, pDeviceTokenEntry, "TblDepLocdtls")

                    If _statusCode <> ATPAR_OK Then
                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get Item details data from ERP " & _
                                                                          " StatusCode is : " & _statusCode)
                        Return E_SERVERERROR
                    End If

                    _statusCode = UpdateDashBoardItemTable(pDashBoardDataDS, pDeviceTokenEntry(TokenEntry_Enum.UserID), pStrOrgGrpID, pDeviceTokenEntry, "TblLocdtls")

                    If _statusCode <> ATPAR_OK Then
                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get Item details data from ERP " & _
                                                                          " StatusCode is : " & _statusCode)
                        Return E_SERVERERROR
                    End If

                    _statusCode = UpdateDashBoardItemTable(pDashBoardDataDS, pDeviceTokenEntry(TokenEntry_Enum.UserID), pStrOrgGrpID, pDeviceTokenEntry, "TblExpiredProddtls")

                    If _statusCode <> ATPAR_OK Then
                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get Item details data from ERP " & _
                                                                          " StatusCode is : " & _statusCode)
                        Return E_SERVERERROR
                    End If

                    _statusCode = UpdateDashBoardItemTable(pDashBoardDataDS, pDeviceTokenEntry(TokenEntry_Enum.UserID), pStrOrgGrpID, pDeviceTokenEntry, "TblExpiringProddtls")

                    If _statusCode <> ATPAR_OK Then
                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get Item details data from ERP " & _
                                                                          " StatusCode is : " & _statusCode)
                        Return E_SERVERERROR
                    End If
                Catch ex As Exception
                    If _statusCode <> ATPAR_OK Then
                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get Item details data from ERP " & _
                                                                              " StatusCode is : " & _statusCode)
                        Return E_SERVERERROR
                    End If
                End Try

            End If


            pDashBoardDataDS.AcceptChanges()
            UpdateDashBoardItemDetails = ATPAR_OK
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ex.ToString & ":")
            Return E_SERVERERROR
        End Try
    End Function
    Private Function UpdateDashBoardItemTable(ByRef pDashBoardDataDS As DataSet, ByVal pUserId As String, _
                                          ByVal pStrOrgGrpID As String, ByVal pDeviceTokenEntry() As String, ByVal TblName As String) As Long

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserId
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try


        Dim __selRows() As DataRow
        Dim sbSearch As System.Text.StringBuilder
        Dim nonCartDS As DataSet
        Dim _statusCode As Long = -1

        Dim _retTbl As DataTable
        Dim _detDS As DataSet
        Dim _rowsDescr() As DataRow
        Dim _rowsIssue() As DataRow
        Dim _retRow As DataRow
        Dim _dsLocType As DataSet
        Dim _strBUnit As String = String.Empty
        Dim _strCart As String = String.Empty
        Dim _strLocType As String = String.Empty
        Dim _strItemID As String = String.Empty
        Dim _strSearch As String = String.Empty
        Dim _dblPrice As Double
        Dim _intUnAccQty As Double
        Dim _dblInventoryValue As Double
        Dim _intIssueQty As Integer
        Dim _strDescr As String
        Dim _strStorageLocation As String
        Dim _strUom As String = String.Empty

        If log.IsDebugEnabled Then log.Debug(methodBaseName & " Updating DashBoard Table :" & TblName)

        Try

            If (pDashBoardDataDS.Tables.Count > 0) Then


                If (pDashBoardDataDS.Tables(TblName).Rows.Count > 0) Then

                    For intCnt As Integer = 0 To pDashBoardDataDS.Tables(TblName).Rows.Count - 1

                        If _strBUnit <> pDashBoardDataDS.Tables(TblName).Rows(intCnt).Item("BUSINESS_UNIT") Or _
                                        _strCart <> pDashBoardDataDS.Tables(TblName).Rows(intCnt).Item("CART_ID") Then

                            _strBUnit = pDashBoardDataDS.Tables(TblName).Rows(intCnt).Item("BUSINESS_UNIT")
                            _strCart = pDashBoardDataDS.Tables(TblName).Rows(intCnt).Item("CART_ID")

                            'Getting Location Type
                            _strLocType = String.Empty
                            _statusCode = GetLocationType(_strBUnit, _strCart, _strLocType)
                            If _statusCode <> ATPAR_OK Then
                                Return _statusCode
                            End If

                            _statusCode = GetCartDtlsForDashBoardItems(_strCart, _strBUnit, _detDS, pStrOrgGrpID, pDeviceTokenEntry(TokenEntry_Enum.SystemId), , _strLocType)
                            If _statusCode <> ATPAR_OK Then
                                Return _statusCode
                            End If

                        End If



                        _strBUnit = pDashBoardDataDS.Tables(TblName).Rows(intCnt).Item("BUSINESS_UNIT")
                        _strCart = pDashBoardDataDS.Tables(TblName).Rows(intCnt).Item("CART_ID")
                        _strItemID = pDashBoardDataDS.Tables(TblName).Rows(intCnt).Item("ITEM_ID")

                        _strSearch = "ITEM_ID='" & _strItemID & "' AND CART_ID='" & _strCart & "' AND BUSINESS_UNIT='" & _strBUnit & "'"

                        If log.IsDebugEnabled Then log.Debug(methodBaseName & " Search String :" & _strSearch)

                        If (_detDS.Tables.Count > 0) Then

                            If (_detDS.Tables(1).Columns(Get_Cart_Detail_Enum.INV_ITEM_ID).DataType.ToString() = "System.String") Then
                                _rowsDescr = _detDS.Tables(1).Select("[" & _detDS.Tables(1).Columns(Get_Cart_Detail_Enum.INV_ITEM_ID).ColumnName & "]  = '" & _strItemID & "'")

                            Else
                                If IsNumeric(_strItemID) Then
                                    _rowsDescr = _detDS.Tables(1).Select("[" & _detDS.Tables(1).Columns(Get_Cart_Detail_Enum.INV_ITEM_ID).ColumnName & "]  = " & _strItemID & "")

                                Else
                                    _rowsDescr = _detDS.Tables(1).Select("0=-1")
                                End If
                            End If

                            '_rowsIssue = _dsComplianceDet.Tables(1).Select(_strSearch)

                            If _rowsDescr.Length > 0 Then
                                If _rowsDescr(0).Item(Get_Cart_Detail_Enum.ITEM_DESCR).ToString() Is Nothing Or _
                                                        String.IsNullOrEmpty(_rowsDescr(0).Item(Get_Cart_Detail_Enum.ITEM_DESCR).ToString()) Then
                                    _strDescr = String.Empty
                                Else
                                    _strDescr = _rowsDescr(0).Item(Get_Cart_Detail_Enum.ITEM_DESCR).ToString()
                                End If
                                If _rowsDescr(0).Item(Get_Cart_Detail_Enum.ITEM_PRICE).ToString() Is Nothing Or _
                                                        String.IsNullOrEmpty(_rowsDescr(0).Item(Get_Cart_Detail_Enum.ITEM_PRICE).ToString()) Then
                                    _dblPrice = Decimal.Zero
                                Else
                                    _dblPrice = _rowsDescr(0).Item(Get_Cart_Detail_Enum.ITEM_PRICE).ToString()
                                End If

                                If _rowsDescr(0).Item(Get_Cart_Detail_Enum.UOM).ToString() Is Nothing Or _
                                                       String.IsNullOrEmpty(_rowsDescr(0).Item(Get_Cart_Detail_Enum.UOM).ToString()) Then
                                    _strUom = String.Empty
                                Else
                                    _strUom = _rowsDescr(0).Item(Get_Cart_Detail_Enum.UOM).ToString()
                                End If

                                If (pDashBoardDataDS.Tables(TblName).Columns.Contains("ITEMID_DESC")) Then
                                    pDashBoardDataDS.Tables(TblName).Rows(intCnt).Item("ITEMID_DESC") = _strDescr
                                End If

                                If (pDashBoardDataDS.Tables(TblName).Columns.Contains("UOM")) Then
                                    pDashBoardDataDS.Tables(TblName).Rows(intCnt).Item("UOM") = _strUom
                                End If

                                _dblInventoryValue = 0

                                If (pDashBoardDataDS.Tables(TblName).Columns.Contains("INVENTORY_VALUE")) Then
                                    '_dblInventoryValue = Math.Round(pDashBoardDataDS.Tables(TblName).Rows(intCnt).Item("QOH") * _dblPrice, 2)
                                    _dblInventoryValue = FormatNumber((pDashBoardDataDS.Tables(TblName).Rows(intCnt).Item("QOH").ToString()) * (_dblPrice.ToString()), 2)
                                    pDashBoardDataDS.Tables(TblName).Rows(intCnt).Item("INVENTORY_VALUE") = _dblInventoryValue
                                End If
                            Else

                                Dim _dsNonCartItems As New DataSet
                                Dim _drNonCartItems() As DataRow

                                Try
                                    _statusCode = GetNonCartItems(_strBUnit, _strCart, _dsNonCartItems)
                                    If _statusCode <> ATPAR_OK Then
                                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the non cart" & _
                                                                                                " items : Status Code is : " & _
                                                                                                _statusCode & vbCrLf)
                                        Return E_SERVERERROR
                                    End If
                                Catch ex As Exception
                                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the non cart" & _
                                                                                            " items : Exception is : " & _
                                                                                            ex.ToString & vbCrLf)
                                    Return E_SERVERERROR
                                Finally

                                End Try

                                _drNonCartItems = _dsNonCartItems.Tables(0).Select(_strSearch)

                                If _drNonCartItems.Length > 0 Then

                                    If Not String.IsNullOrEmpty(_drNonCartItems(0).Item("ITEM_DESCRIPTION").ToString) Then
                                        _strDescr = _drNonCartItems(0).Item("ITEM_DESCRIPTION").ToString
                                    Else
                                        _strDescr = String.Empty
                                    End If

                                    If Not String.IsNullOrEmpty(_drNonCartItems(0).Item("UOM").ToString) Then
                                        _strUom = _drNonCartItems(0).Item("UOM").ToString
                                    Else
                                        _strUom = String.Empty
                                    End If

                                    If Not String.IsNullOrEmpty(_drNonCartItems(0).Item("ITEM_PRICE").ToString) Then
                                        _dblPrice = _drNonCartItems(0).Item("ITEM_PRICE")
                                    Else
                                        _dblPrice = 0
                                    End If
                                    If (pDashBoardDataDS.Tables(TblName).Columns.Contains("ITEMID_DESC")) Then
                                        pDashBoardDataDS.Tables(TblName).Rows(intCnt).Item("ITEMID_DESC") = _strDescr
                                    End If

                                    If (pDashBoardDataDS.Tables(TblName).Columns.Contains("UOM")) Then
                                        pDashBoardDataDS.Tables(TblName).Rows(intCnt).Item("UOM") = _strUom
                                    End If

                                    _dblInventoryValue = 0

                                    If (pDashBoardDataDS.Tables(TblName).Columns.Contains("INVENTORY_VALUE")) Then
                                        _dblInventoryValue = FormatNumber((pDashBoardDataDS.Tables(TblName).Rows(intCnt).Item("QOH").ToString()) * (_dblPrice.ToString()), 2)
                                        pDashBoardDataDS.Tables(TblName).Rows(intCnt).Item("INVENTORY_VALUE") = _dblInventoryValue
                                    End If

                                End If

                            End If


                        End If

                    Next

                End If

            End If
            pDashBoardDataDS.AcceptChanges()
            UpdateDashBoardItemTable = ATPAR_OK
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ex.ToString & ":")
            Return E_SERVERERROR
        End Try
    End Function


    ''' <summary>
    ''' To get location type
    ''' </summary>
    ''' <param name="pStrBunit"></param>
    ''' <param name="pStrCartID"></param>
    ''' <param name="pStrLocType"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function GetLocationType(ByVal pStrBunit As String, ByVal pStrCartID As String, ByRef pStrLocType As String) As Long

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim strSQL As String = String.Empty


        Try
            strSQL = "SELECT LOCATION_TYPE FROM MT_POU_DEPT_CART_WORKSTATION_ALLOCATIONS " & _
                                "WHERE BUSINESS_UNIT ='" & pStrBunit & "'" & _
                                "AND CART_ID='" & pStrCartID & "'"


            If log.IsInfoEnabled Then log.Info(methodBaseName & " Getting the records from Dept User" & _
                                                                                " Allocations with the following SQL...." & _
                                                                                strSQL & vbCrLf)

            pStrLocType = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(strSQL))
        Catch sqlEx As SqlException
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute the following SQL...." _
                                                                & strSQL & vbCrLf & " Exception is : " & _
                                                                sqlEx.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBSELECTFAIL
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute the following SQL...." & _
                                                                    strSQL & vbCrLf & _
                                                                    " Exception is : " & ex.ToString & _
                                                                    vbCrLf)
            Return E_SERVERERROR
        End Try
        Return ATPAR_OK
    End Function

    ''' <summary>
    ''' To get location details
    ''' </summary>
    ''' <param name="pStrBunit"></param>
    ''' <param name="pOrgParm"></param>
    ''' <param name="pProfileParam"></param>
    ''' <param name="pDsLocDetails"></param>
    ''' <param name="pDeviceTokenEntry"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function GetLocationDetails(ByVal pStrBunit As String, ByVal pOrgParm As SortedList, _
                                        ByVal pProfileParam As SortedList, ByRef pDsLocDetails As DataSet, _
                                        ByVal pDeviceTokenEntry() As String) As Long

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sbInputXml As New StringBuilder
        Dim _outXmlStr As String = String.Empty

        Dim _strItemPriceType As String = String.Empty
        Dim _strItemDescrType As String = String.Empty
        Dim _strDefaultMfgItemID As String = String.Empty
        Dim _strUPNType As String = String.Empty
        Dim _strNDCType As String = String.Empty

        Dim _erpObjName As String
        Dim _erpObjAssy As Assembly
        Dim className As String
        Dim classType As Type
        Dim reflectObject As Object
        Dim methodName As MethodInfo

        Dim _XmlDoc As New XmlDocument
        Dim _nodeList As XmlNodeList
        Dim _strItemID As String = String.Empty
        Dim _strDescr As String = String.Empty
        Dim _dblPrice As Double = 0
        Dim _strSerFlg As String = String.Empty
        Dim _strLotFlg As String = String.Empty
        Dim _strUom As String = String.Empty
        Dim _strSerNo As String = String.Empty
        Dim _strLotNo As String = String.Empty
        Dim _strStrLoc As String = String.Empty
        Dim _strStrArea As String = String.Empty
        Dim _strStrLevel1 As String = String.Empty
        Dim _strStrLevel2 As String = String.Empty
        Dim _strStrLevel3 As String = String.Empty
        Dim _strStrLevel4 As String = String.Empty
        Dim _strSysQty As String = String.Empty
        Dim _strMfgItemId As String = String.Empty
        Dim _srVndItemId As String = String.Empty
        Dim _strUpcID As String = String.Empty

        Dim _statusCode As Long = -1


        Try


            '/// Reading the Org Param Info   ///'
            _strItemPriceType = pOrgParm(AppParameters_Enum.ITEM_PRICE.ToString)
            _strItemDescrType = pOrgParm(AppParameters_Enum.ITEM_DESCR.ToString)
            _strDefaultMfgItemID = pOrgParm(AppParameters_Enum.DEFAULT_MFG_ITEM_ID.ToString)

            '/// Reading the Profile Param Info   ///'
            _strUPNType = pProfileParam(AppParameters_Enum.ITEM_UPN_TYPE_CODE.ToString)
            _strNDCType = pProfileParam(AppParameters_Enum.ITEM_NDC_TYPE_CODE.ToString)


            With _sbInputXml

                .Append("<ROOT><BUNIT><RECORD>")
                .Append(pStrBunit)
                .Append("</RECORD>")
                .Append("<BUNIT_COUNT_FLAG>")
                .Append(pStrBunit)
                .Append(",")
                .Append("0")  'Count Flag for BUnit :- 0 = Issue, 1 = Count
                .Append("</BUNIT_COUNT_FLAG>")
                .Append("</BUNIT><ITEM_PRICE_TYPE>")
                .Append(_strItemPriceType)
                .Append("</ITEM_PRICE_TYPE><USER_ID>")
                .Append(pDeviceTokenEntry(TokenEntry_Enum.UserID))
                .Append("</USER_ID>")
                .Append("<MFG_ITEM_REQD>")
                .Append("True")
                .Append("</MFG_ITEM_REQD>")
                .Append("<VENDOR_ITEM_REQD>")
                .Append("True")
                .Append("</VENDOR_ITEM_REQD>")
                .Append("<PRICE_REQD>")
                .Append("True")
                .Append("</PRICE_REQD>")
                .Append("<ITEM_DESCR>")
                .Append(_strItemDescrType)
                .Append("</ITEM_DESCR>")
                .Append("<DEFAULT_MFG_ITEM_ID>")
                .Append(_strDefaultMfgItemID)
                .Append("</DEFAULT_MFG_ITEM_ID>")
                .Append("<ITEM_UPN_TYPE_CODE>")
                .Append(_strUPNType)
                .Append("</ITEM_UPN_TYPE_CODE>")
                .Append("<ITEM_NDC_TYPE_CODE>")
                .Append(_strNDCType)
                .Append("</ITEM_NDC_TYPE_CODE>")
                .Append("<BIN_TO_BIN_ACCESS>")
                .Append("False")
                .Append("</BIN_TO_BIN_ACCESS>")
                .Append("<ALLOW_NEGATIVE_INVENTORY>")
                .Append("N")
                .Append("</ALLOW_NEGATIVE_INVENTORY>")
                .Append("<SYNC_MULTIPLE_LOC_INFO>")
                .Append("N")
                .Append("</SYNC_MULTIPLE_LOC_INFO>")
                .Append("</ROOT>")

            End With

            If log.IsDebugEnabled Then log.Debug(methodBaseName & ":InputXML is : " & _sbInputXml.ToString & vbCrLf)


            'Calling the ERP component
            _erpObjName = EnumApps.StockIssue.ToString & "_" & GetConfigData(pDeviceTokenEntry(TokenEntry_Enum.SystemId), _
                                    EName(Of CONFIGFILE)(CONFIGFILE.ERP_SYS_DETAILS), ERP_SYS_DETAILS.DOWNLOADFROM.ToString)

            CreateERPObject(_erpObjName, _erpObjAssy)

            className = _erpObjName & ".GetInventoryItems"
            classType = _erpObjAssy.GetType(className)
            methodName = classType.GetMethod("GetInventoryItems")
            reflectObject = Activator.CreateInstance(classType)
            Dim args As Object() = {_sbInputXml.ToString, _outXmlStr, pDeviceTokenEntry}
            _statusCode = methodName.Invoke(reflectObject, args)

            If _statusCode <> ATPAR_OK Then
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & ":Failed in the remote call :" & _
                                                        " Statuscode is : " & _statusCode & vbCrLf)
                Return _statusCode
            End If

            If UBound(args) > 0 Then

                _outXmlStr = args(1)

                '/// Parsing the OutXML  ///'

                Try

                    Try
                        _XmlDoc.LoadXml(_outXmlStr)

                    Catch ex As Exception
                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & ":Failed to load the out xml:" & ex.Message & vbCrLf)
                        Return E_SERVERERROR
                    End Try

                    _nodeList = _XmlDoc.SelectNodes("ROOT/ITEM")


                    Dim _drLocHeaderRow As DataRow

                    _drLocHeaderRow = pDsLocDetails.Tables(DataSet_Type.HEADERS).NewRow()

                    _drLocHeaderRow.Item(Get_Cart_Detail_Output_Header_Enum.BUSINESS_UNIT) = pStrBunit
                    _drLocHeaderRow.Item(Get_Cart_Detail_Output_Header_Enum.CART_ID) = pStrBunit

                    pDsLocDetails.Tables(DataSet_Type.HEADERS).Rows.Add(_drLocHeaderRow)

                    For Each _node As XmlNode In _nodeList

                        _strItemID = String.Empty
                        _strDescr = String.Empty
                        _strSerFlg = String.Empty
                        _strLotFlg = String.Empty
                        _strUom = String.Empty
                        _strSerNo = String.Empty
                        _strLotNo = String.Empty
                        _strStrLoc = String.Empty
                        _strSysQty = String.Empty
                        _strMfgItemId = String.Empty
                        _srVndItemId = String.Empty
                        _strUpcID = String.Empty

                        Dim _stkNodeList As XmlNodeList

                        If Not _node.SelectSingleNode("B") Is Nothing Then 'ITEM_ID
                            _strItemID = _node.SelectSingleNode("B").InnerText
                        End If

                        If Not _node.SelectSingleNode("J") Is Nothing Then ' DESCRIPTION
                            _strDescr = _node.SelectSingleNode("J").InnerText
                        End If

                        _dblPrice = 0
                        If Not _node.SelectSingleNode("K") Is Nothing Then 'PRICE
                            _dblPrice = IIf(String.IsNullOrEmpty(_node.SelectSingleNode("K").InnerText), 0, _node.SelectSingleNode("K").InnerText)
                        End If

                        If Not _node.SelectSingleNode("H") Is Nothing Then 'SERIAL_CONTROLLED
                            _strSerFlg = _node.SelectSingleNode("H").InnerText
                        End If
                        If Not _node.SelectSingleNode("I") Is Nothing Then 'LOT_CONTROLLED
                            _strLotFlg = _node.SelectSingleNode("I").InnerText
                        End If

                        If Not _node.SelectSingleNode("C") Is Nothing Then 'MANF_ITEM_ID
                            _strMfgItemId = _node.SelectSingleNode("C").InnerText
                        End If

                        If Not _node.SelectSingleNode("X") Is Nothing Then 'STDUOM
                            _strUom = _node.SelectSingleNode("X").InnerText
                        End If

                        If Not _node.SelectSingleNode("E") Is Nothing Then
                            _srVndItemId = _node.SelectSingleNode("E").InnerText
                        End If

                        If Not _node.SelectSingleNode("F") Is Nothing Then
                            _strUpcID = _node.SelectSingleNode("F").InnerText
                        End If

                        _stkNodeList = _node.SelectNodes("ROOT/STOCK")

                        Dim _drLocDetail As DataRow
                        _drLocDetail = pDsLocDetails.Tables(DataSet_Type.DETAILS).NewRow()

                        With _drLocDetail
                            .Item(Get_Cart_Detail_Enum.INV_ITEM_ID) = _strItemID
                            .Item(Get_Cart_Detail_Enum.COMPARTMENT) = String.Empty
                            .Item(Get_Cart_Detail_Enum.ITEM_DESCR) = _strDescr
                            .Item(Get_Cart_Detail_Enum.ITEM_PRICE) = _dblPrice
                            .Item(Get_Cart_Detail_Enum.UOM) = String.Empty
                            .Item(Get_Cart_Detail_Enum.LOT_CONTROLLED) = _strLotFlg
                            .Item(Get_Cart_Detail_Enum.SERIAL_CONTROLLED) = _strSerFlg
                            .Item(Get_Cart_Detail_Enum.MFG_ITEM_ID) = _strMfgItemId
                            .Item(Get_Cart_Detail_Enum.VENDOR_ITEM_ID) = _srVndItemId
                            .Item(Get_Cart_Detail_Enum.UPN_ID) = _strUpcID
                            .Item(Get_Cart_Detail_Enum.OPTIMAL_QTY) = 0

                            pDsLocDetails.Tables(DataSet_Type.DETAILS).Rows.Add(_drLocDetail)
                        End With

                        For Each _stkNode As XmlNode In _stkNodeList

                            If Not _stkNode.SelectSingleNode("V") Is Nothing Then  'STORAGE_LOCATION
                                _strStrLoc = _stkNode.SelectSingleNode("V").InnerText
                            End If
                            If Not _stkNode.SelectSingleNode("U") Is Nothing Then  'STORAGE_AREA
                                _strStrArea = _stkNode.SelectSingleNode("U").InnerText
                            End If
                            If Not _stkNode.SelectSingleNode("AC") Is Nothing Then  'STOR_LEVEL_1
                                _strStrLevel1 = _stkNode.SelectSingleNode("AC").InnerText
                            End If
                            If Not _stkNode.SelectSingleNode("AD") Is Nothing Then  'STOR_LEVEL_2
                                _strStrLevel2 = _stkNode.SelectSingleNode("AD").InnerText
                            End If
                            If Not _stkNode.SelectSingleNode("AE") Is Nothing Then   'STOR_LEVEL_3
                                _strStrLevel3 = _stkNode.SelectSingleNode("AE").InnerText
                            End If
                            If Not _stkNode.SelectSingleNode("AF") Is Nothing Then   'STOR_LEVEL_4
                                _strStrLevel4 = _stkNode.SelectSingleNode("AF").InnerText
                            End If
                            If Not _stkNode.SelectSingleNode("T") Is Nothing Then 'SERIAL_ID
                                _strSerNo = _stkNode.SelectSingleNode("T").InnerText
                            End If
                            If Not _stkNode.SelectSingleNode("S") Is Nothing Then  'LOT_ID
                                _strLotNo = _stkNode.SelectSingleNode("S").InnerText
                            End If
                            If Not _stkNode.SelectSingleNode("Z") Is Nothing Then  'SYSTEM_QTY
                                _strSysQty = _stkNode.SelectSingleNode("Z").InnerText
                            End If

                            Dim _drLotSerial As DataRow
                            _drLotSerial = pDsLocDetails.Tables(DataSet_Type.LOTSERIAL_INFO.ToString).NewRow()

                            With _drLotSerial
                                .Item(Get_Cart_LotSerial_Info_Enum.BUSINESS_UNIT) = pStrBunit
                                .Item(Get_Cart_LotSerial_Info_Enum.CART_ID) = pStrBunit
                                .Item(Get_Cart_LotSerial_Info_Enum.STORAGE_LOCATION) = _strStrLoc
                                .Item(Get_Cart_LotSerial_Info_Enum.STORAGE_AREA) = _strStrArea
                                .Item(Get_Cart_LotSerial_Info_Enum.STORAGE_LEVEL_1) = _strStrLevel1
                                .Item(Get_Cart_LotSerial_Info_Enum.STORAGE_LEVEL_2) = _strStrLevel2
                                .Item(Get_Cart_LotSerial_Info_Enum.STORAGE_LEVEL_3) = _strStrLevel3
                                .Item(Get_Cart_LotSerial_Info_Enum.STORAGE_LEVEL_4) = _strStrLevel4
                                .Item(Get_Cart_LotSerial_Info_Enum.ITEM_ID) = _strItemID
                                .Item(Get_Cart_LotSerial_Info_Enum.LOT_NUMBER) = _strLotNo
                                .Item(Get_Cart_LotSerial_Info_Enum.SERIAL_NUMBER) = _strSerNo

                                If Not _stkNode.SelectSingleNode("R") Is Nothing Then  'STAGED_DATE
                                    .Item(Get_Cart_LotSerial_Info_Enum.STAGED_DATE) = _stkNode.SelectSingleNode("R").InnerText
                                Else
                                    .Item(Get_Cart_LotSerial_Info_Enum.STAGED_DATE) = String.Empty
                                End If
                                If Not _stkNode.SelectSingleNode("Y") Is Nothing Then  'CONTAINER_ID
                                    .Item(Get_Cart_LotSerial_Info_Enum.CONTAINER_ID) = _stkNode.SelectSingleNode("Y").InnerText
                                Else
                                    .Item(Get_Cart_LotSerial_Info_Enum.CONTAINER_ID) = String.Empty
                                End If
                                If Not _stkNode.SelectSingleNode("W") Is Nothing Then  'ITEM_UOM
                                    .Item(Get_Cart_LotSerial_Info_Enum.UOM) = _stkNode.SelectSingleNode("W").InnerText
                                Else
                                    .Item(Get_Cart_LotSerial_Info_Enum.UOM) = String.Empty
                                End If
                            
                                .Item(Get_Cart_LotSerial_Info_Enum.SYSTEM_QTY) = _strSysQty

                                pDsLocDetails.Tables(DataSet_Type.LOTSERIAL_INFO.ToString).Rows.Add(_drLotSerial)
                            End With

                        Next

                    Next

                Catch ex As Exception
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & ":Failed to build the out dataset:" & ex.Message & vbCrLf)
                    Return E_SERVERERROR
                End Try
            End If

            Return ATPAR_OK

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ":Failed with EX:" & ex.Message & vbCrLf)
            Return E_SERVERERROR
        Finally
            _sbInputXml = Nothing
        End Try

    End Function



    ''' <summary>
    ''' To get low stock data
    ''' </summary>
    ''' <param name="pReturnDS"></param>
    ''' <param name="pStrOrgGrpID"></param>
    ''' <param name="pDeviceTokenEntry"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function GetLowStockRep(ByRef pReturnDt As System.Data.DataTable, ByVal pStrOrgGrpID As String, ByVal pDeviceTokenEntry() As String) As Long

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try

            ' Dim dsInvItems As DataSet
            Dim _detDS As DataSet
            Dim strSQL As String
            Dim dDetTbl As DataTable
            Dim __selRows() As DataRow
            Dim sbSearch As StringBuilder
            Dim strItemId As String
            Dim strCartId As String
            Dim strBUnit As String
            Dim strQoH As String
            Dim strPQty As String
            Dim strCrFlg As String
            Dim strItemDescr As String
            Dim strUOM As String
            Dim strLocType As String
            Dim _statusCode As Long = -1
            Dim itemsRow As DataRow

            Dim intCriticalItems As Int64 = 0
            Dim intItemsBelowPar As Int64 = 0
            Dim intStockOutItems As Int64 = 0
            Dim Items As Int64 = 0

            For i As Integer = 0 To pReturnDt.Rows.Count - 1

                If strCartId <> pReturnDt.Rows(i).Item("CART_ID") Or _
                                strBUnit <> pReturnDt.Rows(i).Item("BUSINESS_UNIT") Then

                    strCartId = pReturnDt.Rows(i).Item("CART_ID")
                    strBUnit = pReturnDt.Rows(i).Item("BUSINESS_UNIT")
                    'Getting location type.
                    Try
                        _statusCode = GetLocationType(strBUnit, strCartId, strLocType)
                        If _statusCode <> ATPAR_OK Then
                            If log.IsfatalEnabled Then log.fatal(methodBaseName & " Failed to get the Location Type for" & _
                                                                                        " the cart : StatusCode is : " & _
                                                                                        _statusCode & vbCrLf)
                            Return _statusCode
                        End If
                    Catch ex As Exception
                        If log.IsfatalEnabled Then log.fatal(methodBaseName & " Failed to get the Location Type for" & _
                                                                                                        " the cart : StatusCode is : " & _
                                                                                                        _statusCode & vbCrLf)
                        Return E_SERVERERROR
                    End Try
                    _statusCode = GetCartDtlsForDashBoardItems(strCartId, strBUnit, _detDS, pStrOrgGrpID, pDeviceTokenEntry(TokenEntry_Enum.SystemId), , strLocType)
                    If _statusCode <> ATPAR_OK Then
                        If _statusCode <> E_NORECORDFOUND Then
                            Return _statusCode
                        End If
                    End If

                    _detDS.Tables(1).TableName = "Details"

                    dDetTbl = New DataTable
                    dDetTbl = _detDS.Tables("Details")
                End If

                strItemId = pReturnDt.Rows(i).Item("ITEM_ID")
                strCartId = pReturnDt.Rows(i).Item("CART_ID")
                strBUnit = pReturnDt.Rows(i).Item("BUSINESS_UNIT")
                strQoH = pReturnDt.Rows(i).Item("ITEM_QUANTITY_ON_HAND")


                sbSearch = New System.Text.StringBuilder

                If Len(strItemId) Then
                    If (dDetTbl.Columns(Get_Cart_Detail_Enum.INV_ITEM_ID).DataType.ToString() = "System.String") Then
                        sbSearch.Append("[" & dDetTbl.Columns(Get_Cart_Detail_Enum.INV_ITEM_ID).ColumnName & "] = '" & strItemId & "'")
                    Else
                        If IsNumeric(strItemId) Then
                            sbSearch.Append("[" & dDetTbl.Columns(Get_Cart_Detail_Enum.INV_ITEM_ID).ColumnName & "] = " & strItemId & "")
                        Else
                            sbSearch.Append("0=-1")
                        End If
                    End If


                End If

                __selRows = dDetTbl.Select(sbSearch.ToString)

                If __selRows.Length > 0 Then

                    If Not IsDBNull(__selRows(0).Item((Get_Cart_Detail_Enum.COUNT_REQD))) Then
                        If __selRows(0).Item((Get_Cart_Detail_Enum.COUNT_REQD)) Is Nothing Or _
                        String.IsNullOrEmpty(__selRows(0).Item((Get_Cart_Detail_Enum.COUNT_REQD))) Then
                            strCrFlg = String.Empty
                        Else
                            strCrFlg = __selRows(0).Item((Get_Cart_Detail_Enum.COUNT_REQD))
                        End If
                    Else
                        strCrFlg = String.Empty
                    End If

                    If Not IsDBNull(__selRows(0).Item((Get_Cart_Detail_Enum.OPTIMAL_QTY))) Then
                        If __selRows(0).Item((Get_Cart_Detail_Enum.OPTIMAL_QTY)) Is Nothing Or _
                            String.IsNullOrEmpty(__selRows(0).Item((Get_Cart_Detail_Enum.OPTIMAL_QTY))) Then
                            strPQty = 0
                        Else
                            strPQty = __selRows(0).Item((Get_Cart_Detail_Enum.OPTIMAL_QTY))
                        End If
                    Else
                        strPQty = 0
                    End If

                    If Not IsDBNull(__selRows(0).Item((Get_Cart_Detail_Enum.ITEM_DESCR))) Then
                        If __selRows(0).Item((Get_Cart_Detail_Enum.ITEM_DESCR)) Is Nothing Or _
                            String.IsNullOrEmpty(__selRows(0).Item((Get_Cart_Detail_Enum.ITEM_DESCR))) Then
                            strItemDescr = String.Empty
                        Else
                            strItemDescr = __selRows(0).Item((Get_Cart_Detail_Enum.ITEM_DESCR))
                        End If
                    Else
                        strItemDescr = String.Empty
                    End If

                    If Not IsDBNull(__selRows(0).Item((Get_Cart_Detail_Enum.UOM))) Then
                        If __selRows(0).Item((Get_Cart_Detail_Enum.UOM)) Is Nothing Or _
                            String.IsNullOrEmpty(__selRows(0).Item((Get_Cart_Detail_Enum.UOM))) Then
                            strUOM = String.Empty
                        Else
                            strUOM = __selRows(0).Item((Get_Cart_Detail_Enum.UOM))
                        End If
                    Else
                        strUOM = String.Empty
                    End If

                    'If UCase(strCrFlg) = "Y" Then

                    '    intCriticalItems += 1

                    'End If


                    If UCase(strCrFlg) = "Y" And Convert.ToDouble(strQoH) < Convert.ToDouble(strPQty) Then

                        Items += 1

                    End If

                    If Convert.ToDouble(strQoH) < Convert.ToDouble(strPQty) Then
                        intItemsBelowPar += 1
                    End If

                    If Convert.ToDouble(strQoH = 0) Then
                        intStockOutItems += 1
                    End If


                End If
            Next
            pReturnDt.Columns.Clear()
            pReturnDt.Rows.Clear()
            pReturnDt.Columns.Add("CriticalItems", Type.GetType("System.String"))
            pReturnDt.Columns.Add("AllItemsBelowPar", Type.GetType("System.String"))
            pReturnDt.Columns.Add("StockOutItems", Type.GetType("System.String"))
            itemsRow = pReturnDt.NewRow()
            itemsRow("CriticalItems") = Items.ToString()
            itemsRow("AllItemsBelowPar") = intItemsBelowPar.ToString()
            itemsRow("StockOutItems") = intStockOutItems.ToString()
            pReturnDt.Rows.Add(itemsRow)
            GetLowStockRep = ATPAR_OK

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the low stock report :" & _
                                                                    " Exception is : " & ex.ToString & vbCrLf)
            Return E_SERVERERROR
        End Try
    End Function



    Public Function GetDashboardLayoutDetails(ByRef _pDSDashBoardLayoutDtls As DataSet, _
                       ByVal pApp_ID As Integer, ByVal pDashboard_ID As Integer, ByVal pDeviceTokenEntry() As String) As Long _
        Implements IAtpar_WebTrans.GetDashboardLayoutDetails

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sqlCmd As SqlCommand
        Dim _StatusCode As String = String.Empty
        Dim _strSQL As String = String.Empty

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try

            Dim sqlParms() As SqlParameter = New SqlParameter(3) {}

            sqlParms(0) = New SqlParameter("@DASHBOARDID", SqlDbType.Int)
            sqlParms(0).Value = pDashboard_ID

            sqlParms(1) = New SqlParameter("@APP_ID", SqlDbType.Int)
            sqlParms(1).Value = pApp_ID

            sqlParms(2) = New SqlParameter("@StatusCode", SqlDbType.Int)
            sqlParms(2).Direction = ParameterDirection.Output


            _sqlCmd = New SqlCommand
            _sqlCmd.Connection = m_LocalDB.CreateConnection
            _sqlCmd.CommandType = CommandType.StoredProcedure
            _sqlCmd.CommandText = "GetDashboardLayoutDetails"
            _sqlCmd.Parameters.Add(sqlParms(0))
            _sqlCmd.Parameters.Add(sqlParms(1))
            _sqlCmd.Parameters.Add(sqlParms(2))



            _strSQL = "DECLARE @P1 INT " & _
                      "SET @P1 = 0 " & vbCrLf & _
                      vbCrLf & _
                      "EXEC	" & _
                      "GetDashboardLayoutDetails" & vbCrLf & _
                      "@DASHBOARDID = N'" & sqlParms(0).Value & "'," & vbCrLf & _
                      "@APP_ID = N'" & sqlParms(1).Value & "'," & vbCrLf & _
                       vbCrLf & _
                      "SELECT	@P1 "

            If log.IsDebugEnabled Then log.Debug(_strSQL)

            Try
                _pDSDashBoardLayoutDtls = m_LocalDB.ExecuteDataset(_sqlCmd)

                If (_pDSDashBoardLayoutDtls.Tables.Count > 0) Then
                    _pDSDashBoardLayoutDtls.Tables(0).TableName = "TblDashboardHeader"
                    _pDSDashBoardLayoutDtls.Tables(1).TableName = "TblDashboardDetails"
                    _pDSDashBoardLayoutDtls.AcceptChanges()
                End If

            Catch sqlEx As SqlException
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute the following" & _
                                                                      " SQL...." & _strSQL & vbCrLf & _
                                                                      " Exception is : " & sqlEx.ToString _
                                                                      & vbCrLf)
                Return E_SERVERERROR
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute the following" & _
                                                                     " SQL...." & _strSQL & vbCrLf & _
                                                                     " Exception is : " & ex.ToString _
                                                                     & vbCrLf)
                Return E_SERVERERROR
            End Try

            _StatusCode = sqlParms(2).Value
            _sqlCmd.Parameters.Clear()

            If _StatusCode <> ATPAR_OK Then
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the data from middle tier" & _
                                                                      " tables: StatusCode is : " & _StatusCode & _
                                                                       vbCrLf & " Failed to execute the" & _
                                                                       " SQL... " & vbCrLf & _strSQL & vbCrLf)
                Return E_SERVERERROR
            End If


        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to Get the details in middle tier" & _
                                                                  " tables: Exception is : " & ex.ToString & _
                                                                  vbCrLf)
            Return E_SERVERERROR
        End Try

        Return ATPAR_OK
    End Function

    ''' <summary>
    ''' Gets the Non cart item details for the cart
    ''' </summary>
    ''' <param name="pStrBUnit">Business unit</param>
    ''' <param name="pStrCartId">Cart ID</param>
    ''' <param name="pDsNonCartItemDetails">Dataset containing the non cart items</param>
    ''' <returns>Dataset containing the non cart items</returns>
    ''' <remarks></remarks>
    Private Function GetNonCartItems(ByVal pStrBUnit As String, ByVal pStrCartId As String, _
                                        ByRef pDsNonCartItemDetails As DataSet) As Long

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sbSQL As New StringBuilder

        With _sbSQL
            .Append("SELECT ITEM_ID, MANUFACTURE_ITEM_ID, VENDOR_ITEM_ID, CUST_ITEM_ID, ITEM_DESCRIPTION,VENDOR VENDOR_ID, ")
            .Append("COUNT_ORDER, OPTIMUM_QTY, CHARGE_CODE, UOM, LOT_CONTROLLED, SERIALIZED, UPC_ID, ITEM_PRICE, COMPARTMENT ,STATUS,CART_ID,BUSINESS_UNIT")
            .Append(" FROM MT_POU_NONCART_ITEMS ")
            .Append("WHERE CART_ID='" & pStrCartId & "' ")
            .Append("AND BUSINESS_UNIT='" & pStrBUnit & "'")
        End With

        If log.IsInfoEnabled Then log.Info(methodBaseName & " Getting the Non cart item details with the" & _
                                                                " following SQL...." & _sbSQL.ToString & vbCrLf)

        Try
            pDsNonCartItemDetails = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString))
        Catch sqlEx As SqlException
            If log.IsfatalEnabled Then log.fatal(methodBaseName & " Failed to execute the SQL.... " & vbCrLf & _
                                                                    _sbSQL.ToString & " Exception is " & _
                                                                    sqlEx.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBSELECTFAIL
        Catch ex As Exception
            If log.IsfatalEnabled Then log.fatal(methodBaseName & " Failed to execute the SQL.... " & vbCrLf & _
                                                                    _sbSQL.ToString & " Exception is " & _
                                                                    ex.ToString & vbCrLf)
            Return E_SERVERERROR
        Finally
            _sbSQL = Nothing
        End Try

        Return ATPAR_OK

    End Function


#End Region

#Region "Printer Setup"

    ''' <summary>
    ''' This function can be used to get Printer Models
    ''' </summary>
    ''' <param name="pDSApps">DataSet Contains Printer Models</param>
    ''' <param name="pUserID">User ID</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>

    Public Function GetPrinterModels(ByRef pDSApps As DataSet, _
                                     ByVal pUserID As String, _
                                     ByVal pDeviceTokenEntry() As String) As Long _
                                     Implements IAtpar_WebTrans.GetPrinterModels

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pUserID
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sbSQL As New StringBuilder

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            _sbSQL.Append("SELECT CODE, [NAME], [TYPE] FROM MT_ATPAR_LBL_PRINTERS")

            If log.IsInfoEnabled Then log.Info(methodBaseName & ": Query to fetch printer models " & _
                                                             _sbSQL.ToString)

            pDSApps = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString))

            If pDSApps.Tables(0).Rows.Count = 0 Then
                Return E_NORECORDFOUND
            End If

            Return ATPAR_OK

        Catch sqlex As SqlException
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the Printer Models " & vbCrLf & _
                                                                 " with the following SQL :" & _sbSQL.ToString & vbCrLf & _
                                                                 " Exception is:" & sqlex.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBSELECTFAIL
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the Printer Models  " & vbCrLf & _
                                                                " with the following SQL :" & _sbSQL.ToString & vbCrLf & _
                                                                " Exception is:" & ex.ToString & vbCrLf)
            Return E_SERVERERROR
        Finally
            _sbSQL = Nothing
        End Try

    End Function

    ''' <summary>
    ''' This function can be used to get functionalities for the selected product
    ''' </summary>
    ''' <param name="pDSApps">DataSet Contains Atpar Functionalities</param>
    ''' <returns>Return Success/Error Code</returns>
    ''' <remarks></remarks>

    Public Function GetFunctionalities(ByVal pAppID As Integer, _
                                       ByRef pDSApps As DataSet, _
                                       ByVal pDeviceTokenEntry() As String) As Long _
                                        Implements IAtpar_WebTrans.GetFunctionalities

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sbSQL As New StringBuilder

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            With _sbSQL
                .Append("SELECT APP_ID, LABEL_TYPE, LABEL_DESCRIPTION ")
                .Append("FROM MT_ATPAR_APP_LABELS ")
                .Append("WHERE APP_ID = " & pAppID & " ")
            End With


            If log.IsInfoEnabled Then log.Info(methodBaseName & ": Query to fetch atpar functionalities " & _
                                                             _sbSQL.ToString)

            pDSApps = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString))

            If pDSApps.Tables(0).Rows.Count = 0 Then
                Return E_NORECORDFOUND
            End If

            Return ATPAR_OK

        Catch sqlex As SqlException
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the Functionalities " & vbCrLf & _
                                                                 " with the following SQL :" & _sbSQL.ToString & vbCrLf & _
                                                                 " Exception is:" & sqlex.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBSELECTFAIL
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the Functionalities " & vbCrLf & _
                                                                " with the following SQL :" & _sbSQL.ToString & vbCrLf & _
                                                                " Exception is:" & ex.ToString & vbCrLf)
            Return E_SERVERERROR
        Finally
            _sbSQL = Nothing
        End Try

    End Function

    ''' <summary>
    ''' This function can be used to fetch sub labels (linked functionalities) for the selected functionality
    ''' </summary>
    ''' <param name="pAppId">Atpar Product ID</param>
    ''' <param name="pLabelType">Label type</param>
    ''' <param name="pDSApps">DataSet Contains Atpar Linked Functionalities</param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>

    Public Function GetLinkedFunctionalities(ByVal pAppId As Integer, _
                                             ByVal pLabelType As Integer, _
                                             ByRef pDSApps As DataSet, _
                                             ByVal pDeviceTokenEntry() As String) As Long _
                                             Implements IAtpar_WebTrans.GetLinkedFunctionalities

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sbSQL As New StringBuilder

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            With _sbSQL
                .Append("SELECT APP_ID, LABEL_TYPE, ")
                .Append("LABEL_LNK_TYPE, LABEL_LNK_DESCRIPTION ")
                .Append("FROM MT_ATPAR_APP_LINKED_LABELS ")
                .Append("WHERE APP_ID = " & pAppId & " ")
                .Append("AND LABEL_TYPE = " & pLabelType & " ")

            End With

            If log.IsInfoEnabled Then log.Info(methodBaseName & ": Query to fetch linked functionalities " & _
                                                             _sbSQL.ToString)

            pDSApps = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString))

            Return ATPAR_OK

        Catch sqlex As SqlException
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the Linked Functionalities " & vbCrLf & _
                                                                 " with the following SQL :" & _sbSQL.ToString & vbCrLf & _
                                                                 " Exception is:" & sqlex.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBSELECTFAIL
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the Linked Functionalities " & vbCrLf & _
                                                                " with the following SQL :" & _sbSQL.ToString & vbCrLf & _
                                                                " Exception is:" & ex.ToString & vbCrLf)
            Return E_SERVERERROR
        Finally
            _sbSQL = Nothing
        End Try

    End Function

    ''' <summary>
    ''' This function can be used to get the modles for the selected printer type
    ''' </summary>
    ''' <param name="pAppID">App ID</param>
    ''' <param name="pFunctionality">Label type or Functionality</param>
    ''' <param name="pPrinterCode">Printer Code</param>
    ''' <param name="pDSApps">DS Models</param>
    ''' <param name="pDeviceTokenEntry">DeviceTokenEntry</param>
    ''' <returns>Returns Success/Error Code</returns>
    ''' <remarks></remarks>

    Public Function GetModels(ByVal pAppID As Integer, ByVal pFunctionality As Integer, _
                              ByVal pPrinterCode As String, _
                              ByRef pDSModles As DataSet, ByVal pDeviceTokenEntry() As String) As Long _
                              Implements IAtpar_WebTrans.GetModels

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sbSQL As New StringBuilder

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try

            With _sbSQL
                .Append("SELECT MODEL FROM MT_ATPAR_LABELS_DATA")
                .Append(" WHERE APP_ID = " & pAppID & " ")
                .Append(" AND LABEL_TYPE = " & pFunctionality & " ")
                .Append(" AND PRINTER_CODE = '" & pPrinterCode & "' ")
                .Append(" GROUP BY MODEL")
            End With

            If log.IsInfoEnabled Then log.Info(methodBaseName & ":Query to fetch models: " & _sbSQL.ToString)

            pDSModles = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString))

            Return ATPAR_OK

        Catch sqlex As SqlException
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the Functionalities " & vbCrLf & _
                                                                 " with the following SQL :" & _sbSQL.ToString & vbCrLf & _
                                                                 " Exception is:" & sqlex.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBSELECTFAIL
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the Functionalities " & vbCrLf & _
                                                                " with the following SQL :" & _sbSQL.ToString & vbCrLf & _
                                                                " Exception is:" & ex.ToString & vbCrLf)
            Return E_SERVERERROR
        Finally
            _sbSQL = Nothing
        End Try

    End Function

    ''' <summary>
    ''' This function can be used to get the image of the selected model
    ''' </summary>
    ''' <param name="pAppId">App ID</param>
    ''' <param name="pModel">Model</param>
    ''' <param name="pFunctionality">Label Type or Functionality</param>
    ''' <param name="pPrinterModelType">Printer Model</param>
    ''' <param name="pDSModel">DS Model</param>
    ''' <param name="pDeviceTokenEntry">DeviceTokenEntry</param>
    ''' <returns>Success/Error Code</returns>
    ''' <remarks></remarks>

    Public Function GetModelImage(ByVal pAppId As Integer, ByVal pModel As String, _
                                  ByVal pFunctionality As Integer, ByVal pPrinterModelType As String, _
                                  ByRef pDSModel As DataSet, ByVal pDeviceTokenEntry() As String) As Long _
                                  Implements IAtpar_WebTrans.GetModelImage

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sbSQL As New StringBuilder

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try

            With _sbSQL
                .Append("SELECT LABEL_IMAGE, WIDTH, HEIGHT, LABEL_FILE_NAME FROM MT_ATPAR_LABELS_DATA")
                .Append(" WHERE APP_ID = " & pAppId & "")
                .Append(" AND LABEL_TYPE = " & pFunctionality & "")
                .Append(" AND MODEL = '" & pModel & "'")
                .Append(" AND PRINTER_CODE  = '" & pPrinterModelType & "'")
            End With

            If log.IsInfoEnabled Then log.Info(methodBaseName & ":Query to fetch model image: " & _sbSQL.ToString)

            pDSModel = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString))


        Catch sqlex As SqlException
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the Linked Functionalities " & vbCrLf & _
                                                                 " with the following SQL :" & _sbSQL.ToString & vbCrLf & _
                                                                 " Exception is:" & sqlex.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBSELECTFAIL
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the Linked Functionalities " & vbCrLf & _
                                                                " with the following SQL :" & _sbSQL.ToString & vbCrLf & _
                                                                " Exception is:" & ex.ToString & vbCrLf)
            Return E_SERVERERROR

        Finally
            _sbSQL = Nothing
        End Try

        Return ATPAR_OK

    End Function

    ''' <summary>
    ''' This function can be used to get printers data
    ''' </summary>
    ''' <param name="pAppID">Atpar Product ID</param>
    ''' <param name="pPrinterName">Printer Friendly Name</param>
    ''' <param name="pDsPrinterData">DataSet Contains printer data</param>
    ''' <param name="pDeviceTokenEntry"></param>
    ''' <returns>ATPAR_OK on Success, else Error Code</returns>
    ''' <remarks></remarks>

    Public Function GetPrintersData(ByVal pAppID As String, _
                                    ByVal pPrinterName As String, _
                                    ByRef pDsPrinterData As DataSet, _
                                    ByVal pDeviceTokenEntry() As String) As Long _
                                    Implements IAtpar_WebTrans.GetPrintersData

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        If pAppID = -1 Then
            pAppID = String.Empty
        End If

        Dim _strSQL As String = String.Empty
        Dim sqlParms() As SqlParameter


        sqlParms = New SqlParameter(2) {}

        sqlParms(0) = New SqlParameter("@pAppID", SqlDbType.NVarChar)
        sqlParms(0).Value = pAppID

        sqlParms(1) = New SqlParameter("@pPrinterName", SqlDbType.NVarChar)
        sqlParms(1).Value = pPrinterName

        If log.IsInfoEnabled Then
            log.Info("Calling GetPrinterData with the following syntax..")
            _strSQL = "exec GetPrinterData " & _
                                     "'" & sqlParms(0).Value & "', " & _
                                     "'" & sqlParms(1).Value & "' "
            log.Info(_strSQL)
        End If

        Try
            Dim _Cmd As SqlCommand
            Try
                _Cmd = New SqlCommand

                _Cmd.Connection = m_LocalDB.CreateConnection
                _Cmd.CommandType = CommandType.StoredProcedure
                _Cmd.CommandText = "GetPrinterData"
                _Cmd.Parameters.Add(sqlParms(0))
                _Cmd.Parameters.Add(sqlParms(1))

                pDsPrinterData = m_LocalDB.ExecuteDataSet(_Cmd)

            Catch sqlex As SqlException
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the Linked Functionalities " & vbCrLf & _
                                                                " with the following SQL :" & _strSQL & vbCrLf & _
                                                                " Exception is:" & sqlex.ToString & vbCrLf)

                Return ATPAR_E_LOCALDBSELECTFAIL
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed with ex :" & ex.ToString)
                Return E_SERVERERROR
            Finally
                _Cmd.Dispose()
            End Try

            Return ATPAR_OK

        Catch sqlex As SqlException
            If log.IsErrorEnabled Then log.Error(GetSQLExceptionMessageString(sqlex))
            Return ATPAR_E_LOCALDBSELECTFAIL
        Catch ex As Exception
            If log.IsErrorEnabled Then log.Error(GetSQLExceptionMessageString(ex))
            Return E_SERVERERROR
        End Try

    End Function

    ''' <summary>
    ''' This function can be used to get selected printer data
    ''' </summary>
    ''' <param name="pAppID">App ID</param>
    ''' <param name="pFriendlyName">Printer Friendly Name</param>
    ''' <param name="pFunctionality">Functionality type</param>
    ''' <param name="pDSPrinterData">DS Printer Data</param>
    ''' <param name="pDeviceTokenEntry">Device Token Entry</param>
    ''' <returns>Error/Success Code</returns>
    ''' <remarks></remarks>

    Public Function GetPrinterData(ByVal pAppID As Integer, _
                                  ByVal pFriendlyName As String, _
                                  ByVal pFunctionality As String, _
                                  ByRef pDSPrinterData As DataSet, _
                                  ByVal pDeviceTokenEntry() As String) As Long _
                                  Implements IAtpar_WebTrans.GetPrinterData

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sbSQL As New StringBuilder


        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try

            With _sbSQL
                .Append("SELECT APP_ID, PRINTER_CODE, NETWORK_TYPE, IP_ADDRESS, PORT_NO,")
                .Append(" FRIENDLY_NAME, LABEL_TYPE, MODEL")
                .Append(" FROM MT_ATPAR_SETUP_PRO_PRINTERES")
                .Append(" WHERE APP_ID = " & pAppID & "")
                .Append(" AND FRIENDLY_NAME = '" & GetDatabaseString(pFriendlyName) & "' ")
                .Append(" AND LABEL_TYPE = '" & pFunctionality & "'")
                .Append(" AND STATUS <> 3 ")
            End With

            If log.IsInfoEnabled Then log.Info(methodBaseName & ": Query to fetch selected printer data " & _
                                                              _sbSQL.ToString)

            pDSPrinterData = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString))

            Return ATPAR_OK

        Catch sqlex As SqlException
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the seleted Printer data  " & vbCrLf & _
                                                                 " with the following SQL :" & _sbSQL.ToString & vbCrLf & _
                                                                 " Exception is:" & sqlex.ToString & vbCrLf)

            Return ATPAR_E_LOCALDBSELECTFAIL
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the seleted Printer data " & vbCrLf & _
                                                                " with the following SQL :" & _sbSQL.ToString & vbCrLf & _
                                                                " Exception is:" & ex.ToString & vbCrLf)

            Return E_SERVERERROR
        Finally
            _sbSQL = Nothing
        End Try

    End Function

    ''' <summary>
    ''' This function can be used to insert new model to atpar db
    ''' </summary>
    ''' <param name="pAppID">App ID</param>
    ''' <param name="pFileName">File Name</param>
    ''' <param name="pPNLData">PNL Data</param>
    ''' <param name="pLVXData">LVX Data</param>
    ''' <param name="pImage">Image</param>
    ''' <param name="pModel">Model</param>
    ''' <param name="pWidth">Width</param>
    ''' <param name="pHeight">Height</param>
    ''' <param name="pUserID">User ID</param>
    ''' <param name="pFunctionality">Functionality</param>
    ''' <param name="pLinkFunctionality">Linked Functionality</param>
    ''' <param name="pPrinterCode">Printer Code</param>
    ''' <param name="pDeviceTokenEntry">DeviceTokenEntry</param>
    ''' <returns>Error/Success Code</returns>
    ''' <remarks></remarks>

    Public Function InsertNewModel(ByVal pAppID As Integer, ByVal pFileName As String, _
                                   ByVal pPNLData() As Byte, ByVal pLVXData() As Byte, _
                                   ByVal pImage() As Byte, ByVal pModel As String, _
                                   ByVal pWidth As Double, ByVal pHeight As Double, _
                                   ByVal pUserID As String, ByVal pFunctionality As Integer, _
                                   ByVal pLinkFunctionality As Integer, ByVal pPrinterCode As String, _
                                   ByVal pDeviceTokenEntry() As String) As Long _
                                   Implements IAtpar_WebTrans.InsertNewModel

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)
        Dim _StatusCode As String = String.Empty


        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Dim _sbSQL As New StringBuilder
        Dim cmd As New SqlCommand
        Try


            With _sbSQL
                .Append("INSERT INTO MT_ATPAR_LABELS_DATA(APP_ID, LABEL_FILE_NAME, LABEL_DATA_PNL, ")
                .Append("LABEL_DATA_LVX, LABEL_IMAGE, MODEL, WIDTH, HEIGHT, USER_ID,")
                .Append("UPDATE_DATE, LABEL_TYPE, LINK_LABEL_TYPE, PRINTER_CODE)")
                .Append("values (@APP_ID, @LABEL_FILE_NAME, @LABEL_DATA_PNL, @LABEL_DATA_LVX,")
                .Append("@LABEL_IMAGE, @MODEL, @WIDTH, @HEIGHT, @USER_ID, @UPDATE_DATE,")
                .Append("@LABEL_TYPE, @LINK_LABEL_TYPE, @PRINTER_CODE)")
            End With

            cmd = New SqlCommand(_sbSQL.ToString)
            cmd.Parameters.Add("@APP_ID", SqlDbType.SmallInt).Value = pAppID
            cmd.Parameters.Add("@LABEL_FILE_NAME", SqlDbType.VarChar).Value = pFileName
            cmd.Parameters.Add("@LABEL_DATA_PNL", SqlDbType.Binary).Value = pPNLData
            cmd.Parameters.Add("@LABEL_DATA_LVX", SqlDbType.Binary).Value = pLVXData
            cmd.Parameters.Add("@LABEL_IMAGE", SqlDbType.Binary).Value = pImage
            cmd.Parameters.Add("@MODEL", SqlDbType.VarChar).Value = pModel
            cmd.Parameters.Add("@WIDTH", SqlDbType.Float).Value = pWidth
            cmd.Parameters.Add("@HEIGHT", SqlDbType.Float).Value = pHeight
            cmd.Parameters.Add("@USER_ID", SqlDbType.VarChar).Value = pUserID
            cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = Now
            cmd.Parameters.Add("@LABEL_TYPE", SqlDbType.Int).Value = pFunctionality
            cmd.Parameters.Add("@LINK_LABEL_TYPE", SqlDbType.Int).Value = pLinkFunctionality
            cmd.Parameters.Add("@PRINTER_CODE", SqlDbType.VarChar).Value = pPrinterCode

            If log.IsInfoEnabled Then log.Info(methodBaseName & ":Query to Insert the label : " & _sbSQL.ToString & vbCrLf)

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to prepare sql command " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try


        Try
            m_LocalDB.ExecuteNonQuery(cmd)
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " ATPAR_E_LOCALDBINSERTFAIL: " & _
                            "while executing the query : " & _sbSQL.ToString & " : exception is : " & ex.ToString)
            Return ATPAR_E_LOCALDBINSERTFAIL
        End Try

        Return ATPAR_OK

    End Function

    Public Function InsertModel1(ByVal pAppID As Integer, ByVal pFileName As String, _
                                   ByVal pPNLData() As Byte, ByVal pLVXData As String, _
                                   ByVal pImage() As Byte, ByVal pModel As String, _
                                   ByVal pWidth As Double, ByVal pHeight As Double, _
                                   ByVal pUserID As String, ByVal pFunctionality As Integer, _
                                   ByVal pLinkFunctionality As Integer, ByVal pPrinterCode As String, _
                                   ByVal pDeviceTokenEntry() As String) As Long _
                                   Implements IAtpar_WebTrans.InsertModel1

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)
        Dim _StatusCode As String = String.Empty


        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Dim _sbSQL As New StringBuilder
        Dim cmd As New SqlCommand
        Try


            With _sbSQL
                .Append("INSERT INTO MT_ATPAR_LABELS_DATA(APP_ID, LABEL_FILE_NAME, LABEL_DATA_PNL, ")
                .Append("LABEL_DATA_LVX, LABEL_IMAGE, MODEL, WIDTH, HEIGHT, USER_ID,")
                .Append("UPDATE_DATE, LABEL_TYPE, LINK_LABEL_TYPE, PRINTER_CODE)")
                .Append("values (@APP_ID, @LABEL_FILE_NAME, @LABEL_DATA_PNL, @LABEL_DATA_LVX,")
                .Append("@LABEL_IMAGE, @MODEL, @WIDTH, @HEIGHT, @USER_ID, @UPDATE_DATE,")
                .Append("@LABEL_TYPE, @LINK_LABEL_TYPE, @PRINTER_CODE)")
            End With

            cmd = New SqlCommand(_sbSQL.ToString)
            cmd.Parameters.Add("@APP_ID", SqlDbType.SmallInt).Value = pAppID
            cmd.Parameters.Add("@LABEL_FILE_NAME", SqlDbType.VarChar).Value = pFileName
            cmd.Parameters.Add("@LABEL_DATA_PNL", SqlDbType.Binary).Value = pPNLData
            cmd.Parameters.Add("@LABEL_DATA_LVX", SqlDbType.VarChar).Value = pLVXData
            cmd.Parameters.Add("@LABEL_IMAGE", SqlDbType.Binary).Value = pImage
            cmd.Parameters.Add("@MODEL", SqlDbType.VarChar).Value = pModel
            cmd.Parameters.Add("@WIDTH", SqlDbType.Float).Value = pWidth
            cmd.Parameters.Add("@HEIGHT", SqlDbType.Float).Value = pHeight
            cmd.Parameters.Add("@USER_ID", SqlDbType.VarChar).Value = pUserID
            cmd.Parameters.Add("@UPDATE_DATE", SqlDbType.DateTime).Value = Now
            cmd.Parameters.Add("@LABEL_TYPE", SqlDbType.Int).Value = pFunctionality
            cmd.Parameters.Add("@LINK_LABEL_TYPE", SqlDbType.Int).Value = pLinkFunctionality
            cmd.Parameters.Add("@PRINTER_CODE", SqlDbType.VarChar).Value = pPrinterCode

            If log.IsInfoEnabled Then log.Info(methodBaseName & ":Query to Insert the label : " & _sbSQL.ToString & vbCrLf)

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to prepare sql command " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try


        Try
            m_LocalDB.ExecuteNonQuery(cmd)
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " ATPAR_E_LOCALDBINSERTFAIL: " & _
                            "while executing the query : " & _sbSQL.ToString & " : exception is : " & ex.ToString)
            Return ATPAR_E_LOCALDBINSERTFAIL
        End Try

        Return ATPAR_OK

    End Function

    ''' <summary>
    ''' This funciton can be used to check existance of a printer
    ''' </summary>
    ''' <param name="pAppID">APP ID</param>
    ''' <param name="pFriendlyName">Pritner Friendly Name</param>
    ''' <param name="pModel">Printer Model</param>
    ''' <param name="pFunctionality">Functionality Type</param>
    ''' <param name="pIntRecordCount">Rows Count</param>
    ''' <param name="pDeviceTokenEntry">Device Token Entry</param>
    ''' <returns>Success/Error Code</returns>
    ''' <remarks></remarks>

    Public Function CheckPrinterAvailable(ByVal pAppID As Integer, _
                                          ByVal pFriendlyName As String, _
                                          ByVal pFunctionality As String, _
                                          ByRef pIntRecordCount As Integer, _
                                          ByVal pDeviceTokenEntry() As String) As Long

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _sbSQL As New StringBuilder

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try
            pIntRecordCount = 0

            With _sbSQL
                .Append("SELECT COUNT(*) FROM MT_ATPAR_SETUP_PRO_PRINTERES")
                .Append(" WHERE APP_ID = " & pAppID & "")
                .Append(" AND FRIENDLY_NAME = '" & pFriendlyName & "'")
                .Append(" AND LABEL_TYPE = " & pFunctionality & "")
                .Append(" AND STATUS <> 3 ")
            End With


            If log.IsInfoEnabled Then log.Info(methodBaseName & ":Qury to check existance of printer: " & _sbSQL.ToString)


            pIntRecordCount = m_LocalDB.ExecuteScalar(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString))

            Return ATPAR_OK

        Catch sqlex As SqlException
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the Check Printer Available " & vbCrLf & _
                                                                 " with the following SQL :" & _sbSQL.ToString & vbCrLf & _
                                                                 " Exception is:" & sqlex.ToString & vbCrLf)
            Return ATPAR_E_LOCALDBSELECTFAIL
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the Check Printer Available " & vbCrLf & _
                                                                " with the following SQL :" & _sbSQL.ToString & vbCrLf & _
                                                                " Exception is:" & ex.ToString & vbCrLf)
            Return E_SERVERERROR
        Finally
            _sbSQL = Nothing
        End Try

    End Function

    ''' <summary>
    ''' This function can be used to chagne printer status (Active/ Inactive and Delete) 
    ''' </summary>
    ''' <param name="pAppID">App ID</param>
    ''' <param name="pFriendlyName">Printer Friendly Name</param>
    ''' <param name="pFunctionality">Functionality Type</param>
    ''' <param name="pStatus">Status</param>
    ''' <param name="pDeviceTokenEntry">Device Token Entry</param>
    ''' <returns>Success/Error Code</returns>
    ''' <remarks></remarks>

    Public Function UpdatePrinterStatus(ByVal pAppID As Integer, _
                                        ByVal pFriendlyName As String, _
                                        ByVal pFunctionality As Integer, _
                                        ByVal pStatus As Integer, _
                                        ByVal pDeviceTokenEntry() As String) As Long _
                                        Implements IAtpar_WebTrans.UpdatePrinterStatus

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _StatusCode As String = String.Empty
        Dim _sbSQL As New StringBuilder

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try

            With _sbSQL
                .Append("UPDATE MT_ATPAR_SETUP_PRO_PRINTERES")
                .Append(" SET STATUS=" & pStatus & ", ")
                .Append(" UPDATE_DATE = '" & Now & "'")
                .Append(" WHERE APP_ID = " & pAppID & "")
                .Append(" AND FRIENDLY_NAME = '" & GetDatabaseString(pFriendlyName) & "'")
                .Append(" AND LABEL_TYPE = " & pFunctionality & "")
                .Append(" AND STATUS <> 3 ")
            End With


            If log.IsInfoEnabled Then log.Info(methodBaseName & ":Query to update  the data : " & _sbSQL.ToString & vbCrLf)

            m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString))

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " ATPAR_E_LOCALDBUPDATEFAIL: " & _
                "while executing the query : " & _sbSQL.ToString & " : exception is : " & ex.ToString)
            Return ATPAR_E_LOCALDBUPDATEFAIL
        End Try

        Return ATPAR_OK

    End Function

    ''' <summary>
    ''' This function can be used to save printer details
    ''' </summary>
    ''' <param name="pAppID"></param>
    ''' <param name="pPrinterModel"></param>
    ''' <param name="pIPAddress"></param>
    ''' <param name="pPortNo"></param>
    ''' <param name="pFriendlyName"></param>
    ''' <param name="pStatus"></param>
    ''' <param name="pUpdateDate"></param>
    ''' <param name="pUserID"></param>
    ''' <param name="pLabelName"></param>
    ''' <param name="pPrinterType"></param>
    ''' <param name="pFunctionality"></param>
    ''' <param name="pLinkedFunctionality"></param>
    ''' <param name="pModel"></param>
    ''' <param name="pSeqNo"></param>
    ''' <param name="pMode"></param>
    ''' <param name="pOldAppid"></param>
    ''' <param name="pOldFriendlyName"></param>
    ''' <param name="pDeviceTokenEntry"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>

    Public Function SavePrinterDetails(ByVal pDsPrintData As DataSet, _
                                       ByVal pDeviceTokenEntry() As String) As Long _
                                       Implements IAtpar_WebTrans.SavePrinterDetails

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _trans As SqlTransaction
        Dim _sbSQL As New StringBuilder
        Dim sqlConnection As SqlConnection
        Dim _statusCode As Long = -1
        Dim _intPrinterCount As Integer = 0


        Try
            If pDsPrintData.Tables(0).Rows.Count > 0 Then

                _statusCode = CheckPrinterAvailable(pDsPrintData.Tables(0).Rows(0).Item("APP_ID"), _
                                      GetDatabaseString(pDsPrintData.Tables(0).Rows(0).Item("FRIENDLY_NAME").ToString), _
                                      pDsPrintData.Tables(0).Rows(0).Item("LABEL_TYPE"), _
                                      _intPrinterCount, pDeviceTokenEntry)

                If _intPrinterCount > 0 Then

                    If log.IsDebugEnabled Then log.Debug(methodBaseName & " Status code from CheckPrinterAvailable: " & S_DATAEXISTS_INTABLE)
                    Return S_DATAEXISTS_INTABLE

                End If



                Try
                    CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
                    sqlConnection = m_LocalDB.CreateConnection()
                    sqlConnection.Open()
                    _trans = sqlConnection.BeginTransaction

                Catch ex As Exception
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
                    Return E_SERVERERROR
                End Try

                For _intCnt As Integer = 0 To pDsPrintData.Tables(0).Rows.Count - 1
                    Try
                        With _sbSQL
                            .Append("INSERT INTO MT_ATPAR_SETUP_PRO_PRINTERES (")
                            .Append("APP_ID,")
                            .Append("PRINTER_CODE,")
                            .Append("IP_ADDRESS,")
                            .Append("PORT_NO,")
                            .Append("FRIENDLY_NAME,")
                            .Append("STATUS,")
                            .Append("UPDATE_DATE,")
                            .Append("USER_ID,")
                            .Append("LABEL_FILE_NAME,")
                            .Append("NETWORK_TYPE,")
                            .Append("LABEL_TYPE,")
                            .Append("LINKED_LABEL_TYPE,")
                            .Append("MODEL) ")
                            .Append("VALUES(" & pDsPrintData.Tables(0).Rows(_intCnt).Item("APP_ID") & ",")
                            .Append("'" & pDsPrintData.Tables(0).Rows(_intCnt).Item("PRINTER_CODE").ToString & "',")
                            .Append("'" & pDsPrintData.Tables(0).Rows(_intCnt).Item("IP_ADDRESS").ToString & "',")
                            .Append("" & pDsPrintData.Tables(0).Rows(_intCnt).Item("PORT_NO") & ",")
                            .Append("'" & GetDatabaseString(pDsPrintData.Tables(0).Rows(_intCnt).Item("FRIENDLY_NAME").ToString) & "',")
                            .Append("" & pDsPrintData.Tables(0).Rows(_intCnt).Item("STATUS") & ",")
                            .Append("'" & pDsPrintData.Tables(0).Rows(_intCnt).Item("UPDATE_DATE") & "',")
                            .Append("'" & pDsPrintData.Tables(0).Rows(_intCnt).Item("USER_ID").ToString & "',")
                            .Append("'" & pDsPrintData.Tables(0).Rows(_intCnt).Item("LABEL_FILE_NAME").ToString & "',")
                            .Append("'" & pDsPrintData.Tables(0).Rows(_intCnt).Item("NETWORK_TYPE").ToString & "',")
                            .Append("'" & pDsPrintData.Tables(0).Rows(_intCnt).Item("LABEL_TYPE") & "',")
                            .Append("'" & pDsPrintData.Tables(0).Rows(_intCnt).Item("LINKED_LABEL_TYPE") & "',")
                            .Append("'" & pDsPrintData.Tables(0).Rows(_intCnt).Item("MODEL").ToString & "')")
                        End With

                        If log.IsInfoEnabled Then log.Info(methodBaseName & " Inserting the Printer " & _
                                        "details with the following SQL... " & vbCrLf & _sbSQL.ToString & vbCrLf)
                        m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString), _trans)

                    Catch ex As SqlException
                        _trans.Rollback()
                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                              _sbSQL.ToString & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
                        Return ATPAR_E_LOCALDBINSERTFAIL
                        Exit Function

                    Finally
                        _sbSQL.Remove(0, _sbSQL.Length)
                    End Try

                Next
                _statusCode = CreateOrUpdateNiceLabel(pDsPrintData, pDeviceTokenEntry)
                If _statusCode <> ATPAR_OK Then
                    _trans.Rollback()
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to Create/Update Nice Label LVX and PNL Files ")
                    Return E_SERVERERROR
                End If

            End If

            If Not _trans Is Nothing Then
                _trans.Commit()
            End If

            Return ATPAR_OK

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in " & methodBaseName & " is.. " & vbCrLf & ex.ToString)
            Return E_SERVERERROR
        Finally
            _sbSQL = Nothing
            sqlConnection = Nothing
        End Try

    End Function

    Public Function UpdatePrinterDetails(ByVal pOldFriendlyName As String, _
                                         ByVal pblnPrinterExists As Boolean, _
                                         ByVal pDsPrintData As DataSet, _
                                         ByVal pDeviceTokenEntry() As String) As Long _
                                         Implements IAtpar_WebTrans.UpdatePrinterDetails

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _trans As SqlTransaction
        Dim _sbSQL As New StringBuilder
        Dim sqlConnection As SqlConnection
        Dim _statusCode As Long = -1
        Dim _intPrinterCount As Integer = 0





        Try
            If pDsPrintData.Tables(0).Rows.Count > 0 Then

                If pblnPrinterExists Then
                    _statusCode = CheckPrinterAvailable(pDsPrintData.Tables(0).Rows(0).Item("APP_ID"), _
                                      GetDatabaseString(pDsPrintData.Tables(0).Rows(0).Item("FRIENDLY_NAME").ToString), _
                                      pDsPrintData.Tables(0).Rows(0).Item("LABEL_TYPE"), _
                                      _intPrinterCount, pDeviceTokenEntry)

                    If _intPrinterCount > 0 Then
                        If log.IsDebugEnabled Then log.Debug(methodBaseName & " Status code from CheckPrinterAvailable: " & S_DATAEXISTS_INTABLE)
                        Return S_DATAEXISTS_INTABLE
                    End If
                End If

                Try
                    CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
                    sqlConnection = m_LocalDB.CreateConnection()
                    sqlConnection.Open()
                    _trans = sqlConnection.BeginTransaction

                Catch ex As Exception
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
                    Return E_SERVERERROR
                End Try

                For _intCnt As Integer = 0 To pDsPrintData.Tables(0).Rows.Count - 1
                    Try
                        With _sbSQL

                            .Append("UPDATE MT_ATPAR_SETUP_PRO_PRINTERES SET ")
                            .Append("IP_ADDRESS = '" & pDsPrintData.Tables(0).Rows(_intCnt).Item("IP_ADDRESS").ToString & "', ")
                            .Append("PORT_NO = " & pDsPrintData.Tables(0).Rows(_intCnt).Item("PORT_NO") & ", ")
                            .Append("FRIENDLY_NAME = '" & GetDatabaseString(pDsPrintData.Tables(0).Rows(_intCnt).Item("FRIENDLY_NAME").ToString) & "', ")
                            .Append("UPDATE_DATE = '" & pDsPrintData.Tables(0).Rows(_intCnt).Item("UPDATE_DATE") & "', ")
                            .Append("USER_ID = '" & pDsPrintData.Tables(0).Rows(_intCnt).Item("USER_ID").ToString & "', ")
                            .Append("LABEL_FILE_NAME = '" & pDsPrintData.Tables(0).Rows(_intCnt).Item("LABEL_FILE_NAME").ToString & "', ")
                            .Append("NETWORK_TYPE = '" & pDsPrintData.Tables(0).Rows(_intCnt).Item("NETWORK_TYPE").ToString & "', ")
                            .Append("MODEL = '" & pDsPrintData.Tables(0).Rows(_intCnt).Item("MODEL").ToString & "' ")
                            .Append("WHERE APP_ID = " & pDsPrintData.Tables(0).Rows(_intCnt).Item("APP_ID") & " ")
                            .Append("AND LABEL_TYPE = " & pDsPrintData.Tables(0).Rows(_intCnt).Item("LABEL_TYPE") & " ")
                            .Append("AND LINKED_LABEL_TYPE = " & pDsPrintData.Tables(0).Rows(_intCnt).Item("LINKED_LABEL_TYPE") & " ")
                            .Append("AND FRIENDLY_NAME = '" & GetDatabaseString(pOldFriendlyName) & "' ")

                        End With

                        If log.IsInfoEnabled Then log.Info(methodBaseName & " Updating the Printer " & _
                                        "details with the following SQL... " & vbCrLf & _sbSQL.ToString & vbCrLf)
                        m_LocalDB.ExecuteNonQuery(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString), _trans)
                    Catch ex As SqlException
                        _trans.Rollback()
                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                              _sbSQL.ToString & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)
                        Return ATPAR_E_LOCALDBINSERTFAIL
                        Exit Function

                    Finally
                        _sbSQL.Remove(0, _sbSQL.Length)
                    End Try

                Next

                _statusCode = CreateOrUpdateNiceLabel(pDsPrintData, pDeviceTokenEntry)

                If _statusCode <> ATPAR_OK Then
                    _trans.Rollback()
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to Create/Update Nice Label LVX and PNL Files ")
                    Return E_SERVERERROR
                End If

            End If

            If Not _trans Is Nothing Then
                _trans.Commit()
            End If

            Return ATPAR_OK

        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in " & methodBaseName & " is.. " & vbCrLf & ex.ToString)
            Return E_SERVERERROR
        Finally
            _sbSQL = Nothing
            sqlConnection = Nothing
        End Try



    End Function


    Public Function CreateOrUpdateNiceLabel(ByVal pDsPrintData As DataSet, _
                                        ByVal pDeviceTokenEntry() As String) As Long

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemId)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)
        Dim _sbSQL As New StringBuilder
        Dim pDSLabelsData As DataSet
        Try

            Dim _appPath As String
            _appPath = AppDomain.CurrentDomain.BaseDirectory().Chars(0) & _
                                         ":\Atpar\Labels\"

            If pDsPrintData.Tables(0).Rows.Count > 0 Then

                For i As Integer = 0 To pDsPrintData.Tables(0).Rows.Count - 1

                    Dim _Labelfilename As String = String.Empty

                    _Labelfilename = pDsPrintData.Tables(0).Rows(i).Item("LABEL_FILE_NAME")

                    _Labelfilename = _appPath + _Labelfilename

                    With _sbSQL
                        .Append("SELECT APP_ID, LABEL_DATA_PNL, LABEL_DATA_LVX ")
                        .Append(" FROM MT_ATPAR_LABELS_DATA")
                        .Append(" WHERE APP_ID = " & pDsPrintData.Tables(0).Rows(i).Item("APP_ID") & "")
                        .Append(" AND LABEL_FILE_NAME = '" & pDsPrintData.Tables(0).Rows(i).Item("LABEL_FILE_NAME") & "' ")
                    End With

                    If log.IsInfoEnabled Then log.Info(methodBaseName & ": Query to fetch selected printer data " & _
                                                                      _sbSQL.ToString)

                    pDSLabelsData = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_sbSQL.ToString))


                    If pDSLabelsData.Tables(0).Rows.Count > 0 Then

                        Dim _fsPNL As FileStream
                        _fsPNL = New FileStream(_Labelfilename & ".pnl", FileMode.Create, FileAccess.Write)
                        Dim _filePnlData() As Byte = CType((pDSLabelsData.Tables(0).Rows(0).Item("LABEL_DATA_PNL")), Byte())
                        _fsPNL.Write(_filePnlData, 0, _filePnlData.Length)
                        _fsPNL.Close()

                        Dim _fsLVX As FileStream
                        _fsLVX = New FileStream(_Labelfilename & ".lvx", FileMode.Create, FileAccess.Write)
                        Dim info As Byte() = New UTF8Encoding(True).GetBytes(pDSLabelsData.Tables(0).Rows(0).Item("LABEL_DATA_LVX").ToString)
                        _fsLVX.Write(info, 0, info.Length)
                        _fsLVX.Close()
                    End If
                    _sbSQL.Remove(0, _sbSQL.Length)
                Next
            End If
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in " & methodBaseName & " is.. " & vbCrLf & ex.ToString)
            Return E_SERVERERROR

            Exit Function
        End Try
        Return ATPAR_OK
    End Function

    ''' <summary>
    ''' This function can be used to get selected printer data
    ''' </summary>
    ''' <param name="pAppID">App ID</param>
    ''' <param name="pFriendlyName">Printer Friendly Name</param>
    ''' <param name="pFunctionality">Functionality type</param>
    ''' <param name="pDSPrinterData">DS Printer Data</param>
    ''' <param name="pDeviceTokenEntry">Device Token Entry</param>
    ''' <returns>Error/Success Code</returns>
    ''' <remarks></remarks>

    Public Function GetNiceLabelsPrintersData(ByVal pAppID As Integer, _
                                  ByVal pStatus As String, _
                                  ByVal pPrinterType As String, _
                                  ByRef pDSPrinterData As DataSet, _
                                  ByVal pDeviceTokenEntry() As String) As Long _
                                  Implements IAtpar_WebTrans.GetNiceLabelsPrintersData

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)
        log4net.ThreadContext.Properties(LOGPROPERTIES.SYSTEMID.ToString) = pDeviceTokenEntry(TokenEntry_Enum.SystemID)

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Dim _StatusCode As Long = -1

        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemID))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try

        Try

            Dim _strSQL As String = String.Empty
            Dim sqlParms() As SqlParameter


            sqlParms = New SqlParameter(4) {}

            sqlParms(0) = New SqlParameter("@App_ID", SqlDbType.NVarChar)
            sqlParms(0).Value = pAppID

            sqlParms(1) = New SqlParameter("@Status", SqlDbType.NVarChar)
            sqlParms(1).Value = pStatus

            sqlParms(2) = New SqlParameter("@PrinterType", SqlDbType.NVarChar)
            sqlParms(2).Value = pPrinterType


            sqlParms(3) = New SqlParameter("@StatusCode", SqlDbType.Int)
            sqlParms(3).Direction = ParameterDirection.Output

            If log.IsInfoEnabled Then
                log.Info("Calling GetPrinterData with the following syntax..")
                _strSQL = "exec GetNiceLabelsPrintersData " & _
                                         "'" & sqlParms(0).Value & "', " & _
                                         "'" & sqlParms(1).Value & "' ," & _
                                         "'" & sqlParms(2).Value & "', " & _
                                         "'" & sqlParms(3).Value & "' "
                log.Info(_strSQL)
            End If

            Dim _Cmd As SqlCommand

            Try
                _Cmd = New SqlCommand

                _Cmd.Connection = m_LocalDB.CreateConnection
                _Cmd.CommandType = CommandType.StoredProcedure
                _Cmd.CommandText = "GetNiceLabelsPrintersData"
                _Cmd.Parameters.Add(sqlParms(0))
                _Cmd.Parameters.Add(sqlParms(1))
                _Cmd.Parameters.Add(sqlParms(2))
                _Cmd.Parameters.Add(sqlParms(3))

                pDSPrinterData = m_LocalDB.ExecuteDataSet(_Cmd)

                _StatusCode = sqlParms(3).Value
                _Cmd.Parameters.Clear()

                If _StatusCode <> ATPAR_OK Then
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to Get data From middle tier" & _
                                                                          " StatusCode is : " & _StatusCode & _
                                                                           vbCrLf & " Failed to execute the" & _
                                                                           " SQL... " & vbCrLf & _strSQL & vbCrLf)
                    Return E_SERVERERROR
                End If

            Catch sqlex As SqlException
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to get the Linked Functionalities " & vbCrLf & _
                                                                " with the following SQL :" & _strSQL & vbCrLf & _
                                                                " Exception is:" & sqlex.ToString & vbCrLf)

                Return ATPAR_E_LOCALDBSELECTFAIL
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed with ex :" & ex.ToString)
                Return E_SERVERERROR
            Finally
                _Cmd.Dispose()
            End Try
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal("Exception Thrown in " & methodBaseName & " is.. " & vbCrLf & ex.ToString)
            Return E_SERVERERROR
        End Try

        Return ATPAR_OK

    End Function


#End Region

    Public Function BuildReportPrint(ByVal pAppId As String, ByVal pObjectId As String, ByVal pSection As String, ByVal pDsPrint As DataSet, ByVal pDeviceTokenEntry() As String, ByRef pReportString As String) As Long _
                Implements IAtpar_WebTrans.BuildReportPrint

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        log4net.ThreadContext.Properties(LOGPROPERTIES.USERNAME.ToString) = pDeviceTokenEntry(TokenEntry_Enum.UserID)

        Dim _statusCode As Long
        Dim _dsReportHdrStructure As DataSet
        Dim m_CartId As String
        Dim m_cnt As Integer = 0
        Dim m_cntForCompletlyPicked As Integer = 0
        Dim m_cntForUnknownLoc As Integer = 0
        Try
            CreateLocalDB(pDeviceTokenEntry(TokenEntry_Enum.SystemId))
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create LocalDB Object " & ex.ToString & ":")
            Return E_SERVERERROR
        End Try


        Dim _strSQL As String = String.Empty
        Dim _intCnt As Integer
        Try
            _strSQL = "SELECT PLD.APP_ID,PLD.OBJECT_ID,PLD.FIELD_NAME,PLD.TEXT_VALUE,PLD.FIELD_GROUP,PLD.ROW_POSITION,PLD.COLUMN_POSITION " & _
                      " ,PLD.DISPLAY_NAME,PLD.VISIBLE,ALIGNMENT,PLD.HEADERFONT,PLD.VALUEFONT,PLH.FIELD_TYPE,PLH.FIELD_SIZE" & _
                      " FROM MT_ATPAR_PRINT_LABEL_DETAILS PLD,MT_ATPAR_PRINT_FIELD_DEFAULTS PLH WHERE " & _
                      " PLH.APP_ID = PLD.APP_ID And PLH.OBJECT_ID = PLD.OBJECT_ID And PLH.OBJECT_ID = '" & pObjectId & "' " & _
                      " AND PLD.APP_ID ='" & pAppId & "' AND VISIBLE=1 AND PLH.LINE_NO=PLD.LINE_NO " & _
                      " AND SECTION='" & pSection & "' ORDER BY ROW_POSITION,COLUMN_POSITION ASC "

            Try
                If log.IsInfoEnabled Then log.Info(methodBaseName & ":Query to fetch the data:" & _strSQL)
                _dsReportHdrStructure = m_LocalDB.ExecuteDataSet(m_LocalDB.GetSqlStringCommand(_strSQL))
            Catch ex As Exception
                If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                    _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)

                Return ATPAR_E_LOCALDBSELECTFAIL
            End Try
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to execute SQL... " & _
                                                            _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)

            Return ATPAR_E_LOCALDBSELECTFAIL
        End Try

        Dim tbPrint As New DataTable
        For intHdrCnt = 0 To _dsReportHdrStructure.Tables(0).Rows.Count - 1
            Dim ColPrint As New DataColumn(_dsReportHdrStructure.Tables(0).Rows(intHdrCnt).Item("FIELD_NAME"))
            tbPrint.Columns.Add(ColPrint)
        Next

        For intPrintCnt As Integer = 0 To pDsPrint.Tables("ITEMS").Rows.Count - 1
            Dim drRow As DataRow = tbPrint.NewRow
            For intColCnt As Integer = 0 To tbPrint.Columns.Count - 1
                drRow(tbPrint.Columns(intColCnt).ColumnName) = pDsPrint.Tables("ITEMS").Rows(intPrintCnt).Item(tbPrint.Columns(intColCnt).ColumnName)
            Next
            tbPrint.Rows.Add(drRow)
        Next


        Dim sbHtmlString As New StringBuilder
        Dim sbHdrHtmlString As New StringBuilder
        Dim sbTdHtmlString As New StringBuilder
        Dim dblShortageQty As Double = 0
        Dim _strCartId As String = String.Empty
        Dim _strCartDescr As String = String.Empty
        Try
            'Details Table Headres Starts
            sbHtmlString.Append("<table align=left width=100% style=" & Chr(34) & "BORDER-COLLAPSE:collapse" & Chr(34) & " border=1>")
            sbHtmlString.Append("<tr bgcolor=#d3d3d3>")
            For intCnt As Integer = 0 To tbPrint.Columns.Count - 1
                If tbPrint.Columns(intCnt).ColumnName <> "CART_ID" Then
                    If tbPrint.Columns(intCnt).ColumnName <> "CART_DESCR" AndAlso tbPrint.Columns(intCnt).ColumnName <> "TOTAL_QTY" Then
                        sbHtmlString.Append("<td align=center nowrap><span class=c2><b>" & _dsReportHdrStructure.Tables(0).Rows(intCnt).Item("DISPLAY_NAME") & "</b></span></td>")
                    End If
                End If
            Next

            sbHtmlString.Append("</tr>")
            'Details Table Starts
            For i As Integer = 0 To tbPrint.Rows.Count - 1
                For k As Integer = 0 To tbPrint.Columns.Count - 1
                    If tbPrint.Columns(k).ColumnName <> "CART_ID" Then
                        If tbPrint.Columns(k).ColumnName <> "CART_DESCR" AndAlso tbPrint.Columns(k).ColumnName <> "TOTAL_QTY" Then
                            Dim drFieldType() As DataRow
                            drFieldType = _dsReportHdrStructure.Tables(0).Select("FIELD_NAME='" & tbPrint.Columns(k).ColumnName & "'")
                            If (drFieldType(0).Item("FIELD_TYPE") = "BARCODE") Then
                                sbTdHtmlString.Append("<td  align=center valign=middle ><img style='vertical-align:middle' src='ShowBarCode.ashx?val=" & tbPrint.Rows(i).Item("ITEM") & "'</td>")
                            Else
                                If (drFieldType(0).Item("FIELD_TYPE") = "TEXT") Then
                                    sbTdHtmlString.Append("<td align=left width='300px'>")
                                ElseIf (drFieldType(0).Item("FIELD_TYPE") = "INTEGER") Then
                                    sbTdHtmlString.Append("<td align=right nowrap>")
                                End If
                                sbTdHtmlString.Append("<span class=c2>" & tbPrint.Rows(i).Item(tbPrint.Columns(k).ColumnName) & "</span></td>")
                                If tbPrint.Columns(k).ColumnName = "SHORTAGE_QTY" Then
                                    dblShortageQty = CDbl(tbPrint.Rows(i).Item(tbPrint.Columns(k).ColumnName))
                                End If
                            End If
                        End If
                    Else
                        _strCartId = String.Empty
                        _strCartDescr = String.Empty
                        _strCartId = IIf(IsDBNull(tbPrint.Rows(i).Item(tbPrint.Columns(k).ColumnName)), String.Empty, tbPrint.Rows(i).Item(tbPrint.Columns(k).ColumnName))
                        _strCartDescr = IIf(IsDBNull(tbPrint.Rows(i).Item("CART_DESCR")), String.Empty, tbPrint.Rows(i).Item("CART_DESCR"))
                        If dblShortageQty > 0 AndAlso Not String.IsNullOrEmpty(_strCartId) AndAlso m_CartId <> _strCartId Then
                            sbHdrHtmlString.Remove(0, sbHdrHtmlString.Length)
                            If m_cnt = 0 Then
                                m_cnt = m_cnt + 1
                                With sbHdrHtmlString
                                    .Append("<tr>")
                                    .Append("<td colspan=9 align=left nowrap><span class=c8><b>Shortage items:</b></span></td>")
                                    .Append("</tr>")
                                End With
                            End If
                            With sbHdrHtmlString
                                .Append("<tr>")
                                .Append("<td colspan=4 align=left nowrap><span class=c2><b>Supply location:  " & _strCartDescr & "</b></span></td>")
                                .Append("<td colspan=5 align=center valign=middle ><img style='vertical-align:middle' src='ShowBarCode.ashx?val=" & _strCartId & "'</td>")
                                .Append("<td></td>")
                                .Append("</tr>")
                            End With
                        ElseIf dblShortageQty = 0 AndAlso m_cntForCompletlyPicked = 0 Then
                            m_cnt = m_cnt + 1
                            m_cntForCompletlyPicked = 1
                            sbHtmlString.Append("<tr>")
                            sbHtmlString.Append("<td colspan=9 align=left nowrap><span class=c8><b>Completely picked items:</b></span></td>")
                            sbHtmlString.Append("</tr>")
                        ElseIf dblShortageQty > 0 AndAlso String.IsNullOrEmpty(_strCartId) And m_cntForUnknownLoc = 0 Then
                            sbHdrHtmlString.Remove(0, sbHdrHtmlString.Length)
                            m_cnt = m_cnt + 1
                            m_cntForUnknownLoc = m_cntForUnknownLoc + 1
                            With sbHdrHtmlString
                                .Append("<tr>")
                                .Append("<td colspan=9 align=left nowrap><span class=c8><b>Unknown items:</b></span></td>")
                                .Append("</tr>")
                            End With
                        End If
                        m_CartId = _strCartId
                    End If
                Next
                If sbHdrHtmlString.Length > 0 Then
                    sbHtmlString.Append(sbHdrHtmlString.ToString)
                    sbHdrHtmlString.Remove(0, sbHdrHtmlString.Length)
                End If
                sbHtmlString.Append("<tr>")
                sbHtmlString.Append(sbTdHtmlString.ToString)
                sbHtmlString.Append("</tr>")
                sbTdHtmlString.Remove(0, sbTdHtmlString.Length)
            Next
            sbHtmlString.Append("</table>")
            pReportString = sbHtmlString.ToString()
            Return ATPAR_OK
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Building of Details Table Failed... " & _
                                                           _strSQL & vbCrLf & "Exception is : " & ex.ToString & vbCrLf)

            Return E_SERVERERROR
        Finally
            sbHtmlString = Nothing
            sbTdHtmlString = Nothing
            sbHdrHtmlString = Nothing
        End Try
    End Function


#Region "Nice Label Printing"

    Public Const LABEL_PROMPT_SEP As String = "$"
    Public Const LABEL_PROMPT_MULTILINE As String = "MULTILINE" & LABEL_PROMPT_SEP
    Public Const LABEL_PROMPT_BARCODE As String = "BARCODE"
    Public Const LABEL_PROMPT_IGNORE As String = "IGNORE"

    Public Function PrintNiceLabel(ByVal pPrinterAddressOrName As String, ByVal pPrinterPort As String, _
                                          ByVal pPrinterTye As String, ByVal pNiceLabelName As String, _
                                          ByVal pNoOfPrints As String, ByRef pErrMsg As String, _
                                          ByRef pDsPrintDetails As DataSet, ByVal pDeviceTokenEntry() As String) As Long _
                                        Implements IAtpar_WebTrans.PrintNiceLabel

        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)

        Try
            Dim _StatusCode As Long

            If pDsPrintDetails.Tables(0).Rows.Count > 0 Then

                If log.IsDebugEnabled Then
                    Try
                        _StatusCode = PrintDatasetStatistics(pDsPrintDetails, pDeviceTokenEntry)
                    Catch ex As Exception
                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & "Error while calling PrintDatasetStatistics :" & ex.ToString())
                    End Try
                End If

                _strLblFileName = AppDomain.CurrentDomain.BaseDirectory().Chars(0) & _
                                         ":\Atpar\Labels\" & pNiceLabelName & LabelFileNameSuffix

                If log.IsDebugEnabled Then log.Debug(methodBaseName & "Print Label File Name : " & _strLblFileName)

                'Create and initialize Pocket Nice Engine
                Try
                    ' don't try to reinitialize if the engine has already been created
                    If PNE Is Nothing Then
                        PNE = PocketNiceEngine.EngineClassFactory.CreateEngine
                        PNE.Init()
                    End If
                Catch ex As Exception
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & ":Failed to Create NiceLabel engine, are the DLL's in the program directory : " & vbCrLf & ex.ToString)
                    Cleanup()
                    PrintNiceLabel = E_PRINTERROR
                    Exit Function
                End Try

                Try

                    If PNE.IsDemo Then
                        PNE.Registration("VA59334KVAVDYL798LK5LA76Y", "Srinivas Repala", "AtPar Inc")
                    End If
                Catch ex As Exception
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to register NiceLabels, registration code okay?: " & vbCrLf & ex.ToString)
                    Cleanup()
                    PrintNiceLabel = E_PRINTERROR
                    Exit Function
                End Try
                Try
                    pneLabel = PNE.OpenLabel(_strLblFileName)
                Catch ex As Exception
                    If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to open label, are BOTH the label files in the atpar\labels folder?: " & vbCrLf & ex.ToString)
                    Cleanup()
                    PrintNiceLabel = E_PRINTERROR
                    Exit Function
                End Try

                For I As Integer = 0 To pDsPrintDetails.Tables(0).Rows.Count - 1
                    Try
                        ProcessLabelVariables(pDsPrintDetails.Tables(0).Rows(I), pErrMsg)
                    Catch ex As Exception
                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed To Process label variables: " & vbCrLf & ex.ToString & ":")
                        Cleanup()
                        PrintNiceLabel = E_PRINTERROR
                    End Try

                    Try
                        pneOutput = PocketNiceEngine.EngineClassFactory.CreateOutput
                    Catch ex As Exception
                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to create PNE output: " & vbCrLf & ex.ToString)
                        Cleanup()
                        PrintNiceLabel = E_PRINTER_CREATEOUTPUTFAIL
                        Exit Function
                    End Try

                    Try
                        pneOutput.Kind = PocketNiceEngine.OutputKindType.TcpIP
                        pneOutput.SetTcpIp(pPrinterAddressOrName, pPrinterPort)
                        'pneOutput.Kind = PocketNiceEngine.OutputKindType.BlueTooth
                        'pneOutput.SetBlueTooth("9")
                    Catch ex As Exception
                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed with Ex: " & vbCrLf & ex.ToString & ":")
                        Cleanup()
                        PrintNiceLabel = E_PRINTERROR
                    End Try

                    Try

                        pneLabel.Output = pneOutput
                    Catch ex As Exception

                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to set Output : " & vbCrLf & ex.ToString & ":")
                        Cleanup()
                        PrintNiceLabel = E_PRINTER_SETOUTPUTFAIL

                        Exit Function
                    End Try

                    Try
                        pneLabel.Print(pNoOfPrints)
                    Catch ex As Exception
                        If log.IsFatalEnabled Then log.Fatal(methodBaseName & ": Failed to Print: " & vbCrLf & ex.ToString)
                        Cleanup()
                        PrintNiceLabel = E_PRINTERROR
                        Exit Function
                    End Try
                Next



                If Not pneLabel Is Nothing Then
                    PNE.CloseLabel(pneLabel)
                    pneLabel = Nothing
                End If
            End If
        Catch ex As Exception
            If log.IsFatalEnabled Then log.Fatal(methodBaseName & " Failed to Print Nice label... " & _
                                                                  vbCrLf & " : Exception is : " & ex.ToString & vbCrLf)
            Cleanup()
            Return E_SERVERERROR
        End Try
    End Function

    Private Function ProcessLabelVariables(ByVal pData As DataRow, ByRef pErrMsg As String) As Long
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)
        Try
            Dim i As Integer = 0
            Dim _data As String
            Do While i <> pneLabel.LabelVariables.Count

                Dim labelVar As PocketNiceEngine.IPromptVariable = pneLabel.LabelVariables.GetAt(i)

                ' if the variable is not used, ignore the rule check
                If labelVar.IsUsed Then

                    Dim _lblVarPrompt As String = labelVar.Prompt

                    If pData.Table.Columns.Contains(labelVar.Name) Then
                        If Not IsDBNull(pData(labelVar.Name)) Then
                            _data = pData(labelVar.Name).ToString
                        End If
                    Else
                        _data = String.Empty
                    End If

                    If _lblVarPrompt = LABEL_PROMPT_BARCODE Then

                        '
                        ' Note: NO_LABEL_BARCODE_DATA_INDICATOR is used at this time because nicelabel doesn't support
                        ' removing(or not printing) a barcode variable if there's no data for it.
                        'if there's no data available for this barcode set the data to NO_LABEL_BARCODE_DATA_INDICATOR
                        If _data.Length = 0 Then _data = NO_LABEL_BARCODE_DATA_INDICATOR
                        If _data.Length > labelVar.Length Then
                            If log.IsDebugEnabled Then log.Debug("PrintNiceLabel:ProcessLabelVariables :" & "Barcode " & labelVar.Name & " Data length: " & _data.Length & " too large")
                            pErrMsg = "Incorrect data length for field: " & labelVar.Name & " and value: " & _data
                            ProcessLabelVariables = E_LABEL_DATA_LENGTH_ERROR
                            Exit Function
                        End If

                        If labelVar.DataFormat.IsDataOk(_data) Then
                            labelVar.Value = _data
                        Else
                            If log.IsDebugEnabled Then log.Debug("PrintNiceLabel:ProcessLabelVariables :" & "Incorrect Data Format: " & labelVar.Name & vbCrLf & "value :" & _data)
                            'TO DO : Need to get the error message from DB
                            pErrMsg = "Incorrect label data for field: " & labelVar.Name & " and value: " & _data
                            ProcessLabelVariables = E_LABEL_DATA_FORMAT_ERROR
                            Exit Function
                        End If
                    ElseIf _lblVarPrompt = LABEL_PROMPT_IGNORE Then
                        ' IGNORE prompts are used for all but the first LabelVariables of multiline sets
                        ' their values are populated within the case LABEL_PROMPT_MULTILINE block
                        i = i + 1
                        Continue Do

                    ElseIf _lblVarPrompt.StartsWith(LABEL_PROMPT_MULTILINE) Then
                        'parse prompt and get max number of lines
                        Dim _maxMultLines As Integer = Integer.Parse(_lblVarPrompt.Substring(LABEL_PROMPT_MULTILINE.Length))

                        ' get the data name based on the label variable name (i.e. remove _1)
                        Dim _labelName As String = labelVar.Name.Substring(0, labelVar.Name.IndexOf(LABEL_PROMPT_SEP))
                        _data = pData(_labelName).ToString

                        Static Dim _prevLoc As Integer

                        For _linenum As Integer = 1 To _maxMultLines
                            '  size the data according to a label variable's length

                            Dim _multLabelVar As PocketNiceEngine.IPromptVariable = pneLabel.LabelVariables.Item(_labelName & LABEL_PROMPT_SEP & _linenum)

                            ' a rudimentary word wrap.. cut data to size, disregarding word completions
                            Dim _cutdata As String
                            If _data.Length > _prevLoc + _multLabelVar.Length Then
                                _cutdata = _data.Substring(_prevLoc, _multLabelVar.Length)
                                _prevLoc = _prevLoc + _multLabelVar.Length
                                _multLabelVar.Value = _cutdata
                            Else
                                _cutdata = _data.Substring(_prevLoc)
                                _multLabelVar.Value = _cutdata
                                Exit For
                            End If

                        Next
                        _prevLoc = 0
                        i = i + 1
                        Continue Do
                    Else ' all other labelvars should have data truncated to labelvar.length
                        ' Dim _data As String = pData(labelVar.Name)
                        If _data.Length > labelVar.Length Then _data = _data.Substring(0, labelVar.Length)

                        ' TODO: this is probably not required for string data
                        If labelVar.DataFormat.IsDataOk(_data) Then
                            labelVar.Value = _data
                        Else
                            If log.IsDebugEnabled Then log.Debug("PrintNiceLabel:ProcessLabelVariables :" & "Incorrect Data Format: " & labelVar.Name & vbCrLf & "value :" & _data)
                            pErrMsg = "Incorrect label data for field: " & labelVar.Name & " and value: " & _data
                            ProcessLabelVariables = E_LABEL_DATA_FORMAT_ERROR
                            Exit Function
                        End If

                    End If

                End If

                i = i + 1
            Loop

            ProcessLabelVariables = ATPAR_OK
        Catch fex As System.FormatException
            If log.IsDebugEnabled Then log.Debug("PrintNiceLabel:ProcessLabelVariables :" & "Multiline Variable prompt is not well formed" & fex.ToString)
            ProcessLabelVariables = E_MULTI_LINE_ERROR
        Catch ex As Exception
            If log.IsDebugEnabled Then log.Debug("PrintNiceLabel:ProcessLabelVariables :" & "Error Processing Variables" & ex.ToString)
            ProcessLabelVariables = E_PRINTERROR
        End Try

    End Function

    Private Sub Cleanup()
        Dim stackFrame As New StackFrame()
        Dim methodBase As MethodBase = stackFrame.GetMethod()
        Dim methodBaseName As String = methodBase.Name
        If log.IsDebugEnabled Then log.Debug(methodBaseName)
        If Not pneLabel Is Nothing Then
            PNE.CloseLabel(pneLabel)
            pneLabel = Nothing
        End If
        If Not pneOutput Is Nothing Then
            pneOutput = Nothing
        End If


    End Sub
#End Region


End Class
#End Region
