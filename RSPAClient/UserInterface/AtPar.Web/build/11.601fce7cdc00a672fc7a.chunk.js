webpackJsonp([11],{

/***/ 1603:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var AtParEnums_1 = __webpack_require__(14);
var ActivityReportComponent = (function () {
    function ActivityReportComponent() {
        this.recvProductId = AtParEnums_1.EnumApps.Receiving;
    }
    return ActivityReportComponent;
}());
ActivityReportComponent = __decorate([
    core_1.Component({
        template: __webpack_require__(2096)
    })
], ActivityReportComponent);
exports.ActivityReportComponent = ActivityReportComponent;


/***/ }),

/***/ 1604:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var http_1 = __webpack_require__(38);
var MT_ATPAR_SECURITY_AUDIT_1 = __webpack_require__(325);
var HttpService_1 = __webpack_require__(12);
var api_1 = __webpack_require__(72);
var AtParEnums_1 = __webpack_require__(14);
var AtParStatusCodes_1 = __webpack_require__(50);
var AtParEnums_2 = __webpack_require__(14);
var AtParEnums_3 = __webpack_require__(14);
var event_spinner_service_1 = __webpack_require__(24);
var atpar_common_service_1 = __webpack_require__(43);
var AtParConstants_1 = __webpack_require__(31);
var AllocateInventoryBusinessUnitsComponent = (function () {
    function AllocateInventoryBusinessUnitsComponent(httpService, _http, spinnerService, atParConstant, commonService) {
        this.httpService = httpService;
        this._http = _http;
        this.spinnerService = spinnerService;
        this.atParConstant = atParConstant;
        this.commonService = commonService;
        this.deviceTokenEntry = [];
        this.lstUsers = [];
        this.lstOrgGroups = [];
        this.lstBUnits = [];
        this.lstFilteredBUnits = [];
        this.growlMessage = [];
        this.blnShowOrgGroupLabel = false;
        this.blnShowOrgGroupDD = false;
        this.orgGrpId = "";
        this.orgGrpIDData = "";
        this.selectedOrgGroupId = "";
        this.selectedDropDownUserId = "";
        this.selectedBunit = "";
        this.selectedDescription = "";
        this.blnStatusMsg = false;
        this.statusMsg = "";
        this.dataCheckedSorting = [];
        this.isAuditRequired = "";
        this.strAudit = "";
        this.blnsortbycolumn = true;
        this.preField = "";
        this.custom = "custom";
        this.showGrid = false;
    }
    AllocateInventoryBusinessUnitsComponent.prototype.ngOnInit = function () {
        try {
            this.deviceTokenEntry = JSON.parse(localStorage.getItem("DeviceTokenEntry"));
            this.startIndex = +sessionStorage.getItem("Recordsstartindex");
            this.EndIndex = +sessionStorage.getItem("RecordsEndindex");
            this.lstCheckedBUnits = new Array();
            this.dataCheckedSorting = new Array();
            this.dataUncheckedSorting = new Array();
            this.recordsPerPageSize = +this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.RecordsPerPage];
            // checking is Audit enabled for this page
            this.checkAuditAllowed();
            this.bindOrgGroups();
        }
        catch (ex) {
            this.clientErrorMsg(ex, "ngOnInit");
        }
    };
    AllocateInventoryBusinessUnitsComponent.prototype.bindModelDataChange = function (event) { };
    AllocateInventoryBusinessUnitsComponent.prototype.bindUsersList = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        if (this.blnShowOrgGroupLabel == true) {
                            this.orgGroupIDForDBUpdate = this.orgGrpId;
                        }
                        else {
                            this.orgGroupIDForDBUpdate = this.selectedOrgGroupId;
                        }
                        this.lstUsers = [];
                        this.lstUsers.push({ label: "Select User", value: "Select User" });
                        this.spinnerService.start();
                        return [4 /*yield*/, this.commonService.getUsersList(this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.UserID], 4, this.orgGroupIDForDBUpdate).
                                catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.growlMessage = [];
                                switch (data.StatType) {
                                    case AtParEnums_3.StatusType.Success: {
                                        for (var i = 0; i < data.DataList.length; i++) {
                                            _this.lstUsers.push({
                                                label: data.DataList[i].FULLNAME,
                                                value: data.DataList[i].USER_ID
                                            });
                                        }
                                        _this.spinnerService.stop();
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Warn: {
                                        _this.spinnerService.stop();
                                        _this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Error: {
                                        _this.spinnerService.stop();
                                        _this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Custom: {
                                        _this.spinnerService.stop();
                                        _this.growlMessage.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        break;
                                    }
                                }
                            })];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        ex_1 = _a.sent();
                        this.clientErrorMsg(ex_1, "bindUsersList");
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    AllocateInventoryBusinessUnitsComponent.prototype.checkAuditAllowed = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var ex_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.commonService.getAuditAllowed(4, "mt_recv_inv_bunit_alloc.aspx").
                                catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.growlMessage = [];
                                switch (data.StatType) {
                                    case AtParEnums_3.StatusType.Success: {
                                        _this.isAuditRequired = data.Data;
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Warn: {
                                        _this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Error: {
                                        _this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Custom: {
                                        _this.growlMessage.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        break;
                                    }
                                }
                            })];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        ex_2 = _a.sent();
                        this.clientErrorMsg(ex_2, "checkAuditAllowed");
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    AllocateInventoryBusinessUnitsComponent.prototype.populateBusinessUnits = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var isOrgBUnitsExist, ex_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        isOrgBUnitsExist = false;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        if (this.blnShowOrgGroupLabel == true) {
                            this.orgGroupIDForDBUpdate = this.orgGrpId;
                        }
                        else {
                            this.orgGroupIDForDBUpdate = this.selectedOrgGroupId;
                        }
                        this.spinnerService.start();
                        return [4 /*yield*/, this.commonService.getOrgBusinessUnits(this.orgGroupIDForDBUpdate, AtParEnums_2.BusinessType.Inventory).
                                catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.growlMessage = [];
                                switch (data.StatType) {
                                    case AtParEnums_3.StatusType.Success: {
                                        _this.lstFilteredBUnits = data.DataList;
                                        _this.spinnerService.stop();
                                        isOrgBUnitsExist = true;
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Warn: {
                                        _this.spinnerService.stop();
                                        _this.showGrid = false;
                                        _this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        isOrgBUnitsExist = false;
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Error: {
                                        _this.spinnerService.stop();
                                        _this.showGrid = false;
                                        _this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        isOrgBUnitsExist = false;
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Custom: {
                                        _this.spinnerService.stop();
                                        _this.showGrid = false;
                                        _this.growlMessage.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        isOrgBUnitsExist = false;
                                        break;
                                    }
                                }
                            })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, Promise.resolve(isOrgBUnitsExist)];
                    case 3:
                        ex_3 = _a.sent();
                        this.clientErrorMsg(ex_3, "populateBusinessUnits");
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    AllocateInventoryBusinessUnitsComponent.prototype.bindOrgGroups = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var ex_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.spinnerService.start();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.commonService.getUserOrgGroups(this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.UserID], this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.OrgGrpID]).
                                catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.growlMessage = [];
                                switch (data.StatType) {
                                    case AtParEnums_3.StatusType.Success: {
                                        _this.spinnerService.stop();
                                        _this.orgGroupData = data.DataList;
                                        _this.blnStatusMsg = false;
                                        if (_this.orgGroupData.length == 1) {
                                            _this.blnShowOrgGroupLabel = true;
                                            _this.orgGrpIDData = _this.orgGroupData[0].ORG_GROUP_ID + " - " + _this.orgGroupData[0].ORG_GROUP_NAME;
                                            _this.orgGrpId = _this.orgGroupData[0].ORG_GROUP_ID;
                                            _this.populateBusinessUnits();
                                            _this.bindUsersList();
                                            break;
                                        }
                                        else if (_this.orgGroupData.length > 1) {
                                            _this.blnShowOrgGroupDD = true;
                                            _this.lstUsers = [];
                                            _this.lstUsers.push({ label: "Select User", value: "Select User" });
                                            _this.lstOrgGroups.push({ label: "Select One", value: "Select One" });
                                            for (var i = 0; i < _this.orgGroupData.length; i++) {
                                                if (_this.orgGroupData[i].ORG_GROUP_ID !== "All") {
                                                    _this.lstOrgGroups.push({ label: _this.orgGroupData[i].ORG_GROUP_ID + " - " + _this.orgGroupData[i].ORG_GROUP_NAME, value: _this.orgGroupData[i].ORG_GROUP_ID });
                                                }
                                            }
                                            break;
                                        }
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Warn: {
                                        _this.spinnerService.stop();
                                        _this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Error: {
                                        _this.spinnerService.stop();
                                        _this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Custom: {
                                        _this.spinnerService.stop();
                                        _this.growlMessage.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        break;
                                    }
                                }
                            })];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        ex_4 = _a.sent();
                        this.clientErrorMsg(ex_4, "bindOrgGroups");
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    AllocateInventoryBusinessUnitsComponent.prototype.myfilterdata = function (event) {
        this.lstgridfilterData = new Array();
        this.lstgridfilterData = event;
    };
    AllocateInventoryBusinessUnitsComponent.prototype.checkAll = function () {
        try {
            this.lstCheckedBUnits = [];
            if (this.lstgridfilterData != null && this.lstgridfilterData != undefined) {
                this.startIndex = +sessionStorage.getItem("Recordsstartindex");
                this.EndIndex = +sessionStorage.getItem("RecordsEndindex");
                if (this.EndIndex > this.lstgridfilterData.length) {
                    this.EndIndex = this.lstgridfilterData.length;
                }
                for (var i = this.startIndex; i <= this.EndIndex - 1; i++) {
                    this.lstgridfilterData[i].checkvalue = true;
                    this.lstgridfilterData[i].CHK_VALUE = 1;
                    this.lstCheckedBUnits.push(this.lstgridfilterData[i]);
                }
            }
            else {
                this.startIndex = +sessionStorage.getItem("Recordsstartindex");
                this.EndIndex = +sessionStorage.getItem("RecordsEndindex");
                if (this.EndIndex > this.lstDBData.length) {
                    this.EndIndex = this.lstDBData.length;
                }
                for (var i = this.startIndex; i <= this.EndIndex - 1; i++) {
                    this.lstDBData[i].checkvalue = true;
                    this.lstDBData[i].CHK_VALUE = 1;
                    this.lstCheckedBUnits.push(this.lstDBData[i]);
                }
            }
        }
        catch (ex) {
            this.clientErrorMsg(ex, "checkAll");
        }
    };
    AllocateInventoryBusinessUnitsComponent.prototype.unCheckAll = function () {
        try {
            this.lstCheckedBUnits = [];
            if (this.lstgridfilterData != null && this.lstgridfilterData != undefined) {
                this.startIndex = +sessionStorage.getItem("Recordsstartindex");
                this.EndIndex = +sessionStorage.getItem("RecordsEndindex");
                if (this.EndIndex > this.lstgridfilterData.length) {
                    this.EndIndex = this.lstgridfilterData.length;
                }
                for (var i = this.EndIndex - 1; i >= this.startIndex; i--) {
                    this.lstgridfilterData[i].checkvalue = false;
                    this.lstgridfilterData[i].CHK_VALUE = 0;
                    this.lstCheckedBUnits.push(this.lstgridfilterData[i]);
                }
            }
            else {
                this.startIndex = +sessionStorage.getItem("Recordsstartindex");
                this.EndIndex = +sessionStorage.getItem("RecordsEndindex");
                if (this.EndIndex > this.lstDBData.length) {
                    this.EndIndex = this.lstDBData.length;
                }
                for (var i = this.EndIndex - 1; i >= this.startIndex; i--) {
                    this.lstDBData[i].checkvalue = false;
                    this.lstDBData[i].CHK_VALUE = 0;
                    this.lstCheckedBUnits.push(this.lstDBData[i]);
                }
            }
        }
        catch (ex) {
            this.clientErrorMsg(ex, "unCheckAll");
        }
    };
    AllocateInventoryBusinessUnitsComponent.prototype.selectedRow = function (values, event) {
        try {
            if (event == true) {
                values.CHK_VALUE = 1;
            }
            else {
                values.CHK_VALUE = 0;
            }
            for (var i = 0; i < this.lstCheckedBUnits.length; i++) {
                if (this.lstCheckedBUnits[i].BUSINESS_UNIT === values.BUSINESS_UNIT) {
                    var index = this.lstCheckedBUnits.indexOf(this.lstCheckedBUnits[i], 0);
                    this.lstCheckedBUnits.splice(index, 1);
                }
            }
            this.lstCheckedBUnits.push(values);
        }
        catch (ex) {
            this.clientErrorMsg(ex, "selectedRow");
        }
    };
    AllocateInventoryBusinessUnitsComponent.prototype.fillBUnitsAuto = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var query, ex_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.lstFilteredBUnits = [];
                        query = event.query;
                        if (this.blnShowOrgGroupLabel == true) {
                            this.orgGroupIDForDBUpdate = this.orgGrpId;
                        }
                        else {
                            this.orgGroupIDForDBUpdate = this.selectedOrgGroupId;
                        }
                        if ((this.orgGroupIDForDBUpdate == null || this.orgGroupIDForDBUpdate == undefined || this.orgGroupIDForDBUpdate == "") && this.blnShowOrgGroupDD) {
                            this.growlMessage = [];
                            this.spinnerService.stop();
                            this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please Select OrgGroupID" });
                            return [2 /*return*/];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.commonService.getOrgBusinessUnits(this.orgGroupIDForDBUpdate, AtParEnums_2.BusinessType.Inventory).
                                catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.growlMessage = [];
                                switch (data.StatType) {
                                    case AtParEnums_3.StatusType.Success: {
                                        _this.lstBUnits = data.DataList;
                                        _this.lstFilteredBUnits = _this.filterBusinessUnits(query, _this.lstBUnits);
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Warn: {
                                        if (data.StatusCode != AtParStatusCodes_1.AtparStatusCodes.ATPAR_E_ASSIGN_ORGBUS) {
                                            _this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        }
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Error: {
                                        _this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Custom: {
                                        _this.growlMessage.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        break;
                                    }
                                }
                            })];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        ex_5 = _a.sent();
                        this.clientErrorMsg(ex_5, "fillBUnitsAuto");
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    AllocateInventoryBusinessUnitsComponent.prototype.filterBusinessUnits = function (query, businessunits) {
        try {
            var filtered = [];
            if (query == "%") {
                for (var i = 0; i < businessunits.length; i++) {
                    var Bunitvalue = businessunits[i];
                    filtered.push(Bunitvalue);
                }
            }
            else {
                if (query.length >= 0) {
                    for (var i = 0; i < businessunits.length; i++) {
                        var Bunitvalue = businessunits[i];
                        if (Bunitvalue.toLowerCase().indexOf(query.toLowerCase()) == 0) {
                            filtered.push(Bunitvalue);
                        }
                    }
                }
            }
            return filtered;
        }
        catch (ex) {
            this.clientErrorMsg(ex, "filterBusinessUnits");
        }
    };
    AllocateInventoryBusinessUnitsComponent.prototype.ddlOrgGrpIdChanged = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ex_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.showGrid = false;
                        if (this.selectedOrgGroupId == "Select One") {
                            this.orgGroupIDForDBUpdate = "";
                            this.lstUsers = [];
                            this.lstUsers.push({ label: "Select User", value: "Select User" });
                            return [2 /*return*/];
                        }
                        this.selectedBunit = "";
                        this.selectedDropDownUserId = "";
                        this.selectedDescription = "";
                        this.lstDBData = new Array();
                        this.spinnerService.start();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, this.bindUsersList()];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.populateBusinessUnits()];
                    case 3:
                        _a.sent();
                        this.spinnerService.stop();
                        return [3 /*break*/, 5];
                    case 4:
                        ex_6 = _a.sent();
                        this.clientErrorMsg(ex_6, "ddlOrgGrpIdChanged");
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    AllocateInventoryBusinessUnitsComponent.prototype.ddlUserChanged = function () {
        this.showGrid = false;
    };
    AllocateInventoryBusinessUnitsComponent.prototype.BindDataGrid = function () {
        try {
            this.dataCheckedSorting = [];
            this.dataUncheckedSorting = [];
            for (var i = 0; i <= this.lstDBData.length - 1; i++) {
                if (this.lstDBData[i].CHK_ALLOCATED == 1) {
                    this.dataCheckedSorting.push(this.lstDBData[i]);
                }
                else {
                    this.dataUncheckedSorting.push(this.lstDBData[i]);
                }
            }
        }
        catch (ex) {
            this.clientErrorMsg(ex, "BindDataGrid");
        }
    };
    //customSort1(event) {
    //    try {
    //        var element = event;
    //        this.lstDBData = [];
    //        this.blnsortbycolumn = !this.blnsortbycolumn;
    //        this.sortedcheckedrec = [];
    //        this.sorteduncheckedrec = [];
    //        this.sortedcheckedrec = this.dataCheckedSorting.sort(function (a, b) {
    //            if (a[element.field] < b[element.field])
    //                return -1;
    //            if (a[element.field] > b[element.field])
    //                return 1;
    //            return 0;
    //        });
    //        this.sorteduncheckedrec = this.dataUncheckedSorting.sort(function (a, b) {
    //            if (a[element.field] < b[element.field])
    //                return -1;
    //            if (a[element.field] > b[element.field])
    //                return 1;
    //            return 0;
    //        });
    //        if (this.blnsortbycolumn == false) {
    //            this.lstDBData = [];
    //            this.lstDBData = this.sortedcheckedrec.reverse().concat(this.sorteduncheckedrec.reverse());
    //        }
    //        else {
    //            this.lstDBData = [];
    //            this.lstDBData = this.sortedcheckedrec.concat(this.sorteduncheckedrec);
    //        }
    //        this.sortedcheckedrec = [];
    //        this.sorteduncheckedrec = [];
    //    }
    //    catch (ex) {
    //        this.clientErrorMsg(ex, "customSort");
    //    }
    //}
    AllocateInventoryBusinessUnitsComponent.prototype.customSort = function (event, field) {
        var element = event;
        if (this.preField == element.field) {
            if (element.order == 1) {
                element.order = -1;
            }
            else {
                element.order = 1;
            }
            // element.order = !element.order;
        }
        else {
            element.order = 1;
        }
        this.preField = element.field;
        this.sortedcheckedrec = [];
        this.sorteduncheckedrec = [];
        var result = null;
        var order;
        try {
            this.sortedcheckedrec = this.dataCheckedSorting.sort(function (a, b) {
                if (a[element.field] == null && b[element.field] != null)
                    result = -1;
                else if (a[element.field] != null && b[element.field] == null)
                    result = 1;
                else if (a[element.field] == null && b[element.field] == null)
                    result = 0;
                else if (typeof a[element.field] === 'string' && typeof b[element.field] === 'string')
                    result = a[element.field].localeCompare(b[element.field]);
                else
                    result = (a[element.field] < b[element.field]) ? -1 : (a[element.field] > b[element.field]) ? 1 : 0;
                return (element.order * result);
            });
            this.sorteduncheckedrec = this.dataUncheckedSorting.sort(function (a, b) {
                if (a[element.field] == null && b[element.field] != null)
                    result = -1;
                else if (a[element.field] != null && b[element.field] == null)
                    result = 1;
                else if (a[element.field] == null && b[element.field] == null)
                    result = 0;
                else if (typeof a[element.field] === 'string' && typeof b[element.field] === 'string')
                    result = a[element.field].localeCompare(b[element.field]);
                else
                    result = (a[element.field] < b[element.field]) ? -1 : (a[element.field] > b[element.field]) ? 1 : 0;
                return (element.order * result);
            });
        }
        catch (ex) {
            this.clientErrorMsg(ex, "customSort");
        }
        this.lstDBData = [];
        this.lstDBData = this.sortedcheckedrec.concat(this.sorteduncheckedrec);
        this.sortedcheckedrec = [];
        this.sorteduncheckedrec = [];
    };
    AllocateInventoryBusinessUnitsComponent.prototype.getAllBUnits = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var isBUnitsExists, ex_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.showGrid = false;
                        this.lstgridfilterData = null;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        if ((this.orgGroupIDForDBUpdate == null || this.orgGroupIDForDBUpdate == undefined || this.orgGroupIDForDBUpdate == "" || this.orgGroupIDForDBUpdate == "Select One") && this.blnShowOrgGroupDD) {
                            this.growlMessage = [];
                            this.spinnerService.stop();
                            this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please Select Org Group ID" });
                            return [2 /*return*/];
                        }
                        if (this.selectedDropDownUserId === "Select User" || this.selectedDropDownUserId === "undefined" || this.selectedDropDownUserId == "") {
                            this.growlMessage = [];
                            this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: 'Please select valid User Id' });
                            this.showGrid = false;
                            return [2 /*return*/, false];
                        }
                        if (this.blnShowOrgGroupLabel == true) {
                            this.orgGroupIDForDBUpdate = this.orgGrpId;
                        }
                        else {
                            this.orgGroupIDForDBUpdate = this.selectedOrgGroupId;
                        }
                        this.lstDBData = new Array();
                        return [4 /*yield*/, this.populateBusinessUnits()];
                    case 2:
                        isBUnitsExists = _a.sent();
                        if (isBUnitsExists == true) {
                            this.spinnerService.start();
                            this.httpService.get({
                                "apiMethod": "/api/RcvAllocBU/GetBUnits",
                                params: {
                                    "bArray": this.lstFilteredBUnits,
                                    "appId": "4",
                                    "userID": this.selectedDropDownUserId,
                                    "bUnit": this.selectedBunit,
                                    "description": this.selectedDescription,
                                    "serverUserID": this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.UserID],
                                }
                            }).catch(this.httpService.handleError).map(function (res) { return res.json(); })
                                .subscribe(function (response) {
                                switch (response.StatType) {
                                    case AtParEnums_3.StatusType.Success: {
                                        _this.lstDBData = [];
                                        _this.lstDBData = response.DataList;
                                        for (var i = 0; i <= response.DataList.length - 1; i++) {
                                            if (response.DataList[i].CHK_ALLOCATED == 1) {
                                                response.DataList[i].checkvalue = true;
                                            }
                                            else {
                                                response.DataList[i].checkvalue = false;
                                            }
                                        }
                                        _this.lstDBData = response.DataList;
                                        _this.BindDataGrid();
                                        _this.showGrid = true;
                                        _this.spinnerService.stop();
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Warn: {
                                        _this.spinnerService.stop();
                                        _this.showGrid = false;
                                        _this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: response.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Error: {
                                        _this.spinnerService.stop();
                                        _this.showGrid = false;
                                        _this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: response.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Custom: {
                                        _this.spinnerService.stop();
                                        _this.showGrid = false;
                                        _this.growlMessage.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: response.StatusMessage });
                                        break;
                                    }
                                }
                            });
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        ex_7 = _a.sent();
                        this.clientErrorMsg(ex_7, "getAllBUnits");
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    AllocateInventoryBusinessUnitsComponent.prototype.insertAuditData = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var auditSecurity, auditSecurityLst, intCnount, strScreenName, ex_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.growlMessage = [];
                        auditSecurity = void 0;
                        auditSecurityLst = void 0;
                        auditSecurityLst = new Array();
                        for (intCnount = 0; intCnount <= this.lstFilteredBUnits.length - 1; intCnount++) {
                            if (this.lstFilteredBUnits[intCnount].CHK_VALUE.toString() == "true") {
                                auditSecurity = new MT_ATPAR_SECURITY_AUDIT_1.MT_ATPAR_SECURITY_AUDIT();
                                auditSecurity.FIELD_NAME = "CHK_VALUE";
                                auditSecurity.OLD_VALUE = "0";
                                auditSecurity.NEW_VALUE = "1";
                                auditSecurity.KEY_1 = this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.UserID];
                                auditSecurity.KEY_2 = "4";
                                auditSecurity.KEY_3 = this.lstFilteredBUnits[intCnount].BUSINESS_UNIT;
                                auditSecurity.KEY_4 = "";
                                auditSecurity.KEY_5 = "";
                                auditSecurityLst.push(auditSecurity);
                            }
                        }
                        strScreenName = "mt_recv_inv_bunit_alloc.aspx";
                        return [4 /*yield*/, this.commonService.insertAuditData(auditSecurityLst, this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.UserID], strScreenName).
                                catch(this.httpService.handleError).then(function (res) {
                                var response = res.json();
                                switch (response.StatType) {
                                    case AtParEnums_3.StatusType.Success: {
                                        _this.growlMessage.push({ severity: 'success', summary: AtParConstants_1.AtParConstants.GrowlTitle_Success, detail: 'Updated Successfully' });
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Warn: {
                                        _this.spinnerService.stop();
                                        _this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: response.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Error: {
                                        _this.spinnerService.stop();
                                        _this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: response.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Custom: {
                                        _this.spinnerService.stop();
                                        _this.growlMessage.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: response.StatusMessage });
                                        break;
                                    }
                                }
                            })];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        ex_8 = _a.sent();
                        this.clientErrorMsg(ex_8, "insertAuditData");
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    AllocateInventoryBusinessUnitsComponent.prototype.allocateBUnits = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                this.growlMessage = [];
                try {
                    if (this.selectedDropDownUserId === "Select User" || this.selectedDropDownUserId === "undefined" || this.selectedDropDownUserId == "") {
                        this.growlMessage = [];
                        this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: 'Please select valid User Id' });
                        return [2 /*return*/];
                    }
                    this.spinnerService.start();
                    this.httpService.create({
                        "apiMethod": "/api/RcvAllocBU/AllocateBUnits",
                        formData: this.lstDBData,
                        params: {
                            "appId": "4",
                            "userID": this.selectedDropDownUserId,
                            "serverUserID": this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.UserID],
                            "bArray": this.lstFilteredBUnits,
                            "searched": true,
                            "bUnit": this.selectedBunit,
                            "description": this.selectedDescription,
                        }
                    }).catch(this.httpService.handleError).map(function (res) { return res.json(); }).subscribe(function (response) {
                        _this.growlMessage = [];
                        switch (response.StatType) {
                            case AtParEnums_3.StatusType.Success: {
                                if (_this.isAuditRequired == "Y") {
                                    _this.insertAuditData();
                                    _this.spinnerService.stop();
                                }
                                else {
                                    _this.spinnerService.stop();
                                }
                                _this.growlMessage.push({ severity: 'success', summary: AtParConstants_1.AtParConstants.GrowlTitle_Success, detail: 'Updated Successfully' });
                                _this.selectedDropDownUserId = "";
                                _this.selectedDescription = "";
                                _this.selectedBunit = "";
                                _this.showGrid = false;
                                _this.spinnerService.stop();
                                _this.lstDBData = [];
                                break;
                            }
                            case AtParEnums_3.StatusType.Warn: {
                                _this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: response.StatusMessage });
                                _this.spinnerService.stop();
                                break;
                            }
                            case AtParEnums_3.StatusType.Error: {
                                _this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: response.StatusMessage });
                                _this.spinnerService.stop();
                                _this.showGrid = false;
                                break;
                            }
                            case AtParEnums_3.StatusType.Custom: {
                                _this.growlMessage.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: response.StatusMessage });
                                _this.spinnerService.stop();
                                break;
                            }
                        }
                    });
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "allocateBUnits");
                }
                return [2 /*return*/];
            });
        });
    };
    AllocateInventoryBusinessUnitsComponent.prototype.clientErrorMsg = function (strExMsg, funName) {
        this.growlMessage = [];
        this.atParConstant.catchClientError(this.growlMessage, this.spinnerService, strExMsg.toString(), funName, this.constructor.name);
    };
    AllocateInventoryBusinessUnitsComponent.prototype.ngOnDestroy = function () {
        this.deviceTokenEntry = null;
        this.lstOrgGroups = null;
        this.lstUsers = null;
        this.lstOrgGroups = null;
        this.lstBUnits = null;
        this.lstFilteredBUnits = null;
        this.lstCheckedBUnits = null;
        this.lstDBData = null;
        this.growlMessage = null;
        this.sortedcheckedrec = [];
        this.sorteduncheckedrec = [];
    };
    return AllocateInventoryBusinessUnitsComponent;
}());
AllocateInventoryBusinessUnitsComponent = __decorate([
    core_1.Component({
        template: __webpack_require__(2097),
        providers: [HttpService_1.HttpService, api_1.ConfirmationService, atpar_common_service_1.AtParCommonService, AtParConstants_1.AtParConstants],
    }),
    __metadata("design:paramtypes", [HttpService_1.HttpService, http_1.Http,
        event_spinner_service_1.SpinnerService,
        AtParConstants_1.AtParConstants,
        atpar_common_service_1.AtParCommonService])
], AllocateInventoryBusinessUnitsComponent);
exports.AllocateInventoryBusinessUnitsComponent = AllocateInventoryBusinessUnitsComponent;


/***/ }),

/***/ 1605:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var http_1 = __webpack_require__(38);
var HttpService_1 = __webpack_require__(12);
var api_1 = __webpack_require__(72);
var AtParEnums_1 = __webpack_require__(14);
var AtParEnums_2 = __webpack_require__(14);
var AtParEnums_3 = __webpack_require__(14);
var event_spinner_service_1 = __webpack_require__(24);
var atpar_common_service_1 = __webpack_require__(43);
var AtParConstants_1 = __webpack_require__(31);
var AllocateShipToIdsComponent = (function () {
    function AllocateShipToIdsComponent(httpService, _http, spinnerService, atParConstant, commonService) {
        this.httpService = httpService;
        this._http = _http;
        this.spinnerService = spinnerService;
        this.atParConstant = atParConstant;
        this.commonService = commonService;
        this.deviceTokenEntry = [];
        this.lstUsers = [];
        this.lstOrgGroups = [];
        this.lstBUnits = [];
        this.lstFilteredBUnits = [];
        this.growlMessage = [];
        this.blnShowOrgGroupLabel = false;
        this.blnShowOrgGroupDD = false;
        this.orgGrpId = "";
        this.hdnorgGrpId = "";
        this.selectedOrgGroupId = "";
        this.selectedDropDownUserId = "";
        this.selectedBunit = "";
        this.selectedDescription = "";
        this.blnStatusMsg = false;
        this.statusMsg = "";
        this.dataCheckedSorting = [];
        this.blnsortbycolumn = true;
        this.custom = "custom";
        this.showGrid = false;
        this.seletedStatus = "true";
        this.setId = "";
        this.shipToId = "";
    }
    AllocateShipToIdsComponent.prototype.ngOnInit = function () {
        try {
            this.deviceTokenEntry = JSON.parse(localStorage.getItem("DeviceTokenEntry"));
            this.startIndex = +sessionStorage.getItem("Recordsstartindex");
            this.EndIndex = +sessionStorage.getItem("RecordsEndindex");
            this.lstCheckedBUnits = new Array();
            this.dataCheckedSorting = new Array();
            this.dataUncheckedSorting = new Array();
            this.recordsPerPageSize = +this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.RecordsPerPage];
            this.displayOptions = [];
            this.displayOptions.push({ label: 'ALL', value: 'A' });
            this.displayOptions.push({ label: 'Allocated', value: 'L' });
            this.displayOptions.push({ label: 'Unallocated', value: 'U' });
            this.bindOrgGroups();
        }
        catch (ex) {
            this.clientErrorMsg(ex, "ngOnInit");
        }
    };
    AllocateShipToIdsComponent.prototype.bindUsersList = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        if (this.blnShowOrgGroupLabel == true) {
                            this.orgGroupIDForDBUpdate = this.hdnorgGrpId;
                        }
                        else {
                            this.orgGroupIDForDBUpdate = this.selectedOrgGroupId;
                        }
                        this.lstUsers = [];
                        this.lstUsers.push({ label: "Select User", value: "Select User" });
                        this.spinnerService.start();
                        return [4 /*yield*/, this.commonService.getUsersList(this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.UserID], 4, this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.OrgGrpID]).
                                catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.growlMessage = [];
                                switch (data.StatType) {
                                    case AtParEnums_3.StatusType.Success: {
                                        for (var i = 0; i < data.DataList.length; i++) {
                                            _this.lstUsers.push({
                                                label: data.DataList[i].FULLNAME,
                                                value: data.DataList[i].USER_ID
                                            });
                                        }
                                        _this.spinnerService.stop();
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Warn: {
                                        _this.spinnerService.stop();
                                        _this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Error: {
                                        _this.spinnerService.stop();
                                        _this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Custom: {
                                        _this.spinnerService.stop();
                                        _this.growlMessage.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        break;
                                    }
                                }
                            })];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        ex_1 = _a.sent();
                        this.clientErrorMsg(ex_1, "bindUsersList");
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    AllocateShipToIdsComponent.prototype.bindOrgGroups = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var ex_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.spinnerService.start();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.commonService.getUserOrgGroups(this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.UserID], this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.OrgGrpID]).
                                catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.growlMessage = [];
                                switch (data.StatType) {
                                    case AtParEnums_3.StatusType.Success: {
                                        _this.spinnerService.stop();
                                        _this.orgGroupData = data.DataList;
                                        _this.blnStatusMsg = false;
                                        if (_this.orgGroupData.length == 1) {
                                            _this.blnShowOrgGroupLabel = true;
                                            _this.orgGrpId = _this.orgGroupData[0].ORG_GROUP_ID + ' - ' + _this.orgGroupData[0].ORG_GROUP_NAME;
                                            _this.hdnorgGrpId = _this.orgGroupData[0].ORG_GROUP_ID;
                                            _this.bindUsersList();
                                            break;
                                        }
                                        else if (_this.orgGroupData.length > 1) {
                                            _this.blnShowOrgGroupDD = true;
                                            _this.lstUsers = [];
                                            _this.lstUsers.push({ label: "Select User", value: "Select User" });
                                            _this.lstOrgGroups.push({ label: "Select One", value: "Select One" });
                                            for (var i = 0; i < _this.orgGroupData.length; i++) {
                                                if (_this.orgGroupData[i].ORG_GROUP_ID !== "All") {
                                                    _this.lstOrgGroups.push({ label: _this.orgGroupData[i].ORG_GROUP_ID + " - " + _this.orgGroupData[i].ORG_GROUP_NAME, value: _this.orgGroupData[i].ORG_GROUP_ID });
                                                }
                                            }
                                            break;
                                        }
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Warn: {
                                        _this.spinnerService.stop();
                                        _this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Error: {
                                        _this.spinnerService.stop();
                                        _this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Custom: {
                                        _this.spinnerService.stop();
                                        _this.growlMessage.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        break;
                                    }
                                }
                            })];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        ex_2 = _a.sent();
                        this.clientErrorMsg(ex_2, "bindOrgGroups");
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    AllocateShipToIdsComponent.prototype.myfilterdata = function (event) {
        this.lstgridfilterData = new Array();
        this.lstgridfilterData = event;
    };
    AllocateShipToIdsComponent.prototype.checkAll = function () {
        try {
            this.lstCheckedBUnits = [];
            if (this.lstgridfilterData != null && this.lstgridfilterData != undefined) {
                this.startIndex = +sessionStorage.getItem("Recordsstartindex");
                this.EndIndex = +sessionStorage.getItem("RecordsEndindex");
                if (this.EndIndex > this.lstgridfilterData.length) {
                    this.EndIndex = this.lstgridfilterData.length;
                }
                for (var i = this.startIndex; i <= this.EndIndex - 1; i++) {
                    this.lstgridfilterData[i].checkvalue = true;
                    this.lstgridfilterData[i].CHK_VALUE = 1;
                    this.lstgridfilterData[i].CHK_ALLOCATED = 0;
                    this.lstCheckedBUnits.push(this.lstgridfilterData[i]);
                }
            }
            else {
                this.startIndex = +sessionStorage.getItem("Recordsstartindex");
                this.EndIndex = +sessionStorage.getItem("RecordsEndindex");
                if (this.EndIndex > this.lstDBData.length) {
                    this.EndIndex = this.lstDBData.length;
                }
                for (var i = this.startIndex; i <= this.EndIndex - 1; i++) {
                    this.lstDBData[i].checkvalue = true;
                    this.lstDBData[i].CHK_VALUE = 1;
                    this.lstDBData[i].CHK_ALLOCATED = 0;
                    this.lstCheckedBUnits.push(this.lstDBData[i]);
                }
            }
        }
        catch (ex) {
            this.clientErrorMsg(ex, "checkAll");
        }
    };
    AllocateShipToIdsComponent.prototype.unCheckAll = function () {
        try {
            this.lstCheckedBUnits = [];
            if (this.lstgridfilterData != null && this.lstgridfilterData != undefined) {
                this.startIndex = +sessionStorage.getItem("Recordsstartindex");
                this.EndIndex = +sessionStorage.getItem("RecordsEndindex");
                if (this.EndIndex > this.lstgridfilterData.length) {
                    this.EndIndex = this.lstgridfilterData.length;
                }
                for (var i = this.EndIndex - 1; i >= this.startIndex; i--) {
                    this.lstgridfilterData[i].checkvalue = false;
                    this.lstgridfilterData[i].CHK_VALUE = 0;
                    this.lstgridfilterData[i].CHK_ALLOCATED = 1;
                    this.lstCheckedBUnits.push(this.lstgridfilterData[i]);
                }
            }
            else {
                this.startIndex = +sessionStorage.getItem("Recordsstartindex");
                this.EndIndex = +sessionStorage.getItem("RecordsEndindex");
                if (this.EndIndex > this.lstDBData.length) {
                    this.EndIndex = this.lstDBData.length;
                }
                for (var i = this.EndIndex - 1; i >= this.startIndex; i--) {
                    this.lstDBData[i].checkvalue = false;
                    this.lstDBData[i].CHK_VALUE = 0;
                    this.lstDBData[i].CHK_ALLOCATED = 1;
                    this.lstCheckedBUnits.push(this.lstDBData[i]);
                }
            }
        }
        catch (ex) {
            this.clientErrorMsg(ex, "unCheckAll");
        }
    };
    AllocateShipToIdsComponent.prototype.selectedRow = function (values, event) {
        try {
            if (event == true) {
                values.CHK_VALUE = 1;
                values.checkvalue = false;
            }
            else {
                values.CHK_ALLOCATED = 1;
                values.CHK_VALUE = 0;
                values.checkvalue = true;
            }
            for (var i = 0; i < this.lstCheckedBUnits.length; i++) {
                if (this.lstCheckedBUnits[i].SETID === values.SETID) {
                    var index = this.lstCheckedBUnits.indexOf(this.lstCheckedBUnits[i], 0);
                    this.lstCheckedBUnits.splice(index, 1);
                }
            }
            this.lstCheckedBUnits.push(values);
        }
        catch (ex) {
            this.clientErrorMsg(ex, "selectedRow");
        }
    };
    AllocateShipToIdsComponent.prototype.ddlOrgGrpIdChanged = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ex_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.showGrid = false;
                        if (this.selectedOrgGroupId == "Select One") {
                            this.lstUsers = [];
                            this.lstUsers.push({ label: "Select User", value: "Select User" });
                            return [2 /*return*/];
                        }
                        this.lstDBData = new Array();
                        this.spinnerService.start();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.bindUsersList()];
                    case 2:
                        _a.sent();
                        this.spinnerService.stop();
                        return [3 /*break*/, 4];
                    case 3:
                        ex_3 = _a.sent();
                        this.clientErrorMsg(ex_3, "ddlOrgGrpIdChanged");
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    AllocateShipToIdsComponent.prototype.ddl_Change = function () {
        // this.showGrid = false;
    };
    AllocateShipToIdsComponent.prototype.BindDataGrid = function () {
        try {
            this.dataCheckedSorting = [];
            this.dataUncheckedSorting = [];
            for (var i = 0; i <= this.lstDBData.length - 1; i++) {
                if (this.lstDBData[i].CHK_ALLOCATED == 1) {
                    this.dataCheckedSorting.push(this.lstDBData[i]);
                }
                else {
                    this.dataUncheckedSorting.push(this.lstDBData[i]);
                }
            }
            if (this.seletedStatus === "L") {
                this.lstDBData = this.lstDBData.filter(function (x) { return x.checkvalue == true; });
                if (this.lstDBData.length == 0) {
                    this.showGrid = false;
                    this.growlMessage = [];
                    this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Nd Data Found" });
                }
            }
            else if (this.seletedStatus === "U") {
                this.lstDBData = this.lstDBData.filter(function (x) { return x.checkvalue == false; });
                if (this.lstDBData.length == 0) {
                    this.showGrid = false;
                    this.growlMessage = [];
                    this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Nd Data Found" });
                }
            }
            else {
                return;
            }
        }
        catch (ex) {
            this.clientErrorMsg(ex, "BindDataGrid");
        }
    };
    AllocateShipToIdsComponent.prototype.customSort = function (event) {
        try {
            var element = event;
            this.lstDBData = [];
            this.blnsortbycolumn = !this.blnsortbycolumn;
            this.sortedcheckedrec = [];
            this.sorteduncheckedrec = [];
            this.sortedcheckedrec = this.dataCheckedSorting.sort(function (a, b) {
                if (a[element.field] < b[element.field])
                    return -1;
                if (a[element.field] > b[element.field])
                    return 1;
                return 0;
            });
            this.sorteduncheckedrec = this.dataUncheckedSorting.sort(function (a, b) {
                if (a[element.field] < b[element.field])
                    return -1;
                if (a[element.field] > b[element.field])
                    return 1;
                return 0;
            });
            if (this.blnsortbycolumn == false) {
                this.lstDBData = [];
                this.lstDBData = this.sortedcheckedrec.reverse().concat(this.sorteduncheckedrec.reverse());
                if (this.seletedStatus === "L") {
                    this.lstDBData = this.lstDBData.filter(function (x) { return x.checkvalue == true; });
                    if (this.lstDBData.length == 0) {
                        this.showGrid = false;
                        this.growlMessage = [];
                        this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Nd Data Found" });
                    }
                }
                else if (this.seletedStatus === "U") {
                    this.lstDBData = this.lstDBData.filter(function (x) { return x.checkvalue == false; });
                    if (this.lstDBData.length == 0) {
                        this.showGrid = false;
                        this.growlMessage = [];
                        this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Nd Data Found" });
                    }
                }
            }
            else {
                this.lstDBData = [];
                this.lstDBData = this.sortedcheckedrec.concat(this.sorteduncheckedrec);
                if (this.seletedStatus === "L") {
                    this.lstDBData = this.lstDBData.filter(function (x) { return x.checkvalue == true; });
                    if (this.lstDBData.length == 0) {
                        this.showGrid = false;
                        this.growlMessage = [];
                        this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Nd Data Found" });
                    }
                }
                else if (this.seletedStatus === "U") {
                    this.lstDBData = this.lstDBData.filter(function (x) { return x.checkvalue == false; });
                    if (this.lstDBData.length == 0) {
                        this.showGrid = false;
                        this.growlMessage = [];
                        this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Nd Data Found" });
                    }
                }
            }
            this.sortedcheckedrec = [];
            this.sorteduncheckedrec = [];
        }
        catch (ex) {
            this.clientErrorMsg(ex, "customSort");
        }
    };
    AllocateShipToIdsComponent.prototype.getAllShipToIds = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.growlMessage = [];
                        this.lstgridfilterData = null;
                        this.showGrid = false;
                        return [4 /*yield*/, this.getOrgBunits()];
                    case 1:
                        _a.sent();
                        try {
                            if ((this.orgGroupIDForDBUpdate == null || this.orgGroupIDForDBUpdate == undefined || this.orgGroupIDForDBUpdate == "" || this.orgGroupIDForDBUpdate == "Select One") && this.blnShowOrgGroupDD) {
                                this.growlMessage = [];
                                this.spinnerService.stop();
                                this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please Select Org Group ID" });
                                return [2 /*return*/];
                            }
                            if (this.selectedDropDownUserId === "Select User" || this.selectedDropDownUserId === "undefined" || this.selectedDropDownUserId == "") {
                                this.growlMessage = [];
                                this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: 'Please select valid User Id' });
                                this.showGrid = false;
                                return [2 /*return*/, false];
                            }
                            if (this.blnShowOrgGroupLabel == true) {
                                this.orgGroupIDForDBUpdate = this.hdnorgGrpId;
                            }
                            else {
                                this.orgGroupIDForDBUpdate = this.selectedOrgGroupId;
                            }
                            if (this.lstBUnits.length == 0) {
                                this.growlMessage = [];
                                this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: 'No Assigned Org Business Units' });
                                this.showGrid = false;
                                return [2 /*return*/, false];
                            }
                            this.lstDBData = new Array();
                            this.spinnerService.start();
                            this.httpService.get({
                                "apiMethod": "/api/ShipToIDs/GetShipToIDs",
                                params: {
                                    "bArray": this.lstBUnits,
                                    "userID": this.selectedDropDownUserId,
                                    "setID": this.setId,
                                    "shipToID": this.shipToId,
                                    "shipToName": this.selectedDescription,
                                    "serverUserID": this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.UserID],
                                    "status": this.seletedStatus
                                }
                            }).catch(this.httpService.handleError).map(function (res) { return res.json(); })
                                .subscribe(function (response) {
                                switch (response.StatType) {
                                    case AtParEnums_3.StatusType.Success: {
                                        _this.lstDBData = [];
                                        _this.lstDBData = response.DataList;
                                        for (var i = 0; i <= response.DataList.length - 1; i++) {
                                            if (response.DataList[i].CHK_ALLOCATED == 1) {
                                                response.DataList[i].checkvalue = true;
                                            }
                                            else {
                                                response.DataList[i].checkvalue = false;
                                            }
                                        }
                                        _this.lstDBData = response.DataList;
                                        _this.BindDataGrid();
                                        if (_this.lstDBData.length != 0)
                                            _this.showGrid = true;
                                        _this.spinnerService.stop();
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Warn: {
                                        _this.spinnerService.stop();
                                        _this.showGrid = false;
                                        _this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: response.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Error: {
                                        _this.spinnerService.stop();
                                        _this.showGrid = false;
                                        _this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: response.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Custom: {
                                        _this.spinnerService.stop();
                                        _this.showGrid = false;
                                        _this.growlMessage.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: response.StatusMessage });
                                        break;
                                    }
                                }
                            });
                        }
                        catch (ex) {
                            this.clientErrorMsg(ex, "getAllShipToIds");
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    AllocateShipToIdsComponent.prototype.allocateShipToIds = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                this.growlMessage = [];
                this.spinnerService.start();
                try {
                    //for (let i = 0; i <= this.lstDBData.length - 1; i++) {
                    //    if (this.lstDBData[i].checkvalue) {
                    //        this.lstDBData[i].CHK_ALLOCATED = 1;
                    //    }
                    //    else {
                    //        this.lstDBData[i].CHK_ALLOCATED = 0;
                    //    }
                    //}
                    this.httpService.create({
                        "apiMethod": "/api/ShipToIDs/AllocateShipTOIDs",
                        formData: this.lstDBData,
                        params: {
                            "userID": this.selectedDropDownUserId,
                            "serverUserID": this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.UserID],
                            "searched": true
                        }
                    }).catch(this.httpService.handleError).map(function (res) { return res.json(); }).subscribe(function (response) {
                        _this.growlMessage = [];
                        switch (response.StatType) {
                            case AtParEnums_3.StatusType.Success: {
                                _this.spinnerService.stop();
                                if (response.DataVariable > 0) {
                                    _this.showGrid = false;
                                    _this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: 'One of the Ship To ID unallocated is assigned as Default Ship To ID for the user. Please Unselect Default Ship To ID before Unallocating it.' });
                                    _this.spinnerService.stop();
                                    break;
                                }
                                //if (this.blnShowOrgGroupDD) {
                                //    this.lstUsers = [];
                                //    this.lstUsers.push({ label: "Select User", value: "Select User" })
                                //}
                                _this.growlMessage.push({ severity: 'success', summary: AtParConstants_1.AtParConstants.GrowlTitle_Success, detail: 'Updated Successfully' });
                                _this.selectedDropDownUserId = "";
                                //this.selectedOrgGroupId = "";
                                _this.selectedDescription = "";
                                _this.selectedBunit = "";
                                _this.showGrid = false;
                                _this.spinnerService.stop();
                                _this.lstDBData = [];
                                break;
                            }
                            case AtParEnums_3.StatusType.Warn: {
                                _this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: response.StatusMessage });
                                _this.spinnerService.stop();
                                break;
                            }
                            case AtParEnums_3.StatusType.Error: {
                                _this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: response.StatusMessage });
                                _this.spinnerService.stop();
                                _this.showGrid = false;
                                break;
                            }
                            case AtParEnums_3.StatusType.Custom: {
                                _this.growlMessage.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: response.StatusMessage });
                                _this.spinnerService.stop();
                                break;
                            }
                        }
                    });
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "allocateShipToIds");
                }
                return [2 /*return*/];
            });
        });
    };
    AllocateShipToIdsComponent.prototype.getOrgBunits = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var ex_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.commonService.getOrgGroupBUnits(this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.UserID], this.orgGroupIDForDBUpdate, AtParEnums_2.BusinessType[AtParEnums_2.BusinessType.Purchasing].toString()).
                                catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.spinnerService.stop();
                                _this.lstBUnits = [];
                                switch (data.StatType) {
                                    case AtParEnums_3.StatusType.Success: {
                                        if (data.DataList.length > 0) {
                                            for (var i = 0; i < data.DataList.length; i++) {
                                                _this.lstBUnits.push(data.DataList[i].toString());
                                            }
                                        }
                                        else {
                                            break;
                                        }
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Warn: {
                                        _this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Error: {
                                        _this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_3.StatusType.Custom: {
                                        _this.growlMessage.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        break;
                                    }
                                }
                            })];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        ex_4 = _a.sent();
                        this.clientErrorMsg(ex_4, "getOrgBunits");
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    AllocateShipToIdsComponent.prototype.clientErrorMsg = function (strExMsg, funName) {
        this.growlMessage = [];
        this.atParConstant.catchClientError(this.growlMessage, this.spinnerService, strExMsg.toString(), funName, this.constructor.name);
    };
    AllocateShipToIdsComponent.prototype.ngOnDestroy = function () {
        this.deviceTokenEntry = null;
        this.lstOrgGroups = null;
        this.lstUsers = null;
        this.lstOrgGroups = null;
        this.lstBUnits = null;
        this.lstFilteredBUnits = null;
        this.lstCheckedBUnits = null;
        this.lstDBData = null;
        this.growlMessage = null;
        this.sortedcheckedrec = [];
        this.sorteduncheckedrec = [];
    };
    return AllocateShipToIdsComponent;
}());
AllocateShipToIdsComponent = __decorate([
    core_1.Component({
        template: __webpack_require__(2098),
        providers: [HttpService_1.HttpService, api_1.ConfirmationService, atpar_common_service_1.AtParCommonService, AtParConstants_1.AtParConstants]
    }),
    __metadata("design:paramtypes", [HttpService_1.HttpService, http_1.Http,
        event_spinner_service_1.SpinnerService,
        AtParConstants_1.AtParConstants,
        atpar_common_service_1.AtParCommonService])
], AllocateShipToIdsComponent);
exports.AllocateShipToIdsComponent = AllocateShipToIdsComponent;


/***/ }),

/***/ 1606:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var AsnDiscrepancyReportComponent = (function () {
    function AsnDiscrepancyReportComponent() {
    }
    return AsnDiscrepancyReportComponent;
}());
AsnDiscrepancyReportComponent = __decorate([
    core_1.Component({
        template: __webpack_require__(2099)
    })
], AsnDiscrepancyReportComponent);
exports.AsnDiscrepancyReportComponent = AsnDiscrepancyReportComponent;


/***/ }),

/***/ 1607:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var AtParEnums_1 = __webpack_require__(14);
var CarrierInformationComponent = (function () {
    function CarrierInformationComponent() {
        this.recvAppId = AtParEnums_1.EnumApps.Receiving;
    }
    return CarrierInformationComponent;
}());
CarrierInformationComponent = __decorate([
    core_1.Component({
        template: __webpack_require__(2100)
    })
], CarrierInformationComponent);
exports.CarrierInformationComponent = CarrierInformationComponent;


/***/ }),

/***/ 1608:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var DailyActivityComponent = (function () {
    function DailyActivityComponent() {
    }
    return DailyActivityComponent;
}());
DailyActivityComponent = __decorate([
    core_1.Component({
        template: __webpack_require__(2102)
    })
], DailyActivityComponent);
exports.DailyActivityComponent = DailyActivityComponent;


/***/ }),

/***/ 1609:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var DailyUserActivityComponent = (function () {
    function DailyUserActivityComponent() {
    }
    return DailyUserActivityComponent;
}());
DailyUserActivityComponent = __decorate([
    core_1.Component({
        template: __webpack_require__(2103)
    })
], DailyUserActivityComponent);
exports.DailyUserActivityComponent = DailyUserActivityComponent;


/***/ }),

/***/ 1610:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var DeviationReportComponent = (function () {
    function DeviationReportComponent() {
    }
    return DeviationReportComponent;
}());
DeviationReportComponent = __decorate([
    core_1.Component({
        template: __webpack_require__(2104)
    })
], DeviationReportComponent);
exports.DeviationReportComponent = DeviationReportComponent;


/***/ }),

/***/ 1611:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var LotSerialTrackingReportComponent = (function () {
    function LotSerialTrackingReportComponent() {
    }
    return LotSerialTrackingReportComponent;
}());
LotSerialTrackingReportComponent = __decorate([
    core_1.Component({
        template: __webpack_require__(2105)
    })
], LotSerialTrackingReportComponent);
exports.LotSerialTrackingReportComponent = LotSerialTrackingReportComponent;


/***/ }),

/***/ 1612:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var recv_manage_carriers_service_1 = __webpack_require__(1842);
var datatableservice_1 = __webpack_require__(131);
var MT_RECV_MANAGE_CARRIERS_1 = __webpack_require__(1738);
var HttpService_1 = __webpack_require__(12);
var AtParStatusCodes_1 = __webpack_require__(50);
var AtParWebApiResponse_1 = __webpack_require__(1370);
var event_spinner_service_1 = __webpack_require__(24);
var atpar_common_service_1 = __webpack_require__(43);
var AtParConstants_1 = __webpack_require__(31);
var AtParEnums_1 = __webpack_require__(14);
var datatable_1 = __webpack_require__(71);
var routepath_1 = __webpack_require__(70);
var ManageCarriersComponent = (function () {
    function ManageCarriersComponent(dataservice, mngCarriersService, httpService, spinnerService, commonService, atParConstant) {
        this.dataservice = dataservice;
        this.mngCarriersService = mngCarriersService;
        this.httpService = httpService;
        this.spinnerService = spinnerService;
        this.commonService = commonService;
        this.atParConstant = atParConstant;
        this.form = false;
        this.table = true;
        this.deviceTokenEntry = [];
        this.ddlStatusType = [];
        this.growlMessage = [];
        this.loading = true;
        this.lstManageCarriers = [];
        this.showAddButton = true;
        this.breadCrumbMenu = new routepath_1.Menus();
        this.deviceTokenEntry = JSON.parse(localStorage.getItem("DeviceTokenEntry"));
    }
    ManageCarriersComponent.prototype.addCarrier = function () {
        try {
            this.breadCrumbMenu.SUB_MENU_NAME = 'Add Carrier';
            this.spinnerService.emitChangeBreadCrumbEvt(JSON.stringify(this.breadCrumbMenu));
            this.txtSearchStringStatus = undefined;
            this.txtStartpositionStatus = undefined;
            this.txtCarrierStatus = undefined;
            this.growlMessage = [];
            this.table = false;
            this.form = true;
            this.loading = true;
            this.showAddButton = false;
            this.mode = AtParEnums_1.ModeEnum[AtParEnums_1.ModeEnum.Add].toString();
            this.disableSearchString = false;
            this.manageCarriers = new MT_RECV_MANAGE_CARRIERS_1.MT_RECV_MANAGE_CARRIERS();
        }
        catch (exMsg) {
            this.clientErrorMsg(exMsg, "addCarrier");
        }
    };
    ManageCarriersComponent.prototype.editCarrier = function (carriers) {
        try {
            this.breadCrumbMenu.SUB_MENU_NAME = 'Edit Carrier';
            this.spinnerService.emitChangeBreadCrumbEvt(JSON.stringify(this.breadCrumbMenu));
            this.txtStartpositionStatus = 0;
            this.txtCarrierStatus = 0;
            this.growlMessage = [];
            this.showAddButton = false;
            this.table = false;
            this.form = true;
            this.loading = false;
            this.manageCarriers = new MT_RECV_MANAGE_CARRIERS_1.MT_RECV_MANAGE_CARRIERS();
            this.mode = AtParEnums_1.ModeEnum[AtParEnums_1.ModeEnum.Edit].toString();
            this.disableSearchString = true;
            this.manageCarriers.SEARCH_STRING = carriers.SEARCH_STRING;
            this.manageCarriers.START_POSITION = carriers.START_POSITION;
            this.manageCarriers.CARRIER = carriers.CARRIER;
        }
        catch (exMsg) {
            this.clientErrorMsg(exMsg, "editCarrier");
        }
    };
    ManageCarriersComponent.prototype.close = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    this.breadCrumbMenu.SUB_MENU_NAME = '';
                    this.spinnerService.emitChangeBreadCrumbEvt(JSON.stringify(this.breadCrumbMenu));
                    this.form = false;
                    this.growlMessage = [];
                    this.showAddButton = true;
                    this.txtCarrierSearch = "";
                }
                catch (exMsg) {
                    this.clientErrorMsg(exMsg, "close");
                }
                return [2 /*return*/];
            });
        });
    };
    ManageCarriersComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    this.table = false;
                    this.ddlStatusType.push({ label: 'All', value: null });
                    this.ddlStatusType.push({ label: 'Active', value: true });
                    this.ddlStatusType.push({ label: 'Inactive', value: false });
                    this.pageSize = +this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.RecordsPerPage];
                }
                catch (exMsg) {
                    this.clientErrorMsg(exMsg, "ngOnInit");
                }
                return [2 /*return*/];
            });
        });
    };
    ManageCarriersComponent.prototype.bindGrid = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var exMsg_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.table == true) {
                            this.dataTableComponent.reset();
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        this.spinnerService.start();
                        if (this.txtCarrierSearch == null || this.txtCarrierSearch == undefined || this.txtCarrierSearch === "") {
                            this.txtCarrierSearch = "";
                        }
                        return [4 /*yield*/, this.mngCarriersService.getCarriersData(this.txtCarrierSearch)
                                .catch(this.httpService.handleError)
                                .then(function (resp) {
                                var webresp = resp.json();
                                _this.spinnerService.stop();
                                switch (webresp.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        _this.growlMessage = [];
                                        _this.table = true;
                                        _this.lstManageCarriers = webresp.DataList;
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.growlMessage = [];
                                        _this.growlMessage.push({ severity: "warn", summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: webresp.StatusMessage });
                                        _this.table = false;
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Custom: {
                                        _this.growlMessage = [];
                                        _this.growlMessage.push({ severity: "info", summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: webresp.StatusMessage });
                                        _this.table = false;
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.growlMessage = [];
                                        _this.growlMessage.push({ severity: "error", summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: webresp.StatusMessage });
                                        _this.table = false;
                                        break;
                                    }
                                }
                            })];
                    case 2:
                        _a.sent();
                        this.spinnerService.stop();
                        return [3 /*break*/, 4];
                    case 3:
                        exMsg_1 = _a.sent();
                        this.clientErrorMsg(exMsg_1, "bindGrid");
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ManageCarriersComponent.prototype.bindModelDataChange = function (event) {
        try {
            if ("SEARCHSTRNG" == event.TextBoxID.toString()) {
                this.txtSearchStringStatus = event.validationrules.filter(function (x) { return x.status == false; }).length;
            }
            if ("STARTPOS" == event.TextBoxID.toString()) {
                this.txtStartpositionStatus = event.validationrules.filter(function (x) { return x.status == false; }).length;
            }
            if ("CARRIER" == event.TextBoxID.toString()) {
                this.txtCarrierStatus = event.validationrules.filter(function (x) { return x.status == false; }).length;
            }
            //validations satisfies r not 
            if (this.mode == AtParEnums_1.ModeEnum[AtParEnums_1.ModeEnum.Add].toString()) {
                if (this.txtSearchStringStatus == 0 && this.txtStartpositionStatus == 0 && this.txtCarrierStatus == 0) {
                    this.loading = false;
                }
                else {
                    this.loading = true;
                }
            }
            if (this.mode == AtParEnums_1.ModeEnum[AtParEnums_1.ModeEnum.Edit].toString()) {
                if (this.txtStartpositionStatus == 0 && this.txtCarrierStatus == 0) {
                    this.loading = false;
                }
                else {
                    this.loading = true;
                }
            }
        }
        catch (exMsg) {
            this.clientErrorMsg(exMsg, "bindModelDataChange");
        }
    };
    ManageCarriersComponent.prototype.saveOrUpdateCarriers = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var exMsg_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.growlMessage = [];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        this.spinnerService.start();
                        this.changeCarrierStatus = 1;
                        return [4 /*yield*/, this.mngCarriersService.updateCarriers(this.mode, this.manageCarriers.SEARCH_STRING, this.manageCarriers.START_POSITION, this.manageCarriers.CARRIER, this.changeCarrierStatus)
                                .subscribe(function (resp) {
                                var webresp = resp.json();
                                _this.spinnerService.stop();
                                switch (webresp.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        _this.growlMessage = [];
                                        if (_this.mode == AtParEnums_1.ModeEnum[AtParEnums_1.ModeEnum.Add]) {
                                            var statusMessage = AtParConstants_1.AtParConstants.Created_Msg.replace("1%", "Carrier").replace("2%", _this.manageCarriers.CARRIER);
                                            _this.growlMessage.push({
                                                severity: 'success', summary: AtParConstants_1.AtParConstants.GrowlTitle_Success, detail: statusMessage
                                            });
                                            _this.manageCarriers = new MT_RECV_MANAGE_CARRIERS_1.MT_RECV_MANAGE_CARRIERS();
                                            document.getElementById('SEARCHSTRNG').focus();
                                            _this.loading = true;
                                            _this.txtSearchStringStatus = 1;
                                            _this.txtStartpositionStatus = 1;
                                            _this.txtCarrierStatus = 1;
                                        }
                                        if (_this.mode == AtParEnums_1.ModeEnum[AtParEnums_1.ModeEnum.Edit]) {
                                            var statusMessage = AtParConstants_1.AtParConstants.Updated_Msg.replace("1%", "Carrier").replace("2%", _this.manageCarriers.CARRIER);
                                            _this.growlMessage.push({
                                                severity: 'success', summary: AtParConstants_1.AtParConstants.GrowlTitle_Success, detail: statusMessage
                                            });
                                            document.getElementById('STARTPOS').focus();
                                        }
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.growlMessage = [];
                                        if (webresp.StatusCode == AtParStatusCodes_1.AtparStatusCodes.S_DATAEXISTS_INTABLE) {
                                            _this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: "Search String already exists" });
                                        }
                                        else {
                                            _this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: webresp.StatusMessage });
                                        }
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.growlMessage = [];
                                        if (webresp.StatusCode == AtParStatusCodes_1.AtparStatusCodes.S_DATAEXISTS_INTABLE) {
                                            _this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Search String already exists" });
                                        }
                                        else {
                                            _this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: webresp.StatusMessage });
                                        }
                                        break;
                                    }
                                }
                                _this.spinnerService.stop();
                            })];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        exMsg_2 = _a.sent();
                        this.clientErrorMsg(exMsg_2, "saveOrUpdateCarriers");
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ManageCarriersComponent.prototype.changeStatus = function (carriers) {
        var _this = this;
        if (carriers.STATUS == true) {
            this.changeCarrierStatus = 0;
        }
        else {
            this.changeCarrierStatus = 1;
        }
        this.growlMessage = [];
        this.spinnerService.start();
        this.lblSearchString = carriers.SEARCH_STRING;
        this.txtEditStartPosition = carriers.START_POSITION;
        this.txtEditCarrier = carriers.CARRIER;
        try {
            this.mode = "Status";
            var webresp = new AtParWebApiResponse_1.AtParWebApiResponse();
            this.mngCarriersService.updateCarriers(this.mode, this.lblSearchString, this.txtEditStartPosition, this.txtEditCarrier, this.changeCarrierStatus)
                .subscribe(function (resp) { return __awaiter(_this, void 0, void 0, function () {
                var webresp, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            webresp = resp.json();
                            this.spinnerService.stop();
                            _a = webresp.StatType;
                            switch (_a) {
                                case AtParEnums_1.StatusType.Success: return [3 /*break*/, 1];
                                case AtParEnums_1.StatusType.Error: return [3 /*break*/, 3];
                                case AtParEnums_1.StatusType.Warn: return [3 /*break*/, 4];
                            }
                            return [3 /*break*/, 5];
                        case 1: return [4 /*yield*/, this.bindGrid()];
                        case 2:
                            _b.sent();
                            this.growlMessage.push({ severity: 'success', summary: AtParConstants_1.AtParConstants.GrowlTitle_Success, detail: "Carrier " + carriers.CARRIER + " Updated Successfully" });
                            return [3 /*break*/, 5];
                        case 3:
                            {
                                this.growlMessage = [];
                                this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: webresp.StatusMessage });
                                return [3 /*break*/, 5];
                            }
                            _b.label = 4;
                        case 4:
                            {
                                this.growlMessage = [];
                                this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: webresp.StatusMessage });
                                return [3 /*break*/, 5];
                            }
                            _b.label = 5;
                        case 5:
                            this.spinnerService.stop();
                            return [2 /*return*/];
                    }
                });
            }); });
        }
        catch (exMsg) {
            this.clientErrorMsg(exMsg, "changeStatus");
        }
    };
    ManageCarriersComponent.prototype.clientErrorMsg = function (strExMsg, funName) {
        this.growlMessage = [];
        this.atParConstant.catchClientError(this.growlMessage, this.spinnerService, strExMsg.toString(), funName, this.constructor.name);
    };
    ManageCarriersComponent.prototype.ngOnDestroy = function () {
        this.deviceTokenEntry = [];
        this.ddlStatusType = [];
        this.growlMessage = [];
        this.txtSearchStringStatus = 1;
        this.txtStartpositionStatus = 1;
        this.txtCarrierStatus = 1;
        this.changeCarrierStatus = 1;
        this.lblSearchString = '';
        this.txtEditStartPosition = '';
        this.txtEditCarrier = '';
        this.disableSearchString = false;
        this.lstManageCarriers = [];
        this.manageCarriers = null;
        this.spinnerService.stop();
    };
    return ManageCarriersComponent;
}());
__decorate([
    core_1.ViewChild(datatable_1.DataTable),
    __metadata("design:type", datatable_1.DataTable)
], ManageCarriersComponent.prototype, "dataTableComponent", void 0);
ManageCarriersComponent = __decorate([
    core_1.Component({
        template: __webpack_require__(2106),
        providers: [datatableservice_1.datatableservice, recv_manage_carriers_service_1.ManageCarriersService, HttpService_1.HttpService, atpar_common_service_1.AtParCommonService, AtParConstants_1.AtParConstants]
    }),
    __metadata("design:paramtypes", [datatableservice_1.datatableservice,
        recv_manage_carriers_service_1.ManageCarriersService,
        HttpService_1.HttpService,
        event_spinner_service_1.SpinnerService,
        atpar_common_service_1.AtParCommonService,
        AtParConstants_1.AtParConstants])
], ManageCarriersComponent);
exports.ManageCarriersComponent = ManageCarriersComponent;


/***/ }),

/***/ 1613:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var event_spinner_service_1 = __webpack_require__(24);
var HttpService_1 = __webpack_require__(12);
var AtParEnums_1 = __webpack_require__(14);
var AtParConstants_1 = __webpack_require__(31);
var AtParStatusCodes_1 = __webpack_require__(50);
var atpar_common_service_1 = __webpack_require__(43);
var recv_parcel_count_report_service_1 = __webpack_require__(1843);
var file_saver_1 = __webpack_require__(228);
var ParcelCountReportComponent = (function () {
    function ParcelCountReportComponent(httpService, atparConstants, commonService, spinnerService, parcelCountReportService) {
        this.httpService = httpService;
        this.atparConstants = atparConstants;
        this.commonService = commonService;
        this.spinnerService = spinnerService;
        this.parcelCountReportService = parcelCountReportService;
        /* Variable Declaration */
        this.isMailDialog = false;
        this.toMailAddr = '';
        this.deviceTokenEntry = [];
        this.growlMessage = [];
        this.tdExports = false;
        this.statusCode = -1;
        this.defDateRange = 0;
        this.pageSize = 0;
        this.ipAddress = " ";
        this.gstrProtocal = "";
        this.gstrServerName = "";
        this.gstrPortNo = "";
        this.lstCarriers = [];
        this.showGrid = false;
        this.trackingNumber = '';
        this.lstParcelCountReportHeader = [];
        this.lstParcelCountReportDetails = [];
        this.carrierID = '';
        try {
            this.spinnerService.start();
            this.deviceTokenEntry = JSON.parse(localStorage.getItem("DeviceTokenEntry"));
        }
        catch (ex) {
            this.clientErrorMsg(ex, '');
        }
        finally {
            this.spinnerService.stop();
        }
    }
    ParcelCountReportComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, ex_1, _b, ex_2;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        this.deviceTokenEntry = JSON.parse(localStorage.getItem("DeviceTokenEntry"));
                        this.pageSize = +this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.RecordsPerPage];
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 9, 10, 11]);
                        this.spinnerService.start();
                        _c.label = 2;
                    case 2:
                        _c.trys.push([2, 4, , 5]);
                        this.statusCode = -1;
                        _a = this;
                        return [4 /*yield*/, this.getMyPreferences()];
                    case 3:
                        _a.statusCode = _c.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        ex_1 = _c.sent();
                        this.growlMessage = [];
                        this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: 'Failed to get Default Report Duration' });
                        return [2 /*return*/];
                    case 5:
                        this.currentDate = new Date();
                        this.toDate = new Date();
                        this.fromDate = new Date();
                        if (!(this.defDateRange.toString() != '' && this.defDateRange.toString != null)) return [3 /*break*/, 7];
                        _b = this;
                        return [4 /*yield*/, this.addDays(this.fromDate, -this.defDateRange)];
                    case 6:
                        _b.fromDate = _c.sent();
                        _c.label = 7;
                    case 7: return [4 /*yield*/, this.populateCarriers()];
                    case 8:
                        _c.sent();
                        return [3 /*break*/, 11];
                    case 9:
                        ex_2 = _c.sent();
                        this.clientErrorMsg(ex_2, 'ngOnInit');
                        return [3 /*break*/, 11];
                    case 10:
                        this.spinnerService.stop();
                        return [7 /*endfinally*/];
                    case 11: return [2 /*return*/];
                }
            });
        });
    };
    ParcelCountReportComponent.prototype.getMyPreferences = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var ex_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.commonService.getMyPreferences('DEFAULT_REPORT_DURATION', this.deviceTokenEntry)
                                .catch(this.httpService.handleError)
                                .then(function (res) {
                                var data = res.json();
                                _this.statusCode = data.StatusCode;
                                if (_this.statusCode == AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK) {
                                    _this.defDateRange = parseInt(data.DataVariable.toString());
                                }
                            })];
                    case 1:
                        _a.sent();
                        if (this.statusCode != AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK) {
                            return [2 /*return*/, AtParStatusCodes_1.AtparStatusCodes.E_SERVERERROR];
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        ex_3 = _a.sent();
                        this.clientErrorMsg(ex_3, 'getMyPreferences');
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/, AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK];
                }
            });
        });
    };
    ParcelCountReportComponent.prototype.addDays = function (theDate, days) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, new Date(theDate.getTime() + days * 24 * 60 * 60 * 1000)];
            });
        });
    };
    ParcelCountReportComponent.prototype.populateCarriers = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var ex_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.spinnerService.start();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.commonService.getCarriersData().
                                catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.lstCarriers = res.json().DataList;
                                _this.growlMessage = [];
                                _this.lstCarriers = [];
                                _this.lstCarriers.push({ label: "Select Carrier", value: "" });
                                switch (data.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        for (var i = 0; i < data.DataList.length; i++) {
                                            _this.lstCarriers.push({ label: data.DataList[i].CARRIER_ID, value: data.DataList[i].CARRIER_ID });
                                        }
                                        _this.spinnerService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.spinnerService.stop();
                                        _this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.spinnerService.stop();
                                        _this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.spinnerService.stop();
                                        _this.growlMessage.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        break;
                                    }
                                }
                            })];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 3:
                        ex_4 = _a.sent();
                        this.clientErrorMsg(ex_4, 'bindOrgGroups');
                        return [3 /*break*/, 5];
                    case 4:
                        this.spinnerService.stop();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    ParcelCountReportComponent.prototype.btnGo_Click = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var frmDate, toDate, retValue, ex_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, 5, 6]);
                        this.growlMessage = [];
                        this.showGrid = false;
                        this.spinnerService.start();
                        frmDate = this.fromDate.toLocaleDateString();
                        toDate = this.toDate.toLocaleDateString();
                        retValue = false;
                        return [4 /*yield*/, this.validateSearchFields()];
                    case 1:
                        retValue = _a.sent();
                        if (!retValue) return [3 /*break*/, 3];
                        if (this.selectedDropDownCarrierId != '' && this.selectedDropDownCarrierId != undefined && this.selectedDropDownCarrierId != 'Select Carrier') {
                            this.carrierID = this.selectedDropDownCarrierId;
                        }
                        return [4 /*yield*/, this.parcelCountReportService.getParcelCountReport(frmDate, toDate, this.carrierID, this.trackingNumber)
                                .catch(this.httpService.handleError).then(function (res) {
                                _this.spinnerService.stop();
                                _this.carrierID = '';
                                var result = res.json();
                                switch (result.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        if (result.DataDictionary != null) {
                                            _this.lstParcelCountReportHeader = result.DataDictionary["lstGetParcelCountRepHeader"];
                                            _this.lstParcelCountReportDetails = result.DataDictionary["lstGetParcelCountRepDetails"];
                                            if (_this.lstParcelCountReportHeader.length > 0) {
                                                for (var i = 0; i < _this.lstParcelCountReportHeader.length; i++) {
                                                    var startDateTime = _this.lstParcelCountReportHeader[i].START_DT_TIME;
                                                    var convStartDateTime = new Date(startDateTime).toLocaleString().replace(/[^A-Za-z 0-9 \.,\?""!@#\$%\^&\*\(\)-_=\+;:<>\/\\\|\}\{\[\]`~]*/g, '');
                                                    _this.lstParcelCountReportHeader[i].START_DT_TIME = convStartDateTime.replace(',', '');
                                                    var lstDetails = _this.lstParcelCountReportDetails.filter(function (x) { return x.TRANSACTION_ID == _this.lstParcelCountReportHeader[i].TRANSACTION_ID; });
                                                    if (lstDetails.length > 0) {
                                                        _this.lstParcelCountReportHeader[i].DETAILS = lstDetails;
                                                    }
                                                }
                                                _this.showGrid = true;
                                                _this.tdExports = true;
                                            }
                                            else {
                                                _this.showGrid = false;
                                                _this.tdExports = false;
                                                _this.spinnerService.stop();
                                                _this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: 'No Data Found' });
                                            }
                                        }
                                        else {
                                            _this.showGrid = false;
                                            _this.tdExports = false;
                                            _this.spinnerService.stop();
                                            _this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: 'No Data Found' });
                                        }
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: result.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: result.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Custom: {
                                        _this.growlMessage.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: result.StatusMessage });
                                        break;
                                    }
                                }
                            })];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [3 /*break*/, 6];
                    case 4:
                        ex_5 = _a.sent();
                        this.clientErrorMsg(ex_5, 'btnGo_Click');
                        return [3 /*break*/, 6];
                    case 5:
                        this.spinnerService.stop();
                        return [7 /*endfinally*/];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    ParcelCountReportComponent.prototype.validateSearchFields = function () {
        try {
            this.growlMessage = [];
            if (this.fromDate == null || this.fromDate.toString() == '' || this.toDate == null || this.toDate.toString() == '') {
                this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please Select a Valid Date Range" });
                return false;
            }
            else if (Date.parse(this.fromDate.toString()) && Date.parse(this.toDate.toString())) {
                if (Date.parse(this.convertDateFormat(this.fromDate)) > Date.parse(this.convertDateFormat(this.toDate))) {
                    this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "From Date should be less than To Date" });
                    return false;
                }
                if (Date.parse(this.convertDateFormat(this.toDate)) > Date.parse(this.convertDateFormat(this.currentDate))) {
                    this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "To Date should be less than or equal to Today's Date" });
                    return false;
                }
                if (Date.parse(this.convertDateFormat(this.toDate)) < Date.parse(this.convertDateFormat(this.fromDate))) {
                    this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "To Date must be greater than or equal to From Date" });
                    return false;
                }
            }
            else {
                this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: 'Please enter valid Dates' });
                return false;
            }
            return true;
        }
        catch (ex) {
            this.clientErrorMsg(ex, 'validateSearchFields');
            return false;
        }
    };
    ParcelCountReportComponent.prototype.convertDateFormat = function (strDate) {
        var date = new Date(strDate), mnth = ("0" + (date.getMonth() + 1)).slice(-2), day = ("0" + date.getDate()).slice(-2);
        return [mnth, day, date.getFullYear()].join("/");
    };
    ParcelCountReportComponent.prototype.onExportToExcelClick = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            var html, blob, ex_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, 3, 4]);
                        event.stopImmediatePropagation();
                        this.spinnerService.start();
                        return [4 /*yield*/, this.ExportReportDetails('Excel')];
                    case 1:
                        html = _a.sent();
                        if (html != '' && html != null) {
                            blob = new Blob([html], {
                                type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8"
                            });
                            file_saver_1.saveAs(blob, "ReceiveParcelCountReport.xls");
                        }
                        return [3 /*break*/, 4];
                    case 2:
                        ex_6 = _a.sent();
                        this.clientErrorMsg(ex_6, 'onExportToExcelClick');
                        return [3 /*break*/, 4];
                    case 3:
                        this.spinnerService.stop();
                        return [7 /*endfinally*/];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ParcelCountReportComponent.prototype.ExportReportDetails = function (reqType) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var htmlBuilder, sbMailText, imgserverPath, title, ChartPath, sigimgserverPath_1, ex_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        htmlBuilder = '';
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 6, , 7]);
                        this.growlMessage = [];
                        sbMailText = void 0;
                        imgserverPath = '';
                        return [4 /*yield*/, this.commonService.getServerIP()
                                .catch(this.httpService.handleError)
                                .then(function (res) {
                                var data = res.json();
                                switch (data.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        _this.ipAddress = data.DataVariable.toString();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Custom: {
                                        _this.growlMessage.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        break;
                                    }
                                }
                                if (data.StatType != AtParEnums_1.StatusType.Success) {
                                    htmlBuilder = '';
                                    return htmlBuilder;
                                }
                            })];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.commonService.getSSLConfigDetails()
                                .catch(this.httpService.handleError)
                                .then(function (res) {
                                _this.growlMessage = [];
                                var data = res.json();
                                switch (data.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        _this.gstrProtocal = data.Data.PROTOCOL.toString();
                                        _this.gstrServerName = data.Data.SERVER_NAME.toString();
                                        _this.gstrPortNo = data.Data.PORT_NO.toString();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Custom: {
                                        _this.growlMessage.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        break;
                                    }
                                }
                                if (data.StatType != AtParEnums_1.StatusType.Success) {
                                    htmlBuilder = '';
                                    return htmlBuilder;
                                }
                            })];
                    case 3:
                        _a.sent();
                        imgserverPath = this.gstrProtocal + '://' + this.ipAddress + '/atpar/web/images/';
                        title = '""' + "AtparVersion 3.0" + '""';
                        ChartPath = this.httpService.BaseUrl + '/Uploaded/';
                        htmlBuilder += "<Table align=left width=100% cellpadding=0 cellspacing = 0 vAlign=top>";
                        if (reqType == 'Print') {
                            htmlBuilder += "<TR width='100%'><td colspan=2 align=left  width='15%' height=63 nowrap><img height=63 src=" + imgserverPath + "logo.jpg title=" + title + ">"
                                + "</td><td align=left  width='85%' height=63 nowrap><img src=" + imgserverPath + "topbg.jpg width=100% height=63></td></TR>";
                            htmlBuilder += "<TR><TD height=27  vAlign=bottom width=100% align=left colspan=2><font size=1 style=" + "" + "COLOR: #8b4513;FONT-FAMILY: verdana;FONT-SIZE: 8pt" + "" + "><B>&nbsp;&nbsp;Mobile Supply Chain Execution<B></FONT></TD>";
                            htmlBuilder += "</TR><tr><td colspan=2>&nbsp;</td></tr><tr><td colspan=2><table align=left width=90% border=0><tr><td></td></tr>";
                            htmlBuilder += "<tr><td colspan=5 align=left><span class=c2>" + " Receive Parcel Count Report from <b> " + this.convertDateFormat(this.fromDate) + "</b> to <b>" + this.convertDateFormat(this.toDate) + "</b></span></td><td align=right valign=top>&nbsp<tr><td></td></tr>";
                            htmlBuilder += "<A  href=" + "" + "javascript:printWindow()" + "" + "><img src=" + imgserverPath + "print.jpg></A>";
                        }
                        else {
                            if (reqType == 'Mail') {
                                htmlBuilder += "<TR width='100%'><td colspan=2 bgcolor='#fe9836' align=left  width='100%' nowrap><img src=" + imgserverPath + "logo.jpg></td></TR>";
                            }
                            else {
                                htmlBuilder += "<TR height=55><TD align=left colspan=2><IMG height=55 width=18% src=" + imgserverPath + "logo.jpg title=Atpar 3><img src=" + imgserverPath + "topbg.jpg width=82% height=55></TD></TR>";
                            }
                            htmlBuilder += "<TR><TD height=27  vAlign=bottom width=100% align=left colspan=2><font size=1 style=" + "" + "COLOR: #8b4513;FONT-FAMILY: verdana;FONT-SIZE: 8pt" + "" + "><B>&nbsp;&nbsp;Mobile Supply Chain Execution<B></FONT></TD>";
                            htmlBuilder += "</TR><tr><td colspan=2>&nbsp;</td></tr><tr><td colspan=2><table align=left width=100% border=0><tr><td></td></tr>";
                            htmlBuilder += "<tr><td colspan=5 align=left><span class=c2>" + " Receive Parcel Count Report from <b> " + this.convertDateFormat(this.fromDate) + "</b> to <b>" + this.convertDateFormat(this.toDate) + "</b></span></td><td align=right valign=top>&nbsp";
                            htmlBuilder += "<tr><td colspan=12 align= left><span class=c2></span > </td><td align=right valign=top>&nbsp;";
                        }
                        htmlBuilder += "</td></tr></table></td></tr>";
                        htmlBuilder += "<tr><td colspan=2>";
                        htmlBuilder += "<table align=left width=100% style=" + "" + "BORDER-COLLAPSE:collapse" + "" + " border=1>";
                        htmlBuilder += "<tr bgcolor=#d3d3d3>";
                        htmlBuilder += "<td align=center nowrap><span class=c2><b>Date Time</b></span></td>";
                        htmlBuilder += "<td align=center nowrap><span class=c2><b>User</b></span></td>";
                        htmlBuilder += "<td align=center nowrap><span class=c2><b>Total Count</b></span></td>";
                        htmlBuilder += "<td align=center nowrap><span class=c2><b>Signature</b></span></td>";
                        htmlBuilder += "</tr>";
                        sigimgserverPath_1 = this.gstrProtocal + '://' + this.ipAddress + '/AtPar/AtParWebApi/Uploaded/';
                        return [4 /*yield*/, this.lstParcelCountReportHeader.forEach(function (header) {
                                htmlBuilder += "<tr height=90>";
                                htmlBuilder += "<td bgcolor=#ffffff nowrap>&nbsp;" + header.START_DT_TIME + "&nbsp;</td>";
                                htmlBuilder += "<td bgcolor=#ffffff nowrap>&nbsp;" + header.USER_ID + "&nbsp;</td>";
                                htmlBuilder += "<td bgcolor=#ffffff align=right nowrap>&nbsp;" + header.TOTCNT + "&nbsp;</td>";
                                if (header.SIGNATURE != null && header.SIGNATURE != '') {
                                    htmlBuilder += "<td align=right border==#ffffff nowrap>&nbsp;<center><img src=" + sigimgserverPath_1 + header.TRANSACTION_ID + ".jpg ></td>";
                                }
                                else {
                                    htmlBuilder += "<td border==#ffffff nowrap>&nbsp;<center></td>";
                                }
                                htmlBuilder += "</tr>";
                                if (header.DETAILS.length > 0) {
                                    htmlBuilder += "<tr>";
                                    htmlBuilder += "<td colspan =5>";
                                    htmlBuilder += "<table align=right width=60% style=" + "" + "BORDER-COLLAPSE:collapse" + "" + " border=1>";
                                    htmlBuilder += "<tr bgcolor=#d3d3d3>";
                                    htmlBuilder += "<td align=center nowrap width=15%><span class=c3><b>Tracking Number</b></span></td>";
                                    htmlBuilder += "<td align=center nowrap width=8%><span class=c3><b>Quantity</b></span></td>";
                                    htmlBuilder += "</tr>";
                                    header.DETAILS.forEach(function (detail) {
                                        htmlBuilder += "<tr>";
                                        htmlBuilder += "<td align=left nowrap ><span class=c3>" + "'" + detail.TRACKING_NO + "</span></td>";
                                        htmlBuilder += "<td align=right nowrap><span class=c3>" + detail.NO_OF_BOXES + "</span></td>";
                                        htmlBuilder += "</tr>";
                                    });
                                    htmlBuilder += "</table></td></tr>";
                                }
                            })];
                    case 4:
                        _a.sent();
                        htmlBuilder += "</tr>";
                        htmlBuilder += "</table></td></tr>";
                        htmlBuilder += "</Table>";
                        return [4 /*yield*/, htmlBuilder];
                    case 5: return [2 /*return*/, _a.sent()];
                    case 6:
                        ex_7 = _a.sent();
                        htmlBuilder = '';
                        this.clientErrorMsg(ex_7, 'ExportReportDetails');
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    ParcelCountReportComponent.prototype.onPrintClick = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            var html, mywindow, ex_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, 3, 4]);
                        event.stopImmediatePropagation();
                        this.spinnerService.start();
                        return [4 /*yield*/, this.ExportReportDetails('Print')];
                    case 1:
                        html = _a.sent();
                        if (html != '' && html != null) {
                            mywindow = window.open('', 'PRINT', 'height=600,width=600');
                            if (mywindow != null && mywindow != undefined) {
                                mywindow.document.write('<html><head><title>' + 'Receive - Parcel Count Report' + '</title>');
                                mywindow.document.write('</head><body >');
                                mywindow.document.write(html);
                                mywindow.document.write('</body></html>');
                                mywindow.document.close();
                                mywindow.focus();
                                mywindow.print();
                                mywindow.close();
                                return [2 /*return*/, true];
                            }
                            else {
                                this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: 'Please set allow pop-ups for this site in your browser' });
                            }
                        }
                        return [3 /*break*/, 4];
                    case 2:
                        ex_8 = _a.sent();
                        this.clientErrorMsg(ex_8, 'onPrintClick');
                        return [2 /*return*/, false];
                    case 3:
                        this.spinnerService.stop();
                        return [7 /*endfinally*/];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ParcelCountReportComponent.prototype.onSendMailIconClick = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    this.isMailDialog = true;
                    this.toMailAddr = '';
                }
                catch (ex) {
                    this.clientErrorMsg(ex, 'onSendMailIconClick');
                }
                return [2 /*return*/];
            });
        });
    };
    ParcelCountReportComponent.prototype.onSendMailClick = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var val, html, toAddr, ex_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, 5, 6]);
                        this.growlMessage = [];
                        if (this.toMailAddr == '' || this.toMailAddr == undefined) {
                            this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: 'Please Enter Email Address to Send' });
                            return [2 /*return*/];
                        }
                        val = this.validateEmail(this.toMailAddr);
                        if (!val) {
                            this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: 'Please Enter Valid Email Address to Send' });
                            return [2 /*return*/];
                        }
                        this.spinnerService.start();
                        this.isMailDialog = false;
                        return [4 /*yield*/, this.ExportReportDetails('Mail')];
                    case 1:
                        html = _a.sent();
                        toAddr = '';
                        if (!(html != '' && html != null)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.commonService.sendEmbeddedEmail(this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.SystemId], 'Receive Parcel Count Report', JSON.stringify(html), this.toMailAddr, '', false, AtParEnums_1.MailPriority.Normal.toString(), '')
                                .then(function (res) {
                                var data = res.json();
                                _this.statusCode = data.StatusCode;
                            })];
                    case 2:
                        _a.sent();
                        if (this.statusCode == AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK) {
                            this.growlMessage.push({ severity: 'success', summary: AtParConstants_1.AtParConstants.GrowlTitle_Success, detail: 'Mail has been sent' });
                        }
                        else if (this.statusCode == AtParStatusCodes_1.AtparStatusCodes.EMAIL_ENTER_FROM_ADDRESS) {
                            this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: 'From Address is Missing! Please Contact Administrator' });
                        }
                        else if (this.statusCode == AtParStatusCodes_1.AtparStatusCodes.EMAIL_ENTER_TO_ADDRESS) {
                            this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: 'Please Enter valid Email Address to Send' });
                        }
                        else if (this.statusCode == AtParStatusCodes_1.AtparStatusCodes.EMAIL_ENTER_SUBJECT) {
                            this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: 'Subject is Missing! Please Contact Administrator' });
                        }
                        else if (this.statusCode == AtParStatusCodes_1.AtparStatusCodes.EMAIL_ENTER_BODY) {
                            this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: 'Body is Missing! Please contact Administrator' });
                        }
                        else if (this.statusCode == AtParStatusCodes_1.AtparStatusCodes.EMAIL_SMTP_SERVER_MISSING) {
                            this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: 'Email Server is Not Configured! Please Contact Administrator' });
                        }
                        else if (this.statusCode == AtParStatusCodes_1.AtparStatusCodes.EMAIL_SEND_FAILED) {
                            this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: 'Mail Not Sent. Please Try Again' });
                        }
                        else {
                            this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: 'Error while sending mail' });
                        }
                        _a.label = 3;
                    case 3:
                        this.isMailDialog = false;
                        this.toMailAddr = '';
                        return [3 /*break*/, 6];
                    case 4:
                        ex_9 = _a.sent();
                        this.clientErrorMsg(ex_9, 'onSendMailClick');
                        return [3 /*break*/, 6];
                    case 5:
                        this.spinnerService.stop();
                        return [7 /*endfinally*/];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    ParcelCountReportComponent.prototype.validateEmail = function (email) {
        var ret = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return ret.test(email);
    };
    ParcelCountReportComponent.prototype.closeMailPopup = function () {
        this.growlMessage = [];
    };
    ParcelCountReportComponent.prototype.clientErrorMsg = function (ex, funName) {
        this.growlMessage = [];
        this.atparConstants.catchClientError(this.growlMessage, this.spinnerService, ex.toString(), funName, this.constructor.name);
    };
    ParcelCountReportComponent.prototype.ngOnDestroy = function () {
        this.deviceTokenEntry = null;
        this.lstParcelCountReportHeader = null;
        this.lstParcelCountReportDetails = null;
        this.lstCarriers = null;
        this.growlMessage = null;
    };
    return ParcelCountReportComponent;
}());
ParcelCountReportComponent = __decorate([
    core_1.Component({
        template: __webpack_require__(2107),
        providers: [HttpService_1.HttpService, AtParConstants_1.AtParConstants, atpar_common_service_1.AtParCommonService, recv_parcel_count_report_service_1.ParcelCountReportService]
    }),
    __metadata("design:paramtypes", [HttpService_1.HttpService,
        AtParConstants_1.AtParConstants,
        atpar_common_service_1.AtParCommonService,
        event_spinner_service_1.SpinnerService,
        recv_parcel_count_report_service_1.ParcelCountReportService])
], ParcelCountReportComponent);
exports.ParcelCountReportComponent = ParcelCountReportComponent;


/***/ }),

/***/ 1614:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var datatableservice_1 = __webpack_require__(131);
var employee_1 = __webpack_require__(1372);
var PAR_MNGT_VENDOR_1 = __webpack_require__(633);
var linq_es5_1 = __webpack_require__(115);
var AtParEnums_1 = __webpack_require__(14);
var HttpService_1 = __webpack_require__(12);
var AtParConstants_1 = __webpack_require__(31);
var atpar_common_service_1 = __webpack_require__(43);
var AtParStatusCodes_1 = __webpack_require__(50);
var event_spinner_service_1 = __webpack_require__(24);
var datatable_1 = __webpack_require__(71);
var api_1 = __webpack_require__(72);
var recv_po_nonpo_receipts_service_1 = __webpack_require__(1844);
var vm_recv_iutgetpos_1 = __webpack_require__(1893);
var vm_recv_poheader_1 = __webpack_require__(1895);
var vm_recv_sendpoheader_1 = __webpack_require__(1899);
var vm_recv_sendlineheader_1 = __webpack_require__(1898);
var vm_recv_iut_items_1 = __webpack_require__(1892);
var mt_atpar_setup_pro_printeres_1 = __webpack_require__(1661);
var vm_printlabel_receive_header_1 = __webpack_require__(1891);
var vm_recv_printer_header_1 = __webpack_require__(1896);
var vm_recv_searchheader_1 = __webpack_require__(1897);
var VM_IUT_SENDHEADER_1 = __webpack_require__(1752);
var VM_IUT_SEARCHHEADER_1 = __webpack_require__(1751);
var MT_RECV_NONPO_1 = __webpack_require__(1739);
var VM_RECV_LOTSERIAL_1 = __webpack_require__(1763);
var vm_recv_nonpo_printerdetails_1 = __webpack_require__(1894);
var routepath_1 = __webpack_require__(70);
var platform_browser_1 = __webpack_require__(58);
var PoNonPoReceiptsComponent = (function () {
    function PoNonPoReceiptsComponent(dataservice, spnrService, httpService, atParConstant, commonService, document, recvPoNonPoService, confirmationService) {
        this.dataservice = dataservice;
        this.spnrService = spnrService;
        this.httpService = httpService;
        this.atParConstant = atParConstant;
        this.commonService = commonService;
        this.document = document;
        this.recvPoNonPoService = recvPoNonPoService;
        this.confirmationService = confirmationService;
        this.pop = false;
        this.page = true;
        this.purchase = false;
        this.printtbl = false;
        this.tbl = false;
        this.plus = true;
        this.minus = false;
        this.bysch = false;
        this.recvSearchPos = false;
        this.recvIUTSearch = false;
        this.editform = false;
        this.lotserial = false;
        this.blnFlag = false;
        this.loading = true;
        this.blnSchedsExist = false;
        this.blnReceiveall = false;
        this.lotserialGrid = false;
        this.minDateValue1 = new Date();
        this.btnTrackingNumber = false;
        this.lblTrackingNumber = false;
        this.btnPntrLotSerialDisable = false;
        this.newItem = new PAR_MNGT_VENDOR_1.PAR_MNGT_VENDOR();
        this.poNewItem = new MT_RECV_NONPO_1.VM_RECV_SENDNONPOHEADER();
        this.deviceTokenEntry = [];
        this.statusMsgs = [];
        this.receive_itemSubdetails_dt = [];
        this.lstMainItemLotSerial = [];
        this.lstFinalLotSerial = [];
        this.lstAsnDetails = [];
        this.receItemColumns = [];
        this.receIutItemColumns = [];
        this.receSchdlItemColumns = [];
        this.lstFilterItems = [];
        this.ddlRecvUom = [];
        this.lstLotSerial = [];
        this.selectedlotserialUOM = "";
        this.txtFrmDate = new Date();
        this.txtToDate = new Date();
        this.currentDate = new Date();
        this.currentFromDate = new Date();
        this.selectedBUnits = "Select BusinessUnit";
        this.selectedDdlCarrier = "Select Carrier";
        this.selectedSchdDdlCarrier = "Select Carrier";
        this.selectedShipToId = "Select ShipToID";
        this.selectedRecvUom = "";
        this.hdnBunit = "";
        this.hdnPO = "";
        this.hdnIUT = "";
        this.hdnPoSearch = "";
        this.hdnIUTSearch = "";
        this.hdnConfirmNonPo = "";
        this.hdnConfirmPoDelete = "";
        this.hdnConfirmIUTDelete = "";
        this.hdnItemId = "";
        this.hdnItemType = "";
        this.hdnInvItemId = "";
        this.hdnSearchWithOutBU = "";
        this.hdnNonPo = "";
        this.hdnCnfmZroQty = "";
        this.txtShipId = "";
        this.txtPONumber = "";
        this.txtIUT = "";
        this.txtInvoice = "";
        this.txtPkgs = "";
        this.txtTrk = "";
        this.txtSchdExTrk = "";
        this.txtLading = "";
        this.lblReceiverId = "";
        this.lblBuyerId = "";
        this.lblPhoneValue = "";
        this.standardUOM = "";
        this.strDefaultCarrierID = "";
        this.standardConversionRate = "";
        this.txtNoOfBoxes = "";
        this.lnkItemId = "";
        this.txtQty = "";
        this.ddlGridCarrier = "";
        this.txtLadg = "";
        this.lnkLineNbr = "";
        this.ERS_TYPE = "INR";
        this.concatinateTrkNoPoID = "";
        this.txtSerchItemId = "";
        this.txtItemId = "";
        this.txtVendorId = "";
        this.txtVendorName = "";
        this.schedNbr = "";
        this.lotSerialConverfactor = 0;
        this.serialControl = "";
        this.lotControl = "";
        this.strTotalQty = "";
        this.txtLotserialExpDate = new Date();
        this.strLotSerialUom = "";
        this.lblHdrComments = "";
        this.lblHdrCommentsToolTip = "";
        this.selectedINVITEMID = "";
        this.selectedSCHEDNBR = "";
        this.selectedReceiverId = "";
        this.presentScreen = "PO";
        this.hdnReqShiptoId = "";
        this.hdnIncludeASNPOs = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
        this.selectedRecvId = "";
        this.recnonstaticFields = "INV_ITEM_ID,LINE_QTY,UNIT_OF_MEASURE,CARRIER_ID,BILL_OF_LADING,LINE_NBR,NO_OF_BOXES,EXT_TRK_NO,NO_OF_BOXES,DESCR";
        this.gStrASNDownload = "";
        this.gStrReceiverId = "";
        this.gStrLotSerial = "";
        this.gTransactionID = "";
        this.gInvoiceMthdCode = "";
        this.gDropShipFlag = "";
        this.gStrDefaultInput = "";
        this.gStrEditShipToId = "";
        this.gStrNonPoItemsReceive = "";
        this.gStrUOMEditFlag = "";
        this.gStrReqdShipToId = "";
        this.gStrDisplayReceivedQty = "";
        this.gStrAllowIUTAccess = "";
        this.gASNReceiptStatus = "";
        this.gStrNonStockStore = "";
        this.gStrSearchType = "";
        this.gStrAltUOMDisplay = "";
        this.gStrAllowExcessQty = "";
        this.gStrZeroReceiptWarn = "";
        this.gDefaultDateRange = "";
        this.gDisplayComments = "";
        this.gStrDefPrinter = "";
        this.gStrSelPrinter = "";
        this.gStrPrintPoIDComments = "";
        this.gConcatinateTrkNoPoID = "";
        this.gStrRecDelprintoption = "";
        this.gdonotDefaulttrackingNumber = "";
        this.gPrintStockHeader = "";
        this.gRecv_StandardUOM = "STANDARDUOM";
        this.gRecv_PoUOM = "PO UOM";
        this.gPOUOM = "";
        this.gPOUOMConversionRate = "";
        this.gSTime = "";
        this.gStrInvoice = "";
        this.gstrPrevComments = "";
        this.gstrlnkitemid = "";
        this.gstrlnklineNbr = "";
        this.gblnCancel = false;
        this.gblnASNPO = false;
        this.gblnLotSerialFlg = false;
        this.gblnScheduleFlg = false;
        this.statusCode = -1;
        this.statusType = -1;
        this.shipToIdCount = 0;
        this.cntLotSerialQty = 0;
        this.intTolRecvQty = 0;
        this.blnShipToId = true;
        this.chkIncludeAllPOLines = false;
        this.btnPntrHeaderVisible = true;
        this.btnPntrDetailsVisible = true;
        this.btnPntrLotSerialVisible = false;
        this.txtIutIsEditMode = true; // false;
        this.blnGrdRecvPoItems = false;
        this.blnGrdRecvIutItems = false;
        this.btnIUTSearch = true;
        this.btnNonPo = true;
        this.btnPoSearch = true;
        this.btnGetEnableDisable = false;
        this.btnPoSearchEnableDisable = false;
        this.btnIUTSearchEnableDisable = false;
        this.btnNonPoEnableDisable = false;
        this.recvGrdCarrierEnable = false;
        this.ddlRecvUomEnable = false;
        this.btnLotSerialDisable = false;
        this.btnPntrHeaderDisable = false;
        this.btnPntrDetailsDisable = false;
        this.blnTxtExtTrk = true;
        this.blnLblExtTrk = true;
        this.blnImgCountAll = true;
        this.blnImgResetAll = true;
        this.txtLadingIsEditMode = false;
        this.txtExtTrkIsEditMode = false;
        this.grdRecvLinesRbBtnCheck = false;
        this.grdRecvIutItemsRbBtnCheck = false;
        this.grdRecvSearchPos = false;
        this.txtPkgsIsReadonly = false;
        this.rbtnDueDate = false;
        this.rbtnPODate = false;
        this.blnlnkItemIdEnable = false;
        this.blnlnkLineNbrEnable = false;
        this.ddllotserialUomEnable = false;
        this.txtLotSerialQtyIsEditMode = false;
        this.txtSerialIDIsEditMode = false;
        this.txtLotIdIsEditMode = false;
        this.txtLotserialExpDateIsEditMode = false;
        this.blnShowPopUp = false;
        this.blnScheduleItems = false;
        this.blntxtShipIdDisable = true; // false;
        this.lotSerialDeleteFlg = false;
        /*Non PO*/
        this.nonPO = false;
        this.nonPoDisable = true;
        this.nonPOReceipts = false;
        this.blnRecipients = false;
        this.dtScheduleItems = [];
        this.schPO = false;
        this.isScheduleSave = false;
        this.lotSerialSchdFlg = false;
        this.blnMgf = false;
        this.blnLot = false;
        this.blnSerial = false;
        this.blnPackage = false;
        this.blnItemPrice = false;
        this.blnNoofBoxes = false;
        this.blnTrkNo = false;
        this.blnExtrkNo = false;
        this.blnRecQty = false;
        this.blnGTIN = false;
        this.blnUPC = false;
        this.blnShip = false;
        this.lstCheckedBUnits = [];
        this.selectedPrinterName = "";
        this.breadCrumbMenu = new routepath_1.Menus();
        this.ven = new employee_1.Employee();
        this.poNewItem = new MT_RECV_NONPO_1.VM_RECV_SENDNONPOHEADER(); // VM_MT_RECV_NONPO();
        //this.addUserData.City = [];
    }
    // Grid visibility events start
    PoNonPoReceiptsComponent.prototype.go = function () {
        this.pop = !this.pop;
    };
    PoNonPoReceiptsComponent.prototype.plusShow = function () {
        var _this = this;
        this.statusMsgs = [];
        this.minus = true;
        this.plus = false;
        setTimeout(function () { _this.rbtnPODate = true; }, 1);
    };
    PoNonPoReceiptsComponent.prototype.minusShow = function () {
        var _this = this;
        this.statusMsgs = [];
        this.plus = true;
        this.minus = false;
        setTimeout(function () { _this.rbtnPODate = true; }, 1);
    };
    PoNonPoReceiptsComponent.prototype.poBack = function () {
        this.statusMsgs = [];
        this.tbl = false;
        this.page = true;
        this.recvSearchPos = false;
        this.recvIUTSearch = false;
    };
    PoNonPoReceiptsComponent.prototype.lot = function () {
        this.statusMsgs = [];
        this.bysch = false;
        this.lotserial = !this.lotserial;
    };
    PoNonPoReceiptsComponent.prototype.print = function () {
        this.statusMsgs = [];
        this.printtbl = true;
        this.bysch = false;
    };
    PoNonPoReceiptsComponent.prototype.printback = function () {
        this.statusMsgs = [];
        this.printtbl = false;
        if (this.presentScreen == "NONPO") {
            this.nonPO = true;
        }
        else if (this.presentScreen == "ScheduledPo") {
            this.bysch = true;
        }
        else {
            this.tbl = true;
            this.page = true;
        }
    };
    PoNonPoReceiptsComponent.prototype.get2 = function () {
        this.statusMsgs = [];
        this.purchase = !this.purchase;
        this.tbl = false;
        this.page = false;
        this.recvSearchPos = false;
        this.recvIUTSearch = false;
    };
    PoNonPoReceiptsComponent.prototype.getBack = function () {
        this.statusMsgs = [];
        this.purchase = false;
        this.tbl = false;
        this.page = true;
        this.recvSearchPos = false;
        this.recvIUTSearch = false;
    };
    PoNonPoReceiptsComponent.prototype.close = function () {
        this.statusMsgs = [];
        this.page = true;
        this.pop = true;
    };
    PoNonPoReceiptsComponent.prototype.onfocusToCalendar = function (e) {
        this.statusMsgs = [];
        this.date2 = null;
        if (this.date1 == null) {
            this.minDateValue2 = new Date();
        }
        else {
            this.minDateValue2 = this.date1;
        }
    };
    PoNonPoReceiptsComponent.prototype.onfocusFromCalendar = function (e) {
        this.statusMsgs = [];
        localStorage.removeItem("FromDate");
        this.date1 = null;
    };
    // Grid visibility events end
    // Page Initialization.
    PoNonPoReceiptsComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, ex_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 3, , 4]);
                        this.statusMsgs = [];
                        this.statusCode = -1;
                        this.spnrService.start();
                        this.intAppId = parseInt(this.appId);
                        this.deviceTokenEntry = JSON.parse(localStorage.getItem("DeviceTokenEntry"));
                        this.recordsPerPageSize = +this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.RecordsPerPage];
                        _a = this;
                        return [4 /*yield*/, this.getReceivePrerequisites()];
                    case 1:
                        _a.statusCode = _b.sent();
                        if (this.statusCode != AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.loadparameters("mt_recv_po_or_nonpo_receipts")];
                    case 2:
                        _b.sent();
                        if (this.gDefaultDateRange != null && this.gDefaultDateRange != "") {
                            this.currentFromDate = new Date();
                            this.currentFromDate.setDate(this.currentFromDate.getDate() - parseInt(this.gDefaultDateRange));
                            this.txtFrmDate = (this.currentFromDate.getMonth() + 1) + '/' + (this.currentFromDate.getDate()) + '/' + this.currentFromDate.getFullYear();
                            this.txtToDate = (this.currentDate.getMonth() + 1) + '/' + (this.currentDate.getDate()) + '/' + this.currentDate.getFullYear();
                        }
                        else {
                            this.currentFromDate = new Date();
                            this.txtToDate = (this.currentDate.getMonth() + 1) + '/' + (this.currentDate.getDate()) + '/' + this.currentDate.getFullYear();
                            this.txtFrmDate = (this.currentFromDate.getMonth() + 1) + '/' + (this.currentFromDate.getDate()) + '/' + this.currentFromDate.getFullYear();
                        }
                        this.spnrService.stop();
                        return [3 /*break*/, 4];
                    case 3:
                        ex_1 = _b.sent();
                        this.clientErrorMsg(ex_1, "ngOnInit");
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    // Page Load Event.
    PoNonPoReceiptsComponent.prototype.page_Load = function () {
        return __awaiter(this, void 0, void 0, function () {
            var strDefaultCarrierID, ex_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 7, , 8]);
                        this.spnrService.start();
                        //this.RegisterScripts();
                        this.statusMsgs = [];
                        this.statusCode = -1;
                        if (this.gDefaultDateRange != null && this.gDefaultDateRange != "") {
                            this.currentFromDate = new Date();
                            this.currentFromDate.setDate(this.currentFromDate.getDate() - parseInt(this.gDefaultDateRange));
                            this.txtFrmDate = (this.currentFromDate.getMonth() + 1) + '/' + (this.currentFromDate.getDate()) + '/' + this.currentFromDate.getFullYear();
                            this.txtToDate = (this.currentDate.getMonth() + 1) + '/' + (this.currentDate.getDate()) + '/' + this.currentDate.getFullYear();
                        }
                        else {
                            this.currentFromDate = new Date();
                            this.txtToDate = (this.currentDate.getMonth() + 1) + '/' + (this.currentDate.getDate()) + '/' + this.currentDate.getFullYear();
                            this.txtFrmDate = (this.currentFromDate.getMonth() + 1) + '/' + (this.currentFromDate.getDate()) + '/' + this.currentFromDate.getFullYear();
                        }
                        this.clearData();
                        this.gStrReceiverId = "";
                        if (this.hdnConfirmPoDelete == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                            //Delte PO 
                            this.deletePo();
                            return [2 /*return*/];
                        }
                        else if (this.hdnConfirmIUTDelete == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                            //Delete IUT
                            this.deleteIUTOrder();
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.bindDataGrid()];
                    case 1:
                        _a.sent();
                        if (this.selectedDdlCarrier == "Select Carrier") {
                            this.populateCarrierDropDown(this.selectedDdlCarrier);
                        }
                        else {
                            if (this.lstUserApp != null && this.lstUserApp.length > 0) {
                                strDefaultCarrierID = linq_es5_1.asEnumerable(this.lstUserApp).ToArray()[1].PARAMETER_VALUE;
                                if (strDefaultCarrierID != null && strDefaultCarrierID != "") {
                                    if (this.selectedDdlCarrier.toUpperCase() == strDefaultCarrierID.toUpperCase()) {
                                        this.selectedDdlCarrier = strDefaultCarrierID.toUpperCase();
                                    }
                                    else {
                                        this.ddlCarrier.push({ label: strDefaultCarrierID, value: strDefaultCarrierID });
                                        this.selectedDdlCarrier = strDefaultCarrierID.toUpperCase();
                                    }
                                }
                                else {
                                    this.selectedDdlCarrier = "Select Carrier";
                                }
                            }
                        }
                        if (this.gstrLoader != undefined && this.gstrLoader != "") {
                            this.gstrLoader = "Loader";
                        }
                        return [4 /*yield*/, this.lotScheduleQty()];
                    case 2:
                        _a.sent();
                        if (!(this.lstRecvIutItems != null && this.lstRecvIutItems.length > 0 && this.txtIUT != null && this.txtIUT != "")) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.postbackGridBind(this.lstRecvIutItems, "IUT ITEMS")];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 4:
                        if (!(this.lstRecvSendPoLines != null && this.lstRecvSendPoLines.length > 0)) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.postbackGridBind(this.lstRecvSendPoLines, "RECEIVE ITEMS")];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [3 /*break*/, 8];
                    case 7:
                        ex_2 = _a.sent();
                        this.clientErrorMsg(ex_2, "page_Load");
                        return [3 /*break*/, 8];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.bUnit_selectChanged = function (option, event) {
        try {
        }
        catch (ex) {
            this.clientErrorMsg(ex, "bUnit_selectChanged");
        }
    };
    PoNonPoReceiptsComponent.prototype.ddlCarrier_selectChanged = function (option, event) {
        return __awaiter(this, void 0, void 0, function () {
            var ddlCarriertxtDDSearch1;
            return __generator(this, function (_a) {
                try {
                    this.statusMsgs = [];
                    if (this.selecstedRow != null) {
                        if (this.lstRecvIutItems != null && this.lstRecvIutItems.length > 0) {
                            this.selecstedRow.CARRIER_ID = this.selectedDdlCarrier;
                            this.selecstedRow.PRVCARRIER_ID = this.selecstedRow.CARRIER_ID;
                        }
                        else if (this.selecstedRow.SCHED_COUNT <= 1) {
                            this.selecstedRow.CARRIER_ID = this.selectedDdlCarrier;
                            this.selecstedRow.PRVCARRIER_ID = this.selecstedRow.CARRIER_ID;
                        }
                        ddlCarriertxtDDSearch1 = document.getElementById("txtddlCarrier");
                        if (ddlCarriertxtDDSearch1 != null) {
                            ddlCarriertxtDDSearch1.focus();
                        }
                    }
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "ddlCarrier_selectChanged");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.ddlSchdCarrier_selectChanged = function (option, event) {
        try {
            this.statusMsgs = [];
            if (this.selecstedRow != null) {
                this.selecstedRow.CARRIER_ID = this.selectedSchdDdlCarrier;
                this.selecstedRow.PRVCARRIER_ID = this.selecstedRow.CARRIER_ID;
                var ddlCarriertxtDDSearch1 = document.getElementById("txtddlCarrier");
                if (ddlCarriertxtDDSearch1 != null) {
                    ddlCarriertxtDDSearch1.focus();
                }
            }
        }
        catch (ex) {
            this.clientErrorMsg(ex, "ddlCarrier_selectChanged");
        }
    };
    PoNonPoReceiptsComponent.prototype.txtPkgs_TextChanged = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                try {
                    this.statusMsgs = [];
                    setTimeout(function () {
                        if (_this.selecstedRow != null && _this.selecstedRow.SCHED_COUNT <= 1) {
                            _this.selecstedRow.NO_OF_BOXES = _this.txtPkgs;
                        }
                    }, 10);
                    // await this.changedata("NoOfBoxes", null);//this.selecstedRow
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "txtPkgs_TextChanged");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.txtSchdPkgs_TextChanged = function (event) {
        var _this = this;
        try {
            this.statusMsgs = [];
            setTimeout(function () {
                if (_this.selecstedRow != null && _this.selecstedRow.SCHED_COUNT <= 1) {
                    _this.selecstedRow.NO_OF_BOXES = _this.txtPkgs;
                }
            }, 10);
        }
        catch (ex) {
            this.clientErrorMsg(ex, "txtSchdPkgs_TextChanged");
        }
    };
    PoNonPoReceiptsComponent.prototype.txtTrk_TextChanged = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                try {
                    this.statusMsgs = [];
                    this.statusMsgs = [];
                    setTimeout(function () {
                        if (_this.selecstedRow != null && _this.selecstedRow.SCHED_COUNT <= 1) {
                            _this.selecstedRow.EXT_TRK_NO = _this.txtTrk;
                        }
                    }, 10);
                    // await this.changedata("ExtTrkno", null);//this.selecstedRow
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "txtTrk_TextChanged");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.txtSchdTrk_TextChanged = function (event) {
        var _this = this;
        try {
            this.statusMsgs = [];
            this.statusMsgs = [];
            setTimeout(function () {
                if (_this.selecstedRow != null) {
                    _this.selecstedRow.EXT_TRK_NO = _this.txtSchdExTrk;
                }
            }, 10);
            // await this.changedata("ExtTrkno", null);//this.selecstedRow
        }
        catch (ex) {
            this.clientErrorMsg(ex, "txtSchdTrk_TextChanged");
        }
    };
    PoNonPoReceiptsComponent.prototype.txtRecvQty_TextChanged = function (event, recvData) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var dateStr, ex_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.statusMsgs = [];
                        if (recvData.QTY != null && recvData.QTY != "") {
                            if (parseInt(recvData.QTY) > 0) {
                                recvData.RECEIVED_FLAG = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString();
                                recvData.LINE_QTY = recvData.QTY;
                            }
                        }
                        if (recvData != null && recvData.INV_ITEM_ID == this.selectedINVITEMID) {
                            this.txtPkgs = recvData.NO_OF_BOXES;
                        }
                        if (recvData.QTY != "" && parseInt(recvData.QTY) == 0 && this.hdnCnfmZroQty == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                            this.confirmationService.confirm({
                                message: "Zero Receipt Quantity entered, continue?",
                                accept: function () { return __awaiter(_this, void 0, void 0, function () {
                                    return __generator(this, function (_a) {
                                        this.spnrService.stop();
                                        return [2 /*return*/];
                                    });
                                }); },
                                reject: function () {
                                    setTimeout(function () {
                                        var itemtxtRecvQty = document.getElementById('txtRecvQty' + recvData.INV_ITEM_ID);
                                        if (itemtxtRecvQty != null) {
                                            itemtxtRecvQty.focus();
                                        }
                                    }, 1);
                                    recvData.QTY = "";
                                    _this.spnrService.stop();
                                    return;
                                }
                            });
                            this.spnrService.stop();
                        }
                        dateStr = new Date(new Date()).toLocaleString().replace(/[^A-Za-z 0-9 \.,\?""!@#\$%\^&\*\(\)-_=\+;:<>\/\\\|\}\{\[\]`~]*/g, '');
                        if (this.gSTime != "") {
                            this.gSTime = dateStr.replace(',', '');
                        }
                        return [4 /*yield*/, this.chkItemQty(recvData)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        ex_3 = _a.sent();
                        this.clientErrorMsg(ex_3, "txtRecvQty_TextChanged");
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.txtNoOfBoxUnFocus = function (recvData) {
        try {
            this.statusMsgs = [];
            if (recvData != null) {
                if (recvData.INV_ITEM_ID == this.selectedINVITEMID) {
                    this.txtPkgs = recvData.NO_OF_BOXES;
                }
            }
        }
        catch (ex) {
            this.clientErrorMsg(ex, "txtNoOfBoxUnFocus");
        }
    };
    PoNonPoReceiptsComponent.prototype.txtSchdNoOfBoxUnFocus = function (recvData) {
        try {
            this.statusMsgs = [];
            if (recvData != null) {
                if (recvData.SCHED_NBR == this.selectedSCHEDNBR) {
                    this.txtPkgs = recvData.NO_OF_BOXES;
                }
            }
        }
        catch (ex) {
            this.clientErrorMsg(ex, "txtSchdNoOfBoxUnFocus");
        }
    };
    PoNonPoReceiptsComponent.prototype.txtExtTrackNoUnFocus = function (recvData) {
        try {
            this.statusMsgs = [];
            if (recvData != null) {
                if (recvData.INV_ITEM_ID == this.selectedINVITEMID) {
                    this.txtTrk = recvData.EXT_TRK_NO;
                }
            }
        }
        catch (ex) {
            this.clientErrorMsg(ex, "txtExtTrackNoUnFocus");
        }
    };
    PoNonPoReceiptsComponent.prototype.txtSchExtTrackNoUnFocus = function (recvData) {
        try {
            this.statusMsgs = [];
            if (recvData != null) {
                if (recvData.SCHED_NBR == this.selectedSCHEDNBR) {
                    this.txtSchdExTrk = recvData.EXT_TRK_NO;
                }
            }
        }
        catch (ex) {
            this.clientErrorMsg(ex, "txtExtTrackNoUnFocus");
        }
    };
    PoNonPoReceiptsComponent.prototype.txtSchdRecvQty_TextChanged = function (event, recvData) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                try {
                    this.statusMsgs = [];
                    if (recvData.QTY != null && recvData.QTY != "") {
                        if (parseInt(recvData.QTY) > 0) {
                            recvData.RECEIVED_FLAG = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString();
                            recvData.QTY = recvData.QTY;
                            recvData.SCHDQTYCHANGFLAG = true;
                        }
                    }
                    if (recvData.QTY != "" && parseInt(recvData.QTY) == 0 && this.hdnCnfmZroQty == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                        this.confirmationService.confirm({
                            message: "Zero Receipt Quantity entered, continue?",
                            accept: function () { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    this.spnrService.stop();
                                    return [2 /*return*/];
                                });
                            }); },
                            reject: function () {
                                setTimeout(function () {
                                    var itemtxtRecvQty = document.getElementById('txtRecvQty' + recvData.SCHED_NBR);
                                    if (itemtxtRecvQty != null) {
                                        itemtxtRecvQty.focus();
                                    }
                                }, 1);
                                recvData.QTY = "";
                                _this.spnrService.stop();
                                return;
                            }
                        });
                        this.spnrService.stop();
                    }
                    // await this.chkItemQty(recvData);
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "txtSchdRecvQty_TextChanged");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.shipToId_selectChanged = function (option, event) {
    };
    PoNonPoReceiptsComponent.prototype.receiveAll = function () {
        return __awaiter(this, void 0, void 0, function () {
            var intScheduleCnt, strRecedQty, strSerialControlled, strLotControlled, i_1, i_2, _loop_1, this_1, i, ex_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 5, , 6]);
                        this.statusMsgs = [];
                        intScheduleCnt = 0;
                        strRecedQty = null;
                        strSerialControlled = null;
                        strLotControlled = null;
                        this.blnReceiveall = true;
                        if ((this.selectedDdlCarrier == 'Select Carrier' || this.selectedDdlCarrier == '' || this.selectedDdlCarrier == undefined) || (this.txtLading == '' || this.txtLading == null || this.txtLading == undefined)) {
                            this.statusMsgs = [];
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Carrier and Lading are mandatory" });
                            return [2 /*return*/];
                        }
                        this.lstCheckedBUnits = [];
                        this.startIndex = +sessionStorage.getItem("Recordsstartindex");
                        this.endIndex = +sessionStorage.getItem("RecordsEndindex");
                        if (this.lstRecvSendPoLines != null && this.lstRecvSendPoLines.length > 0) {
                            if (this.endIndex > this.lstRecvSendPoLines.length) {
                                this.endIndex = this.lstRecvSendPoLines.length;
                            }
                            for (i_1 = this.endIndex - 1; i_1 >= this.startIndex; i_1--) {
                                this.lstCheckedBUnits.push(this.lstRecvSendPoLines[i_1]);
                            }
                        }
                        else if (this.lstRecvIutItems != null && this.lstRecvIutItems.length > 0) {
                            if (this.endIndex > this.lstRecvIutItems.length) {
                                this.endIndex = this.lstRecvIutItems.length;
                            }
                            for (i_2 = this.endIndex - 1; i_2 >= this.startIndex; i_2--) {
                                this.lstCheckedBUnits.push(this.lstRecvIutItems[i_2]);
                            }
                        }
                        _loop_1 = function () {
                            var lnkItemId_1, strRecallFlag, dtRecallInfo, dr;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this_1.poNonPo_RbtnChange(this_1.lstCheckedBUnits[i], false)];
                                    case 1:
                                        _a.sent();
                                        this_1.txtSerchItemId = "";
                                        this_1.txtPkgs = "";
                                        this_1.blnSchedsExist = false;
                                        //}
                                        if (this_1.lstRecvIutItems == null || this_1.lstRecvIutItems == undefined) {
                                            lnkItemId_1 = this_1.lstCheckedBUnits[i].INV_ITEM_ID;
                                            intScheduleCnt = this_1.lstCheckedBUnits[i].SCHED_COUNT;
                                            strSerialControlled = this_1.lstCheckedBUnits[i].SERIAL_CONTROLLED;
                                            strLotControlled = this_1.lstCheckedBUnits[i].LOT_CONTROLLED;
                                            strRecallFlag = this_1.lstCheckedBUnits[i].RECAL_FLAG.toString();
                                            if (intScheduleCnt == 1 && (this_1.gStrLotSerial == AtParEnums_1.Enable_Lot_Serial_Tracking[AtParEnums_1.Enable_Lot_Serial_Tracking.None].toString() ||
                                                !(strSerialControlled == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() || strLotControlled == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()))) {
                                                this_1.blnFlag = true;
                                                //Recall Checking
                                                if (strRecallFlag == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                                    dtRecallInfo = this_1.lstReCallInfo;
                                                    if (dtRecallInfo != null && dtRecallInfo.length > 0) {
                                                        dr = dtRecallInfo.filter(function (x) { return x.ITEM_ID == lnkItemId_1 && (x.LOT_NO == "" || x.LOT_NO == null) && (x.SERIAL_NO == "" || x.SERIAL_NO == null); });
                                                        if (dr != null && dr.length > 0) {
                                                            this_1.blnFlag = false;
                                                        }
                                                    }
                                                }
                                            }
                                            else if (intScheduleCnt > 1) {
                                                this_1.lstCheckedBUnits[i].SCHDFLAG = true;
                                                this_1.blnSchedsExist = true;
                                            }
                                            else if (strSerialControlled == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() || strLotControlled == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                                this_1.blnSchedsExist = true;
                                                this_1.lstCheckedBUnits[i].SCHDFLAG = true;
                                            }
                                        }
                                        return [2 /*return*/];
                                }
                            });
                        };
                        this_1 = this;
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < this.lstCheckedBUnits.length)) return [3 /*break*/, 4];
                        return [5 /*yield**/, _loop_1()];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4:
                        if (this.blnSchedsExist) {
                            this.statusMsgs = [];
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Lines with schedules or lot serial have not been updated" });
                            //   this.selectedINVITEMID = "";
                        }
                        setTimeout(function () {
                            var serchItemId = document.getElementById('txtSerchItemId');
                            if (serchItemId != null) {
                                serchItemId.focus();
                            }
                        }, 1);
                        return [2 /*return*/];
                    case 5:
                        ex_4 = _a.sent();
                        this.clientErrorMsg(ex_4, "ReceiveAll");
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.resetAll = function () {
        try {
            this.statusMsgs = [];
            if (this.lstCheckedBUnits != null && this.lstCheckedBUnits.length > 0) {
                if (this.gStrDefaultInput) {
                }
            }
            var intScheduleCnt = 0;
            var strRecedQty = null;
            var strSerialControlled = null;
            var strLotControlled = null;
            var strPoQty = null;
            var txtNoOfBoxes = void 0;
            var blnFlag = false;
            var dtReceiveDetails = void 0;
            var strLot = void 0;
            var strSerial = void 0;
            var lnkLineNbr = void 0;
            var lbQtyPO = void 0;
            var lnkItemId = void 0;
            var txtQty = void 0; //.LINE_QTY;
            if (this.gStrDefaultInput) {
                if (this.lstRecvSendPoLines != null && this.lstRecvSendPoLines != undefined) {
                    if (this.lstRecvSendPoLines != null && this.lstRecvSendPoLines.length > 0) {
                        for (var i = 0; i < this.lstRecvSendPoLines.length; i++) {
                            this.blnFlag = false;
                            dtReceiveDetails = this.lstRecvSendPoLines;
                            strLot = this.lstRecvSendPoLines[i].LOT_CONTROLLED;
                            this.lotControl = this.lstRecvSendPoLines[i].LOT_CONTROLLED;
                            strSerial = this.lstRecvSendPoLines[i].SERIAL_CONTROLLED;
                            this.serialControl = this.lstRecvSendPoLines[i].SERIAL_CONTROLLED;
                            lnkLineNbr = this.lstRecvSendPoLines[i].LINE_NBR;
                            this.schedNbr = this.lstRecvSendPoLines[i].SCHED_NBR + "";
                            lbQtyPO = this.lstRecvSendPoLines[i].LINE_PO_QTY;
                            lnkItemId = this.lstRecvSendPoLines[i].INV_ITEM_ID;
                            txtQty = this.lstRecvSendPoLines[i].QTY; //.LINE_QTY;
                            strRecedQty = this.lstRecvSendPoLines[i].RECEIVED_QTY + "";
                            ;
                            strPoQty = this.lstRecvSendPoLines[i].QTY_PO + ""; //LINE_PO_QTY check once Qty
                            intScheduleCnt = this.lstRecvSendPoLines[i].SCHED_COUNT;
                            strSerialControlled = this.lstRecvSendPoLines[i].SERIAL_CONTROLLED;
                            strLotControlled = this.lstRecvSendPoLines[i].LOT_CONTROLLED;
                            if (lnkItemId != null) {
                                if (lnkItemId == "") {
                                    this.blnFlag = true;
                                }
                                //Do not default Lines which have schedules
                                if (strSerialControlled == null || strSerialControlled == "") {
                                    strSerialControlled = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                                }
                                if (strLotControlled == null && strLotControlled == "") {
                                    strLotControlled = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                                }
                                if (intScheduleCnt == 1 && (this.gStrLotSerial == AtParEnums_1.Enable_Lot_Serial_Tracking[AtParEnums_1.Enable_Lot_Serial_Tracking.None].toString() ||
                                    !(strSerialControlled == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() || strLotControlled == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()))) {
                                    this.blnFlag = true;
                                }
                                else if (intScheduleCnt > 1) {
                                    this.lstRecvSendPoLines[i].SCHDFLAG = true;
                                    this.blnSchedsExist = true;
                                }
                                else if (strSerialControlled == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() || strLotControlled == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                    this.blnSchedsExist = true;
                                    this.lstRecvSendPoLines[i].SCHDFLAG = true;
                                }
                            }
                            if (this.blnFlag) {
                                this.lstRecvSendPoLines[i].QTY = null;
                                this.lstRecvSendPoLines[i].RBFlAG = false;
                                if ((this.lstRecvSendPoLines[i].NO_OF_BOXES != null)) {
                                    this.lstRecvSendPoLines[i].NO_OF_BOXES = null;
                                    this.txtPkgs = "";
                                }
                                this.lstRecvSendPoLines[i].CARRIER_ID = "Select Carrier";
                                this.lstRecvSendPoLines[i].BILL_OF_LADING = "";
                                this.lstRecvSendPoLines[i].NO_OF_BOXES = null;
                                this.txtPkgs = "";
                                this.txtLading = "";
                            }
                        }
                    }
                }
                if (this.lstRecvIutItems != null && this.lstRecvIutItems != undefined) {
                    if (this.lstRecvIutItems != null && this.lstRecvIutItems.length > 0) {
                        for (var i = 0; i < this.lstRecvIutItems.length; i++) {
                            var lbInterUnit = this.lstRecvIutItems[i].INTERUNIT_LINE;
                            txtNoOfBoxes = parseInt(this.lstRecvIutItems[i].NO_OF_PKGS);
                            lnkItemId = this.lstRecvIutItems[i].ITEM_ID;
                            txtQty = parseInt(this.lstRecvIutItems[i].QTY);
                            if (this.lstRecvIutItems[i].ITEM_ID == lnkItemId && this.lstRecvIutItems[i].INTERUNIT_LINE == lbInterUnit) {
                                this.lstRecvIutItems[i].NO_OF_PKGS = "";
                                this.lstRecvIutItems[i].BILL_OF_LADING = "";
                                if (this.selectedDdlCarrier == 'Select Carrier') {
                                    this.lstRecvIutItems[i].CARRIER_ID = this.selectedDdlCarrier;
                                }
                                this.lstRecvIutItems[i].RBFlAG = false;
                                this.lstRecvIutItems[i].QTY = null;
                                this.lstRecvIutItems[i].CARRIER_ID = "Select Carrier";
                                this.lstRecvIutItems[i].BILL_OF_LADING = "";
                                this.lstRecvIutItems[i].NO_OF_PKGS = null;
                                this.txtPkgs = "";
                                this.txtLading = "";
                            }
                        }
                    }
                }
            }
            if (this.blnSchedsExist) {
                this.statusMsgs = [];
                this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Lines with schedules or lot serial have not been updated" });
                //this.selectedINVITEMID = "";
                return;
            }
        }
        catch (ex) {
            this.clientErrorMsg(ex, "ResetAll");
        }
    };
    PoNonPoReceiptsComponent.prototype.btnGet_Click = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ex_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 12, , 13]);
                        // this.selectedINVITEMID = "";
                        this.presentScreen = "PO";
                        this.page = true;
                        this.purchase = false;
                        this.plus = true;
                        this.minus = false;
                        this.statusMsgs = [];
                        this.selectedRecvId = "";
                        if ((this.selectedBUnits == "Select BusinessUnit" || this.selectedBUnits == "")) {
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please Select Business Unit / Company" });
                            return [2 /*return*/];
                        }
                        if ((this.selectedBUnits == "Select BusinessUnit" || this.selectedBUnits == "") && this.hdnSearchWithOutBU == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString()) {
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please Select Business Unit / Company" });
                            return [2 /*return*/];
                        }
                        if (this.txtPONumber.trim() == "" && this.txtIUT.trim() == "") {
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please Enter PO or IUT Number" });
                            this.tbl = false;
                            this.lstRecvIutItems = [];
                            this.lstRecvSendPoLines = [];
                            return [2 /*return*/];
                        }
                        else if (this.txtPONumber != "" && this.txtIUT != "") {
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please Enter any one PO or IUT Number" });
                            return [2 /*return*/];
                        }
                        if (this.hdnReqShiptoId == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() && this.txtPONumber.trim() != "") {
                            if (this.ddlShipToId != undefined && this.ddlShipToId != null && this.blnShipToId == true) {
                                if (this.selectedShipToId == "Select ShipToID" || this.selectedShipToId == "") {
                                    this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "ShipTo ID is mandatory to download the PO" });
                                    return [2 /*return*/];
                                }
                            }
                            if (this.txtShipId != null && this.blnShipToId == false) {
                                if (this.txtShipId == "") {
                                    this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "ShipTo ID is mandatory to download the PO" });
                                    return [2 /*return*/];
                                }
                            }
                        }
                        if (!(this.lstRecvSendPoLines != null && this.lstRecvSendPoLines.length > 0)) return [3 /*break*/, 4];
                        this.btnPntrHeaderDisable = false;
                        this.btnPntrDetailsDisable = true;
                        if (!(this.hdnBunit == this.selectedBUnits && this.txtPONumber != "" && this.hdnPO == this.txtPONumber.toUpperCase())) return [3 /*break*/, 1];
                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "This PO is in Download status" });
                        return [2 /*return*/];
                    case 1:
                        this.selectedINVITEMID = "";
                        return [4 /*yield*/, this.confirmData("Get")];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [3 /*break*/, 11];
                    case 4:
                        if (!(this.lstRecvIutItems != null && this.lstRecvIutItems.length > 0)) return [3 /*break*/, 8];
                        this.btnPntrHeaderDisable = true;
                        this.btnPntrDetailsDisable = true;
                        if (!(this.hdnBunit == this.selectedBUnits && this.txtIUT != "" && this.hdnIUT == this.txtIUT.toUpperCase())) return [3 /*break*/, 5];
                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "This IUT is in Download status" });
                        return [2 /*return*/];
                    case 5:
                        this.selectedINVITEMID = "";
                        return [4 /*yield*/, this.confirmIUT("Get")];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7: return [3 /*break*/, 11];
                    case 8:
                        this.txtTrk = "";
                        this.selectedINVITEMID = "";
                        return [4 /*yield*/, this.bindDataGrid()];
                    case 9:
                        _a.sent();
                        return [4 /*yield*/, this.populateCarrierDropDown(this.selectedDdlCarrier)];
                    case 10:
                        _a.sent();
                        this.spnrService.stop();
                        _a.label = 11;
                    case 11: return [3 /*break*/, 13];
                    case 12:
                        ex_5 = _a.sent();
                        this.clientErrorMsg(ex_5, "btnGet_Click");
                        return [3 /*break*/, 13];
                    case 13: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.btnSend_Click = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var _loop_2, this_2, i, state_1, drIUTCount, sTime, eTime, transactionId, strIUT, _a, drowlotitem, i, drSerialLotRows, i_3, drNonStockCount, drStockCount, transactionId, transCode, tempPoId, sTime, dateStr, _b, ex_6;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _c.trys.push([0, 9, , 10]);
                        this.statusMsgs = [];
                        this.statusCode = -1;
                        if (!(this.lstRecvIutItems != null && this.lstRecvIutItems.length > 0)) return [3 /*break*/, 6];
                        _loop_2 = function (i) {
                            var checkQtyValue;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        this_2.txtNoOfBoxes = this_2.lstRecvIutItems[i].NO_OF_PKGS;
                                        this_2.lnkItemId = this_2.lstRecvIutItems[i].ITEM_ID;
                                        this_2.txtQty = this_2.lstRecvIutItems[i].QTY;
                                        if (!(this_2.txtQty != null && this_2.txtQty != "" && this_2.txtQty != undefined)) return [3 /*break*/, 2];
                                        return [4 /*yield*/, this_2.chkItemQty(this_2.lstRecvIutItems[i])];
                                    case 1:
                                        checkQtyValue = _a.sent();
                                        if (checkQtyValue) {
                                            setTimeout(function () {
                                                var itemtxtRecvQty = document.getElementById('txtRecvQty' + _this.lstRecvIutItems[i].ITEM_ID);
                                                if (itemtxtRecvQty != null) {
                                                    itemtxtRecvQty.focus();
                                                }
                                            }, 2);
                                            return [2 /*return*/, { value: void 0 }];
                                        }
                                        _a.label = 2;
                                    case 2:
                                        if (this_2.lstRecvIutItems[i].CARRIER_ID != null && this_2.lstRecvIutItems[i].CARRIER_ID != "Select Carrier" &&
                                            this_2.lstRecvIutItems[i].CARRIER_ID != "" && this_2.lstRecvIutItems[i].CARRIER_ID != undefined) {
                                            this_2.ddlGridCarrier = this_2.lstRecvIutItems[i].CARRIER_ID;
                                        }
                                        if (this_2.lstRecvIutItems[i].BILL_OF_LADING != null &&
                                            this_2.lstRecvIutItems[i].BILL_OF_LADING != "" && this_2.lstRecvIutItems[i].BILL_OF_LADING != undefined) {
                                            this_2.txtLadg = this_2.lstRecvIutItems[i].BILL_OF_LADING;
                                        }
                                        if (this_2.txtQty != "" && (this_2.txtLadg == "" || this_2.ddlGridCarrier == "" || this_2.ddlGridCarrier == "Select Carrier")) {
                                            this_2.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Carrier and Lading are mandatory" });
                                            setTimeout(function () {
                                                var itemtxtRecvQty = document.getElementById('txtLading');
                                                if (itemtxtRecvQty != null) {
                                                    itemtxtRecvQty.focus();
                                                }
                                            }, 1);
                                            return [2 /*return*/, { value: void 0 }];
                                        }
                                        return [2 /*return*/];
                                }
                            });
                        };
                        this_2 = this;
                        i = 0;
                        _c.label = 1;
                    case 1:
                        if (!(i < this.lstRecvIutItems.length)) return [3 /*break*/, 4];
                        return [5 /*yield**/, _loop_2(i)];
                    case 2:
                        state_1 = _c.sent();
                        if (typeof state_1 === "object")
                            return [2 /*return*/, state_1.value];
                        _c.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4:
                        drIUTCount = linq_es5_1.asEnumerable(this.lstRecvIutItems).Where(function (x) { return x.QTY != ""; }).ToArray();
                        if (drIUTCount.length == 0) {
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please enter Receive quantity" });
                            return [2 /*return*/];
                        }
                        sTime = new Date();
                        sTime = new Date(this.gSTime);
                        eTime = new Date();
                        transactionId = this.gIUTTransactionID;
                        strIUT = this.lstRecvIutItems[0].INTERUNIT_ID;
                        _a = this;
                        return [4 /*yield*/, this.sendIUTOrderToServer(transactionId, this.lstRecvIutItems, sTime, eTime)];
                    case 5:
                        _a.statusCode = _c.sent();
                        if (this.statusCode == AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK) {
                            this.statusMsgs = [];
                            this.statusMsgs.push({ severity: 'success', summary: AtParConstants_1.AtParConstants.GrowlTitle_Success, detail: "IUT: " + strIUT + " received successfully." });
                            this.clearData();
                            this.clearSentDetails();
                            this.minus = false;
                            this.plus = true;
                            this.tbl = false;
                            this.blnGrdRecvIutItems = false;
                        }
                        else if (this.statusCode != AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK) {
                            this.statusMsgs = [];
                            this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: "Failed to receive the IUT:" + strIUT });
                        }
                        return [3 /*break*/, 8];
                    case 6:
                        if (!(this.lstRecvSendPoLines != null && this.lstRecvSendPoLines.length > 0)) return [3 /*break*/, 8];
                        drowlotitem = linq_es5_1.asEnumerable(this.lstRecvSendPoLines).Where(function (x) { return x.QTY != null && (x.LOT_CONTROLLED == "Y" || x.SERIAL_CONTROLLED == "Y"); }).ToArray();
                        for (i = 0; i < this.lstRecvSendPoLines.length; i++) {
                            if (this.lstRecvSendPoLines[i].NO_OF_BOXES != null) {
                                this.txtNoOfBoxes = this.lstRecvSendPoLines[i].NO_OF_BOXES.toString();
                            }
                            this.lnkItemId = this.lstRecvSendPoLines[i].INV_ITEM_ID;
                            if (this.lstRecvSendPoLines[i].QTY != null) {
                                this.txtQty = this.lstRecvSendPoLines[i].QTY.toString();
                            }
                            if (this.lstRecvSendPoLines[i].CARRIER_ID != null && this.lstRecvSendPoLines[i].CARRIER_ID != "Select Carrier" &&
                                this.lstRecvSendPoLines[i].CARRIER_ID != "" && this.lstRecvSendPoLines[i].CARRIER_ID != undefined) {
                                this.ddlGridCarrier = this.lstRecvSendPoLines[i].CARRIER_ID;
                            }
                            if (this.lstRecvSendPoLines[i].BILL_OF_LADING != null &&
                                this.lstRecvSendPoLines[i].BILL_OF_LADING != "" && this.lstRecvSendPoLines[i].BILL_OF_LADING != undefined) {
                                this.txtLadg = this.lstRecvSendPoLines[i].BILL_OF_LADING;
                            }
                            if (this.lstRecvSendPoLines[i].LINE_NBR != null) {
                                this.lnkLineNbr = this.lstRecvSendPoLines[i].LINE_NBR.toString();
                            }
                            if (this.gStrLotSerial == AtParEnums_1.Enable_Lot_Serial_Tracking[AtParEnums_1.Enable_Lot_Serial_Tracking.MMIS].toString() &&
                                (drowlotitem.length > 0)) {
                                if (this.lstMainItemLotSerial != null && this.lstMainItemLotSerial.length > 0) {
                                    drSerialLotRows = linq_es5_1.asEnumerable(this.lstMainItemLotSerial).Where(function (x) { return ((x.SERIAL_ID != null && x.SERIAL_ID != "") || (x.LOT_ID != null && x.LOT_ID != "")) && ((x.QTY != null) && parseInt(x.QTY) > 0) && x.DELETE_FLAG == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString(); }).ToArray();
                                    if (drSerialLotRows.length == 0) {
                                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please capture Lot and/or Serial information before sending to Server" });
                                        return [2 /*return*/];
                                    }
                                }
                                else {
                                    this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please capture Lot and/or Serial information before sending to Server" });
                                    return [2 /*return*/];
                                }
                            }
                            if (this.txtQty != "" && (this.txtLadg == "" || this.ddlGridCarrier == "" || this.ddlGridCarrier == "Select Carrier") &&
                                (!(this.lstRecvSendPoLines[i].SCHED_COUNT != null && this.lstRecvSendPoLines[i].SCHED_COUNT >= 1))) {
                                this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Carrier and Lading are mandatory" });
                                setTimeout(function () {
                                    var itemtxtRecvQty = document.getElementById('txtLading');
                                    if (itemtxtRecvQty != null) {
                                        itemtxtRecvQty.focus();
                                    }
                                }, 1);
                                return [2 /*return*/];
                            }
                            else if (this.gInvoiceMthdCode == this.ERS_TYPE && this.txtInvoice == "") {
                                this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please enter the Invoice#" });
                                setTimeout(function () {
                                    var itemtxtRecvQty = document.getElementById('txtInvoice');
                                    if (itemtxtRecvQty != null) {
                                        itemtxtRecvQty.focus();
                                    }
                                }, 1);
                                return [2 /*return*/];
                            }
                            else {
                                for (i_3 = 0; i_3 < this.lstRecvSendPoLines.length; i_3++) {
                                    if (this.lstRecvSendPoLines[i_3].LINE_NBR == parseInt(this.lnkLineNbr)) {
                                        if (this.lstRecvSendPoLines[i_3].SCHED_COUNT != null && this.lstRecvSendPoLines[i_3].SCHED_COUNT == 1) {
                                            if (this.txtNoOfBoxes != null && this.txtNoOfBoxes != "") {
                                                this.lstRecvSendPoLines[i_3].NO_OF_BOXES = parseInt(this.txtNoOfBoxes);
                                            }
                                            else {
                                                if (this.lstRecvSendPoLines[i_3].NO_OF_BOXES != null) {
                                                }
                                                else {
                                                    this.lstRecvSendPoLines[i_3].NO_OF_BOXES = 1;
                                                }
                                            }
                                            this.lstRecvSendPoLines[i_3].BILL_OF_LADING = this.txtLadg;
                                            if (this.lstRecvSendPoLines[i_3].QTY == null) {
                                                this.lstRecvSendPoLines[i_3].RECEIVED_FLAG = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        drNonStockCount = linq_es5_1.asEnumerable(this.lstRecvSendPoLines).Where(function (x) { return x.QTY != null && x.RECEIVED_FLAG == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() && x.INVENTORY_ITEM == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString(); }).ToArray();
                        this.nonStockCount = drNonStockCount.length;
                        drStockCount = linq_es5_1.asEnumerable(this.lstRecvSendPoLines).Where(function (x) { return x.QTY != null && x.RECEIVED_FLAG == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() && x.INVENTORY_ITEM == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString(); }).ToArray();
                        this.stockCount = drStockCount.length;
                        if (this.nonStockCount == 0 && this.stockCount == 0) {
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please enter Receive quantity" });
                            return [2 /*return*/];
                        }
                        transactionId = this.lstRecvSendPoHdrs[0].TRANSACTION_ID;
                        transCode = this.lstRecvSendPoHdrs[0].TRANSACTION_CODE;
                        tempPoId = this.lstRecvSendPoHdrs[0].PO_ID;
                        sTime = new Date();
                        dateStr = new Date(new Date()).toLocaleString().replace(/[^A-Za-z 0-9 \.,\?""!@#\$%\^&\*\(\)-_=\+;:<>\/\\\|\}\{\[\]`~]*/g, '');
                        if (this.gSTime != "") {
                            this.gSTime = dateStr.replace(',', '');
                        }
                        // PO Qty Recv End Time
                        this.spnrService.start();
                        _b = this;
                        return [4 /*yield*/, this.sendToServer(transactionId, transCode, tempPoId, this.gSTime, dateStr.replace(',', ''))];
                    case 7:
                        _b.statusCode = _c.sent();
                        this.spnrService.stop();
                        if (this.statusCode == AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK) {
                            this.statusMsgs = [];
                            this.statusMsgs.push({ severity: 'success', summary: AtParConstants_1.AtParConstants.GrowlTitle_Success, detail: "PO: " + tempPoId + " received successfully." });
                            this.clearData();
                            this.clearSentDetails();
                            this.plus = true;
                            this.minus = false;
                            this.tbl = false;
                            this.blnGrdRecvPoItems = false;
                        }
                        _c.label = 8;
                    case 8: return [3 /*break*/, 10];
                    case 9:
                        ex_6 = _c.sent();
                        this.clientErrorMsg(ex_6, "btnSend_Click");
                        return [3 /*break*/, 10];
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.btnPrntHed_Click = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var blnstockhdr, blnNonstkhdr, blnNonStockHed, blnStockHed, blnmsgdisplayed, intNoOfBoxses, drowRecStatus, drowRecNonStockStatus, drowRecStockStatus, drowPrnterDet, drowPrnterDet, _a, _b, _c, _d, ex_7;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        _e.trys.push([0, 28, , 29]);
                        this.statusMsgs = [];
                        blnstockhdr = false;
                        blnNonstkhdr = false;
                        blnNonStockHed = false;
                        blnStockHed = false;
                        blnmsgdisplayed = false;
                        intNoOfBoxses = 0;
                        drowRecStatus = linq_es5_1.asEnumerable(this.lstRecvSendPoLines).Where(function (x) { return x.QTY != null && x.RECEIVED_FLAG == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString(); }).ToArray();
                        drowRecNonStockStatus = linq_es5_1.asEnumerable(this.lstRecvSendPoLines).Where(function (x) { return x.QTY != null && x.RECEIVED_FLAG == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() && x.INVENTORY_ITEM == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString(); }).ToArray();
                        drowRecStockStatus = linq_es5_1.asEnumerable(this.lstRecvSendPoLines).Where(function (x) { return x.QTY != null && x.RECEIVED_FLAG == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() && x.INVENTORY_ITEM == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString(); }).ToArray();
                        if (!(this.gStrRecDelprintoption == AtParEnums_1.Shiping_Label_PrinterType.Both_MobilePrinter_StationaryPrinter.toString() ||
                            this.gStrRecDelprintoption == AtParEnums_1.Shiping_Label_PrinterType.HeaderLbl_MobilePrinter.toString())) return [3 /*break*/, 20];
                        if (drowRecStatus.length == 0) {
                            this.statusMsgs = [];
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "PO is in download status, please receive it to print the labels." });
                            return [2 /*return*/];
                        }
                        //if (poDS.Tables.Count > 0) {
                        if (this.txtPkgs != "") {
                            intNoOfBoxses = parseInt(this.txtPkgs);
                        }
                        else {
                            intNoOfBoxses = 1;
                        }
                        if (!(this.lstSetUpProPrinters != null && this.lstSetUpProPrinters.length > 0)) return [3 /*break*/, 19];
                        if (!(this.lstSetUpProPrinters.length > 0)) return [3 /*break*/, 18];
                        if (!(this.gStrSelPrinter == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString())) return [3 /*break*/, 8];
                        drowPrnterDet = linq_es5_1.asEnumerable(this.lstSetUpProPrinters).Where(function (x) { return x.LABEL_DESCRIPTION == "NonStock PO Header"; }).ToArray();
                        if (!(drowRecNonStockStatus != null && drowRecNonStockStatus.length > 0)) return [3 /*break*/, 4];
                        if (!(drowPrnterDet != null && drowPrnterDet.length > 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.showModalPopup(drowPrnterDet)];
                    case 1:
                        _e.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Printer Not Configured for the Functionality NonStock PO Header" });
                        blnmsgdisplayed = true;
                        _e.label = 3;
                    case 3: return [3 /*break*/, 7];
                    case 4:
                        if (!(drowRecStockStatus != null && drowRecStockStatus.length > 0)) return [3 /*break*/, 7];
                        if (!(this.gPrintStockHeader != null)) return [3 /*break*/, 7];
                        if (!(this.gPrintStockHeader == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString())) return [3 /*break*/, 7];
                        drowPrnterDet = linq_es5_1.asEnumerable(this.lstSetUpProPrinters).Where(function (x) { return x.LABEL_DESCRIPTION == "Stock PO Header"; }).ToArray(); //LABEL_DESCRIPTION='Stock PO Header'
                        if (!(drowPrnterDet != null && drowPrnterDet.length > 0)) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.showModalPopup(drowPrnterDet)];
                    case 5:
                        _e.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Printer Not Configured for the Functionality Stock PO Header" });
                        blnmsgdisplayed = true;
                        _e.label = 7;
                    case 7: return [3 /*break*/, 17];
                    case 8:
                        if (!(this.gStrDefPrinter != "")) return [3 /*break*/, 16];
                        drowPrnterDet = linq_es5_1.asEnumerable(this.lstSetUpProPrinters).Where(function (x) { return x.FRIENDLY_NAME == _this.gStrDefPrinter; }).ToArray();
                        if (!(drowPrnterDet.length > 0)) return [3 /*break*/, 15];
                        if (!(drowRecNonStockStatus != null && drowRecNonStockStatus.length > 0)) return [3 /*break*/, 11];
                        if (!(drowPrnterDet[0].LABEL_DESCRIPTION == "NonStock PO Header")) return [3 /*break*/, 10];
                        blnNonStockHed = true;
                        _a = this;
                        return [4 /*yield*/, this.print_NonStockLabel(intNoOfBoxses, this.lstSetUpProPrinters, this.gStrDefPrinter)];
                    case 9:
                        _a.statusCode = _e.sent();
                        if (this.statusCode != AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK) {
                            this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: "Failed to Print Non Stock Label " });
                            blnmsgdisplayed = true;
                        }
                        return [3 /*break*/, 11];
                    case 10:
                        blnmsgdisplayed = true;
                        _e.label = 11;
                    case 11:
                        if (!(drowRecStockStatus != null && drowRecStockStatus.length > 0)) return [3 /*break*/, 15];
                        if (!(drowPrnterDet[0].LABEL_DESCRIPTION == "Stock PO Header")) return [3 /*break*/, 14];
                        blnStockHed = true;
                        if (!(this.gPrintStockHeader != null)) return [3 /*break*/, 13];
                        if (!(this.gPrintStockHeader == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString())) return [3 /*break*/, 13];
                        _b = this;
                        return [4 /*yield*/, this.print_StockLabel(intNoOfBoxses, this.lstSetUpProPrinters, this.gStrDefPrinter)];
                    case 12:
                        _b.statusCode = _e.sent();
                        if (this.statusCode != AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK) {
                            this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: "Failed to Print Stock Label " });
                            blnmsgdisplayed = true;
                        }
                        _e.label = 13;
                    case 13: return [3 /*break*/, 15];
                    case 14:
                        blnmsgdisplayed = true;
                        _e.label = 15;
                    case 15: return [3 /*break*/, 17];
                    case 16:
                        blnmsgdisplayed = true;
                        _e.label = 17;
                    case 17: return [3 /*break*/, 19];
                    case 18:
                        blnmsgdisplayed = true;
                        _e.label = 19;
                    case 19:
                        if (drowRecNonStockStatus.length == 0) {
                            if (!(blnmsgdisplayed)) {
                                this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "No NonStock Items to Print" });
                            }
                        }
                        else if (drowRecStockStatus.length == 0) {
                            if (!(blnmsgdisplayed)) {
                                this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "No Stock Items to Print" });
                            }
                        }
                        else {
                            // lblErrorCode.Text = string.Empty;
                        }
                        _e.label = 20;
                    case 20:
                        if (!(this.gStrRecDelprintoption == AtParEnums_1.Shiping_Label_PrinterType.DeliveryTic_StationaryPrinter.toString() ||
                            this.gStrRecDelprintoption == AtParEnums_1.Shiping_Label_PrinterType.Both_MobilePrinter_StationaryPrinter.toString())) return [3 /*break*/, 27];
                        _c = this;
                        return [4 /*yield*/, this.prepareStationaryPrinting(AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString(), blnNonstkhdr)];
                    case 21:
                        _c.statusCode = _e.sent();
                        if (this.statusCode == AtParStatusCodes_1.AtparStatusCodes.ATPAR_E_NOPRINTADDRESS) {
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please provide printer address for stationary printer" });
                            return [2 /*return*/];
                        }
                        else if (this.statusCode == AtParStatusCodes_1.AtparStatusCodes.ATPAR_E_NOTVALIDPRINTER) {
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please provide printer address for stationary printerPlease provide valid printer address for stationary printer" });
                            return [2 /*return*/];
                        }
                        else if (this.statusCode != AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK) {
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Failed to Print Non Stock Stationary Print" });
                            return [2 /*return*/];
                        }
                        else if (this.statusCode == AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK) {
                            blnNonstkhdr = this.blnPrinted;
                        }
                        if (!(this.gPrintStockHeader != null)) return [3 /*break*/, 25];
                        if (!(this.gPrintStockHeader == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString())) return [3 /*break*/, 23];
                        _d = this;
                        return [4 /*yield*/, this.prepareStationaryPrinting(AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString(), blnstockhdr)];
                    case 22:
                        _d.statusCode = _e.sent();
                        if (this.statusCode == AtParStatusCodes_1.AtparStatusCodes.ATPAR_E_NOPRINTADDRESS) {
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please provide printer address for stationary printer" });
                            return [2 /*return*/];
                        }
                        else if (this.statusCode == AtParStatusCodes_1.AtparStatusCodes.ATPAR_E_NOTVALIDPRINTER) {
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please provide valid printer address for stationary printer" });
                            return [2 /*return*/];
                        }
                        else if (this.statusCode != AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK) {
                            this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: "Failed to Print Stock Stationary Print" });
                            return [2 /*return*/];
                        }
                        return [3 /*break*/, 24];
                    case 23:
                        blnstockhdr = true;
                        _e.label = 24;
                    case 24: return [3 /*break*/, 26];
                    case 25:
                        blnstockhdr = true;
                        _e.label = 26;
                    case 26:
                        if (blnstockhdr == false && blnNonstkhdr == false) {
                            this.statusMsgs = [];
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "PO in Downloaded status,please receive it to print" });
                            return [2 /*return*/];
                        }
                        if (blnNonstkhdr == false) {
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "No NonStock Items to Print" });
                            return [2 /*return*/];
                        }
                        else if (this.gPrintStockHeader == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() && blnstockhdr == false) {
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "No Stock Items to Print" });
                            return [2 /*return*/];
                        }
                        else {
                            // lblErrorCode.Text = string.Empty;
                        }
                        _e.label = 27;
                    case 27: return [3 /*break*/, 29];
                    case 28:
                        ex_7 = _e.sent();
                        this.clientErrorMsg(ex_7, "btnPrntHed_Click");
                        return [3 /*break*/, 29];
                    case 29: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.btnPrntDet_Click = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var intNoOfBoxses, itemType_1, blnlblPrinted, drowPrnterDet, drowPrnterDet, _a, ex_8;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 16, , 17]);
                        this.statusMsgs = [];
                        this.statusCode = -1;
                        intNoOfBoxses = 1;
                        itemType_1 = null;
                        blnlblPrinted = false;
                        if (!(this.lstSetUpProPrinters != null)) return [3 /*break*/, 14];
                        if (!(this.lstSetUpProPrinters.length > 0)) return [3 /*break*/, 12];
                        if (!(this.lstRecvSendPoLines.length > 0)) return [3 /*break*/, 10];
                        if (this.txtPkgs != "") {
                            intNoOfBoxses = parseInt(this.txtPkgs);
                        }
                        else {
                            intNoOfBoxses = 1;
                        }
                        if (this.hdnItemType == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                            itemType_1 = "Stock Item";
                        }
                        else {
                            itemType_1 = "NonStock Item";
                        }
                        if (!(this.gStrSelPrinter == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString())) return [3 /*break*/, 4];
                        drowPrnterDet = linq_es5_1.asEnumerable(this.lstSetUpProPrinters).Where(function (x) { return x.LABEL_DESCRIPTION == itemType_1; }).ToArray();
                        if (!(drowPrnterDet.length > 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.showModalPopup(drowPrnterDet)];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                    case 2:
                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Printer Not Configured for the Functionality " + itemType_1 });
                        _b.label = 3;
                    case 3: return [3 /*break*/, 9];
                    case 4:
                        if (!(this.gStrDefPrinter != "")) return [3 /*break*/, 8];
                        drowPrnterDet = linq_es5_1.asEnumerable(this.lstSetUpProPrinters).Where(function (x) { return x.FRIENDLY_NAME == _this.gStrDefPrinter; }).ToArray();
                        if (!(drowPrnterDet.length > 0)) return [3 /*break*/, 7];
                        if (!(drowPrnterDet[0].LABEL_DESCRIPTION == itemType_1)) return [3 /*break*/, 6];
                        blnlblPrinted = true;
                        _a = this;
                        return [4 /*yield*/, this.printReceiveItemLabel(intNoOfBoxses, this.lstSetUpProPrinters, this.gStrDefPrinter)];
                    case 5:
                        _a.statusCode = _b.sent();
                        if (this.statusCode != AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK) {
                            this.statusMsgs.push({
                                severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Failed to Print Non Stock Label  "
                            });
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Printer Not Configured for the Functionality " + itemType_1 });
                        _b.label = 7;
                    case 7: return [3 /*break*/, 9];
                    case 8:
                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please setup Default Printer settings for the labels." });
                        _b.label = 9;
                    case 9: return [3 /*break*/, 11];
                    case 10:
                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "No Items data to Print" });
                        _b.label = 11;
                    case 11: return [3 /*break*/, 13];
                    case 12:
                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please Configure Label Printers before Printing" });
                        _b.label = 13;
                    case 13: return [3 /*break*/, 15];
                    case 14:
                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please Configure Label Printers before Printing  " });
                        _b.label = 15;
                    case 15: return [3 /*break*/, 17];
                    case 16:
                        ex_8 = _b.sent();
                        this.clientErrorMsg(ex_8, "btnPrntDet_Click");
                        return [3 /*break*/, 17];
                    case 17: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.btnDetailPrint_Click = function () {
        return __awaiter(this, void 0, void 0, function () {
            var printerName, labeldesc, statusCode, intNoOfBoxses, i, _a, _b, _c, _d, ex_9;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        _e.trys.push([0, 12, , 13]);
                        this.statusMsgs = [];
                        this.spnrService.start();
                        printerName = "";
                        labeldesc = "";
                        statusCode = "";
                        intNoOfBoxses = 0;
                        if (this.txtPkgs != "" && this.txtPkgs != undefined) {
                            intNoOfBoxses = parseInt(this.txtPkgs);
                        }
                        else {
                            intNoOfBoxses = 1;
                        }
                        i = 0;
                        _e.label = 1;
                    case 1:
                        if (!(i < this.lstPrintersDetails.length)) return [3 /*break*/, 11];
                        printerName = this.lstPrintersDetails[i].FRIENDLY_NAME;
                        labeldesc = this.lstPrintersDetails[i].LABEL_DESCRIPTION;
                        if (!(labeldesc == "NonStock PO Header")) return [3 /*break*/, 3];
                        _a = this;
                        return [4 /*yield*/, this.print_NonStockLabel(intNoOfBoxses, this.lstPrintersDetails, this.gStrDefPrinter)];
                    case 2:
                        _a.statusCode = _e.sent();
                        return [3 /*break*/, 10];
                    case 3:
                        if (!(labeldesc == "Stock PO Header")) return [3 /*break*/, 5];
                        _b = this;
                        return [4 /*yield*/, this.print_StockLabel(intNoOfBoxses, this.lstPrintersDetails, printerName)];
                    case 4:
                        _b.statusCode = _e.sent();
                        return [3 /*break*/, 10];
                    case 5:
                        if (!(labeldesc == "Stock Item" || labeldesc == "NonStock Item")) return [3 /*break*/, 7];
                        _c = this;
                        return [4 /*yield*/, this.printReceiveItemLabel(intNoOfBoxses, this.lstPrintersDetails, printerName)];
                    case 6:
                        _c.statusCode = _e.sent();
                        return [3 /*break*/, 10];
                    case 7:
                        if (!(labeldesc == "NonPO")) return [3 /*break*/, 10];
                        _d = this;
                        return [4 /*yield*/, this.printNonPONiceLabel(intNoOfBoxses, this.lstPrintersDetails, printerName)];
                    case 8:
                        _d.statusCode = _e.sent();
                        if (!(this.statusCode == AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK)) return [3 /*break*/, 10];
                        this.printtbl = false;
                        if (!(this.presentScreen == "NONPO")) return [3 /*break*/, 10];
                        return [4 /*yield*/, this.getinitialvalues()];
                    case 9:
                        _e.sent();
                        this.nonPO = true;
                        _e.label = 10;
                    case 10:
                        i++;
                        return [3 /*break*/, 1];
                    case 11:
                        this.spnrService.stop();
                        return [3 /*break*/, 13];
                    case 12:
                        ex_9 = _e.sent();
                        this.clientErrorMsg(ex_9, "btnDetailPrint_Click");
                        return [3 /*break*/, 13];
                    case 13: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.grdRbPrinterChanged = function (printerRowData, event) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "grdRbPrinterChanged");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.grdRdbtnChanged = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            var selectRow, rbtn, ex_10;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        this.statusMsgs = [];
                        this.statusCode = -1;
                        //  let parameterLst = this.lstRecvSendPoLines[0];
                        if (this.lstRecvSendPoLines != null && this.lstRecvSendPoLines.length > 0) {
                            if (event == null) {
                                if (this.lstRecvSendPoLines.length == 1) {
                                    this.selecstedRow = this.lstRecvSendPoLines[0];
                                }
                                else {
                                    return [2 /*return*/];
                                }
                            }
                            else {
                                this.selecstedRow = this.lstRecvSendPoLines.filter(function (x) { return x.INV_ITEM_ID == event; })[0];
                            }
                        }
                        else if (this.lstRecvIutItems != null && this.lstRecvIutItems.length > 0) {
                            if (event == null) {
                                if (this.lstRecvIutItems.length == 1) {
                                    this.selecstedRow = this.lstRecvIutItems[0];
                                }
                                else {
                                    return [2 /*return*/];
                                }
                            }
                            else {
                                selectRow = this.lstRecvIutItems.filter(function (x) { return x.ITEM_ID == event; });
                                if (selectRow != null && selectRow.length > 0) {
                                    this.selecstedRow = selectRow[0];
                                }
                            }
                        }
                        this.txtPkgs = "1";
                        rbtn = "";
                        if (this.schPO == false) {
                            rbtn = "ASP.mt_recv_po_or_nonpo_receipts_aspx";
                        }
                        else {
                            rbtn = "ASP.mt_recv_Schedule.aspx";
                        }
                        this.spnrService.start();
                        return [4 /*yield*/, this.poNonPo_RbtnChange(this.selecstedRow, false)];
                    case 1:
                        _a.sent();
                        this.spnrService.stop();
                        this.spnrService.start();
                        if (!(this.selecstedRow != null && this.selecstedRow != undefined)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.updateDs(rbtn, this.selecstedRow)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        this.spnrService.stop();
                        return [3 /*break*/, 5];
                    case 4:
                        ex_10 = _a.sent();
                        this.spnrService.stop();
                        this.clientErrorMsg(ex_10, "grdRdbtnChanged");
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.grdDdlCarrier_Changed = function (nonporec, event) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    this.statusMsgs = [];
                    if (nonporec.RBFlAG) {
                        if (nonporec.CARRIER_ID == 'Select Carrier' || nonporec.CARRIER_ID == "") {
                            if (nonporec.PRVCARRIER_ID != null && nonporec.PRVCARRIER_ID != "") {
                                setTimeout(function () {
                                    nonporec.CARRIER_ID = nonporec.PRVCARRIER_ID;
                                    var itemtxtRecvQty = document.getElementById('txtRecvQty' + nonporec.INV_ITEM_ID);
                                    if (itemtxtRecvQty != null) {
                                        itemtxtRecvQty.focus();
                                    }
                                }, 1);
                            }
                        }
                        else {
                            this.selectedDdlCarrier = nonporec.CARRIER_ID;
                        }
                    }
                    if (nonporec.CARRIER_ID != 'Select Carrier' && nonporec.CARRIER_ID != "") {
                        nonporec.PRVCARRIER_ID = nonporec.CARRIER_ID;
                    }
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "grdDdlCarrier_Changed");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.iutGrdDdlCarrier_Changed = function (nonporec, event) {
        try {
            this.statusMsgs = [];
            if (nonporec.RBFlAG) {
                if (nonporec.CARRIER_ID == 'Select Carrier' || nonporec.CARRIER_ID == "") {
                    if (nonporec.PRVCARRIER_ID != null && nonporec.PRVCARRIER_ID != "") {
                        setTimeout(function () {
                            nonporec.CARRIER_ID = nonporec.PRVCARRIER_ID;
                            var itemtxtRecvQty = document.getElementById('txtRecvQty' + nonporec.ITEM_ID);
                            if (itemtxtRecvQty != null) {
                                itemtxtRecvQty.focus();
                            }
                        }, 1);
                    }
                }
                else {
                    this.selectedDdlCarrier = nonporec.CARRIER_ID;
                }
            }
            if (nonporec.CARRIER_ID != 'Select Carrier' && nonporec.CARRIER_ID != "") {
                nonporec.PRVCARRIER_ID = nonporec.CARRIER_ID;
            }
        }
        catch (ex) {
            this.clientErrorMsg(ex, "iutGrdDdlCarrier_Changed");
        }
    };
    PoNonPoReceiptsComponent.prototype.schdGrdDdlCarrier_Changed = function (nonporec, event) {
        try {
            this.statusMsgs = [];
            if (nonporec.RBFlAG) {
                if (nonporec.CARRIER_ID == 'Select Carrier' || nonporec.CARRIER_ID == "") {
                    if (nonporec.PRVCARRIER_ID != null && nonporec.PRVCARRIER_ID != "") {
                        setTimeout(function () {
                            nonporec.CARRIER_ID = nonporec.PRVCARRIER_ID;
                            var itemtxtRecvQty = document.getElementById('txtRecvQty' + nonporec.INV_ITEM_ID);
                            if (itemtxtRecvQty != null) {
                                itemtxtRecvQty.focus();
                            }
                        }, 1);
                    }
                }
                else {
                    this.selectedSchdDdlCarrier = nonporec.CARRIER_ID;
                }
            }
            if (nonporec.CARRIER_ID != 'Select Carrier' && nonporec.CARRIER_ID != "") {
                nonporec.PRVCARRIER_ID = nonporec.CARRIER_ID;
            }
        }
        catch (ex) {
            this.clientErrorMsg(ex, "grdDdlCarrier_Changed");
        }
    };
    PoNonPoReceiptsComponent.prototype.grdddlUOM_Changed = function (nonporec, event) {
        return __awaiter(this, void 0, void 0, function () {
            var uom;
            return __generator(this, function (_a) {
                try {
                    this.statusMsgs = [];
                    uom = "";
                    if (event.label != null && event.label != undefined) {
                        uom = event.label.split('(');
                    }
                    if (uom != null) {
                        nonporec.UNIT_OF_MEASURE = uom[0].trim();
                        nonporec.SELECTEDUOM = event.label;
                    }
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "grdddlUOM_Changed");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.btnPoSearch_Click = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            var bunit, reqShipToId, ship, frmDate, toDate, ex_11;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 6, , 7]);
                        this.breadCrumbMenu.SUB_MENU_NAME = 'PO Search';
                        this.spnrService.emitChangeBreadCrumbEvt(JSON.stringify(this.breadCrumbMenu));
                        this.statusMsgs = [];
                        bunit = "";
                        reqShipToId = this.hdnReqShiptoId;
                        ship = this.selectedShipToId;
                        if (this.selectedBUnits == "Select BusinessUnit" || this.selectedBUnits == "") {
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please Select Business Unit / Company" });
                            return [2 /*return*/];
                        }
                        else {
                            bunit = this.selectedBUnits;
                        }
                        if (reqShipToId == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                            if (ship != null) {
                                if (this.selectedShipToId == "Select ShipToID") {
                                    this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "ShipTo ID is mandatory to download the PO" });
                                    return [2 /*return*/];
                                }
                            }
                            if (this.txtShipId != null && this.txtShipId != undefined) {
                                if (this.txtShipId == "") {
                                    this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "ShipTo ID is mandatory to download the PO" });
                                    return [2 /*return*/];
                                }
                            }
                        }
                        bunit = this.selectedBUnits;
                        frmDate = this.txtFrmDate;
                        toDate = this.txtToDate;
                        if (frmDate == "" || frmDate == null || frmDate == undefined) {
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please select From date" });
                            return [2 /*return*/];
                        }
                        if (toDate == "" || toDate == null || toDate == undefined) {
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please select To date" });
                            return [2 /*return*/];
                        }
                        if (!(this.hdnBunit == bunit && this.hdnPO == this.txtPONumber)) return [3 /*break*/, 1];
                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "This PO/IUT is in Download status" });
                        return [2 /*return*/];
                    case 1:
                        if (!(this.hdnBunit != "")) return [3 /*break*/, 3];
                        this.hdnPoSearch = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString();
                        return [4 /*yield*/, this.confirmData("posearch")];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, this.showPoSearchPopup()];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        ex_11 = _a.sent();
                        this.clientErrorMsg(ex_11, "btnPoSearch_Click");
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.btnIutSearch_Click = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            var bunit, frmDate, toDate, ex_12;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 6, , 7]);
                        this.breadCrumbMenu.SUB_MENU_NAME = 'IUT Search';
                        this.spnrService.emitChangeBreadCrumbEvt(JSON.stringify(this.breadCrumbMenu));
                        this.statusMsgs = [];
                        bunit = "";
                        if (this.selectedBUnits == "Select BusinessUnit" || this.selectedBUnits == "") {
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please Select Business Unit / Company" });
                            return [2 /*return*/];
                        }
                        else {
                            bunit = this.selectedBUnits;
                        }
                        bunit = this.selectedBUnits;
                        frmDate = this.txtFrmDate;
                        toDate = this.txtToDate;
                        if (frmDate == "" || frmDate == null || frmDate == undefined) {
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please select From date" });
                            return [2 /*return*/];
                        }
                        if (toDate == "" || toDate == null || toDate == undefined) {
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please select To date" });
                            return [2 /*return*/];
                        }
                        if (!(this.hdnBunit == bunit && this.hdnIUT == this.txtIUT)) return [3 /*break*/, 1];
                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "This PO/IUT is in Download status" });
                        return [2 /*return*/];
                    case 1:
                        if (!(this.hdnBunit != "")) return [3 /*break*/, 3];
                        this.hdnPoSearch = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString();
                        return [4 /*yield*/, this.confirmIUT("IUTsearch")];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, this.showIUTSearchPopup()];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        ex_12 = _a.sent();
                        this.clientErrorMsg(ex_12, "btnIutSearch_Click");
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.grdPoSearchRdbtnChanged = function (paramLst, event) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    this.statusMsgs = [];
                    if (paramLst.RBFlAG == "true") {
                        paramLst.RBFlAG = "false";
                    }
                    else {
                        paramLst.RBFlAG = "true";
                    }
                }
                catch (ex) {
                    this.spnrService.stop();
                    this.clientErrorMsg(ex, "grdPoSearchRdbtnChanged");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.btnSearchPosGet_Click = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            var searchLst, i, arrlstPOSearchEntity;
            return __generator(this, function (_a) {
                try {
                    this.statusMsgs = [];
                    this.arrlstPOSearch = [];
                    this.txtIUT = "";
                    searchLst = linq_es5_1.asEnumerable(this.lstSeachItems).Where(function (x) { return x.RBFlAG.toString() == "true"; }).ToArray();
                    if (searchLst != null && searchLst.length > 0) {
                        for (i = 0; i < searchLst.length; i++) {
                            arrlstPOSearchEntity = new vm_recv_searchheader_1.VM_RECV_SEARCHHEADER();
                            this.txtPONumber = searchLst[i].POID;
                            arrlstPOSearchEntity.BUSINESS_UNIT = searchLst[i].BUSINESS_UNIT;
                            arrlstPOSearchEntity.POID = searchLst[i].POID;
                            arrlstPOSearchEntity.PODT = searchLst[i].PODT;
                            arrlstPOSearchEntity.SHPTID = searchLst[i].SHPTID;
                            arrlstPOSearchEntity.VNDRID = searchLst[i].VNDRID;
                            arrlstPOSearchEntity.RECVID = searchLst[i].RECVID;
                            arrlstPOSearchEntity.ITEM_ID = searchLst[i].ITEM_ID;
                            arrlstPOSearchEntity.RBFlAG = searchLst[i].RBFlAG;
                            this.arrlstPOSearch.push(arrlstPOSearchEntity);
                        }
                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Click the Go Back button to show the items grid." });
                        this.page = false;
                        this.tbl = false;
                        this.purchase = false;
                    }
                    else {
                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please Select the PO ID." });
                        return [2 /*return*/];
                    }
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "btnSearchPosGet_Click");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.searchPoBack = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ex_13;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        this.statusMsgs = [];
                        this.presentScreen = "PO";
                        this.breadCrumbMenu.SUB_MENU_NAME = '';
                        this.spnrService.emitChangeBreadCrumbEvt(JSON.stringify(this.breadCrumbMenu));
                        if (!(this.arrlstPOSearch != null && this.arrlstPOSearch.length > 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.page_Load()];
                    case 1:
                        _a.sent();
                        this.recvSearchPos = false;
                        this.recvIUTSearch = false;
                        this.purchase = false;
                        this.page = true;
                        this.tbl = true;
                        this.blnGrdRecvPoItems = true;
                        this.blnGrdRecvIutItems = false;
                        this.grdRecvSearchPos = false;
                        return [3 /*break*/, 3];
                    case 2:
                        this.recvSearchPos = false;
                        this.recvIUTSearch = false;
                        this.purchase = false;
                        this.page = true;
                        this.grdRecvSearchPos = false;
                        if (this.lstRecvSendPoLines != null && this.lstRecvSendPoLines.length > 0) {
                            this.tbl = true;
                            this.blnGrdRecvPoItems = true;
                            this.blnGrdRecvIutItems = false;
                        }
                        _a.label = 3;
                    case 3:
                        this.plus = true;
                        this.minus = false;
                        return [3 /*break*/, 5];
                    case 4:
                        ex_13 = _a.sent();
                        this.clientErrorMsg(ex_13, "searchPoBack");
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.grdrecvIUTDataRdbtnChanged = function (paramLst, event) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    this.statusMsgs = [];
                    if (paramLst.RBFlAG == "true") {
                        paramLst.RBFlAG = "false";
                    }
                    else {
                        paramLst.RBFlAG = "true";
                    }
                }
                catch (ex) {
                    this.spnrService.stop();
                    this.clientErrorMsg(ex, "grdrecvIUTDataRdbtnChanged");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.btnSearchIUTGet_Click = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            var searchLst, i, arrlstIUTSearchEntity;
            return __generator(this, function (_a) {
                try {
                    this.statusMsgs = [];
                    this.arrlstIUTSearch = [];
                    this.txtPONumber = "";
                    searchLst = linq_es5_1.asEnumerable(this.lstRecvSearchIuts).Where(function (x) { return x.RBFlAG.toString() == "true"; }).ToArray();
                    if (searchLst != null && searchLst.length > 0) {
                        for (i = 0; i < searchLst.length; i++) {
                            arrlstIUTSearchEntity = new VM_IUT_SEARCHHEADER_1.VM_IUT_SEARCHHEADER();
                            this.txtIUT = searchLst[i].INTERUNIT_ID;
                            arrlstIUTSearchEntity.DESTIN_BU = searchLst[i].DESTIN_BU;
                            arrlstIUTSearchEntity.INTERUNIT_ID = searchLst[i].INTERUNIT_ID;
                            arrlstIUTSearchEntity.ORIG_BU = searchLst[i].ORIG_BU;
                            arrlstIUTSearchEntity.SHIP_DTTM = searchLst[i].SHIP_DTTM;
                            arrlstIUTSearchEntity.RBFlAG = searchLst[i].RBFlAG;
                            this.arrlstIUTSearch.push(arrlstIUTSearchEntity);
                        }
                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Close the popup to show the items grid." });
                        this.recvSearchPos = false;
                        this.page = false;
                        this.tbl = false;
                        this.purchase = false;
                    }
                    else {
                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please Select the PO ID." });
                        return [2 /*return*/];
                    }
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "btnSearchIUTGet_Click");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.iutSearchPoBack = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ex_14;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        this.statusMsgs = [];
                        this.presentScreen = "PO";
                        this.breadCrumbMenu.SUB_MENU_NAME = '';
                        this.spnrService.emitChangeBreadCrumbEvt(JSON.stringify(this.breadCrumbMenu));
                        if (!(this.arrlstIUTSearch != null && this.arrlstIUTSearch.length > 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.page_Load()];
                    case 1:
                        _a.sent();
                        this.recvSearchPos = false;
                        this.recvIUTSearch = false;
                        this.purchase = false;
                        this.blnGrdRecvPoItems = false;
                        this.page = true;
                        this.tbl = true;
                        this.blnGrdRecvIutItems = true;
                        return [3 /*break*/, 3];
                    case 2:
                        this.recvSearchPos = false;
                        this.recvIUTSearch = false;
                        this.purchase = false;
                        this.page = true;
                        if (this.lstRecvIutItems != null && this.lstRecvIutItems.length > 0) {
                            this.blnGrdRecvPoItems = false;
                            this.blnGrdRecvIutItems = true;
                            this.tbl = true;
                        }
                        _a.label = 3;
                    case 3:
                        this.plus = true;
                        this.minus = false;
                        return [3 /*break*/, 5];
                    case 4:
                        ex_14 = _a.sent();
                        this.clientErrorMsg(ex_14, "iutSearchPoBack");
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.btnTxtSerchItemId_Click = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var lstRecords, lstMainRecords, i, filterItem;
            return __generator(this, function (_a) {
                try {
                    lstRecords = [];
                    this.startIndex = +sessionStorage.getItem("Recordsstartindex");
                    this.endIndex = +sessionStorage.getItem("RecordsEndindex");
                    lstMainRecords = [];
                    if (this.lstRecvSendPoLines != null || this.lstRecvSendPoLines != undefined && this.lstRecvSendPoLines.length > 0) {
                        lstMainRecords = this.lstRecvSendPoLines;
                    }
                    else if (this.lstRecvIutItems != null || this.lstRecvIutItems != undefined && this.lstRecvIutItems.length > 0) {
                        lstMainRecords = this.lstRecvIutItems;
                    }
                    if (lstMainRecords != null || lstMainRecords.length > 0) {
                        if (this.endIndex > lstMainRecords.length) {
                            this.endIndex = lstMainRecords.length;
                        }
                        for (i = this.startIndex; i <= this.endIndex - 1; i++) {
                            lstRecords.push(lstMainRecords[i]);
                        }
                    }
                    if (this.txtSerchItemId != "" && lstRecords != null && lstRecords.length > 0) {
                        filterItem = lstRecords.filter(function (x) { return x.INV_ITEM_ID == _this.txtSerchItemId; });
                        if (filterItem != null && filterItem.length > 0) {
                            this.selecstedRow = filterItem[0];
                            this.selectedINVITEMID = this.selecstedRow.INV_ITEM_ID;
                            this.poNonPo_RbtnChange(this.selecstedRow, true);
                        }
                        else {
                            this.statusMsgs = [];
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: this.txtSerchItemId + ": ItemId not found" });
                        }
                    }
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "btnTxtSerchItemId_Click");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.btnTxtPreSerchItemId_Click = function () {
        var _this = this;
        try {
            var lstRecords_1 = [];
            this.statusMsgs = [];
            this.startIndex = +sessionStorage.getItem("Recordsstartindex");
            this.endIndex = +sessionStorage.getItem("RecordsEndindex");
            var lstMainRecords = [];
            if (this.lstRecvSendPoLines != null || this.lstRecvSendPoLines != undefined && this.lstRecvSendPoLines.length > 0) {
                lstMainRecords = this.lstRecvSendPoLines;
            }
            else if (this.lstRecvIutItems != null || this.lstRecvIutItems != undefined && this.lstRecvIutItems.length > 0) {
                lstMainRecords = this.lstRecvIutItems;
            }
            if (lstMainRecords != null || lstMainRecords.length > 0) {
                if (this.endIndex > lstMainRecords.length) {
                    this.endIndex = lstMainRecords.length;
                }
                for (var i = this.startIndex; i <= this.endIndex - 1; i++) {
                    lstRecords_1.push(lstMainRecords[i]);
                }
            }
            if (this.selecstedRow != null && lstRecords_1 != null) {
                var index = lstRecords_1.indexOf(this.selecstedRow);
                if (index <= 0) {
                    this.confirmationService.confirm({
                        message: 'This is the first item, would you like to continue from the last item?',
                        accept: function () {
                            _this.selecstedRow = lstRecords_1[lstRecords_1.length - 1];
                            _this.selectedINVITEMID = _this.selecstedRow.INV_ITEM_ID;
                            _this.poNonPo_RbtnChange(_this.selecstedRow, true);
                        },
                        reject: function () {
                            return;
                        }
                    });
                }
                else {
                    this.selecstedRow = lstRecords_1[index - 1];
                    this.selectedINVITEMID = this.selecstedRow.INV_ITEM_ID;
                    this.poNonPo_RbtnChange(this.selecstedRow, true);
                }
            }
        }
        catch (ex) {
            this.clientErrorMsg(ex, "btnTxtPreSerchItemId_Click");
        }
    };
    PoNonPoReceiptsComponent.prototype.btnTxtNextSerchItemId_Click = function () {
        var _this = this;
        try {
            var lstRecords_2 = [];
            this.statusMsgs = [];
            this.startIndex = +sessionStorage.getItem("Recordsstartindex");
            this.endIndex = +sessionStorage.getItem("RecordsEndindex");
            var lstMainRecords = [];
            if (this.lstRecvSendPoLines != null || this.lstRecvSendPoLines != undefined && this.lstRecvSendPoLines.length > 0) {
                lstMainRecords = this.lstRecvSendPoLines;
            }
            else if (this.lstRecvIutItems != null || this.lstRecvIutItems != undefined && this.lstRecvIutItems.length > 0) {
                lstMainRecords = this.lstRecvIutItems;
            }
            if (lstMainRecords != null || lstMainRecords.length > 0) {
                if (this.endIndex > lstMainRecords.length) {
                    this.endIndex = lstMainRecords.length;
                }
                for (var i = this.startIndex; i <= this.endIndex - 1; i++) {
                    lstRecords_2.push(lstMainRecords[i]);
                }
            }
            //This is the last item, would you like to continue from the first Item
            if (this.selecstedRow != null && lstRecords_2 != null) {
                var index = lstRecords_2.indexOf(this.selecstedRow);
                if (index == lstRecords_2.length - 1) {
                    this.statusMsgs = [];
                    this.confirmationService.confirm({
                        message: 'This is the last item, would you like to continue from the first Item?',
                        accept: function () {
                            _this.selecstedRow = lstRecords_2[0];
                            _this.selectedINVITEMID = _this.selecstedRow.INV_ITEM_ID;
                            _this.poNonPo_RbtnChange(_this.selecstedRow, true);
                        },
                        reject: function () {
                            return;
                        }
                    });
                }
                else {
                    this.selecstedRow = lstRecords_2[index + 1];
                    this.selectedINVITEMID = this.selecstedRow.INV_ITEM_ID;
                    this.poNonPo_RbtnChange(this.selecstedRow, true);
                }
            }
        }
        catch (ex) {
            this.clientErrorMsg(ex, "btnTxtNextSerchItemId_Click");
        }
    };
    PoNonPoReceiptsComponent.prototype.searchAutoCompleteItems = function (event) {
        var query = event.query;
        this.lstFilterItems = this.filterNames(query, this.lstRecvSendPoLines);
    };
    PoNonPoReceiptsComponent.prototype.filterNames = function (query, itemNames) {
        this.statusMsgs = [];
        if (itemNames != null) {
            var filtered = [];
            if (query == "%") {
                for (var i = 0; i < itemNames.length; i++) {
                    var itemNamesvalue = itemNames[i];
                    filtered.push(itemNamesvalue.INV_ITEM_ID);
                }
            }
            else {
                if (query.length >= 1) {
                    for (var i = 0; i < itemNames.length; i++) {
                        var itemValue = itemNames[i];
                        if (itemValue.INV_ITEM_ID.toString().toUpperCase().indexOf(query.toString().toUpperCase()) == 0) {
                            filtered.push(itemValue.INV_ITEM_ID);
                        }
                    }
                }
            }
            return filtered;
        }
    };
    PoNonPoReceiptsComponent.prototype.asnGrdRdbtnChanged = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    //if (asnPoData != null) {asnPoData
                    //    this.gStrReceiverId = asnPoData.RECEIVERID;
                    //    this.selectedRecvId = asnPoData.RECEIVERID;
                    //}
                    if (event == null) {
                        if (this.lstAsnDetails.length == 1) {
                            this.gStrReceiverId = this.lstAsnDetails[0].RECEIVERID;
                            this.selectedRecvId = this.lstAsnDetails[0].RECEIVERID;
                        }
                        else {
                            return [2 /*return*/];
                        }
                        return [2 /*return*/];
                    }
                    else {
                        this.gStrReceiverId = event;
                        this.selectedRecvId = event;
                    }
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "asnGrdRdbtnChanged");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.btnAsnGet_Click = function () {
        return __awaiter(this, void 0, void 0, function () {
            var lstcheckedrcds, ex_15;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        this.statusMsgs = [];
                        this.spnrService.start();
                        lstcheckedrcds = this.lstAsnDetails.filter(function (x) { return x.ASNRBFLAG == true; });
                        if (!(this.gStrReceiverId != null && this.gStrReceiverId != "")) return [3 /*break*/, 2];
                        this.gblnCancel = false;
                        this.tbl = false;
                        this.recvSearchPos = false;
                        this.recvIUTSearch = false;
                        return [4 /*yield*/, this.bindDataGrid()];
                    case 1:
                        _a.sent();
                        if (this.lstRecvSendPoLines != null && this.lstRecvSendPoLines.length > 0) {
                            this.tbl = false;
                        }
                        this.statusMsgs = [];
                        this.statusMsgs.push({ severity: 'success', summary: AtParConstants_1.AtParConstants.GrowlTitle_Success, detail: "Success, Click the Go Back button to show the items grid." });
                        return [3 /*break*/, 3];
                    case 2:
                        this.statusMsgs = [];
                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please select a ReceiverID" });
                        _a.label = 3;
                    case 3:
                        this.spnrService.stop();
                        return [3 /*break*/, 5];
                    case 4:
                        ex_15 = _a.sent();
                        this.spnrService.stop();
                        this.clientErrorMsg(ex_15, "btnAsnGet_Click");
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.btnAsnCancel_Click = function () {
        return __awaiter(this, void 0, void 0, function () {
            var i;
            return __generator(this, function (_a) {
                try {
                    this.statusMsgs = [];
                    this.gblnCancel = true;
                    this.gStrReceiverId = "";
                    if (this.lstAsnDetails != null && this.lstAsnDetails.length > 0) {
                        for (i = 0; i < this.lstAsnDetails.length; i++) {
                            this.lstAsnDetails[i].ASNRBFLAG = false;
                        }
                    }
                    this.selectedRecvId = "";
                    this.lstRecvSendPoLines = [];
                    this.tbl = false;
                    this.selectedReceiverId = "";
                    this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Request Cancelled, Click the Go Back button." });
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "btnAsnCancel_Click");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.btnAsnGetBack_Click = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    this.statusMsgs = [];
                    this.presentScreen = "PO";
                    this.breadCrumbMenu.SUB_MENU_NAME = '';
                    this.spnrService.emitChangeBreadCrumbEvt(JSON.stringify(this.breadCrumbMenu));
                    this.selectedReceiverId = "";
                    this.purchase = false;
                    this.page = true;
                    if (this.lstRecvSendPoLines != null && this.lstRecvSendPoLines.length > 0) {
                        this.tbl = true;
                    }
                    this.lblReceiverId = this.selectedRecvId;
                    this.recvSearchPos = false;
                    this.recvIUTSearch = false;
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "btnAsnGetBack_Click");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.includeAllPoLinesChkChanged = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    this.statusMsgs = [];
                    if (event != null && event != undefined) {
                        this.chkIncludeAllPOLines = event;
                    }
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "includeAllPoLinesChkChanged");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.getReceivePrerequisites = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var poplateFlg, ex_16;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        this.statusMsgs = [];
                        return [4 /*yield*/, this.recvPoNonPoService.getReceivePrerequisites().
                                catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.spnrService.stop();
                                switch (data.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        _this.lstBunits = res.json().DataDictionary.ALLOCATED_BUNITS;
                                        _this.lstShipToIds = res.json().DataDictionary.ALLOCATED_SHIPTOIDS;
                                        _this.lstOrgParms = res.json().DataDictionary.ORG_PARAMETERS;
                                        _this.lstProfileApp = res.json().DataDictionary.PROFILE_PARAMETERS;
                                        _this.lstUserApp = res.json().DataDictionary.USER_PARAMETERS;
                                        _this.lstScreenApp = res.json().DataDictionary.SCREEN_DISPLAY;
                                        _this.lstInventoryBunits = res.json().DataDictionary.ALLOCATED_IUT_BUNITS;
                                        _this.shipToIdCount = res.json().DataDictionary.DELV_ALLOC_SHIPTOIDS;
                                        _this.statusCode = data.StatusCode;
                                        _this.receItemColumns = _this.lstScreenApp.filter(function (x) { return x.DISPLAY_FIELD == 'Y' && x.SCREEN_NAME == "RECEIVE ITEMS"; });
                                        _this.receItemColumns = linq_es5_1.asEnumerable(_this.receItemColumns).OrderBy(function (x) { return x.COLUMN_ORDER; }).ToArray();
                                        for (var x = 0; x < _this.receItemColumns.length; x++) {
                                            if (_this.receItemColumns[x].FIELD_NAME == 'INV_ITEM_ID' ||
                                                _this.receItemColumns[x].FIELD_NAME == 'DESCR' ||
                                                _this.receItemColumns[x].FIELD_NAME == 'RECEIVED_QTY' ||
                                                _this.receItemColumns[x].FIELD_NAME == 'INVENTORY_ITEM' ||
                                                _this.receItemColumns[x].FIELD_NAME == 'LOCATION' ||
                                                _this.receItemColumns[x].FIELD_NAME == 'SHIPTO_ID' ||
                                                _this.receItemColumns[x].FIELD_NAME == 'LINE_NBR' ||
                                                _this.receItemColumns[x].FIELD_NAME == 'UPC_ID' ||
                                                _this.receItemColumns[x].FIELD_NAME == 'MFG_ITEM_ID' ||
                                                _this.receItemColumns[x].FIELD_NAME == 'INSP_FLAG' ||
                                                _this.receItemColumns[x].FIELD_NAME == 'CUST_ITEM_NO' ||
                                                _this.receItemColumns[x].FIELD_NAME == 'GTIN' ||
                                                _this.receItemColumns[x].FIELD_NAME == 'LOT_CONTROLLED' ||
                                                _this.receItemColumns[x].FIELD_NAME == 'SERIAL_CONTROLLED' ||
                                                _this.receItemColumns[x].FIELD_NAME == 'EXT_TRK_NO') {
                                                _this.receItemColumns[x].ISFILTER = true;
                                            }
                                            else {
                                                _this.receItemColumns[x].ISFILTER = false;
                                            }
                                        }
                                        _this.receIutItemColumns = _this.lstScreenApp.filter(function (x) { return x.DISPLAY_FIELD == 'Y' && x.SCREEN_NAME == "IUT ITEMS"; });
                                        _this.receIutItemColumns = linq_es5_1.asEnumerable(_this.receIutItemColumns).OrderBy(function (x) { return x.COLUMN_ORDER; }).ToArray();
                                        for (var x = 0; x < _this.receIutItemColumns.length; x++) {
                                            if (_this.receIutItemColumns[x].FIELD_NAME == 'ITEM_ID' ||
                                                _this.receIutItemColumns[x].FIELD_NAME == 'CUSTOM_ITEM_NO' ||
                                                _this.receIutItemColumns[x].FIELD_NAME == 'DESCRIPTION' ||
                                                _this.receIutItemColumns[x].FIELD_NAME == 'LOT_CONTROLLED' ||
                                                _this.receIutItemColumns[x].FIELD_NAME == 'SERIAL_CONTROLLED' ||
                                                _this.receIutItemColumns[x].FIELD_NAME == 'UPC_ID' ||
                                                _this.receIutItemColumns[x].FIELD_NAME == 'MFG_ITEM_ID' ||
                                                _this.receIutItemColumns[x].FIELD_NAME == 'CUSTOM_ITEM_NO' ||
                                                _this.receIutItemColumns[x].FIELD_NAME == 'VEND_ITEM_ID' ||
                                                _this.receIutItemColumns[x].FIELD_NAME == 'STOR_LOC') {
                                                _this.receIutItemColumns[x].ISFILTER = true;
                                            }
                                            else {
                                                _this.receIutItemColumns[x].ISFILTER = false;
                                            }
                                        }
                                        _this.receSchdlItemColumns = _this.lstScreenApp.filter(function (x) { return x.DISPLAY_FIELD == 'Y' && x.SCREEN_NAME == "RECEIVE BY SCHEDULE"; });
                                        _this.receSchdlItemColumns = linq_es5_1.asEnumerable(_this.receSchdlItemColumns).OrderBy(function (x) { return x.COLUMN_ORDER; }).ToArray();
                                        for (var x = 0; x < _this.receSchdlItemColumns.length; x++) {
                                            if (_this.receSchdlItemColumns[x].FIELD_NAME == 'SCHED_NBR' ||
                                                _this.receSchdlItemColumns[x].FIELD_NAME == 'QTY_PO' ||
                                                _this.receSchdlItemColumns[x].FIELD_NAME == 'LOCATION' ||
                                                _this.receSchdlItemColumns[x].FIELD_NAME == 'TRACKING_ID' ||
                                                _this.receSchdlItemColumns[x].FIELD_NAME == 'EXT_TRK_NO' ||
                                                _this.receSchdlItemColumns[x].FIELD_NAME == 'RECEIVED_QTY' ||
                                                _this.receSchdlItemColumns[x].FIELD_NAME == 'SHIPTO_ID' ||
                                                _this.receSchdlItemColumns[x].FIELD_NAME == 'QTY_RECV_TOL_PCT' ||
                                                _this.receSchdlItemColumns[x].FIELD_NAME == 'LOC_DESCR') {
                                                _this.receSchdlItemColumns[x].ISFILTER = true;
                                            }
                                            else {
                                                _this.receSchdlItemColumns[x].ISFILTER = false;
                                            }
                                        }
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.statusCode = data.StatusCode;
                                        _this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.statusCode = data.StatusCode;
                                        _this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Custom: {
                                        _this.statusCode = data.StatusCode;
                                        _this.statusMsgs.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        break;
                                    }
                                }
                            })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.populateBusinessUnitDrpdwn(this.lstBunits)];
                    case 2:
                        poplateFlg = _a.sent();
                        if (!poplateFlg) {
                            return [2 /*return*/, this.statusCode = -1];
                        }
                        return [4 /*yield*/, this.populateShipToIdsDrpdwn(this.lstShipToIds)];
                    case 3:
                        _a.sent();
                        if (this.lstScreenApp == null || this.lstScreenApp.length == 0) {
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please provide HHT access to Web profile" });
                            this.btnGetEnableDisable = true;
                            this.btnPoSearchEnableDisable = true;
                            this.btnIUTSearch = false;
                            this.btnNonPo = false;
                            this.statusCode = -1;
                            return [2 /*return*/, this.statusCode];
                        }
                        else {
                            this.btnGetEnableDisable = false;
                            this.btnPoSearchEnableDisable = false;
                        }
                        return [2 /*return*/, this.statusCode];
                    case 4:
                        ex_16 = _a.sent();
                        this.clientErrorMsg(ex_16, "getReceivePrerequisites");
                        return [2 /*return*/, this.statusCode];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.isShowColumn = function (screeFiled, dispFiled) {
        if (screeFiled == dispFiled) {
            return true;
        }
        else if (dispFiled == 'ALL') {
            if (this.recnonstaticFields.indexOf(screeFiled) == -1) {
                return true;
            }
            else {
                return false;
            }
        }
    };
    PoNonPoReceiptsComponent.prototype.bindDataGrid = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ex_17;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 5, , 6]);
                        this.txtSerchItemId = "";
                        this.selectedINVITEMID = "";
                        this.selectedDdlCarrier = "Select Carrier";
                        this.txtLading = "";
                        this.txtPkgs = "";
                        this.txtTrk = "";
                        this.plus = true;
                        this.minus = false;
                        if (!(this.txtIUT != null && this.txtIUT != "")) return [3 /*break*/, 2];
                        // IUT Get
                        return [4 /*yield*/, this.iutItemsBind()];
                    case 1:
                        // IUT Get
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 2: 
                    // Receive Get
                    return [4 /*yield*/, this.receivePoItemsBind()];
                    case 3:
                        // Receive Get
                        _a.sent();
                        _a.label = 4;
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        ex_17 = _a.sent();
                        this.clientErrorMsg(ex_17, "bindDataGrid");
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.deletePo = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var i, ex_18;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.statusMsgs = [];
                        this.spnrService.start();
                        if (this.lstRecvPoItems != null) {
                            for (i = 0; i < this.lstRecvPoItems.length; i++) {
                                this.lstRecvPoItems[i].TRANS_ID = this.gTransactionID;
                            }
                        }
                        return [4 /*yield*/, this.recvPoNonPoService.deleteHeader(this.lstRecvPoItems).
                                catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.statusCode = data.StatusCode;
                                switch (data.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Custom: {
                                        _this.statusMsgs.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                }
                            })];
                    case 1:
                        _a.sent();
                        if (this.statusCode == AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK) {
                            this.clearData();
                            this.hdnConfirmPoDelete = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                            this.hdnConfirmIUTDelete = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                            if (this.hdnPoSearch == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                this.hdnPoSearch = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                            }
                            else if (this.hdnIUTSearch == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                this.hdnIUTSearch = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                            }
                            else if (this.hdnConfirmNonPo == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                this.hdnConfirmNonPo = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                            }
                        }
                        else {
                            this.bindDataGrid();
                            this.populateCarrierDropDown(this.selectedDdlCarrier);
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        ex_18 = _a.sent();
                        this.clientErrorMsg(ex_18, "deletePo");
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.deleteIUTOrder = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "deleteIUTOrder");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.populateCarrierDropDown = function (carrierId) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var ex_19;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.statusCode = -1;
                        this.ddlCarrier = [];
                        this.grdDdlCarrier = [];
                        this.ddlNonPOCarrier = [];
                        this.grdDdlCarrier.push({ label: "Select Carrier", value: "Select Carrier" });
                        this.ddlCarrier.push({ label: "Select Carrier", value: "Select Carrier" });
                        this.ddlNonPOCarrier.push({ label: "Select Carrier", value: "Select Carrier" });
                        return [4 /*yield*/, this.commonService.getCarriersData().
                                catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.lstCarriersData = data.DataList;
                                _this.statusCode = data.StatusCode;
                                switch (data.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        _this.ddlCarrier = [];
                                        _this.grdDdlCarrier = [];
                                        _this.ddlNonPOCarrier = [];
                                        if (_this.lstCarriersData != null && _this.lstCarriersData.length > 0) {
                                            _this.grdDdlCarrier.push({ label: "Select Carrier", value: "Select Carrier" });
                                            _this.ddlCarrier.push({ label: "Select Carrier", value: "Select Carrier" });
                                            _this.ddlNonPOCarrier.push({ label: "Select Carrier", value: "Select Carrier" });
                                            if (_this.lstCarriersData.length > 0) {
                                                for (var i = 0; i <= _this.lstCarriersData.length - 1; i++) {
                                                    _this.ddlCarrier.push({ label: _this.lstCarriersData[i].CARRIER_ID, value: _this.lstCarriersData[i].CARRIER_ID });
                                                    _this.grdDdlCarrier.push({ label: _this.lstCarriersData[i].CARRIER_ID, value: _this.lstCarriersData[i].CARRIER_ID });
                                                    _this.ddlNonPOCarrier.push({ label: _this.lstCarriersData[i].CARRIER_ID, value: _this.lstCarriersData[i].CARRIER_ID });
                                                }
                                            }
                                        }
                                        if (_this.lstUserApp != null && _this.lstUserApp.length > 0) {
                                            _this.strDefaultCarrierID = linq_es5_1.asEnumerable(_this.lstUserApp).ToArray()[1].PARAMETER_VALUE;
                                            if (_this.strDefaultCarrierID != null && _this.strDefaultCarrierID != "") {
                                                var lstdefCarriers = _this.ddlCarrier.filter(function (x) { return x.value == _this.strDefaultCarrierID.toUpperCase(); });
                                                if (lstdefCarriers != null && lstdefCarriers.length > 0) {
                                                    _this.selectedDdlCarrier = _this.strDefaultCarrierID.toUpperCase();
                                                    _this.selectedSchdDdlCarrier = _this.strDefaultCarrierID.toUpperCase();
                                                }
                                                else {
                                                    _this.grdDdlCarrier.push({ label: _this.strDefaultCarrierID.toUpperCase(), value: _this.strDefaultCarrierID.toUpperCase() });
                                                    _this.ddlCarrier.push({ label: _this.strDefaultCarrierID.toUpperCase(), value: _this.strDefaultCarrierID.toUpperCase() });
                                                    _this.selectedDdlCarrier = _this.strDefaultCarrierID.toUpperCase();
                                                    _this.selectedSchdDdlCarrier = _this.strDefaultCarrierID.toUpperCase();
                                                }
                                                var carrierLst = _this.ddlNonPOCarrier.filter(function (x) { return x.value == _this.strDefaultCarrierID.toUpperCase(); });
                                                if (carrierLst != null && carrierLst.length == 0) {
                                                    _this.ddlNonPOCarrier.push({ label: _this.strDefaultCarrierID.toUpperCase(), value: _this.strDefaultCarrierID.toUpperCase() });
                                                }
                                                if (_this.poNewItem != null) {
                                                    _this.poNewItem.CARRIER_ID = _this.strDefaultCarrierID.toUpperCase();
                                                }
                                                if (_this.dtScheduleItems != null && _this.dtScheduleItems.length > 0) {
                                                    for (var i = 0; i < _this.dtScheduleItems.length; i++) {
                                                        _this.dtScheduleItems[i].CARRIER_ID = _this.strDefaultCarrierID.toUpperCase();
                                                    }
                                                }
                                            }
                                            _this.spnrService.stop();
                                            break;
                                        }
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Custom: {
                                        _this.statusMsgs.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                }
                            })];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        ex_19 = _a.sent();
                        this.clientErrorMsg(ex_19, "populateCarrierDropDown");
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.lotScheduleQty = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _loop_3, this_3, i, _loop_4, this_4, i, ex_20;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 9, , 10]);
                        this.statusMsgs = [];
                        this.statusCode = -1;
                        if (!(this.gblnLotSerialFlg == true)) return [3 /*break*/, 4];
                        if (!(this.lstRecvIutItems != null && this.lstRecvIutItems.length > 0)) return [3 /*break*/, 1];
                        this.postbackGridBind(this.lstRecvIutItems, "IUT ITEMS");
                        return [3 /*break*/, 3];
                    case 1:
                        if (this.lstMainItemLotSerial != null) {
                            _loop_3 = function (i) {
                                var strItemId = this_3.lstRecvSendPoLines[i].INV_ITEM_ID;
                                var strLineNbr = this_3.lstRecvSendPoLines[i].LINE_NBR.toString();
                                var drLotQty = linq_es5_1.asEnumerable(this_3.lstMainItemLotSerial).Where(function (x) { return x.ITEM_ID == strItemId; }).ToArray();
                                if (drLotQty.length > 0) {
                                    var drLotEnableQty = linq_es5_1.asEnumerable(this_3.lstMainItemLotSerial).Where(function (x) { return x.ITEM_ID == strItemId && x.LINE_NBR == strLineNbr &&
                                        (x.SERIAL_ID != "" || x.LOT_ID != "") && x.DELETE_FLAG == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString(); }).ToArray();
                                    if (drLotEnableQty.length > 0) {
                                        var intTolRecvQty = 0;
                                        for (var i_4 = 0; i_4 < drLotEnableQty.length; i_4++) {
                                            var strCon_Rate = (drLotEnableQty[i_4].CONVERSION_RATE == "" ? "1" : drLotEnableQty[i_4].CONVERSION_RATE);
                                            intTolRecvQty = intTolRecvQty + (parseInt(drLotEnableQty[i_4].QTY) * parseInt(strCon_Rate));
                                        }
                                        this_3.lstRecvSendPoLines[i].QTY = intTolRecvQty;
                                        //  this.lstRecvSendPoLines[i].LotSerial_Qty = intTolRecvQty;
                                        if (this_3.lstRecvSendPoLines[i].QTY != null) {
                                            this_3.lstRecvSendPoLines[i].RECEIVED_FLAG = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString();
                                        }
                                    }
                                    else {
                                        this_3.lstRecvSendPoLines[i].QTY = null;
                                        // this.lstRecvSendPoLines[i].LotSerial_Qty = "";
                                        this_3.lstRecvSendPoLines[i].RECEIVED_FLAG = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                                    }
                                }
                            };
                            this_3 = this;
                            for (i = 0; i < this.lstRecvSendPoLines.length; i++) {
                                _loop_3(i);
                            }
                        }
                        if (!(this.lstRecvSendPoLines != null && this.lstRecvSendPoLines.length > 0)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.postbackGridBind(this.lstRecvSendPoLines, "RECEIVE ITEMS")];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        this.gblnLotSerialFlg = false;
                        _a.label = 4;
                    case 4:
                        if (!(this.gblnScheduleFlg == true)) return [3 /*break*/, 8];
                        if (!(this.lstRecvIutItems != null && this.lstRecvIutItems.length > 0)) return [3 /*break*/, 5];
                        this.postbackGridBind(this.lstRecvIutItems, "IUT ITEMS");
                        return [3 /*break*/, 7];
                    case 5:
                        if (!(this.lstRecvSendPoLines != null && this.lstRecvSendPoLines.length > 0)) return [3 /*break*/, 7];
                        _loop_4 = function (i) {
                            var strItemId = this_4.lstRecvSendPoLines[i].INV_ITEM_ID;
                            var strLineNbr = this_4.lstRecvSendPoLines[i].LINE_NBR.toString();
                            var drSchd = linq_es5_1.asEnumerable(this_4.lstRecvSendPoLines).Where(function (x) { return x.INV_ITEM_ID == strItemId && x.LINE_NBR == parseInt(strLineNbr) &&
                                x.QTY != null && x.RECEIVED_FLAG == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString(); }).ToArray();
                            if (drSchd.length > 0) {
                                var intTolRecvQty = 0;
                                var blnZeroRecQty = false;
                                for (var i_5 = 0; i_5 < drSchd.length; i_5++) {
                                    if (drSchd[i_5].QTY != null) {
                                        var strCon_Rate = (drSchd[i_5].CONVERSION_RATE == null ? 1 : drSchd[i_5].CONVERSION_RATE);
                                        intTolRecvQty = intTolRecvQty + ((drSchd[i_5].QTY) * (strCon_Rate));
                                    }
                                    if (drSchd[i_5].QTY == 0) {
                                        blnZeroRecQty = true;
                                    }
                                    this_4.lstRecvSendPoLines[i_5].CARRIER_ID = drSchd[i_5].CARRIER_ID;
                                }
                                if (blnZeroRecQty == false) {
                                    this_4.lstRecvSendPoLines[i].QTY = (intTolRecvQty == 0.0 ? null : intTolRecvQty);
                                    if (this_4.lstRecvSendPoLines[i].QTY != null) {
                                        this_4.lstRecvSendPoLines[i].RECEIVED_FLAG = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString();
                                    }
                                }
                                else {
                                    this_4.lstRecvSendPoLines[i].QTY = intTolRecvQty;
                                    if (intTolRecvQty >= 0) {
                                        this_4.lstRecvSendPoLines[i].RECEIVED_FLAG = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString();
                                    }
                                }
                            }
                            else {
                                this_4.lstRecvSendPoLines[i].QTY = null;
                            }
                        };
                        this_4 = this;
                        for (i = 0; i < this.lstRecvSendPoLines.length; i++) {
                            _loop_4(i);
                        }
                        if (!(this.lstRecvSendPoLines != null && this.lstRecvSendPoLines.length > 0)) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.postbackGridBind(this.lstRecvSendPoLines, "RECEIVE ITEMS")];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7:
                        this.gblnScheduleFlg = false;
                        _a.label = 8;
                    case 8: return [3 /*break*/, 10];
                    case 9:
                        ex_20 = _a.sent();
                        this.clientErrorMsg(ex_20, "lotScheduleQty");
                        return [3 /*break*/, 10];
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.populateBusinessUnitDrpdwn = function (bUnitsLst) {
        return __awaiter(this, void 0, void 0, function () {
            var populateBunits, i, strDefaultBUnit;
            return __generator(this, function (_a) {
                try {
                    this.statusMsgs = [];
                    populateBunits = false;
                    this.ddlBusinessUnits = [];
                    this.ddlBusinessUnits.push({ label: "Select BusinessUnit", value: "Select BusinessUnit" });
                    if ((bUnitsLst != null)) {
                        if (bUnitsLst.length > 0) {
                            for (i = 0; i < bUnitsLst.length; i++) {
                                this.ddlBusinessUnits.push({ label: bUnitsLst[i], value: bUnitsLst[i] }); //BUSINESS_UNIT
                            }
                        }
                        else {
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "No Assigned Org Business Units" });
                            return [2 /*return*/, populateBunits = false];
                        }
                        if (this.lstUserApp != null && this.lstUserApp.length > 0) {
                            strDefaultBUnit = linq_es5_1.asEnumerable(this.lstUserApp).ToArray()[0].PARAMETER_VALUE;
                            if (strDefaultBUnit != "") {
                                this.selectedBUnits = strDefaultBUnit;
                            }
                        }
                    }
                    return [2 /*return*/, populateBunits = true];
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "populateBusinessUnitDrpdwn");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.populateShipToIdsDrpdwn = function (shipToIds) {
        return __awaiter(this, void 0, void 0, function () {
            var i, strDefaultShipToID, nonPoStrDefaultShipToID, dr, dr;
            return __generator(this, function (_a) {
                try {
                    this.ddlShipToId = [];
                    this.ddlShipToId.push({ label: "Select ShipToID", value: "Select ShipToID" });
                    if (shipToIds != null) {
                        if (shipToIds.length >= 1) {
                            for (i = 0; i < shipToIds.length; i++) {
                                this.ddlShipToId.push({ label: shipToIds[i].SHIPTO_ID, value: shipToIds[i].SHIPTO_ID });
                            }
                        }
                        else {
                            this.blnShipToId = false;
                        }
                        strDefaultShipToID = "";
                        nonPoStrDefaultShipToID = "";
                        if (this.lstUserApp != null && this.lstUserApp.length > 0) {
                            strDefaultShipToID = linq_es5_1.asEnumerable(this.lstUserApp).ToArray()[0].PARAMETER_VALUE;
                            nonPoStrDefaultShipToID = linq_es5_1.asEnumerable(this.lstUserApp).ToArray()[3].PARAMETER_VALUE;
                            //Default Ship To Id value 
                            if (this.blnShipToId == true) {
                                dr = linq_es5_1.asEnumerable(this.lstUserApp).Where(function (x) { return x.PARAMETER_ID == "DEFAULT_SHIPTO_ID"; }).ToArray();
                                if (dr.length > 0) {
                                    strDefaultShipToID = dr[0].PARAMETER_VALUE;
                                }
                                if (strDefaultShipToID != "") {
                                    this.selectedShipToId = strDefaultShipToID;
                                }
                                if (nonPoStrDefaultShipToID != "") {
                                    if (this.poNewItem != null) {
                                        this.poNewItem.SHIPTO_ID = nonPoStrDefaultShipToID;
                                    }
                                }
                            }
                            else {
                                dr = linq_es5_1.asEnumerable(this.lstUserApp).Where(function (x) { return x.PARAMETER_ID == "DEFAULT_SHIPTO_ID"; }).ToArray();
                                if (dr.length > 0) {
                                    strDefaultShipToID = dr[0].PARAMETER_VALUE;
                                }
                                if (strDefaultShipToID != "") {
                                    this.blnShipToId = false;
                                    this.txtShipId = strDefaultShipToID.toString();
                                }
                                if (nonPoStrDefaultShipToID != "") {
                                    if (this.poNewItem != null) {
                                        this.poNewItem.SHIPTO_ID = nonPoStrDefaultShipToID;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "populateShipToIdsDrpdwn");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.iutItemsBind = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var strPrevInterUnitLineNo, intLineNo, invBunits, recvIUTGetPosEntity, drHeader, recvIutItemEntity, i, strInterUnitLineNo, ex_21;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 7, , 8]);
                        this.statusMsgs = [];
                        this.statusCode = -1;
                        strPrevInterUnitLineNo = "";
                        intLineNo = 0;
                        this.lstRecvIutItems = [];
                        invBunits = 0;
                        if (this.lstInventoryBunits != null && this.lstInventoryBunits.length > 0) {
                            invBunits = this.lstInventoryBunits.filter(function (x) { return x == _this.selectedBUnits; }).length;
                            //invBunits = asEnumerable(this.lstInventoryBunits).Where(x => x.BUSINESS_UNIT == this.selectedBUnits).ToArray();
                        }
                        if (invBunits == null || invBunits == 0) {
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Business Unit is not allocated to the user" });
                            return [2 /*return*/];
                        }
                        this.lstRecvIUTGetPo = new Array();
                        recvIUTGetPosEntity = void 0;
                        recvIUTGetPosEntity = new vm_recv_iutgetpos_1.VM_RECV_IUTGETPOS();
                        if (this.arrlstIUTSearch != null && this.arrlstIUTSearch.length > 0) {
                            recvIUTGetPosEntity.CANCEL_TRANSID = "";
                            recvIUTGetPosEntity.BUSINESS_UNIT = this.arrlstIUTSearch[0].DESTIN_BU;
                            recvIUTGetPosEntity.IUT_ORDERNO = this.arrlstIUTSearch[0].INTERUNIT_ID;
                            recvIUTGetPosEntity.PRODUCT = AtParEnums_1.EnumApps.Receiving;
                            this.txtIUT = this.arrlstIUTSearch[0].INTERUNIT_ID;
                            this.txtPONumber = "";
                            this.arrlstIUTSearch = null;
                        }
                        else {
                            recvIUTGetPosEntity.CANCEL_TRANSID = "";
                            recvIUTGetPosEntity.BUSINESS_UNIT = this.selectedBUnits == "Select BusinessUnit" ? "" : this.selectedBUnits;
                            recvIUTGetPosEntity.IUT_ORDERNO = this.txtIUT.toUpperCase().replace("'", "''");
                            recvIUTGetPosEntity.PRODUCT = AtParEnums_1.EnumApps.Receiving;
                        }
                        this.lstRecvIUTGetPo.push(recvIUTGetPosEntity);
                        this.spnrService.start();
                        return [4 /*yield*/, this.recvPoNonPoService.getIUTDetails(this.lstRecvIUTGetPo).
                                catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.lstRecvIutPoItems = data.DataList;
                                _this.statusCode = data.StatusCode;
                                switch (data.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.statusMsgs = [];
                                        _this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.statusMsgs = [];
                                        _this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Custom: {
                                        _this.statusMsgs = [];
                                        _this.statusMsgs.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                }
                            })];
                    case 1:
                        _a.sent();
                        if (!(this.statusCode == AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK)) return [3 /*break*/, 5];
                        drHeader = linq_es5_1.asEnumerable(this.lstScreenApp).Where(function (a) { return a.SCREEN_NAME == "IUT ITEMS"; }).ToArray();
                        this.gIUTTransactionID = "";
                        if (!(this.lstRecvIutPoItems != null && this.lstRecvIutPoItems.length > 0)) return [3 /*break*/, 4];
                        this.gIUTTransactionID = this.lstRecvIutPoItems[0].TRANSACTION_ID;
                        recvIutItemEntity = void 0;
                        for (i = 0; i < this.lstRecvIutPoItems.length; i++) {
                            strInterUnitLineNo = this.lstRecvIutPoItems[i].INTERUNIT_LINE;
                            if (strInterUnitLineNo == strPrevInterUnitLineNo) {
                                intLineNo += 1;
                            }
                            else {
                                intLineNo = 1;
                            }
                            strPrevInterUnitLineNo = strInterUnitLineNo;
                            recvIutItemEntity = new vm_recv_iut_items_1.VM_RECV_IUT_ITEMS();
                            recvIutItemEntity.TRANSACTION_ID = this.gIUTTransactionID;
                            recvIutItemEntity.DESTIN_BUSINESS_UNIT = this.lstRecvIutPoItems[i].DESTIN_BU;
                            this.hdnBunit = this.lstRecvIutPoItems[i].DESTIN_BU;
                            recvIutItemEntity.ORIG_BUSINESS_UNIT = this.lstRecvIutPoItems[i].ORIG_BU;
                            recvIutItemEntity.INTERUNIT_ID = this.lstRecvIutPoItems[i].INTERUNIT_ID;
                            this.hdnIUT = this.lstRecvIutPoItems[i].INTERUNIT_ID;
                            recvIutItemEntity.QTY_SHIPPED = this.lstRecvIutPoItems[i].QTY_SHIPPED;
                            recvIutItemEntity.LINE_NO = intLineNo.toString();
                            recvIutItemEntity.BILL_OF_LADING = "";
                            recvIutItemEntity.CARRIER_ID = "";
                            recvIutItemEntity.CUSTOM_ITEM_NO = "";
                            recvIutItemEntity.DESCRIPTION = this.lstRecvIutPoItems[i].DESCRIPTION;
                            recvIutItemEntity.GTIN = this.lstRecvIutPoItems[i].GTIN;
                            recvIutItemEntity.INTERUNIT_LINE = strInterUnitLineNo;
                            recvIutItemEntity.INV_LOT_ID = this.lstRecvIutPoItems[i].INV_LOT_ID;
                            recvIutItemEntity.ITEM_ID = this.lstRecvIutPoItems[i].INV_ITEM_ID;
                            recvIutItemEntity.LOT_CONTROLLED = this.lstRecvIutPoItems[i].LOT_FLAG;
                            recvIutItemEntity.MFG_ITEM_ID = this.lstRecvIutPoItems[i].MFG_ITEM_ID;
                            recvIutItemEntity.NO_OF_PKGS = "";
                            recvIutItemEntity.PACKAGING_STRING = this.lstRecvIutPoItems[i].PACKAGING_STRING;
                            recvIutItemEntity.PRICE = this.lstRecvIutPoItems[i].PRICE;
                            recvIutItemEntity.QTY = "";
                            recvIutItemEntity.QTY_RECEIVED = this.lstRecvIutPoItems[i].QTY_RECEIVED;
                            recvIutItemEntity.SERIAL_CONTROLLED = this.lstRecvIutPoItems[i].SERIAL_FLAG;
                            recvIutItemEntity.SERIAL_ID = this.lstRecvIutPoItems[i].SERIAL_ID;
                            recvIutItemEntity.STOR_LOC = this.lstRecvIutPoItems[i].DEST_SA + this.lstRecvIutPoItems[i].DEST_SL1 + this.lstRecvIutPoItems[i].DEST_SL2 +
                                this.lstRecvIutPoItems[i].DEST_SL3 + this.lstRecvIutPoItems[i].DEST_SL4;
                            recvIutItemEntity.UOM = this.lstRecvIutPoItems[i].UNIT_MEASURE_SHIP;
                            recvIutItemEntity.UPC_ID = this.lstRecvIutPoItems[i].UPC_ID;
                            recvIutItemEntity.VEND_ITEM_ID = this.lstRecvIutPoItems[i].VENDOR_ITEM_ID;
                            recvIutItemEntity.SCHDFLAG = false;
                            recvIutItemEntity.DDLUOMFLAG = false;
                            recvIutItemEntity.TXTQTYFLAG = false;
                            this.lstRecvIutItems.push(recvIutItemEntity);
                        }
                        if (!(this.lstRecvIutItems != null && this.lstRecvIutItems.length > 0)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.grdReceiveItems_RowDataBound(this.lstRecvIutItems)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.postbackGridBind(this.lstRecvIutItems, "IUT ITEMS")];
                    case 3:
                        _a.sent();
                        this.blnGrdRecvPoItems = false;
                        this.blnGrdRecvIutItems = true;
                        _a.label = 4;
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        if (this.statusCode == AtParStatusCodes_1.AtparStatusCodes.ATPAR_E_IUT_LOCKEDBYOTHERUSER) {
                            this.statusMsgs = [];
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "This IUT order is locked by another user" });
                            return [2 /*return*/];
                        }
                        else if (this.statusCode == AtParStatusCodes_1.AtparStatusCodes.E_NORECORDFOUND) {
                            this.statusMsgs = [];
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "No Records were returned" });
                            this.tbl = false;
                            return [2 /*return*/];
                        }
                        else if (this.statusCode != AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK) {
                            this.statusMsgs = [];
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Internal Server Error" });
                            return [2 /*return*/];
                        }
                        _a.label = 6;
                    case 6:
                        this.spnrService.stop();
                        return [3 /*break*/, 8];
                    case 7:
                        ex_21 = _a.sent();
                        this.clientErrorMsg(ex_21, "iutItemsBind");
                        return [3 /*break*/, 8];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.receivePoItemsBind = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var selectedInVoiceNo, selectedPakSlipNo, recvPoItemsEntity, ex_22, drHeader, i, previtem, prevLine, _loop_5, this_5, i, ex_23;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 13, , 14]);
                        this.statusMsgs = [];
                        this.statusCode = -1;
                        selectedInVoiceNo = "";
                        selectedPakSlipNo = "";
                        this.lstRecvPoItems = new Array();
                        this.spnrService.start();
                        this.lstReCallInfo = [];
                        if (this.txtInvoice != undefined && this.txtInvoice != null && this.txtInvoice != "") {
                            this.txtInvoice = this.txtInvoice.trim().replace("'", "''");
                        }
                        if (this.gStrASNDownload == "Invoice No") {
                            selectedInVoiceNo = this.txtInvoice;
                        }
                        else if (this.gStrASNDownload == "Pack Slip No") {
                            selectedPakSlipNo = this.txtInvoice;
                        }
                        recvPoItemsEntity = void 0;
                        recvPoItemsEntity = new vm_recv_poheader_1.VM_RECV_POHEADER();
                        if (this.arrlstPOSearch != null && this.arrlstPOSearch.length > 0) {
                            recvPoItemsEntity.BUSINESS_UNIT = this.arrlstPOSearch[0].BUSINESS_UNIT.toString();
                            recvPoItemsEntity.PO_NO = this.arrlstPOSearch[0].POID.toString();
                            recvPoItemsEntity.PACKSLIP_SEL_INVOICE_NO = selectedInVoiceNo;
                            recvPoItemsEntity.TOTAL_PO = "N";
                            recvPoItemsEntity.SHIP_TO_ID = this.arrlstPOSearch[0].SHPTID.toString();
                            recvPoItemsEntity.TRANS_ID = "";
                            if (this.chkIncludeAllPOLines != null) {
                                recvPoItemsEntity.INCLUDE_ALL_PO_LINES = this.chkIncludeAllPOLines.toString();
                            }
                            recvPoItemsEntity.SELECTED_PAK_SLIP_NO = selectedPakSlipNo;
                            recvPoItemsEntity.RECEIVER_ID = this.arrlstPOSearch[0].RECVID == "" ? "" : this.arrlstPOSearch[0].RECVID;
                            this.txtPONumber = this.arrlstPOSearch[0].POID;
                            this.txtIUT = "";
                        }
                        else {
                            recvPoItemsEntity.BUSINESS_UNIT = this.selectedBUnits == "Select BusinessUnit" ? "" : this.selectedBUnits;
                            if (this.txtPONumber != null && this.txtPONumber != "") {
                                recvPoItemsEntity.PO_NO = this.txtPONumber.trim().toUpperCase().replace("'", "''");
                            }
                            recvPoItemsEntity.PACKSLIP_SEL_INVOICE_NO = selectedInVoiceNo;
                            recvPoItemsEntity.TOTAL_PO = "N";
                            recvPoItemsEntity.SHIP_TO_ID = this.selectedShipToId == "Select ShipToID" ? "" : this.selectedShipToId.toString();
                            recvPoItemsEntity.TRANS_ID = "";
                            if (this.chkIncludeAllPOLines != null) {
                                recvPoItemsEntity.INCLUDE_ALL_PO_LINES = this.chkIncludeAllPOLines.toString();
                            }
                            recvPoItemsEntity.SELECTED_PAK_SLIP_NO = selectedPakSlipNo;
                            recvPoItemsEntity.RECEIVER_ID = "";
                        }
                        this.lstRecvPoItems.push(recvPoItemsEntity);
                        // this.spnrService.start();
                        return [4 /*yield*/, this.recvPoNonPoService.getHeader(this.lstRecvPoItems).
                                catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.statusCode = data.StatusCode;
                                if (data.DataDictionary != null) {
                                    if (data.DataDictionary['lstReceiverIds'] != null && data.DataDictionary['lstReceiverIds'].length > 0) {
                                        _this.lstAsnDetails = data.DataDictionary['lstReceiverIds'];
                                    }
                                }
                                _this.statusMsgs = [];
                                switch (data.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        if (data.DataDictionary != null) {
                                            _this.lstRecvSendPoHdrs = data.DataDictionary['listHeaders'];
                                            _this.lstGridRecvSendPoLines = data.DataDictionary['listLines'];
                                            _this.lstRecvAltUomData = data.DataDictionary['lstAltUOM'];
                                            if (data.DataDictionary['lstReceiverIds'] != null && data.DataDictionary['lstReceiverIds'].length > 0) {
                                                _this.lstAsnDetails = data.DataDictionary['lstReceiverIds'];
                                            }
                                            if (data.DataDictionary['lstRecallItems'] != null && data.DataDictionary['lstRecallItems'].length > 0) {
                                                _this.lstReCallInfo = data.DataDictionary['lstRecallItems'];
                                            }
                                        }
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.statusMsgs = [];
                                        _this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Custom: {
                                        _this.statusMsgs.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                }
                            })];
                    case 1:
                        // this.spnrService.start();
                        _a.sent();
                        this.spnrService.stop();
                        if (!(this.statusCode != AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK)) return [3 /*break*/, 9];
                        if (!(this.statusCode == AtParStatusCodes_1.AtparStatusCodes.RECV_S_MULTIPLERECEIVERSEXISTS)) return [3 /*break*/, 8];
                        if (!(this.gStrReceiverId == "" || this.gStrReceiverId == undefined)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.asnPopupshow()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                    case 3:
                        if (!this.gblnCancel) return [3 /*break*/, 4];
                        this.gblnCancel = false;
                        return [2 /*return*/];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        //Updating values to Input Dataset
                        this.lstRecvPoItems[0].PACKSLIP_SEL_INVOICE_NO = selectedInVoiceNo;
                        this.lstRecvPoItems[0].SELECTED_PAK_SLIP_NO = selectedPakSlipNo;
                        this.lstRecvPoItems[0].RECEIVER_ID = this.gStrReceiverId;
                        // strReceiverId = "";
                        this.statusCode = AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK;
                        // this.spnrService.start();
                        return [4 /*yield*/, this.recvPoNonPoService.getHeader(this.lstRecvPoItems).
                                catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                if (data.DataDictionary != null) {
                                    if (data.DataDictionary['lstReceiverIds'] != null && data.DataDictionary['lstReceiverIds'].length > 0) {
                                        _this.lstAsnDetails = data.DataDictionary['lstReceiverIds'];
                                    }
                                }
                                _this.statusCode = data.StatusCode;
                                _this.statusMsgs = [];
                                switch (data.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        if (data.DataDictionary != null) {
                                            _this.lstRecvSendPoHdrs = data.DataDictionary['listHeaders'];
                                            _this.lstGridRecvSendPoLines = data.DataDictionary['listLines'];
                                            _this.lstRecvAltUomData = data.DataDictionary['lstAltUOM'];
                                            if (data.DataDictionary['lstReceiverIds'] != null && data.DataDictionary['lstReceiverIds'].length > 0) {
                                                _this.lstAsnDetails = data.DataDictionary['lstReceiverIds'];
                                            }
                                            if (data.DataDictionary['lstRecallItems'] != null && data.DataDictionary['lstRecallItems'].length > 0) {
                                                _this.lstReCallInfo = data.DataDictionary['lstRecallItems'];
                                            }
                                        }
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.statusMsgs = [];
                                        _this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.statusMsgs = [];
                                        _this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Custom: {
                                        _this.statusMsgs = [];
                                        _this.statusMsgs.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                }
                            })];
                    case 5:
                        // this.spnrService.start();
                        _a.sent();
                        this.spnrService.stop();
                        this.gStrReceiverId = "";
                        return [3 /*break*/, 7];
                    case 6:
                        ex_22 = _a.sent();
                        this.clientErrorMsg(ex_22, "receivePoItemsBind");
                        return [3 /*break*/, 7];
                    case 7: return [3 /*break*/, 9];
                    case 8:
                        if (this.statusCode == AtParStatusCodes_1.AtparStatusCodes.RECV_E_LOCKEDBYOTHERUSER) {
                            this.statusMsgs = [];
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "This PO is locked by another user" });
                            this.spnrService.stop();
                            return [2 /*return*/];
                        }
                        else if (this.statusCode == AtParStatusCodes_1.AtparStatusCodes.RECV_S_RECEIPTNOTFOUND) {
                            this.statusMsgs = [];
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Receipt not found for given Invoice / Packing Slip" });
                            this.spnrService.stop();
                            return [2 /*return*/];
                        }
                        else if (this.statusCode == AtParStatusCodes_1.AtparStatusCodes.RECV_S_NO_POUOM_CONVERSIONRATE) {
                            this.statusMsgs = [];
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "The PO you are trying to get does not have conversion rate" });
                            this.spnrService.stop();
                            return [2 /*return*/];
                        }
                        else if (this.statusCode == AtParStatusCodes_1.AtparStatusCodes.RECV_S_INVALIDPOID) {
                            this.statusMsgs = [];
                            this.statusMsgs.push({
                                severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Multiple POs found for the given PO ID, please provide complete PO ID to download the PO"
                            });
                            this.spnrService.stop();
                            return [2 /*return*/];
                        }
                        else if (this.statusCode == AtParStatusCodes_1.AtparStatusCodes.E_NORECORDFOUND) {
                            this.statusMsgs = [];
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "No records were returned" });
                            this.tbl = false;
                            this.spnrService.stop();
                            return [2 /*return*/];
                        }
                        else if (this.statusCode == AtParStatusCodes_1.AtparStatusCodes.ATPAR_E_ASSIGN_ORGBUS) {
                            this.statusMsgs = [];
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "No Assigned Org Business Units" });
                            this.spnrService.stop();
                            return [2 /*return*/];
                        }
                        else if (this.statusCode == AtParStatusCodes_1.AtparStatusCodes.ATPAR_E_INVALIDTOKEN) {
                            this.statusMsgs = [];
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Invalid Token, The login user token is expired, login again to get a valid token" });
                            this.spnrService.stop();
                            return [2 /*return*/];
                        }
                        else if (this.statusCode != AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK) {
                            this.statusMsgs = [];
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "General Server Error" });
                            this.spnrService.stop();
                            return [2 /*return*/];
                        }
                        _a.label = 9;
                    case 9:
                        drHeader = linq_es5_1.asEnumerable(this.lstScreenApp).Where(function (a) { return a.SCREEN_NAME == "RECEIVE ITEMS"; }).ToArray();
                        if (this.lstRecvSendPoHdrs != null) {
                            for (i = 0; i < this.lstRecvSendPoHdrs.length; i++) {
                                if (this.lstRecvSendPoHdrs[i].TRANSACTION_ID != null) {
                                    this.gTransactionID = this.lstRecvSendPoHdrs[i].TRANSACTION_ID.toString();
                                }
                                if (this.lstRecvSendPoHdrs[i].COMMENTS != null) {
                                    if (this.lstRecvSendPoHdrs[i].COMMENTS != "") {
                                        //lblHdrComments.Visible = true;
                                        this.lblHdrComments = this.lstRecvSendPoHdrs[i].COMMENTS;
                                        if (this.lblHdrComments != null && this.lblHdrComments != "") {
                                            if (this.lblHdrComments.length > 160) {
                                                this.lblHdrCommentsToolTip = this.lblHdrComments;
                                                this.lblHdrComments = this.lblHdrComments.slice(0, 160) + "..";
                                            }
                                            else {
                                                this.lblHdrCommentsToolTip = "";
                                            }
                                        }
                                        if (this.gDisplayComments == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                            // lblHdrComments.ForeColor = Drawing.Color.Red;
                                        }
                                        else {
                                            // lblHdrComments.ForeColor = Drawing.Color.Black;
                                        }
                                    }
                                    else {
                                        //lblHdrComments.Visible = false;
                                        this.lblHdrComments = "";
                                    }
                                }
                                else {
                                    //lblHdrComments.Visible = false;
                                    this.lblHdrComments = "";
                                }
                                this.lblReceiverId = this.lstRecvSendPoHdrs[i].RECEIVER_ID;
                                if (this.lstRecvSendPoHdrs[i].RECEIVER_ID != null && this.lstRecvSendPoHdrs[i].RECEIVER_ID != "" && this.lblReceiverId != "X") {
                                    this.gblnASNPO = true;
                                }
                                this.hdnPO = this.lstRecvSendPoHdrs[i].PO_ID;
                                this.hdnBunit = this.lstRecvSendPoHdrs[i].BUSINESS_UNIT_PO;
                                this.gInvoiceMthdCode = this.lstRecvSendPoHdrs[i].INV_MTHD_CODE;
                                this.gDropShipFlag = this.lstRecvSendPoHdrs[i].DROP_SHIP_FL;
                                this.lblBuyerId = this.lstRecvSendPoHdrs[i].BUYER_ID;
                                this.lblPhoneValue = this.lstRecvSendPoHdrs[i].PHONE;
                            }
                        }
                        if (this.lstRecvSendPoHdrs != null) {
                            if (this.lstGridRecvSendPoLines != null && this.lstGridRecvSendPoLines.length > 0) {
                                this.lstRecvSendPoLines = [];
                                previtem = "";
                                prevLine = "";
                                if (this.lstGridRecvSendPoLines != null && this.lstGridRecvSendPoLines.length > 0) {
                                    _loop_5 = function (i) {
                                        if (previtem == this_5.lstGridRecvSendPoLines[i].INV_ITEM_ID && prevLine == this_5.lstGridRecvSendPoLines[i].LINE_NBR) {
                                            previtem = this_5.lstGridRecvSendPoLines[i].INV_ITEM_ID;
                                            prevLine = this_5.lstGridRecvSendPoLines[i].LINE_NBR;
                                        }
                                        else {
                                            previtem = this_5.lstGridRecvSendPoLines[i].INV_ITEM_ID;
                                            prevLine = this_5.lstGridRecvSendPoLines[i].LINE_NBR;
                                            var recvLines = linq_es5_1.asEnumerable(this_5.lstGridRecvSendPoLines).Where(function (x) { return x.INV_ITEM_ID == _this.lstGridRecvSendPoLines[i].INV_ITEM_ID && x.LINE_NBR == _this.lstGridRecvSendPoLines[i].LINE_NBR; }).ToArray();
                                            var dblLinePOQty = 0;
                                            var intSchedCount = 1;
                                            if (recvLines.length > 1) {
                                                for (var j = 0; j < recvLines.length; j++) {
                                                    dblLinePOQty += recvLines[j].QTY_PO;
                                                    intSchedCount += 1;
                                                }
                                                this_5.lstRecvSendPoLines.push({
                                                    TRANSACTION_ID: recvLines[recvLines.length - 1].TRANSACTION_ID,
                                                    BUSINESS_UNIT: recvLines[recvLines.length - 1].BUSINESS_UNIT,
                                                    PO_ID: recvLines[recvLines.length - 1].PO_ID,
                                                    STORAGE_LOCATION: recvLines[recvLines.length - 1].STORAGE_LOCATION,
                                                    LINE_NBR: recvLines[recvLines.length - 1].LINE_NBR,
                                                    SCHED_NBR: recvLines[recvLines.length - 1].SCHED_NBR,
                                                    SCHED_COUNT: intSchedCount,
                                                    INV_ITEM_ID: recvLines[recvLines.length - 1].INV_ITEM_ID,
                                                    ITM_ID_VNDR: recvLines[recvLines.length - 1].ITM_ID_VNDR,
                                                    MFG_ITEM_ID: recvLines[recvLines.length - 1].MFG_ITEM_ID,
                                                    DESCR: recvLines[recvLines.length - 1].DESCR,
                                                    INVENTORY_ITEM: recvLines[recvLines.length - 1].INVENTORY_ITEM,
                                                    UPC_ID: recvLines[recvLines.length - 1].UPC_ID,
                                                    COMMENTS: recvLines[recvLines.length - 1].COMMENTS,
                                                    DUE_DT: recvLines[recvLines.length - 1].DUE_DT,
                                                    QTY: recvLines[recvLines.length - 1].QTY,
                                                    ASN_QTY: recvLines[recvLines.length - 1].ASN_QTY,
                                                    QTY_PO: dblLinePOQty,
                                                    LINE_QTY: recvLines[recvLines.length - 1].LINE_QTY,
                                                    LINE_PO_QTY: recvLines[recvLines.length - 1].LINE_PO_QTY,
                                                    RECEIVED_QTY: recvLines[recvLines.length - 1].RECEIVED_QTY,
                                                    LOCATION: recvLines[recvLines.length - 1].LOCATION,
                                                    SHIPTO_ID: recvLines[recvLines.length - 1].SHIPTO_ID,
                                                    CARRIER_ID: recvLines[recvLines.length - 1].CARRIER_ID,
                                                    UNIT_OF_MEASURE: recvLines[recvLines.length - 1].UNIT_OF_MEASURE,
                                                    BILL_OF_LADING: recvLines[recvLines.length - 1].BILL_OF_LADING,
                                                    ASN_BILL_OF_LADING: recvLines[recvLines.length - 1].ASN_BILL_OF_LADING,
                                                    USER_ID: recvLines[recvLines.length - 1].USER_ID,
                                                    DEVICE_DT_TIME: recvLines[recvLines.length - 1].DEVICE_DT_TIME,
                                                    NO_OF_BOXES: recvLines[recvLines.length - 1].NO_OF_BOXES,
                                                    INSP_FLAG: recvLines[recvLines.length - 1].INSP_FLAG,
                                                    QTY_RECV_TOL_PCT: recvLines[recvLines.length - 1].QTY_RECV_TOL_PCT,
                                                    DELIVER_TO: recvLines[recvLines.length - 1].DELIVER_TO,
                                                    REQ_LOC_DESC: recvLines[recvLines.length - 1].REQ_LOC_DESC,
                                                    TRACKING_ID: "",
                                                    CUST_ITEM_NO: recvLines[recvLines.length - 1].CUST_ITEM_NO,
                                                    RECEIVING_ROUTING_ID: recvLines[recvLines.length - 1].RECEIVING_ROUTING_ID,
                                                    BIN_TRACK_FLAG: recvLines[recvLines.length - 1].BIN_TRACK_FLAG,
                                                    ASSET_ITEM_FLAG: recvLines[recvLines.length - 1].ASSET_ITEM_FLAG,
                                                    EXT_TRK_NO: recvLines[recvLines.length - 1].EXT_TRK_NO,
                                                    QTY_UPDATE: recvLines[recvLines.length - 1].QTY_UPDATE,
                                                    ISSUE_UOM: recvLines[recvLines.length - 1].ISSUE_UOM,
                                                    CONVERSION_RATE: recvLines[recvLines.length - 1].CONVERSION_RATE,
                                                    RECV_UOM: recvLines[recvLines.length - 1].RECV_UOM,
                                                    RECV_CONVERSION_RATE: recvLines[recvLines.length - 1].RECV_CONVERSION_RATE,
                                                    GTIN: recvLines[recvLines.length - 1].GTIN,
                                                    LOT_CONTROLLED: recvLines[recvLines.length - 1].LOT_CONTROLLED,
                                                    SERIAL_CONTROLLED: recvLines[recvLines.length - 1].SERIAL_CONTROLLED,
                                                    RECAL_FLAG: recvLines[recvLines.length - 1].RECAL_FLAG,
                                                    ADDRESS1: recvLines[recvLines.length - 1].ADDRESS1,
                                                    ADDRESS2: recvLines[recvLines.length - 1].ADDRESS2,
                                                    ADDRESS3: recvLines[recvLines.length - 1].ADDRESS3,
                                                    PHONE: recvLines[recvLines.length - 1].PHONE,
                                                    REQ_NUM: recvLines[recvLines.length - 1].REQ_NUM,
                                                    PRICE: recvLines[recvLines.length - 1].PRICE,
                                                    PACKAGING_STRING: recvLines[recvLines.length - 1].PACKAGING_STRING,
                                                    BUILDING: recvLines[recvLines.length - 1].BUILDING,
                                                    FLOOR: recvLines[recvLines.length - 1].FLOOR,
                                                    SECTOR: recvLines[recvLines.length - 1].SECTOR,
                                                    REQUISITION_NAME: recvLines[recvLines.length - 1].REQUISITION_NAME,
                                                    BUYER_NAME: recvLines[recvLines.length - 1].BUYER_NAME,
                                                    LOC_DESCR: recvLines[recvLines.length - 1].LOC_DESCR,
                                                    ITEMID_DESC: recvLines[recvLines.length - 1].ITEMID_DESC,
                                                    ALT_UOM: recvLines[recvLines.length - 1].ALT_UOM,
                                                    OPENQTY: recvLines[recvLines.length - 1].OPENQTY,
                                                    START_DT_TIME: recvLines[recvLines.length - 1].START_DT_TIME,
                                                    END_DT_TIME: recvLines[recvLines.length - 1].END_DT_TIME,
                                                    STATUS: recvLines[recvLines.length - 1].STATUS,
                                                    RECEIVED_FLAG: recvLines[recvLines.length - 1].RECEIVED_FLAG,
                                                    RBFlAG: false,
                                                    DDLUOMS: null,
                                                    SELECTEDUOM: "",
                                                    LINE_ID: "",
                                                    PRVCARRIER_ID: "",
                                                    SCHDFLAG: true,
                                                    DDLUOMFLAG: true,
                                                    TXTQTYFLAG: true,
                                                    DESCR_TOOLTIP: "",
                                                    QTYDESABLEFLAG: false,
                                                    LOTSERIALSCHDFLAG: false,
                                                    SCHDQTYCHANGFLAG: false
                                                });
                                                this_5.blnScheduleItems = true;
                                            }
                                            else {
                                                recvLines[recvLines.length - 1].TRACKING_ID = "";
                                                recvLines[recvLines.length - 1].RBFlAG = false;
                                                recvLines[recvLines.length - 1].SCHDFLAG = false;
                                                recvLines[recvLines.length - 1].DDLUOMFLAG = false;
                                                recvLines[recvLines.length - 1].TXTQTYFLAG = false;
                                                this_5.lstRecvSendPoLines.push(recvLines[recvLines.length - 1]);
                                            }
                                        }
                                    };
                                    this_5 = this;
                                    for (i = 0; i < this.lstGridRecvSendPoLines.length; i++) {
                                        _loop_5(i);
                                    }
                                }
                            }
                        }
                        if (!(this.lstRecvSendPoLines != null && this.lstRecvSendPoLines.length > 0)) return [3 /*break*/, 12];
                        this.lstRecvSendPoLines = linq_es5_1.asEnumerable(this.lstRecvSendPoLines).OrderBy(function (x) { return x.LINE_NBR; }).ToArray();
                        this.spnrService.start();
                        return [4 /*yield*/, this.grdReceiveItems_RowDataBound(this.lstRecvSendPoLines)];
                    case 10:
                        _a.sent();
                        return [4 /*yield*/, this.postbackGridBind(this.lstRecvSendPoLines, "RECEIVE ITEMS")];
                    case 11:
                        _a.sent();
                        this.blnGrdRecvIutItems = false;
                        this.blnGrdRecvPoItems = true;
                        this.plus = true;
                        this.minus = false;
                        this.spnrService.stop();
                        _a.label = 12;
                    case 12: return [3 /*break*/, 14];
                    case 13:
                        ex_23 = _a.sent();
                        this.spnrService.stop();
                        this.clientErrorMsg(ex_23, "receivePoItemsBind");
                        return [3 /*break*/, 14];
                    case 14: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.grdReceiveItems_RowDataBound = function (recvDetails) {
        return __awaiter(this, void 0, void 0, function () {
            var intConverfactor, strUOM, _loop_6, this_6, i, lnkItemId, dtIUTDetails, i, strSerialControlled, i, strLot, strSerial, schedNbr, txtQty, txtLadg, txttrkno, txtnoofboxes, lnkItemId, ex_24;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 12, , 13]);
                        this.statusMsgs = [];
                        intConverfactor = 0;
                        strUOM = "";
                        return [4 /*yield*/, this.populateCarrierDropDown(this.selectedDdlCarrier)];
                    case 1:
                        _a.sent();
                        if (this.gStrDisplayReceivedQty == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString()) {
                        }
                        if (!(this.lstRecvSendPoLines != null && this.lstRecvSendPoLines.length > 0)) return [3 /*break*/, 6];
                        if (!(recvDetails != null && recvDetails.length > 0)) return [3 /*break*/, 5];
                        _loop_6 = function (i) {
                            var strLot, strSerial, schedNbr, txtQty, txtLadg, txttrkno, txtnoofboxes, lnkItemId, schedCount, strRecallFlag, dtRecallInfo, dr;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        strLot = recvDetails[i].LOT_CONTROLLED;
                                        strSerial = recvDetails[i].SERIAL_CONTROLLED;
                                        schedNbr = recvDetails[i].SCHED_NBR;
                                        txtQty = recvDetails[i].QTY;
                                        txtLadg = recvDetails[i].BILL_OF_LADING;
                                        txttrkno = recvDetails[i].EXT_TRK_NO;
                                        txtnoofboxes = recvDetails[i].NO_OF_BOXES;
                                        lnkItemId = recvDetails[i].INV_ITEM_ID;
                                        if (recvDetails[i].CONVERSION_RATE != null) {
                                            intConverfactor = parseInt(recvDetails[i].CONVERSION_RATE.toString());
                                        }
                                        if (recvDetails[i].DESCR != null && recvDetails[i].DESCR.length > 30) {
                                            recvDetails[i].DESCR_TOOLTIP = recvDetails[i].DESCR;
                                            recvDetails[i].DESCR = recvDetails[i].DESCR.slice(0, 30) + "..";
                                        }
                                        strUOM = recvDetails[i].UNIT_OF_MEASURE;
                                        return [4 /*yield*/, this_6.populateUOM(intConverfactor, strUOM, recvDetails[i].LINE_NBR.toString(), strSerial, strLot, recvDetails[i])];
                                    case 1:
                                        _a.sent();
                                        if (recvDetails[i].CARRIER_ID != null && recvDetails[i].CARRIER_ID != "") {
                                        }
                                        schedCount = recvDetails[i].SCHED_COUNT.toString();
                                        if (schedCount == "1") {
                                            this_6.blnlnkItemIdEnable = false;
                                            this_6.blnlnkLineNbrEnable = false;
                                            if ((strLot == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() || strSerial == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) &&
                                                this_6.gStrLotSerial == AtParEnums_1.Enable_Lot_Serial_Tracking[AtParEnums_1.Enable_Lot_Serial_Tracking.MMIS].toString()) {
                                                recvDetails[i].TXTQTYFLAG = true;
                                                recvDetails[i].DDLUOMFLAG = true;
                                                this_6.recvGrdCarrierEnable = true;
                                            }
                                            else {
                                                recvDetails[i].TXTQTYFLAG = false;
                                            }
                                        }
                                        else {
                                            if (parseInt(schedCount) > 1) {
                                                if (this_6.gblnASNPO && (this_6.gblnScheduleFlg == false)) {
                                                    recvDetails[i].QTY = "";
                                                }
                                            }
                                        }
                                        strRecallFlag = recvDetails[i].RECAL_FLAG;
                                        if (strRecallFlag == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                            dtRecallInfo = this_6.lstReCallInfo;
                                            if (dtRecallInfo != null && dtRecallInfo.length > 0) {
                                                dr = dtRecallInfo.filter(function (x) { return x.ITEM_ID == lnkItemId && (x.LOT_NO == "" || x.LOT_NO == null) && (x.SERIAL_NO == "" || x.SERIAL_NO == null); });
                                                if (dr != null && dr.length > 0) {
                                                    recvDetails[i].TXTQTYFLAG = true;
                                                }
                                            }
                                        }
                                        if (this_6.strDefaultCarrierID != null && this_6.strDefaultCarrierID != "" && this_6.strDefaultCarrierID != undefined) {
                                            if (recvDetails[i].SCHED_COUNT != null && recvDetails[i].SCHED_COUNT != undefined && recvDetails[i].SCHED_COUNT <= 1) {
                                                recvDetails[i].CARRIER_ID = this_6.strDefaultCarrierID.toUpperCase();
                                            }
                                        }
                                        return [2 /*return*/];
                                }
                            });
                        };
                        this_6 = this;
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < recvDetails.length)) return [3 /*break*/, 5];
                        return [5 /*yield**/, _loop_6(i)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 11];
                    case 6:
                        if (!(this.lstRecvIutItems != null)) return [3 /*break*/, 7];
                        if (recvDetails != null && recvDetails.length > 0) {
                            lnkItemId = recvDetails.ITEM_ID;
                            this.blnlnkItemIdEnable = false;
                            this.blnlnkLineNbrEnable = false;
                            dtIUTDetails = this.lstRecvIutItems;
                            for (i = 0; i < recvDetails.length; i++) {
                                strSerialControlled = recvDetails[i].SERIAL_CONTROLLED;
                                if (strSerialControlled == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                    this.txtQty = "1";
                                    recvDetails[i].TXTQTYFLAG = true;
                                }
                                else {
                                    recvDetails[i].TXTQTYFLAG = false;
                                }
                            }
                        }
                        return [3 /*break*/, 11];
                    case 7:
                        if (!(this.dtScheduleItems != null && this.dtScheduleItems.length > 0 && this.dtScheduleItems != undefined)) return [3 /*break*/, 11];
                        if (!(recvDetails != null && recvDetails.length > 0)) return [3 /*break*/, 11];
                        i = 0;
                        _a.label = 8;
                    case 8:
                        if (!(i < recvDetails.length)) return [3 /*break*/, 11];
                        strLot = recvDetails[i].LOT_CONTROLLED;
                        strSerial = recvDetails[i].SERIAL_CONTROLLED;
                        schedNbr = recvDetails[i].SCHED_NBR;
                        txtQty = recvDetails[i].QTY;
                        txtLadg = recvDetails[i].BILL_OF_LADING;
                        txttrkno = recvDetails[i].EXT_TRK_NO;
                        txtnoofboxes = recvDetails[i].NO_OF_BOXES;
                        lnkItemId = recvDetails[i].INV_ITEM_ID;
                        if (recvDetails[i].CONVERSION_RATE != null) {
                            intConverfactor = parseInt(recvDetails[i].CONVERSION_RATE.toString());
                        }
                        strUOM = recvDetails[i].UNIT_OF_MEASURE;
                        return [4 /*yield*/, this.populateUOM(intConverfactor, strUOM, recvDetails[i].LINE_NBR.toString(), strSerial, strLot, recvDetails[i])];
                    case 9:
                        _a.sent();
                        if (this.gStrDisplayReceivedQty == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString()) {
                            //if (recvDetails[i].QTY != null) {
                            //    recvDetails[i].QTY = null;
                            //}
                        }
                        if (this.gStrLotSerial != AtParEnums_1.Enable_Lot_Serial_Tracking[AtParEnums_1.Enable_Lot_Serial_Tracking.None].toString()) {
                            if (this.gStrLotSerial == AtParEnums_1.Enable_Lot_Serial_Tracking[AtParEnums_1.Enable_Lot_Serial_Tracking.MMIS].toString()) {
                                if ((strLot == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() || strSerial == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString())) {
                                    recvDetails[i].TXTQTYFLAG = true;
                                    recvDetails[i].DDLUOMFLAG = true;
                                    this.recvGrdCarrierEnable = true;
                                    //txtQty.Enabled = False
                                    //ddlUOM.Enabled = False
                                }
                                else {
                                    recvDetails[i].TXTQTYFLAG = false;
                                }
                            }
                            else if (this.gStrLotSerial == AtParEnums_1.Enable_Lot_Serial_Tracking[AtParEnums_1.Enable_Lot_Serial_Tracking.AtPar].toString()) {
                                //let dr = this.dtScheduleItems.filter(x => (x.LOT_NO != "" || x.LOT_NO != null) && x.SCHED_NBR == schedNbr);
                            }
                        }
                        //let dr = this.dtScheduleItems.filter(x => x.QTY != null && x.ITEM_ID == lnkItemId && (x.LOT_NO == "" || x.LOT_NO == null) && (x.SERIAL_NO == "" || x.SERIAL_NO == null) && x.DELETE_FLAG == YesNo_Enum[YesNo_Enum.N].toString() && && x.SCHED_NBR == schedNbr);
                        //if (dr != null && dr.length > 0) {
                        //    let intTolRecvQty: number = 0;
                        //}
                        if (this.strDefaultCarrierID != null && this.strDefaultCarrierID != "" && this.strDefaultCarrierID != undefined) {
                            recvDetails[i].CARRIER_ID = this.strDefaultCarrierID.toUpperCase();
                        }
                        _a.label = 10;
                    case 10:
                        i++;
                        return [3 /*break*/, 8];
                    case 11: return [3 /*break*/, 13];
                    case 12:
                        ex_24 = _a.sent();
                        this.clientErrorMsg(ex_24, "grdReceiveItems_RowDataBound");
                        return [3 /*break*/, 13];
                    case 13: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.postbackGridBind = function (recvDetails, strScreen) {
        return __awaiter(this, void 0, void 0, function () {
            var mgfItem, noOfBoxes, price, packagingString, serialCon, lotCon, extTrk, recQty, trackId, GTIN, UPC, shipID;
            return __generator(this, function (_a) {
                try {
                    this.tbl = true;
                    if (strScreen == "IUT ITEMS") {
                        this.btnPntrHeaderDisable = true; //Enabled=false
                        this.btnPntrDetailsDisable = true; //Enabled=false
                    }
                    else {
                        this.btnPntrHeaderDisable = false; //Enabled=false
                        this.btnPntrDetailsDisable = true;
                    }
                    if (this.gStrLotSerial != "None" && strScreen != "IUT ITEMS") {
                        this.btnPntrLotSerialVisible = true;
                        this.btnLotSerialDisable = true; //Enabled = false;
                    }
                    else {
                        this.btnPntrLotSerialVisible = false;
                    }
                    mgfItem = this.lstScreenApp.filter(function (x) { return x.FIELD_NAME == 'MFG_ITEM_ID' && x.DISPLAY_FIELD == 'Y' && x.SCREEN_NAME == 'RECEIVE ITEMS'; });
                    if (mgfItem != null && mgfItem.length > 0) {
                        this.blnMgf = true;
                    }
                    else {
                        this.blnMgf = false;
                    }
                    noOfBoxes = this.lstScreenApp.filter(function (x) { return x.FIELD_NAME == 'NO_OF_BOXES' && x.DISPLAY_FIELD == 'Y' && x.SCREEN_NAME == 'RECEIVE ITEMS'; });
                    if (noOfBoxes != null && noOfBoxes.length > 0) {
                        this.blnNoofBoxes = true;
                    }
                    else {
                        this.blnNoofBoxes = false;
                    }
                    price = this.lstScreenApp.filter(function (x) { return x.FIELD_NAME == 'PRICE' && x.DISPLAY_FIELD == 'Y' && x.SCREEN_NAME == 'RECEIVE ITEMS'; });
                    if (price != null && price.length > 0) {
                        this.blnItemPrice = true;
                    }
                    else {
                        this.blnItemPrice = false;
                    }
                    packagingString = this.lstScreenApp.filter(function (x) { return x.FIELD_NAME == 'PACKAGING_STRING' && x.DISPLAY_FIELD == 'Y' && x.SCREEN_NAME == 'RECEIVE ITEMS'; });
                    if (packagingString != null && packagingString.length > 0) {
                        this.blnPackage = true;
                    }
                    else {
                        this.blnPackage = false;
                    }
                    serialCon = this.lstScreenApp.filter(function (x) { return x.FIELD_NAME == 'SERIAL_CONTROLLED' && x.DISPLAY_FIELD == 'Y' && x.SCREEN_NAME == 'RECEIVE ITEMS'; });
                    if (serialCon != null && serialCon.length > 0) {
                        this.blnSerial = true;
                    }
                    else {
                        this.blnSerial = false;
                    }
                    lotCon = this.lstScreenApp.filter(function (x) { return x.FIELD_NAME == 'LOT_CONTROLLED' && x.DISPLAY_FIELD == 'Y' && x.SCREEN_NAME == 'RECEIVE ITEMS'; });
                    if (lotCon != null && lotCon.length > 0) {
                        this.blnLot = true;
                    }
                    else {
                        this.blnLot = false;
                    }
                    extTrk = this.lstScreenApp.filter(function (x) { return x.FIELD_NAME == 'EXT_TRK_NO' && x.DISPLAY_FIELD == 'Y' && x.SCREEN_NAME == 'RECEIVE ITEMS'; });
                    if (extTrk != null && extTrk.length > 0) {
                        this.blnExtrkNo = true;
                    }
                    else {
                        this.blnExtrkNo = false;
                    }
                    recQty = this.lstScreenApp.filter(function (x) { return x.FIELD_NAME == 'RECEIVED_QTY' && x.DISPLAY_FIELD == 'Y' && x.SCREEN_NAME == 'RECEIVE ITEMS'; });
                    if (recQty != null && recQty.length > 0) {
                        this.blnRecQty = true;
                    }
                    else {
                        this.blnRecQty = false;
                    }
                    trackId = this.lstScreenApp.filter(function (x) { return x.FIELD_NAME == 'TRACKING_ID' && x.DISPLAY_FIELD == 'Y' && x.SCREEN_NAME == 'RECEIVE ITEMS'; });
                    if (trackId != null && trackId.length > 0) {
                        this.blnTrkNo = true;
                    }
                    else {
                        this.blnTrkNo = false;
                    }
                    GTIN = this.lstScreenApp.filter(function (x) { return x.FIELD_NAME == 'GTIN' && x.DISPLAY_FIELD == 'Y' && x.SCREEN_NAME == 'RECEIVE ITEMS'; });
                    if (GTIN != null && GTIN.length > 0) {
                        this.blnGTIN = true;
                    }
                    else {
                        this.blnGTIN = false;
                    }
                    UPC = this.lstScreenApp.filter(function (x) { return x.FIELD_NAME == 'UPC_ID' && x.DISPLAY_FIELD == 'Y' && x.SCREEN_NAME == 'RECEIVE ITEMS'; });
                    if (UPC != null && UPC.length > 0) {
                        this.blnUPC = true;
                    }
                    else {
                        this.blnUPC = false;
                    }
                    shipID = this.lstScreenApp.filter(function (x) { return x.FIELD_NAME == 'SHIPTO_ID' && x.DISPLAY_FIELD == 'Y' && x.SCREEN_NAME == 'RECEIVE ITEMS'; });
                    if (shipID != null && shipID.length > 0) {
                        this.blnShip = true;
                    }
                    else {
                        this.blnShip = false;
                    }
                    this.hdnNonPo = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString();
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "postbackGridBind");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.checkColumnExist = function (colname, screenName) {
        var count = this.lstScreenApp.filter(function (x) { return x.FIELD_NAME == colname && x.DISPLAY_FIELD == 'Y' && x.SCREEN_NAME == screenName; });
        if (count != null && count.length > 0) {
            return true;
        }
        else {
            return false;
        }
    };
    PoNonPoReceiptsComponent.prototype.populateUOM = function (intConverfactor, strUOM, lineNbr, strSerialControlled, strLot, recvDetails) {
        return __awaiter(this, void 0, void 0, function () {
            var drUOM, i, i, intAltConFact, strListUom, arrListUom, i;
            return __generator(this, function (_a) {
                try {
                    if (this.gStrUOMEditFlag == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                        if (strSerialControlled == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() &&
                            this.gStrLotSerial != AtParEnums_1.Enable_Lot_Serial_Tracking[AtParEnums_1.Enable_Lot_Serial_Tracking.None].toString()) {
                            recvDetails.DDLUOMFLAG = true;
                            this.ddlRecvUomEnable = true;
                        }
                        else {
                            this.ddlRecvUomEnable = false;
                            recvDetails.DDLUOMFLAG = false;
                        }
                        this.selectedRecvUom = "";
                        this.ddlRecvUom = [];
                        if (this.lstRecvAltUomData.length > 0) {
                            drUOM = linq_es5_1.asEnumerable(this.lstRecvAltUomData).Where(function (x) { return x.LN_NBR == lineNbr; }).ToArray();
                            if (intConverfactor == 1) {
                                this.standardUOM = strUOM;
                                this.standardConversionRate = intConverfactor;
                            }
                            else {
                                //Loop thru the alternateUOMs and Set values
                                for (i = 0; i < drUOM.length; i++) {
                                    if (drUOM[i].CONV_FACT == "1") {
                                        this.standardUOM = drUOM[i].UOM;
                                        this.standardConversionRate = drUOM[i].CONV_FACT;
                                    }
                                }
                            }
                            for (i = 0; i < drUOM.length; i++) {
                                intAltConFact = parseInt(drUOM[i].CONV_FACT);
                                if (this.gStrAltUOMDisplay == this.gRecv_StandardUOM) {
                                    intAltConFact = intAltConFact / parseInt(this.standardConversionRate);
                                    this.ddlRecvUom.push({ label: drUOM[i].UOM + "(" + intAltConFact + " " + this.standardUOM + ")", value: drUOM[i].UOM + "(" + intAltConFact + " " + this.standardUOM + ")" });
                                }
                                else if (this.gStrAltUOMDisplay == this.gRecv_PoUOM) {
                                    if ((intAltConFact % parseInt(intConverfactor)) == 0) {
                                        if (intAltConFact == intConverfactor) {
                                            intAltConFact = 1;
                                            this.ddlRecvUom.push({ label: drUOM[i].UOM + "(" + intAltConFact + " " + strUOM + ")", value: drUOM[i].UOM + "(" + intAltConFact + " " + strUOM + ")" });
                                            this.gPOUOM = strUOM;
                                            this.gPOUOMConversionRate = intAltConFact.toString();
                                        }
                                        else if (intConverfactor == 1) {
                                            intAltConFact = intAltConFact;
                                            this.ddlRecvUom.push({ label: drUOM[i].UOM + "(" + intAltConFact + " " + strUOM + ")", value: drUOM[i].UOM + "(" + intAltConFact + " " + strUOM + ")" });
                                            this.gPOUOM = strUOM;
                                            this.gPOUOMConversionRate = intAltConFact.toString();
                                        }
                                        else {
                                            this.ddlRecvUom.push({ label: drUOM[i].UOM + "(" + intAltConFact + "/" + intConverfactor + " " + strUOM + ")", value: drUOM[i].UOM + "(" + intAltConFact + "/" + intConverfactor + " " + strUOM + ")" });
                                            this.gPOUOM = strUOM;
                                            this.gPOUOMConversionRate = intAltConFact.toString();
                                        }
                                    }
                                    else {
                                        this.ddlRecvUom.push({ label: drUOM[i].UOM + "(" + intAltConFact + "/" + intConverfactor + " " + strUOM + ")", value: drUOM[i].UOM + "(" + intAltConFact + "/" + intConverfactor + " " + strUOM + ")" });
                                    }
                                }
                            }
                            if (strUOM != null) {
                                if (this.gStrUOMEditFlag == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                    if (this.gStrAltUOMDisplay == this.gRecv_StandardUOM) {
                                        //Not String.IsNullOrEmpty(gItemId) And Then
                                        if (intConverfactor != null) {
                                            this.ddlRecvUom.push({ label: strUOM + "(" + intConverfactor + " " + this.standardUOM + ")", value: strUOM + "(" + intConverfactor + " " + this.standardUOM + ")" });
                                        }
                                        else {
                                            this.ddlRecvUom.push({ label: strUOM + "(" + this.standardUOM + ")", value: strUOM + "(" + this.standardUOM + ")" });
                                        }
                                    }
                                    else if (this.gStrAltUOMDisplay == this.gRecv_PoUOM) {
                                        //Not String.IsNullOrEmpty(gItemId) And Then
                                        if (intConverfactor != null) {
                                            this.ddlRecvUom.push({ label: strUOM + "(" + intConverfactor / intConverfactor + " " + strUOM + ")", value: strUOM + "(" + intConverfactor / intConverfactor + " " + strUOM + ")" });
                                            this.gPOUOM = strUOM;
                                            this.gPOUOMConversionRate = intConverfactor.toString();
                                        }
                                        else {
                                            this.ddlRecvUom.push({ label: strUOM + "(" + strUOM + ")", value: strUOM + "(" + strUOM + ")" });
                                            this.gPOUOM = strUOM;
                                            this.gPOUOMConversionRate = "1";
                                        }
                                    }
                                }
                                else {
                                    //Not String.IsNullOrEmpty(gItemId) And Then
                                    if (intConverfactor != null) {
                                        this.ddlRecvUom.push({ label: strUOM + "(" + intConverfactor / intConverfactor + " " + strUOM + ")", value: strUOM + "(" + intConverfactor / intConverfactor + " " + strUOM + ")" });
                                    }
                                    else {
                                        this.ddlRecvUom.push({ label: strUOM + "(" + strUOM + ")", value: strUOM + "(" + strUOM + ")" });
                                    }
                                }
                            }
                            else {
                                this.ddlRecvUom = [];
                            }
                            strListUom = null;
                            arrListUom = [];
                            if (this.ddlRecvUom != null && this.ddlRecvUom.length > 0) {
                                for (i = 0; i < this.ddlRecvUom.length; i++) {
                                    strListUom = this.ddlRecvUom[i].label.toString();
                                    if (strListUom != null && strListUom != undefined && strListUom != "") {
                                        arrListUom = strListUom.split('(');
                                    }
                                    if (strUOM == arrListUom[0]) {
                                        this.selectedRecvUom = strListUom;
                                        recvDetails.SELECTEDUOM = strListUom;
                                    }
                                }
                            }
                        }
                        else {
                            intConverfactor = (intConverfactor == 0 ? 1 : intConverfactor);
                            this.ddlRecvUom.push({ label: strUOM + "(" + intConverfactor / intConverfactor + " " + strUOM + ")", value: strUOM + "(" + intConverfactor / intConverfactor + " " + strUOM + ")" });
                        }
                    }
                    else {
                        recvDetails.DDLUOMFLAG = true;
                        this.ddlRecvUomEnable = true;
                        this.ddlRecvUom = [];
                        intConverfactor = (intConverfactor == 0 ? 1 : intConverfactor);
                        this.ddlRecvUom.push({ label: strUOM + "(" + intConverfactor / intConverfactor + " " + strUOM + ")", value: strUOM + "(" + intConverfactor / intConverfactor + " " + strUOM + ")" });
                    }
                    if (this.LotSerialentity != null) {
                        this.LotSerialentity.DDLUOMS = this.ddlRecvUom;
                        if (this.ddlRecvUom != null && this.ddlRecvUom.length > 0 &&
                            (recvDetails.SELECTEDUOM == null || recvDetails.SELECTEDUOM == "" || recvDetails.SELECTEDUOM == undefined)) {
                            recvDetails.SELECTEDUOM = this.ddlRecvUom[0].value;
                        }
                        this.LotSerialentity.SELECTED_UOM = recvDetails.SELECTEDUOM;
                        this.strLotSerialUom = recvDetails.SELECTEDUOM;
                    }
                    recvDetails.DDLUOMS = this.ddlRecvUom;
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "populateUOM");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.sendIUTOrderToServer = function (trnsId, recvData, startTime, endTime) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var iutDetails, iutEntityDtls, drIUTCountedItem, i, dateStr, drIUTHeader, drIUTTrans, dictDataItems, ex_25;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        this.statusMsgs = [];
                        iutDetails = [];
                        iutEntityDtls = null;
                        drIUTCountedItem = linq_es5_1.asEnumerable(recvData).Where(function (x) { return x.QTY != ""; }).ToArray();
                        for (i = 0; i < drIUTCountedItem.length; i++) {
                            iutEntityDtls = new vm_recv_iut_items_1.VM_RECV_IUT_ITEMS();
                            iutEntityDtls.TRANSACTION_ID = drIUTCountedItem[i].TRANSACTION_ID;
                            iutEntityDtls.DESTIN_BUSINESS_UNIT = drIUTCountedItem[i].DESTIN_BUSINESS_UNIT;
                            iutEntityDtls.ORIG_BUSINESS_UNIT = drIUTCountedItem[i].ORIG_BUSINESS_UNIT;
                            iutEntityDtls.INTERUNIT_ID = drIUTCountedItem[i].INTERUNIT_ID;
                            dateStr = new Date(new Date()).toLocaleString().replace(/[^A-Za-z 0-9 \.,\?""!@#\$%\^&\*\(\)-_=\+;:<>\/\\\|\}\{\[\]`~]*/g, '');
                            if (this.gSTime != "") {
                                this.gSTime = dateStr.replace(',', '');
                            }
                            iutEntityDtls.START_DT_TIME = this.gSTime; // Strings.Format(dtStTime, ATPAR_LONGDATETIME_24H);                
                            iutEntityDtls.END_DT_TIME = dateStr.replace(',', ''); // Strings.Format(dtStTime, ATPAR_LONGDATETIME_24H);                
                            iutEntityDtls.USER_ID = this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.UserID].toString();
                            iutEntityDtls.LINE_NO = drIUTCountedItem[i].LINE_NO;
                            iutEntityDtls.ITEM_ID = drIUTCountedItem[i].ITEM_ID;
                            iutEntityDtls.DESCRIPTION = drIUTCountedItem[i].DESCRIPTION;
                            iutEntityDtls.QTY = drIUTCountedItem[i].QTY;
                            iutEntityDtls.QTY_SHIPPED = drIUTCountedItem[i].QTY_SHIPPED;
                            iutEntityDtls.UOM = drIUTCountedItem[i].UOM;
                            iutEntityDtls.CARRIER_ID = drIUTCountedItem[i].CARRIER_ID;
                            iutEntityDtls.BILL_OF_LADING = drIUTCountedItem[i].BILL_OF_LADING;
                            if ((drIUTCountedItem[i].NO_OF_PKGS != "")) {
                                iutEntityDtls.NO_OF_PKGS = drIUTCountedItem[i].NO_OF_PKGS;
                            }
                            else {
                                iutEntityDtls.NO_OF_PKGS = "1";
                            }
                            iutEntityDtls.INV_LOT_ID = drIUTCountedItem[i].INV_LOT_ID;
                            iutEntityDtls.SERIAL_ID = drIUTCountedItem[i].SERIAL_ID;
                            iutEntityDtls.INTERUNIT_LINE = drIUTCountedItem[i].INTERUNIT_LINE;
                            iutDetails.push(iutEntityDtls);
                        }
                        if (!(recvData.length > 0)) return [3 /*break*/, 2];
                        drIUTHeader = [];
                        drIUTHeader.push({
                            PRODUCT_ID: AtParEnums_1.EnumApps.Receiving.toString()
                        });
                        drIUTTrans = [];
                        drIUTTrans.push({
                            TRANSACTION_ID: trnsId
                        });
                        dictDataItems = {
                            'HEADER': drIUTHeader, 'DETAILS': iutDetails, 'TRANSACTIONS': drIUTTrans
                        };
                        return [4 /*yield*/, this.recvPoNonPoService.sendIUTDetails(dictDataItems).
                                catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.statusCode = data.StatusCode;
                                switch (data.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Custom: {
                                        _this.statusMsgs.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                }
                            })];
                    case 1:
                        _a.sent();
                        if (this.statusCode == AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK) {
                        }
                        else {
                            return [2 /*return*/, this.statusCode];
                        }
                        _a.label = 2;
                    case 2: return [3 /*break*/, 4];
                    case 3:
                        ex_25 = _a.sent();
                        this.clientErrorMsg(ex_25, "sendIUTOrderToServer");
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/, this.statusCode];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.sendToServer = function (trnsId, transCode, tempPoId, startTime, endTime) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var _a, dictDataItems, ex_26;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 3, , 4]);
                        this.statusMsgs = [];
                        this.statusCode = -1;
                        _a = this;
                        return [4 /*yield*/, this.prepareShipment(trnsId, startTime, endTime)];
                    case 1:
                        _a.statusCode = _b.sent();
                        if (this.statusCode != AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK) {
                            return [2 /*return*/, this.statusCode];
                        }
                        dictDataItems = { 'HEADER': this.lstReceivePoHeaderData, 'DETAILS': this.lstReceiveDetailsData, 'SUBDETAILS': this.receive_itemSubdetails_dt };
                        return [4 /*yield*/, this.recvPoNonPoService.sendDetails(dictDataItems).
                                catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.statusCode = data.StatusCode;
                                switch (data.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Custom: {
                                        _this.statusMsgs.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                }
                            })];
                    case 2:
                        _b.sent();
                        this.gStrInvoice = "";
                        return [2 /*return*/, this.statusCode];
                    case 3:
                        ex_26 = _b.sent();
                        this.clientErrorMsg(ex_26, "sendToServer");
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/, 0];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.prepareShipment = function (pTransId, dtStTime, dtEndTime) {
        if (dtStTime === void 0) { dtStTime = null; }
        if (dtEndTime === void 0) { dtEndTime = null; }
        return __awaiter(this, void 0, void 0, function () {
            var strTransCode, poHedrEntity, drQtyCounted, i, recvLineHdrEntity, dateStr, drSerialLotRows, drSerialLot;
            return __generator(this, function (_a) {
                try {
                    this.statusMsgs = [];
                    this.statusCode = -1;
                    strTransCode = "";
                    this.lstReceivePoHeaderData = [];
                    this.lstReceiveDetailsData = [];
                    poHedrEntity = void 0;
                    if (this.lstRecvSendPoHdrs != null && this.lstRecvSendPoHdrs.length > 0) {
                        poHedrEntity = new vm_recv_sendpoheader_1.VM_RECV_SENDPOHEADER();
                        poHedrEntity.BUSINESS_UNIT = this.selectedBUnits;
                        poHedrEntity.PO_ID = this.lstRecvSendPoHdrs[0].PO_ID;
                        poHedrEntity.VENDOR_ID = this.lstRecvSendPoHdrs[0].VENDOR_ID;
                        poHedrEntity.BUSINESS_UNIT_PO = this.lstRecvSendPoHdrs[0].BUSINESS_UNIT;
                        strTransCode = this.lstRecvSendPoHdrs[0].TRANSACTION_CODE;
                        poHedrEntity.DROP_SHIP_FL = this.lstRecvSendPoHdrs[0].DROP_SHIP_FL; //.DROPSHIP_FL;
                        if (strTransCode == "0103") {
                            poHedrEntity.TRANSACTION_CODE = "0104";
                        }
                        else {
                            poHedrEntity.TRANSACTION_CODE = strTransCode;
                        }
                        poHedrEntity.TRANSACTION_ID = this.lstRecvSendPoHdrs[0].TRANSACTION_ID;
                        poHedrEntity.START_DT_TIME = dtStTime; //Strings.Format(dtStTime, ATPAR_LONGDATETIME_24H);              
                        poHedrEntity.END_DT_TIME = dtEndTime; // Strings.Format(dtEndTime, ATPAR_LONGDATETIME_24H);
                        //To Do validation for Carrier and Lading
                        //Same as in HHT we are not sending Carrier id and Lading for Headers
                        poHedrEntity.CARRIER_ID = "";
                        poHedrEntity.BILL_OF_LADING = "";
                        if (this.txtInvoice != null && this.txtInvoice != "") {
                            poHedrEntity.INVOICE_NO = this.txtInvoice;
                        }
                        poHedrEntity.STATUS = AtParEnums_1.EnumApps[AtParEnums_1.EnumApps.Receiving].toString(); // AppTransactionStatus.Receive;
                        poHedrEntity.USER_ID = this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.UserID].toString();
                        poHedrEntity.NON_STOCK_COUNT = this.nonStockCount.toString();
                        poHedrEntity.STOCK_COUNT = this.stockCount.toString();
                        poHedrEntity.RECEIVER_ID = this.lstRecvSendPoHdrs[0].RECEIVER_ID;
                        poHedrEntity.HDR_CMTS = this.lstRecvSendPoHdrs[0].HDR_CMTS;
                        if (this.lstRecvSendPoHdrs[0].PO_DT != null) {
                            poHedrEntity.PO_DT = this.lstRecvSendPoHdrs[0].PO_DT; //check Once
                        }
                        else {
                            poHedrEntity.PO_DT = "";
                        }
                    }
                    // add the header row
                    this.lstReceivePoHeaderData.push(poHedrEntity);
                    if (strTransCode == "0103") {
                        try {
                            drQtyCounted = linq_es5_1.asEnumerable(this.lstRecvSendPoLines).Where(function (x) { return x.QTY != null && x.RECEIVED_FLAG == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString(); }).ToArray();
                            for (i = 0; i < drQtyCounted.length; i++) {
                                recvLineHdrEntity = new vm_recv_sendlineheader_1.VM_RECV_SENDLINEHEADER();
                                recvLineHdrEntity.LINE_NBR = drQtyCounted[i].LINE_NBR;
                                recvLineHdrEntity.SCHED_NBR = drQtyCounted[i].SCHED_NBR;
                                if (drQtyCounted[i].QTY != null) {
                                    recvLineHdrEntity.QTY = drQtyCounted[i].QTY;
                                }
                                else {
                                    recvLineHdrEntity.QTY = 0;
                                }
                                recvLineHdrEntity.UNIT_OF_MEASURE = drQtyCounted[i].UNIT_OF_MEASURE;
                                if (drQtyCounted[i].CARRIER_ID != null && drQtyCounted[i].CARRIER_ID != "") {
                                    recvLineHdrEntity.CARRIER_ID = drQtyCounted[i].CARRIER_ID;
                                }
                                else {
                                    recvLineHdrEntity.CARRIER_ID = " ";
                                }
                                if (drQtyCounted[i].BILL_OF_LADING != null) {
                                    if (drQtyCounted[i].BILL_OF_LADING != null && drQtyCounted[i].BILL_OF_LADING != "") {
                                        recvLineHdrEntity.BILL_OF_LADING = drQtyCounted[i].BILL_OF_LADING;
                                    }
                                    else {
                                        recvLineHdrEntity.BILL_OF_LADING = " ";
                                    }
                                }
                                else {
                                    recvLineHdrEntity.BILL_OF_LADING = " ";
                                }
                                recvLineHdrEntity.SHIPTO_ID = drQtyCounted[i].SHIPTO_ID;
                                if (drQtyCounted[i].NO_OF_BOXES != null) {
                                    recvLineHdrEntity.NO_OF_BOXES = drQtyCounted[i].NO_OF_BOXES;
                                }
                                else {
                                    recvLineHdrEntity.NO_OF_BOXES = 1;
                                }
                                recvLineHdrEntity.INV_ITEM_ID = drQtyCounted[i].INV_ITEM_ID == "" ? " " : drQtyCounted[i].INV_ITEM_ID;
                                recvLineHdrEntity.INVENTORY_ITEM = drQtyCounted[i].INVENTORY_ITEM;
                                recvLineHdrEntity.QTY_PO = drQtyCounted[i].LINE_PO_QTY;
                                if (drQtyCounted[i].TRACKING_ID != null) {
                                    if (drQtyCounted[i].TRACKING_ID != "") {
                                        recvLineHdrEntity.TRACKING_ID = drQtyCounted[i].TRACKING_ID;
                                    }
                                    else {
                                        recvLineHdrEntity.TRACKING_ID = " ";
                                    }
                                }
                                else {
                                    recvLineHdrEntity.TRACKING_ID = " ";
                                }
                                //'Checking Concatination of POID to Tracking ID Parameter Checked ''
                                if (recvLineHdrEntity.INVENTORY_ITEM.toString() == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString() &&
                                    drQtyCounted[i].TRACKING_ID != null) {
                                    if (this.gStrNonStockStore == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                        if (this.concatinateTrkNoPoID != null) {
                                            if (this.concatinateTrkNoPoID == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                                recvLineHdrEntity.TRACKING_ID = this.txtPONumber.toUpperCase() + "-" + drQtyCounted[i].TRACKING_ID.toString();
                                            }
                                        }
                                    }
                                }
                                if (drQtyCounted[i].EXT_TRK_NO != null) {
                                    if (drQtyCounted[i].EXT_TRK_NO != "") {
                                        recvLineHdrEntity.EXT_TRK_NO = drQtyCounted[i].EXT_TRK_NO;
                                    }
                                    else {
                                        recvLineHdrEntity.EXT_TRK_NO = "";
                                    }
                                }
                                else {
                                    recvLineHdrEntity.EXT_TRK_NO = "";
                                }
                                recvLineHdrEntity.RECEIVING_ROUTING_ID = drQtyCounted[i].RECEIVING_ROUTING_ID;
                                recvLineHdrEntity.CUST_ITEM_NO = drQtyCounted[i].CUST_ITEM_NO;
                                if (drQtyCounted[i].LOCATION != null && drQtyCounted[i].LOCATION != "") {
                                    recvLineHdrEntity.LOCATION = drQtyCounted[i].LOCATION;
                                }
                                else {
                                    recvLineHdrEntity.LOCATION = "";
                                }
                                recvLineHdrEntity.RECEIVED_QTY = drQtyCounted[i].RECEIVED_QTY;
                                recvLineHdrEntity.RECV_UOM = drQtyCounted[i].RECV_UOM;
                                recvLineHdrEntity.RECV_CONVERSION_RATE = drQtyCounted[i].RECV_CONVERSION_RATE;
                                recvLineHdrEntity.DESCR = drQtyCounted[i].DESCR; //DESCRIPTION
                                dateStr = new Date(new Date()).toLocaleString().replace(/[^A-Za-z 0-9 \.,\?""!@#\$%\^&\*\(\)-_=\+;:<>\/\\\|\}\{\[\]`~]*/g, '');
                                recvLineHdrEntity.DUE_DT = dateStr.replace(',', ''); // "8/15/00 12:00:00 AM";                      
                                recvLineHdrEntity.STORAGE_LOCATION = drQtyCounted[i].STORAGE_LOCATION ? "" : drQtyCounted[i].STORAGE_LOCATION;
                                this.lstReceiveDetailsData.push(recvLineHdrEntity);
                            }
                        }
                        catch (ex) {
                            return [2 /*return*/, AtParStatusCodes_1.AtparStatusCodes.E_SERVERERROR];
                        }
                        // If .Item("LOT_CONTROLLED").ToString = "Y" Or .Item("SERIAL_CONTROLLED").ToString = "Y" Then
                        if (this.gStrLotSerial != "None") {
                            try {
                                this.receive_itemSubdetails_dt = [];
                                if (this.lstMainItemLotSerial != null && this.lstMainItemLotSerial.length > 0) {
                                    drSerialLotRows = this.lstMainItemLotSerial.filter(function (x) { return ((x.SERIAL_ID != "" && x.SERIAL_ID != null)
                                        || (x.LOT_ID != "" && x.LOT_ID != null)) && x.QTY != '0' && x.DELETE_FLAG == 'N'; });
                                    for (drSerialLot in drSerialLotRows) {
                                        this.receive_itemSubdetails_dt.push(drSerialLotRows[drSerialLot]);
                                    }
                                }
                            }
                            catch (ex) {
                                this.clientErrorMsg(ex, "prepareShipment");
                            }
                        }
                        try {
                        }
                        catch (ex) {
                            return [2 /*return*/, AtParStatusCodes_1.AtparStatusCodes.E_SERVERERROR];
                        }
                    }
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "prepareShipment");
                }
                return [2 /*return*/, AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.showModalPopup = function (drowPrnterData) {
        return __awaiter(this, void 0, void 0, function () {
            var i, printerDetalsEntity;
            return __generator(this, function (_a) {
                try {
                    if (drowPrnterData != null && drowPrnterData.length > 0) {
                        this.printtbl = true;
                        this.bysch = false;
                        this.tbl = false;
                        this.page = false;
                        this.nonPO = false;
                        this.lstPrintersDetails = [];
                        for (i = 0; i < drowPrnterData.length; i++) {
                            printerDetalsEntity = new mt_atpar_setup_pro_printeres_1.MT_ATPAR_SETUP_PRO_PRINTERES();
                            printerDetalsEntity.APP_ID = drowPrnterData[i].APP_ID;
                            printerDetalsEntity.FRIENDLY_NAME = drowPrnterData[i].FRIENDLY_NAME;
                            printerDetalsEntity.FUNCTIONALITY = drowPrnterData[i].FUNCTIONALITY;
                            printerDetalsEntity.IP_ADDRESS = drowPrnterData[i].IP_ADDRESS;
                            printerDetalsEntity.LABEL_DESCRIPTION = drowPrnterData[i].LABEL_DESCRIPTION;
                            printerDetalsEntity.LABEL_FILE_NAME = drowPrnterData[i].LABEL_FILE_NAME;
                            printerDetalsEntity.LABEL_TYPE = drowPrnterData[i].LABEL_TYPE;
                            printerDetalsEntity.SEQ_NO = drowPrnterData[i].SEQ_NO;
                            printerDetalsEntity.PRINTER_CODE = drowPrnterData[i].PRINTER_CODE;
                            printerDetalsEntity.STATUS = drowPrnterData[i].STATUS;
                            printerDetalsEntity.PORT_NO = drowPrnterData[i].PORT_NO;
                            printerDetalsEntity.UPDATE_DATE = drowPrnterData[i].UPDATE_DATE;
                            printerDetalsEntity.NETWORK_TYPE = drowPrnterData[i].NETWORK_TYPE;
                            printerDetalsEntity.USER_ID = drowPrnterData[i].USER_ID;
                            printerDetalsEntity.LINKED_LABEL_TYPE = drowPrnterData[i].LINKED_LABEL_TYPE;
                            printerDetalsEntity.ActiveStatus = drowPrnterData[i].ActiveStatus;
                            printerDetalsEntity.RBPRINTER = drowPrnterData[i].RBPRINTER;
                            printerDetalsEntity.MODEL = drowPrnterData[i].MODEL;
                            this.lstPrintersDetails.push(printerDetalsEntity);
                        }
                        if (this.lstPrintersDetails != null && this.lstPrintersDetails.length == 1) {
                            this.selectedPrinterName = this.lstPrintersDetails[0].FRIENDLY_NAME;
                        }
                        else {
                            this.selectedPrinterName = "";
                        }
                    }
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "showModalPopup");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.print_NonStockLabel = function (noofLabels, printerDet, printerName) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var pPrinterAddressOrName, pPrinterPort, pPrinterTye, pNiceLabelName, pNoOfPrints, pErrMsg, locArray, locDesc, locID, intNoOfBoxses, comments, strTrackingId, strFilter, strCommentsFilter, strPrevLoc, lstPrintTbl, drowPrnterDet, prntResSet, querylst, i, drPrintRow, j, locData, k, drowPrnterCmts, pNiceLabelName1, ex_27, k, drowPrnterCmts, pNiceLabelName1, ex_28, drowRecStockStatus, _a, ex_29;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 27, , 28]);
                        this.statusMsgs = [];
                        this.statusCode = -1;
                        pPrinterAddressOrName = "";
                        pPrinterPort = "";
                        pPrinterTye = "";
                        pNiceLabelName = "";
                        pNoOfPrints = "";
                        pErrMsg = "";
                        locArray = [];
                        locDesc = "";
                        locID = "";
                        intNoOfBoxses = 0;
                        comments = "";
                        strTrackingId = "";
                        strFilter = "";
                        strCommentsFilter = "";
                        strPrevLoc = "-1";
                        lstPrintTbl = [];
                        drowPrnterDet = [];
                        if (printerName == null && printerName == "") {
                            drowPrnterDet = linq_es5_1.asEnumerable(printerDet).Where(function (x) { return x.LABEL_DESCRIPTION == "NonStock PO Header"; }).ToArray(); //check once   LABEL_DESCRIPTION   
                        }
                        else {
                            drowPrnterDet = linq_es5_1.asEnumerable(printerDet).Where(function (x) { return x.LABEL_DESCRIPTION == "NonStock PO Header" && x.FRIENDLY_NAME == printerName; }).ToArray(); //check once LABEL_DESCRIPTION 
                        }
                        if (drowPrnterDet.length == 0) {
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please Configure Non Stock Label Printer" });
                            return [2 /*return*/];
                        }
                        if (!(this.lstRecvSendPoHdrs.length > 0)) return [3 /*break*/, 23];
                        pPrinterAddressOrName = drowPrnterDet[0].IP_ADDRESS;
                        pPrinterPort = drowPrnterDet[0].PORT_NO;
                        if (drowPrnterDet[0].NETWORK_TYPE.toString() == "Mobile") {
                            pPrinterTye = "TcpIP";
                        }
                        else {
                            //TO DO
                        }
                        intNoOfBoxses = noofLabels;
                        pNoOfPrints = "1";
                        //LABEL_FILE_NAME
                        pNiceLabelName = drowPrnterDet[0].LABEL_FILE_NAME;
                        prntResSet = linq_es5_1.asEnumerable(this.lstRecvSendPoLines).Where(function (x) { return x.INVENTORY_ITEM == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString(); }).ToArray();
                        querylst = linq_es5_1.asEnumerable(prntResSet).Where(function (x) { return x.QTY != null; }).GroupBy(function (y) { return y.LOCATION && y.TRACKING_ID && y.DELIVER_TO &&
                            y.ADDRESS1 && y.ADDRESS2 && y.ADDRESS3 && y.PHONE && y.REQ_NUM && y.BUILDING && y.FLOOR && y.SECTOR && y.REQUISITION_NAME && y.BUYER_NAME; }, function (key) {
                            return key.LOCATION, key.TRACKING_ID, key.DELIVER_TO, key.ADDRESS1, key.ADDRESS2, key.ADDRESS3, key.PHONE,
                                key.REQ_NUM, key.BUILDING, key.FLOOR, key.SECTOR, key.REQUISITION_NAME, key.BUYER_NAME;
                        }).ToArray();
                        i = 0;
                        _b.label = 1;
                    case 1:
                        if (!(i < querylst.length)) return [3 /*break*/, 23];
                        drPrintRow = new vm_recv_printer_header_1.VM_RECV_PRINTER_HEADER();
                        drPrintRow.BUSINESS_UNIT = this.lstRecvSendPoHdrs[0].BUSINESS_UNIT.toString();
                        if (linq_es5_1.asEnumerable(querylst)[i].DELIVER_TO == null) {
                            drPrintRow.DELIVER_TO_NAME = "";
                        }
                        else {
                            drPrintRow.DELIVER_TO_NAME = linq_es5_1.asEnumerable(querylst)[i].DELIVER_TO;
                        }
                        drPrintRow.DROP_SHIP_FLAG = this.lstRecvSendPoHdrs[0].DROP_SHIP_FL.toString() == "Y" ? "D" : "";
                        drPrintRow.INSPECTION_FLAG = "";
                        drPrintRow.SHIPTO_ID = "";
                        drPrintRow.USER_ID = this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.UserID].toString();
                        drPrintRow.PO_ID = this.lstRecvSendPoHdrs[0].PO_ID;
                        drPrintRow.ADDRESS1 = linq_es5_1.asEnumerable(querylst)[i].ADDRESS1;
                        drPrintRow.ADDRESS2 = linq_es5_1.asEnumerable(querylst)[i].ADDRESS2;
                        drPrintRow.ADDRESS3 = linq_es5_1.asEnumerable(querylst)[i].ADDRESS3;
                        drPrintRow.PHONE = linq_es5_1.asEnumerable(querylst)[i].PHONE;
                        drPrintRow.REQ_NUM = linq_es5_1.asEnumerable(querylst)[i].REQ_NUM;
                        drPrintRow.BUILDING = linq_es5_1.asEnumerable(querylst)[i].BUILDING;
                        drPrintRow.FLOOR = linq_es5_1.asEnumerable(querylst)[i].FLOOR;
                        drPrintRow.SECTOR = linq_es5_1.asEnumerable(querylst)[i].SECTOR;
                        if (linq_es5_1.asEnumerable(querylst)[i].REQUISITION_NAME != null && linq_es5_1.asEnumerable(querylst)[i].REQUISITION_NAME != "") {
                            drPrintRow.REQUISITION_NAME = linq_es5_1.asEnumerable(querylst)[i].REQUISITION_NAME;
                        }
                        else {
                            drPrintRow.REQUISITION_NAME = "";
                        }
                        if (linq_es5_1.asEnumerable(querylst)[i].BUYER_NAME && linq_es5_1.asEnumerable(querylst)[i].BUYER_NAME != null && linq_es5_1.asEnumerable(querylst)[i].BUYER_NAME != "") {
                            drPrintRow.BUYER_NAME = linq_es5_1.asEnumerable(querylst)[i].BUYER_NAME;
                        }
                        else {
                            drPrintRow.BUYER_NAME = "";
                        }
                        if (this.lstRecvSendPoHdrs[0].HDR_CMTS != null && this.lstRecvSendPoHdrs[0].HDR_CMTS != "") {
                            comments = this.lstRecvSendPoHdrs[0].HDR_CMTS;
                            drPrintRow.COMMENTS = comments.toString().trim();
                        }
                        else {
                            drPrintRow.COMMENTS = "";
                        }
                        if (this.gStrNonStockStore == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                            if (linq_es5_1.asEnumerable(querylst)[i].TRACKING_ID == "" || linq_es5_1.asEnumerable(querylst)[i].TRACKING_ID == null) {
                                if (linq_es5_1.asEnumerable(querylst)[i].LOCATION != strPrevLoc) {
                                    this.updateTrackingNumber(strTrackingId, linq_es5_1.asEnumerable(querylst)[i].LOCATION);
                                }
                            }
                            else {
                                strTrackingId = linq_es5_1.asEnumerable(querylst)[i].TRACKING_ID;
                            }
                            strPrevLoc = linq_es5_1.asEnumerable(querylst)[i].LOCATION;
                            if (this.gConcatinateTrkNoPoID != null) {
                                if (this.gConcatinateTrkNoPoID == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                    strTrackingId = this.lstRecvSendPoHdrs[0].PO_ID.toString() + "-" + strTrackingId;
                                }
                            }
                        }
                        drPrintRow.TRACKING_NO = strTrackingId;
                        if (!(linq_es5_1.asEnumerable(querylst)[i].LOCATION != null && linq_es5_1.asEnumerable(querylst)[i].LOCATION != "")) return [3 /*break*/, 13];
                        locArray = linq_es5_1.asEnumerable(querylst)[i].LOCATION.toString().split(",");
                        j = 0;
                        _b.label = 2;
                    case 2:
                        if (!(j < locArray.length)) return [3 /*break*/, 12];
                        if (locArray[j].indexOf("£") > 0) {
                            locData = locArray[j].split("£");
                            if (locData != null && locData.length >= 3) {
                                locID = locData[0];
                                locDesc = locData[2];
                            }
                            else if (locData != null && locData.length >= 2) {
                                locID = locData[0];
                                locDesc = locData[1];
                            }
                        }
                        else {
                            locID = locArray[j];
                            locDesc = "";
                        }
                        drPrintRow.LOCATION_ID = locID;
                        drPrintRow.LOCATION_DESCR = locDesc;
                        k = 1;
                        _b.label = 3;
                    case 3:
                        if (!(k <= intNoOfBoxses)) return [3 /*break*/, 11];
                        drPrintRow[k].NO_OF_BOXES = k + " of " + intNoOfBoxses;
                        lstPrintTbl.push(drPrintRow);
                        return [4 /*yield*/, this.recvPoNonPoService.printNiceLabel(pPrinterAddressOrName, pPrinterPort, pPrinterTye, pNiceLabelName, pNoOfPrints, pErrMsg, lstPrintTbl).
                                catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.statusCode = data.StatusCode;
                                switch (data.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Custom: {
                                        _this.statusMsgs.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                }
                            })];
                    case 4:
                        _b.sent();
                        if (this.statusCode != AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK) {
                            this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: "Failed to Print Non Stock Header Label" });
                            return [2 /*return*/, this.statusCode];
                        }
                        if (!(this.gStrPrintPoIDComments == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString())) return [3 /*break*/, 9];
                        if (!(comments != null && comments.trim() != "")) return [3 /*break*/, 9];
                        drowPrnterCmts = void 0;
                        if (printerName == null && printerName == "") {
                            drowPrnterCmts = linq_es5_1.asEnumerable(this.lstSetUpProPrinters).Where(function (x) { return x.LABEL_DESCRIPTION == "Po Comments"; }).ToArray(); //check once   LABEL_DESCRIPTION  
                        }
                        else {
                            drowPrnterCmts = linq_es5_1.asEnumerable(this.lstSetUpProPrinters).Where(function (x) { return x.LABEL_DESCRIPTION == "Po Comments" && x.FRIENDLY_NAME == printerName; }).ToArray(); //check once LABEL_DESCRIPTION  
                        }
                        if (!(drowPrnterCmts.length == 0)) return [3 /*break*/, 5];
                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please Configure Non Stock Comments Label Printer" });
                        return [3 /*break*/, 9];
                    case 5:
                        pNiceLabelName1 = drowPrnterCmts[0].LABEL_FILE_NAME;
                        _b.label = 6;
                    case 6:
                        _b.trys.push([6, 8, , 9]);
                        return [4 /*yield*/, this.recvPoNonPoService.printNiceLabel(pPrinterAddressOrName, pPrinterPort, pPrinterTye, pNiceLabelName1, pNoOfPrints, pErrMsg, lstPrintTbl).
                                catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.statusCode = data.StatusCode;
                                switch (data.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Custom: {
                                        _this.statusMsgs.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                }
                            })];
                    case 7:
                        _b.sent();
                        if (this.statusCode != AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK) {
                            this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: "Failed to Print Non Stock Coments Label" });
                            return [2 /*return*/, this.statusCode];
                        }
                        return [3 /*break*/, 9];
                    case 8:
                        ex_27 = _b.sent();
                        this.clientErrorMsg(ex_27, "print_NonStockLabel");
                        return [2 /*return*/, AtParStatusCodes_1.AtparStatusCodes.E_SERVERERROR];
                    case 9:
                        lstPrintTbl = null;
                        _b.label = 10;
                    case 10:
                        k++;
                        return [3 /*break*/, 3];
                    case 11:
                        j++;
                        return [3 /*break*/, 2];
                    case 12: return [3 /*break*/, 22];
                    case 13:
                        drPrintRow.LOCATION_ID = "";
                        drPrintRow.LOCATION_DESCR = "";
                        k = 1;
                        _b.label = 14;
                    case 14:
                        if (!(k < intNoOfBoxses)) return [3 /*break*/, 22];
                        drPrintRow[k].NO_OF_BOXES = k + " of " + intNoOfBoxses;
                        lstPrintTbl.push(drPrintRow);
                        return [4 /*yield*/, this.recvPoNonPoService.printNiceLabel(pPrinterAddressOrName, pPrinterPort, pPrinterTye, pNiceLabelName, pNoOfPrints, pErrMsg, lstPrintTbl).
                                catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.statusCode = data.StatusCode;
                                switch (data.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Custom: {
                                        _this.statusMsgs.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                }
                            })];
                    case 15:
                        _b.sent();
                        if (this.statusCode != AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK) {
                            this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: "Failed to Print Non Stock Header Label" });
                            return [2 /*return*/, this.statusCode];
                        }
                        if (!(this.gStrPrintPoIDComments == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString())) return [3 /*break*/, 20];
                        if (!(comments != null && comments.trim() != "")) return [3 /*break*/, 20];
                        drowPrnterCmts = void 0;
                        if (printerName == null && printerName == "") {
                            drowPrnterCmts = linq_es5_1.asEnumerable(this.lstSetUpProPrinters).Where(function (x) { return x.LABEL_DESCRIPTION == "Po Comments"; }).ToArray(); //check once   LABEL_DESCRIPTION  
                        }
                        else {
                            drowPrnterCmts = linq_es5_1.asEnumerable(this.lstSetUpProPrinters).Where(function (x) { return x.LABEL_DESCRIPTION == "Po Comments" && x.FRIENDLY_NAME == printerName; }).ToArray(); //check once LABEL_DESCRIPTION  
                        }
                        if (!(drowPrnterCmts.length == 0)) return [3 /*break*/, 16];
                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please Configure Non Stock Label Printer" });
                        return [3 /*break*/, 20];
                    case 16:
                        pNiceLabelName1 = drowPrnterCmts[0].LABEL_FILE_NAME.toString();
                        _b.label = 17;
                    case 17:
                        _b.trys.push([17, 19, , 20]);
                        return [4 /*yield*/, this.recvPoNonPoService.printNiceLabel(pPrinterAddressOrName, pPrinterPort, pPrinterTye, pNiceLabelName1, pNoOfPrints, pErrMsg, lstPrintTbl).
                                catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.statusCode = data.StatusCode;
                                switch (data.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Custom: {
                                        _this.statusMsgs.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                }
                            })];
                    case 18:
                        _b.sent();
                        if (this.statusCode != AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK) {
                            this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: "Failed to Print Non Stock Coments Label" });
                            return [2 /*return*/, this.statusCode];
                        }
                        return [3 /*break*/, 20];
                    case 19:
                        ex_28 = _b.sent();
                        this.clientErrorMsg(ex_28, "print_NonStockLabel");
                        return [2 /*return*/, AtParStatusCodes_1.AtparStatusCodes.E_SERVERERROR];
                    case 20:
                        lstPrintTbl = null;
                        _b.label = 21;
                    case 21:
                        k++;
                        return [3 /*break*/, 14];
                    case 22:
                        i++;
                        return [3 /*break*/, 1];
                    case 23:
                        if (!(this.gPrintStockHeader != null)) return [3 /*break*/, 26];
                        if (!(this.gPrintStockHeader == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString())) return [3 /*break*/, 26];
                        if (!(this.gStrSelPrinter == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString())) return [3 /*break*/, 24];
                        drowPrnterDet == linq_es5_1.asEnumerable(this.lstSetUpProPrinters).Where(function (x) { return x.LABEL_DESCRIPTION == "Stock PO Header"; }).ToArray(); //LABEL_DESCRIPTION
                        drowRecStockStatus = linq_es5_1.asEnumerable(this.lstRecvSendPoLines).Where(function (x) { return x.QTY != null && x.RECEIVED_FLAG == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() && x.INVENTORY_ITEM == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString(); }).ToArray();
                        if ((drowRecStockStatus.length > 0)) {
                            this.showModalPopup(drowPrnterDet);
                        }
                        return [3 /*break*/, 26];
                    case 24:
                        _a = this;
                        return [4 /*yield*/, this.print_StockLabel(intNoOfBoxses, this.lstSetUpProPrinters, "")];
                    case 25:
                        _a.statusCode = _b.sent(); //intNoOfBoxses, poDS, pPrintDetailsDS.Tables(0), ""
                        if (this.statusCode != AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK) {
                            this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: "Failed to Print Stock Label" });
                        }
                        _b.label = 26;
                    case 26: return [3 /*break*/, 28];
                    case 27:
                        ex_29 = _b.sent();
                        this.clientErrorMsg(ex_29, "print_NonStockLabel");
                        return [2 /*return*/, AtParStatusCodes_1.AtparStatusCodes.E_SERVERERROR];
                    case 28: return [2 /*return*/, AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.print_StockLabel = function (noofLabels, printerDet, printerName) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var pPrinterAddressOrName, pPrinterPort, pPrinterTye, pNiceLabelName, pNoOfPrints, pErrMsg, locArray, locDesc, locID, intNoOfBoxses, Comments, businessUnitIn, strFilter, strTrackingId, strPrevLoc, lstPrintTbl, drowPrnterDet, prntResSet, querylst, i, drPrintRow, j, locData, k, k, ex_30;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 10, , 11]);
                        this.statusMsgs = [];
                        this.statusCode = -1;
                        pPrinterAddressOrName = "";
                        pPrinterPort = "";
                        pPrinterTye = "";
                        pNiceLabelName = "";
                        pNoOfPrints = "";
                        pErrMsg = "";
                        locArray = null;
                        locDesc = "";
                        locID = "";
                        intNoOfBoxses = 0;
                        Comments = "";
                        businessUnitIn = "";
                        strFilter = "";
                        strTrackingId = "";
                        strPrevLoc = "-1";
                        lstPrintTbl = [];
                        drowPrnterDet = [];
                        if (printerName == null && printerName == "") {
                            drowPrnterDet = linq_es5_1.asEnumerable(printerDet).Where(function (x) { return x.LABEL_DESCRIPTION == "Stock PO Header"; }).ToArray(); //check once   LABEL_DESCRIPTION
                        }
                        else {
                            drowPrnterDet = linq_es5_1.asEnumerable(printerDet).Where(function (x) { return x.LABEL_DESCRIPTION == "Stock PO Header" && x.FRIENDLY_NAME == printerName; }).ToArray(); //check once LABEL_DESCRIPTION             
                        }
                        if (drowPrnterDet.length == 0) {
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please Configure Non Stock Label Printer" });
                            return [2 /*return*/];
                        }
                        if (!(this.lstRecvSendPoHdrs.length > 0)) return [3 /*break*/, 9];
                        pPrinterAddressOrName = drowPrnterDet[0].IP_ADDRESS;
                        pPrinterPort = drowPrnterDet[0].PORT_NO;
                        if (drowPrnterDet[0].NETWORK_TYPE.toString() == "Mobile") {
                            pPrinterTye = "TcpIP";
                        }
                        else {
                            //TO Do for Remaining printer types
                        }
                        intNoOfBoxses = noofLabels;
                        pNoOfPrints = "1";
                        pNiceLabelName = drowPrnterDet[0].LABEL_FILE_NAME;
                        prntResSet = linq_es5_1.asEnumerable(this.lstRecvSendPoLines).Where(function (x) { return x.INVENTORY_ITEM == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString(); }).ToArray();
                        querylst = linq_es5_1.asEnumerable(prntResSet).Where(function (x) { return x.QTY != null; }).GroupBy(function (y) { return y.STORAGE_LOCATION && y.TRACKING_ID && y.DELIVER_TO &&
                            y.ADDRESS1 && y.ADDRESS2 && y.ADDRESS3 && y.PHONE && y.REQ_NUM; }, function (key) {
                            return key.STORAGE_LOCATION, key.TRACKING_ID, key.DELIVER_TO, key.ADDRESS1, key.ADDRESS2, key.ADDRESS3, key.PHONE,
                                key.REQ_NUM;
                        }).ToArray();
                        if (querylst.length == 0) {
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "No Stock Items to Print" });
                            return [2 /*return*/, AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK];
                        }
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < querylst.length)) return [3 /*break*/, 7];
                        drPrintRow = new vm_recv_printer_header_1.VM_RECV_PRINTER_HEADER();
                        drPrintRow.BUSINESS_UNIT = this.lstRecvSendPoHdrs[0].BUSINESS_UNIT.toString();
                        if (linq_es5_1.asEnumerable(querylst)[i].DELIVER_TO == null) {
                            drPrintRow.DELIVER_TO_NAME = "";
                        }
                        else {
                            drPrintRow.DELIVER_TO_NAME = linq_es5_1.asEnumerable(querylst)[i].DELIVER_TO;
                        }
                        drPrintRow.DROP_SHIP_FLAG = this.lstRecvSendPoHdrs[0].DROP_SHIP_FL.toString() == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() ? "D" : "";
                        drPrintRow.INSPECTION_FLAG = "";
                        drPrintRow.SHIPTO_ID = "";
                        drPrintRow.USER_ID = this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.UserID].toString();
                        drPrintRow.PO_ID = this.lstRecvSendPoHdrs[0].PO_ID.toString();
                        drPrintRow.REQ_NUM = linq_es5_1.asEnumerable(querylst)[i].REQ_NUM;
                        if (!(this.gStrNonStockStore == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString())) return [3 /*break*/, 5];
                        if (!(linq_es5_1.asEnumerable(querylst)[i].TRACKING_ID == null || linq_es5_1.asEnumerable(querylst)[i].TRACKING_ID == "")) return [3 /*break*/, 4];
                        if (!(linq_es5_1.asEnumerable(querylst)[i].LOCATION.toString() != strPrevLoc)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.updateTrackingNumber(strTrackingId, linq_es5_1.asEnumerable(querylst)[i].LOCATION.toString())];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [3 /*break*/, 5];
                    case 4:
                        strTrackingId = linq_es5_1.asEnumerable(querylst)[i].TRACKING_ID;
                        _a.label = 5;
                    case 5:
                        drPrintRow.TRACKING_NO = strTrackingId;
                        if (linq_es5_1.asEnumerable(querylst)[i].LOCATION == null || linq_es5_1.asEnumerable(querylst)[i].LOCATION == "") {
                            businessUnitIn = "";
                        }
                        else {
                            businessUnitIn = linq_es5_1.asEnumerable(querylst)[i].LOCATION;
                        }
                        if (linq_es5_1.asEnumerable(querylst)[i].LOCATION != null && linq_es5_1.asEnumerable(querylst)[i].LOCATION != "") {
                            locArray = linq_es5_1.asEnumerable(querylst)[i].LOCATION.toString().split(",");
                            for (j = 0; j < locArray.length; j++) {
                                if (locArray[j].indexOf("£") > 0) {
                                    locData = locArray[j].split("£");
                                    if (locData != null && locData.length >= 3) {
                                        locID = locData[0];
                                        locDesc = locData[2];
                                    }
                                    else if (locData != null && locData.length >= 2) {
                                        locID = locData[0];
                                        locDesc = locData[1];
                                    }
                                }
                                else {
                                    locID = locArray[j];
                                    locDesc = "";
                                }
                                drPrintRow.LOCATION_ID = locID;
                                drPrintRow.LOCATION_DESCR = locDesc;
                                for (k = 1; k <= intNoOfBoxses; k++) {
                                    drPrintRow[k].NO_OF_BOXES = k + " of " + intNoOfBoxses;
                                    lstPrintTbl.push(drPrintRow);
                                }
                            }
                        }
                        else {
                            drPrintRow.LOCATION_ID = "";
                            drPrintRow.LOCATION_DESCR = "";
                            try {
                                for (k = 1; k <= intNoOfBoxses; k++) {
                                    drPrintRow[k].NO_OF_BOXES = k + " of " + intNoOfBoxses;
                                    lstPrintTbl.push(drPrintRow);
                                }
                            }
                            catch (ex) {
                                this.clientErrorMsg(ex, "print_StockLabel");
                                return [2 /*return*/, AtParStatusCodes_1.AtparStatusCodes.E_SERVERERROR];
                            }
                        }
                        _a.label = 6;
                    case 6:
                        i++;
                        return [3 /*break*/, 1];
                    case 7:
                        if (!(lstPrintTbl.length > 0)) return [3 /*break*/, 9];
                        return [4 /*yield*/, this.recvPoNonPoService.printNiceLabel(pPrinterAddressOrName, pPrinterPort, pPrinterTye, pNiceLabelName, pNoOfPrints, pErrMsg, lstPrintTbl).
                                catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.statusCode = data.StatusCode;
                                switch (data.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Custom: {
                                        _this.statusMsgs.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                }
                            })];
                    case 8:
                        _a.sent();
                        if (this.statusCode != AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK) {
                            this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: "Failed to Print Stock Header Label" });
                            return [2 /*return*/, this.statusCode];
                        }
                        _a.label = 9;
                    case 9: return [2 /*return*/, AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK];
                    case 10:
                        ex_30 = _a.sent();
                        this.clientErrorMsg(ex_30, "print_StockLabel");
                        return [2 /*return*/, AtParStatusCodes_1.AtparStatusCodes.E_SERVERERROR];
                    case 11: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.prepareStationaryPrinting = function (invItemType, blnPrinted) {
        return __awaiter(this, void 0, void 0, function () {
            var functionReturnValue, trackingNbr_1, strPrevLoc, drowRecStatus, _a, dtDeliverto, i, currentdate, _b, ex_31;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _c.trys.push([0, 11, , 12]);
                        this.statusMsgs = [];
                        this.statusCode = -1;
                        functionReturnValue = 0;
                        trackingNbr_1 = "";
                        strPrevLoc = "-1";
                        drowRecStatus = linq_es5_1.asEnumerable(this.lstRecvSendPoLines).Where(function (x) { return x.QTY != null; }).ToArray();
                        if (drowRecStatus.length == 0) {
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "PO in Downloaded status,please receive it to print" });
                            return [2 /*return*/, functionReturnValue];
                        }
                        _a = this;
                        return [4 /*yield*/, this.getStationaryDelveryToDetails()];
                    case 1:
                        _a.statusCode = _c.sent();
                        dtDeliverto = linq_es5_1.asEnumerable(this.lstRecvSendPoLines).Distinct(function (s) { return s.LOCATION && s.DELIVER_TO && s.TRACKING_ID; }).ToArray();
                        if (this.statusCode != AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK) {
                            return [2 /*return*/, functionReturnValue];
                        }
                        if (!(dtDeliverto != undefined && dtDeliverto != null && dtDeliverto.length > 0)) return [3 /*break*/, 10];
                        i = 0;
                        _c.label = 2;
                    case 2:
                        if (!(i < dtDeliverto.length)) return [3 /*break*/, 10];
                        if (!(dtDeliverto[i].TRACKING_ID == null || dtDeliverto[i].TRACKING_ID == "")) return [3 /*break*/, 6];
                        currentdate = new Date();
                        return [4 /*yield*/, this.recvPoNonPoService.generateTrackingNumber().catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                var testdata = data;
                                trackingNbr_1 = testdata.toString();
                            })];
                    case 3:
                        _c.sent();
                        if (!(dtDeliverto[i].LOCATION.toString() != strPrevLoc)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.updateTrackingNumber(trackingNbr_1, dtDeliverto[i].LOCATION.toString())];
                    case 4:
                        _c.sent();
                        _c.label = 5;
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        trackingNbr_1 = dtDeliverto[i].TRACKING_ID;
                        _c.label = 7;
                    case 7:
                        _b = this;
                        return [4 /*yield*/, this.prepareStationaryInputDataset(dtDeliverto[i].LOCATION, dtDeliverto[i].DELIVER_TO, trackingNbr_1, invItemType)];
                    case 8:
                        _b.statusCode = _c.sent();
                        if (this.statusCode != AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK) {
                            return [2 /*return*/, this.statusCode];
                        }
                        strPrevLoc = dtDeliverto[i].LOCATION; // asEnumerable(dtDeliverto).ToArray[i].LOCATION;
                        _c.label = 9;
                    case 9:
                        i++;
                        return [3 /*break*/, 2];
                    case 10: return [3 /*break*/, 12];
                    case 11:
                        ex_31 = _c.sent();
                        this.clientErrorMsg(ex_31, "prepareStationaryPrinting");
                        return [3 /*break*/, 12];
                    case 12: return [2 /*return*/, this.statusCode];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.printReceiveItemLabel = function (noofLabels, printerDet, printerName) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var functionReturnValue, pPrinterAddressOrName, pPrinterPort, pPrinterTye, pNiceLabelName, pNoOfPrints, pErrMsg, intNoOfBoxses, locArray, locDesc, locID, itemType_2, strConvFact, strFilter, lstPrintTbl, resTbl, i, drowPrnterDet, drPrintRow, j, locData, strTrackingId, k, ex_32, ex_33;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 11, , 12]);
                        this.statusMsgs = [];
                        this.statusCode = -1;
                        functionReturnValue = 0;
                        pPrinterAddressOrName = "";
                        pPrinterPort = "";
                        pPrinterTye = "";
                        pNiceLabelName = "";
                        pNoOfPrints = "";
                        pErrMsg = "";
                        intNoOfBoxses = 0;
                        locArray = [];
                        locDesc = "";
                        locID = "";
                        itemType_2 = "";
                        strConvFact = "";
                        strFilter = "";
                        lstPrintTbl = [];
                        resTbl = linq_es5_1.asEnumerable(this.lstRecvSendPoLines).Where(function (x) { return x.INV_ITEM_ID == _this.hdnInvItemId && x.LINE_NBR == _this.hdnItmLineNo && x.SCHED_NBR == _this.hdnItmSchedLineNo; }).ToArray();
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < resTbl.length)) return [3 /*break*/, 6];
                        if (resTbl[i].INVENTORY_ITEM.toString() == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                            itemType_2 = "Stock Item";
                        }
                        else {
                            itemType_2 = "NonStock Item";
                        }
                        drowPrnterDet = null;
                        if (printerName == "") {
                            drowPrnterDet = linq_es5_1.asEnumerable(printerDet).Where(function (x) { return x.LABEL_DESCRIPTION == itemType_2; }).ToArray();
                        }
                        else {
                            drowPrnterDet = linq_es5_1.asEnumerable(printerDet).Where(function (x) { return x.LABEL_DESCRIPTION == itemType_2 && x.FRIENDLY_NAME == printerName; }).ToArray();
                        }
                        if (drowPrnterDet == null || drowPrnterDet.length == 0) {
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please Configure " + itemType_2 + " Label Printer" });
                            return [2 /*return*/, functionReturnValue];
                        }
                        pPrinterAddressOrName = drowPrnterDet[0].IP_ADDRESS;
                        pPrinterPort = drowPrnterDet[0].PORT_NO;
                        if (drowPrnterDet[0].NETWORK_TYPE == "Mobile") {
                            pPrinterTye = "TcpIP";
                        }
                        else {
                        }
                        intNoOfBoxses = noofLabels;
                        pNoOfPrints = "1";
                        pNiceLabelName = drowPrnterDet[0].LABEL_FILE_NAME;
                        drPrintRow = new vm_printlabel_receive_header_1.VM_PRINTLABEL_RECEIVE_HEADER();
                        drPrintRow.BUSINESS_UNIT = this.lstRecvSendPoHdrs[0].BUSINESS_UNIT;
                        drPrintRow.TRACKING_NO = this.txtTrk;
                        drPrintRow.DELIVER_TO_NAME = resTbl[i].DELIVER_TO;
                        drPrintRow.PO_ID = this.lstRecvSendPoHdrs[0].PO_ID;
                        drPrintRow.SHIPTO_ID = resTbl[i].SHIPTO_ID;
                        drPrintRow.ITEM_ID = resTbl[i].INV_ITEM_ID;
                        drPrintRow.MANF_ITEM_ID = resTbl[i].MFG_ITEM_ID;
                        drPrintRow.VENDOR_ITEM_ID = resTbl[i].ITM_ID_VNDR;
                        drPrintRow.UPC_ID = resTbl[i].UPC_ID;
                        if (resTbl[i].REQUISITION_NAME != null) {
                            drPrintRow.REQUISITION_NAME = resTbl[i].REQUISITION_NAME;
                        }
                        else {
                            drPrintRow.REQUISITION_NAME = " ";
                        }
                        if (resTbl[i].BUYER_NAME != null && resTbl[i].BUYER_NAME != null) {
                            drPrintRow.BUYER_NAME = resTbl[i].BUYER_NAME;
                        }
                        else {
                            drPrintRow.BUYER_NAME = "";
                        }
                        if (resTbl[i].BUILDING != null) {
                            drPrintRow.BUILDING = resTbl[i].BUILDING;
                        }
                        else {
                            drPrintRow.BUILDING = " ";
                        }
                        if (resTbl[i].FLOOR != null) {
                            drPrintRow.FLOOR = resTbl[i].FLOOR;
                        }
                        else {
                            drPrintRow.FLOOR = " ";
                        }
                        if (resTbl[i].SECTOR != null) {
                            drPrintRow.SECTOR = resTbl[i].SECTOR;
                        }
                        else {
                            drPrintRow.SECTOR = " ";
                        }
                        if (resTbl[i].LOCATION != null) {
                            locArray = resTbl[i].LOCATION.toString().split(",");
                            for (j = 0; j < locArray.length; j++) {
                                if (locArray[j].indexOf("£") > 0) {
                                    locData = locArray[j].split("£");
                                    if (locData != null && locData.length >= 3) {
                                        locID = locData[0];
                                        locDesc = locData[2];
                                    }
                                    else if (locData != null && locData.length >= 2) {
                                        locID = locData[0];
                                        locDesc = locData[1];
                                    }
                                }
                                else {
                                    locID = locArray[j];
                                    locDesc = "";
                                }
                                drPrintRow.LOCATION_ID = locID;
                                drPrintRow.LOCATION_DESCR = locDesc;
                            }
                        }
                        else {
                            drPrintRow.LOCATION_ID = "";
                            drPrintRow.LOCATION_DESCR = "";
                        }
                        strTrackingId = "";
                        if (!(this.gStrNonStockStore == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString())) return [3 /*break*/, 4];
                        if (!(resTbl[i].TRACKING_ID == "" || resTbl[i].TRACKING_ID == null)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.updateItemTrackingNumber(strTrackingId, resTbl[i].INV_ITEM_ID.toString(), resTbl[i].LINE_NBR.toString())];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        strTrackingId = resTbl[i].TRACKING_ID.toString();
                        _a.label = 4;
                    case 4:
                        drPrintRow.TRACKING_NO = strTrackingId;
                        if (resTbl[i].INVENTORY_ITEM == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                            drPrintRow.LOCATION_ID = resTbl[i].STORAGE_LOCATION;
                        }
                        else {
                            drPrintRow.LOCATION_ID = locID;
                        }
                        drPrintRow.CUST_ITEM_NO = resTbl[i].CUST_ITEM_NO;
                        drPrintRow.GTIN = resTbl[i].GTIN;
                        drPrintRow.ITEM_DESCR = resTbl[i].DESCR;
                        drPrintRow.INSPECTION_FLAG = resTbl[i].INSP_FLAG;
                        drPrintRow.DROP_SHIP_FLAG = this.lstRecvSendPoHdrs[0].DROP_SHIP_FL.toString() == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() ? "D" : "";
                        drPrintRow.RECEIVED_QTY = resTbl[i].QTY.toString();
                        drPrintRow.RECEIVE_UOM = resTbl[i].RECV_UOM;
                        if (!(resTbl[i].ISSUE_UOM == null || resTbl[i].CONVERSION_RATE == null)) {
                            strConvFact = resTbl[i].CONVERSION_RATE.toString() + " " + resTbl[i].ISSUE_UOM.toString();
                        }
                        else {
                            strConvFact = "";
                        }
                        drPrintRow.CONVERSION_RATE = strConvFact;
                        drPrintRow.ADDRESS1 = resTbl[i].ADDRESS1;
                        drPrintRow.ADDRESS2 = resTbl[i].ADDRESS2;
                        drPrintRow.ADDRESS3 = resTbl[i].ADDRESS3;
                        drPrintRow.BUSINESS_UNIT_IN = locID;
                        drPrintRow.REQ_NUM = resTbl[i].REQ_NUM;
                        drPrintRow.COMMENTS = resTbl[i].COMMENTS;
                        if (resTbl[i].PACKAGING_STRING != null) {
                            drPrintRow.PACKAGING_STRING = resTbl[i].PACKAGING_STRING;
                        }
                        else {
                            drPrintRow.PACKAGING_STRING = resTbl[i].PACKAGING_STRING;
                        }
                        drPrintRow.RECEIPT_DT = this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.DateTime].toString();
                        drPrintRow.USER_ID = this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.UserID].toString();
                        for (k = 1; k <= intNoOfBoxses; k++) {
                            drPrintRow.NO_OF_BOXES = k + " of " + intNoOfBoxses;
                            lstPrintTbl.push(drPrintRow);
                        }
                        _a.label = 5;
                    case 5:
                        i++;
                        return [3 /*break*/, 1];
                    case 6:
                        _a.trys.push([6, 9, , 10]);
                        if (!(lstPrintTbl.length > 0)) return [3 /*break*/, 8];
                        return [4 /*yield*/, this.recvPoNonPoService.printNiceLabel(pPrinterAddressOrName, pPrinterPort, pPrinterTye, pNiceLabelName, pNoOfPrints, pErrMsg, lstPrintTbl).
                                catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.statusCode = data.StatusCode;
                                switch (data.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        _this.spnrService.stop();
                                        _this.statusMsgs.push({ severity: 'success', summary: AtParConstants_1.AtParConstants.GrowlTitle_Success, detail: "Label Printed Sucessfully " });
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Custom: {
                                        _this.statusMsgs.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                }
                            })];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8: return [3 /*break*/, 10];
                    case 9:
                        ex_32 = _a.sent();
                        this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: "Internal Server Error " });
                        return [2 /*return*/, AtParStatusCodes_1.AtparStatusCodes.E_SERVERERROR];
                    case 10: return [2 /*return*/, AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK];
                    case 11:
                        ex_33 = _a.sent();
                        this.clientErrorMsg(ex_33, "printReceiveItemLabel");
                        return [3 /*break*/, 12];
                    case 12: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.getStationaryDelveryToDetails = function () {
        return __awaiter(this, void 0, void 0, function () {
            var resTbl;
            return __generator(this, function (_a) {
                try {
                    resTbl = linq_es5_1.asEnumerable(this.lstRecvSendPoLines).Where(function (x) { return x.QTY != null; }).GroupBy(function (x) { return x.LOCATION && x.TRACKING_ID && x.DELIVER_TO; }).ToArray();
                    //LINE_QTY
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "getStationaryDelveryToDetails");
                }
                return [2 /*return*/, 0];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.updateItemTrackingNumber = function (trackingNbr, itemId, lineNbr) {
        return __awaiter(this, void 0, void 0, function () {
            var i, i, i;
            return __generator(this, function (_a) {
                try {
                    this.statusMsgs = [];
                    this.statusCode = -1;
                    for (i = 0; i < this.lstRecvSendPoLines.length; i++) {
                        if (this.lstRecvSendPoLines[i].INV_ITEM_ID == itemId && this.lstRecvSendPoLines[i].LINE_NBR == parseInt(lineNbr)) {
                            this.lstRecvSendPoLines[i].TRACKING_ID = trackingNbr;
                        }
                    }
                    if (this.lstRecvSendPoLines != null) {
                        if ((this.lstRecvSendPoLines != null) && this.lstRecvSendPoLines.length > 0) {
                            for (i = 0; i < this.lstRecvSendPoLines.length; i++) {
                                if (this.lstRecvSendPoLines[i].INV_ITEM_ID == itemId && this.lstRecvSendPoLines[i].LINE_NBR == parseInt(lineNbr)) {
                                    this.lstRecvSendPoLines[i].TRACKING_ID = trackingNbr;
                                }
                            }
                        }
                    }
                    if (this.lstRecvSendPoLines != null) {
                        for (i = 0; i < this.lstRecvSendPoLines.length; i++) {
                        }
                    }
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "updateItemTrackingNumber");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.updateTrackingNumber = function (trackingNbr, location) {
        return __awaiter(this, void 0, void 0, function () {
            var i, i, i;
            return __generator(this, function (_a) {
                try {
                    this.statusMsgs = [];
                    this.statusCode = -1;
                    for (i = 0; i < this.lstRecvSendPoLines.length; i++) {
                        if (this.lstRecvSendPoLines[i].LOCATION == location) {
                            this.lstRecvSendPoLines[i].TRACKING_ID = trackingNbr;
                        }
                    }
                    if (this.lstRecvSendPoLines != null) {
                        if (this.lstRecvSendPoLines != null && this.lstRecvSendPoLines.length > 0) {
                            for (i = 0; i < this.lstRecvSendPoLines.length; i++) {
                                if (this.lstRecvSendPoLines[i].LOCATION == location) {
                                    this.lstRecvSendPoLines[i].TRACKING_ID = trackingNbr;
                                }
                            }
                        }
                    }
                    if (this.lstRecvSendPoLines != null) {
                        for (i = 0; i < this.lstRecvSendPoLines.length; i++) {
                        }
                    }
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "updateTrackingNumber");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.prepareStationaryInputDataset = function (pLocation, pDeliverTo, pTrackingNbr, invItemType) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var strFilter, locArray, locDesc, locID, intNoOfBoxses, dtHedTbl, dtItemSet, dtDetails, dateStr, drHedrow, i, drItemrow, j, locData, dictDataItems, dictDataItems, ex_34;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 8, , 9]);
                        this.statusMsgs = [];
                        this.statusCode = -1;
                        strFilter = "";
                        locArray = null;
                        locDesc = "";
                        locID = "";
                        intNoOfBoxses = 0;
                        dtHedTbl = [];
                        dtItemSet = [];
                        ;
                        dtDetails = [];
                        if (this.txtPkgs != null) {
                            intNoOfBoxses = parseInt(this.txtPkgs);
                        }
                        else {
                            intNoOfBoxses = 1;
                        }
                        dateStr = new Date(new Date()).toLocaleString().replace(/[^A-Za-z 0-9 \.,\?""!@#\$%\^&\*\(\)-_=\+;:<>\/\\\|\}\{\[\]`~]*/g, '');
                        if (!(this.lstRecvSendPoHdrs.length > 0)) return [3 /*break*/, 7];
                        drHedrow = new vm_recv_sendpoheader_1.VM_RECV_SENDPOHEADER();
                        drHedrow.END_DT_TIME = dateStr.replace(',', ''); // Strings.Format(eTime, ATPAR_LONGDATETIME_24H);
                        drHedrow.PO_ID = this.lstRecvSendPoHdrs[0].PO_ID;
                        drHedrow.LOCATION = pLocation;
                        drHedrow.DELIVER_TO = pDeliverTo;
                        drHedrow.TRACKING_NBR = pTrackingNbr;
                        drHedrow.HDR_CMTS = this.lstRecvSendPoHdrs[0].HDR_CMTS;
                        dtHedTbl.push(drHedrow);
                        if (pDeliverTo != null && pDeliverTo != "") {
                            dtItemSet = linq_es5_1.asEnumerable(this.lstRecvSendPoLines).Where(function (x) { return x.DELIVER_TO == pDeliverTo; }).ToArray();
                        }
                        else {
                            dtItemSet = linq_es5_1.asEnumerable(this.lstRecvSendPoLines).Where(function (x) { return x.DELIVER_TO == "" || x.DELIVER_TO == null; }).ToArray();
                        }
                        if (pLocation != null && pLocation != "") {
                            dtItemSet = linq_es5_1.asEnumerable(this.lstRecvSendPoLines).Where(function (x) { return x.DELIVER_TO == pDeliverTo && x.INVENTORY_ITEM == invItemType && x.LOCATION == pLocation && x.QTY != null && x.QTY.toString() != ""; }).ToArray(); //LINE_QTY //.replace("'", "''")
                        }
                        else {
                            dtItemSet = linq_es5_1.asEnumerable(this.lstRecvSendPoLines).Where(function (x) { return (x.DELIVER_TO == "" || x.DELIVER_TO == null) && x.INVENTORY_ITEM == invItemType && (x.LOCATION == "" || x.LOCATION == null) && x.QTY != null && x.QTY.toString() != ""; }).ToArray(); //LINE_QTY
                        }
                        if (dtItemSet != null && dtItemSet.length > 0) {
                            for (i = 0; i < dtItemSet.length; i++) {
                                drItemrow = new vm_recv_sendlineheader_1.VM_RECV_SENDLINEHEADER();
                                if (dtItemSet[i].INV_ITEM_ID != null && dtItemSet[i].INV_ITEM_ID != "") {
                                    if (dtItemSet[i].DESCR && dtItemSet[i].DESCR != "") {
                                        drItemrow.ITEMID_DESC = dtItemSet[i].INV_ITEM_ID.toString() + "-" + dtItemSet[i].DESCR.toString();
                                    }
                                    else {
                                        drItemrow.ITEMID_DESC = dtItemSet[i].INV_ITEM_ID.toString();
                                    }
                                }
                                else {
                                    if (dtItemSet[i].DESCR != null && dtItemSet[i].DESCR != "") {
                                        drItemrow.ITEMID_DESC = dtItemSet[i].DESCR;
                                    }
                                    else {
                                        drItemrow.ITEMID_DESC = "";
                                    }
                                }
                                drItemrow.UNIT_OF_MEASURE = dtItemSet[i].UNIT_OF_MEASURE;
                                drItemrow.RECV_UOM = dtItemSet[i].RECV_UOM;
                                drItemrow.QTY_PO = dtItemSet[i].QTY_PO;
                                if (dtItemSet[i].QTY != null) {
                                    drItemrow.OPENQTY = (dtItemSet[i].QTY_PO) - ((dtItemSet[i].QTY) * (dtItemSet[i].RECV_CONVERSION_RATE)); //LINE_QTY
                                    drItemrow.QTY = dtItemSet[i].QTY; //.LINE_QTY;
                                }
                                else {
                                    drItemrow.OPENQTY = dtItemSet[i].QTY_PO;
                                    drItemrow.QTY = null;
                                }
                                drItemrow.STORAGE_LOCATION = dtItemSet[i].STORAGE_LOCATION;
                                drItemrow.MFG_ITEM_ID = dtItemSet[i].MFG_ITEM_ID;
                                drItemrow.ITM_ID_VNDR = dtItemSet[i].ITM_ID_VNDR;
                                drItemrow.REQ_NUM = dtItemSet[i].REQ_NUM;
                                dtDetails.push(drItemrow);
                            }
                        }
                        if (!(dtDetails != null && dtDetails.length > 0)) return [3 /*break*/, 7];
                        if (!(pLocation != null && pLocation != "")) return [3 /*break*/, 5];
                        locArray = pLocation.split(",");
                        j = 0;
                        _a.label = 1;
                    case 1:
                        if (!(j < locArray.length)) return [3 /*break*/, 4];
                        if (locArray[j] != null && locArray[j].indexOf("£") > 0) {
                            locData = locArray[j].split("£");
                            if (locData != null && locData.length >= 3) {
                                locID = locData[0];
                                locDesc = locData[2];
                            }
                            else if (locData != null && locData.length >= 2) {
                                locID = locData[0];
                                locDesc = locData[1];
                            }
                        }
                        else {
                            locID = locArray[j];
                            locDesc = "";
                        }
                        if (dtHedTbl.length > 0) {
                            dtHedTbl[0].LOCATION = locID;
                        }
                        dictDataItems = { 'HEADER': dtHedTbl, 'DETAILS': dtDetails };
                        return [4 /*yield*/, this.recvPoNonPoService.printStaionaryReport(dictDataItems, 1).
                                catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.statusCode = data.StatusCode;
                                switch (data.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Custom: {
                                        _this.spnrService.stop();
                                        break;
                                    }
                                }
                            })];
                    case 2:
                        _a.sent();
                        if (this.statusCode != AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK) {
                            return [2 /*return*/, this.statusCode];
                        }
                        this.blnPrinted = true;
                        _a.label = 3;
                    case 3:
                        j++;
                        return [3 /*break*/, 1];
                    case 4: return [3 /*break*/, 7];
                    case 5:
                        dictDataItems = { 'HEADER': dtHedTbl, 'DETAILS': dtDetails };
                        return [4 /*yield*/, this.recvPoNonPoService.printStaionaryReport(dictDataItems, 1).
                                catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.statusCode = data.StatusCode;
                                switch (data.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Custom: {
                                        _this.spnrService.stop();
                                        break;
                                    }
                                }
                            })];
                    case 6:
                        _a.sent();
                        if (this.statusCode != AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK) {
                            return [2 /*return*/, this.statusCode];
                        }
                        this.blnPrinted = true;
                        _a.label = 7;
                    case 7:
                        this.blnPrinted = true;
                        return [2 /*return*/, AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK];
                    case 8:
                        ex_34 = _a.sent();
                        this.clientErrorMsg(ex_34, "prepareStationaryInputDataset");
                        return [3 /*break*/, 9];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.poNonPo_RbtnChange = function (recvDetails, blnSelectRdbtn) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var txtPkgs, blnSchedsExist, intScheduleCnt, strRecedQty, strSerialControlled, strLotControlled, strPoQty, txtNoOfBoxes, txtLadg, txtTrkNo, lnkLine, currentdate, extTrkExist, i, i, lblinterLineNbr, i, dtReceiveDetails, strLot, strSerial, lnkLineNbr, lbQtyPO, lnkItemId_2, txtQty, intConverfactor, strUOM, schedCount, strInvItem, strRecallFlag, dtRecallInfo, dr, strComments, dtRecallInfo, dr, lnkItemId, txtQty, strShippedQty, ex_35;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        //this.statusMsgs = [];
                        this.statusCode = -1;
                        txtPkgs = "";
                        blnSchedsExist = false;
                        this.blnFlag = false;
                        intScheduleCnt = 0;
                        strRecedQty = null;
                        strSerialControlled = null;
                        strLotControlled = null;
                        strPoQty = null;
                        txtNoOfBoxes = void 0;
                        if (recvDetails.INV_ITEM_ID != null) {
                            this.hdnItemId = recvDetails.INV_ITEM_ID;
                        }
                        txtLadg = recvDetails.BILL_OF_LADING;
                        txtTrkNo = recvDetails.EXT_TRK_NO;
                        lnkLine = recvDetails.LINE_NBR;
                        if (this.lstRecvSendPoLines != null && this.lstRecvSendPoLines.length > 0) {
                            txtNoOfBoxes = recvDetails.NO_OF_BOXES;
                        }
                        else if (this.lstRecvIutItems != null && this.lstRecvIutItems.length > 0) {
                            txtNoOfBoxes = recvDetails.NO_OF_PKGS;
                        }
                        this.txtPkgs = "1";
                        if (!recvDetails.SCHDFLAG) {
                            if (this.txtLading != null && this.txtLading != undefined && this.txtLading.length == 0) {
                                if (txtLadg == null || txtLadg == "") {
                                    currentdate = new Date();
                                    txtLadg = this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.UserID].toString() + (currentdate.getMonth() + 1) + this.AddZero(currentdate.getDate()) + currentdate.getFullYear() + currentdate.getHours() + currentdate.getMinutes() + currentdate.getSeconds();
                                    this.txtLading = txtLadg;
                                    recvDetails.BILL_OF_LADING = txtLadg;
                                }
                                else {
                                    this.txtLading = txtLadg;
                                }
                            }
                            else if (txtLadg != null && txtLadg != "") {
                                this.txtLading = txtLadg;
                            }
                            else {
                                if (this.txtLading != null && this.txtLading != "") {
                                    txtLadg = this.txtLading;
                                    recvDetails.BILL_OF_LADING = txtLadg;
                                }
                            }
                        }
                        return [4 /*yield*/, this.checkColumnExist("EXT_TRK_NO", "RECEIVE ITEMS")];
                    case 1:
                        extTrkExist = _a.sent();
                        if (extTrkExist) {
                            if (!this.txtExtTrkIsEditMode) {
                                if (this.txtTrk != null && this.txtTrk != undefined && this.txtTrk != "" && this.txtTrk.length == 0) {
                                    if (txtTrkNo == null && txtTrkNo == "") {
                                        txtTrkNo = "";
                                    }
                                    else {
                                        this.txtTrk = txtTrkNo.trim();
                                        txtTrkNo = txtTrkNo.trim();
                                    }
                                }
                                else if (txtTrkNo != null && txtTrkNo != undefined && txtTrkNo != "") {
                                    this.txtTrk = txtTrkNo.trim();
                                    txtTrkNo = txtTrkNo.trim();
                                }
                                else {
                                    if (this.txtTrk != null && this.txtTrk != undefined && this.txtTrk != "") {
                                        txtTrkNo = this.txtTrk;
                                        recvDetails.EXT_TRK_NO = this.txtTrk;
                                    }
                                }
                            }
                        }
                        else {
                            if (this.lstRecvSendPoLines != null && this.lstRecvSendPoLines.length > 0) {
                                for (i = 0; i < this.lstRecvSendPoLines.length; i++) {
                                    if (this.lstRecvSendPoLines[i].LINE_NBR == lnkLine && recvDetails.LINE_NBR == lnkLine) {
                                        if (this.lstRecvSendPoLines[i].EXT_TRK_NO != null && this.lstRecvSendPoLines[i].EXT_TRK_NO != "") {
                                            if (this.lstRecvSendPoLines[i].EXT_TRK_NO.trim() != "") {
                                                this.txtTrk = this.lstRecvSendPoLines[i].EXT_TRK_NO;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (recvDetails.SCHED_COUNT <= 1) {
                            if (recvDetails.CARRIER_ID != "Select Carrier" && recvDetails.CARRIER_ID != null) {
                                this.selectedDdlCarrier = recvDetails.CARRIER_ID;
                            }
                            else {
                                if (this.selectedDdlCarrier != "Select Carrier") {
                                    recvDetails.CARRIER_ID = this.selectedDdlCarrier;
                                }
                            }
                        }
                        if (txtNoOfBoxes == null) {
                            txtNoOfBoxes = 1;
                            recvDetails.NO_OF_BOXES = txtNoOfBoxes;
                            txtPkgs = "1";
                        }
                        if (txtNoOfBoxes != null) {
                            if (txtPkgs != null && txtPkgs != undefined && txtPkgs.trim().length == 0) {
                                if (txtNoOfBoxes == null) {
                                    if (this.lstRecvSendPoLines != null) {
                                        txtNoOfBoxes = 1;
                                        recvDetails.NO_OF_BOXES = txtNoOfBoxes;
                                        txtPkgs = "1";
                                    }
                                    else {
                                        txtNoOfBoxes = 1;
                                        recvDetails.NO_OF_BOXES = txtNoOfBoxes;
                                        txtPkgs = "1";
                                    }
                                }
                                else {
                                    this.txtPkgs = txtNoOfBoxes.toString();
                                }
                            }
                            else if (txtNoOfBoxes != null) {
                                this.txtPkgs = txtNoOfBoxes.toString();
                            }
                            else {
                                //if (true) {//txtNoOfBoxes.Enabled check once
                                if (this.txtPkgs != null && this.txtPkgs != undefined && this.txtPkgs.length > 0) {
                                    txtNoOfBoxes = parseInt(this.txtPkgs);
                                    recvDetails.NO_OF_BOXES = txtNoOfBoxes;
                                }
                                else {
                                    if (this.lstRecvSendPoLines != null) {
                                        txtNoOfBoxes = 1;
                                        recvDetails.NO_OF_BOXES = txtNoOfBoxes;
                                        this.txtPkgs = "1";
                                    }
                                    else {
                                        txtNoOfBoxes = 1;
                                        this.txtPkgs = "1";
                                        recvDetails.NO_OF_BOXES = txtNoOfBoxes;
                                    }
                                }
                                //}
                            }
                        }
                        else {
                            if (this.lstRecvSendPoLines != null && this.lstRecvSendPoLines.length > 0) {
                                for (i = 0; i < this.lstRecvSendPoLines.length; i++) {
                                    if (this.lstRecvSendPoLines[i].LINE_NBR == lnkLine && this.grdRecvLinesRbBtnCheck) {
                                        if (this.lstRecvSendPoLines[i].NO_OF_BOXES != null) {
                                            this.txtPkgs = this.lstRecvSendPoLines[i].NO_OF_BOXES.toString();
                                        }
                                    }
                                }
                            }
                            if (this.lstRecvIutItems != null) {
                                lblinterLineNbr = recvDetails.INTERUNIT_LINE;
                                for (i = 0; i < this.lstRecvIutItems.length; i++) {
                                    if (recvDetails.INTERUNIT_LINE == lblinterLineNbr && this.grdRecvLinesRbBtnCheck) {
                                        if (recvDetails.NO_OF_PKGS != null) {
                                            this.txtPkgs = recvDetails.NO_OF_PKGS;
                                        }
                                    }
                                }
                            }
                        }
                        if (this.lstRecvSendPoLines != null && this.lstRecvSendPoLines.length > 0) {
                            dtReceiveDetails = this.lstRecvSendPoLines;
                            strLot = recvDetails.LOT_CONTROLLED;
                            this.lotControl = recvDetails.LOT_CONTROLLED;
                            strSerial = recvDetails.SERIAL_CONTROLLED;
                            this.serialControl = recvDetails.SERIAL_CONTROLLED;
                            lnkLineNbr = recvDetails.LINE_NBR;
                            this.schedNbr = recvDetails.SCHED_NBR;
                            lbQtyPO = recvDetails.LINE_PO_QTY;
                            lnkItemId_2 = recvDetails.INV_ITEM_ID;
                            txtQty = recvDetails.QTY;
                            strRecedQty = recvDetails.RECEIVED_QTY;
                            strPoQty = recvDetails.QTY_PO; //LINE_PO_QTY check once Qty
                            intScheduleCnt = recvDetails.SCHED_COUNT;
                            strSerialControlled = recvDetails.SERIAL_CONTROLLED;
                            strLotControlled = recvDetails.LOT_CONTROLLED;
                            intConverfactor = parseInt(recvDetails.CONVERSION_RATE);
                            this.lotSerialConverfactor = parseInt(recvDetails.CONVERSION_RATE);
                            strUOM = recvDetails.UNIT_OF_MEASURE;
                            schedCount = recvDetails.SCHED_COUNT;
                            strInvItem = recvDetails.INVENTORY_ITEM;
                            this.hdnItemType = strInvItem;
                            this.hdnInvItemId = lnkItemId_2;
                            this.hdnItmLineNo = lnkLineNbr;
                            this.hdnItmSchedLineNo = parseInt(this.schedNbr);
                            this.strTotalQty = (parseInt(strPoQty) - parseInt(strRecedQty)).toString();
                            strRecallFlag = recvDetails.RECAL_FLAG.toString();
                            if (strRecallFlag == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                dtRecallInfo = this.lstReCallInfo;
                                if (dtRecallInfo != null && dtRecallInfo.length > 0) {
                                    dr = dtRecallInfo.filter(function (x) { return x.ITEM_ID == lnkItemId_2 && (x.LOT_NO == "" || x.LOT_NO == null) && (x.SERIAL_NO == "" || x.SERIAL_NO == null); });
                                    if (dr != null && dr.length > 0) {
                                        recvDetails.QTY = "";
                                        recvDetails.TXTQTYFLAG = true;
                                        this.statusMsgs = [];
                                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "This Item " + lnkItemId_2 + " is on recall. The item cannot be received." });
                                        return [2 /*return*/];
                                    }
                                }
                            }
                            //Comments Checking
                            if (this.gDisplayComments == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() &&
                                recvDetails.COMMENTS != null && recvDetails.COMMENTS != "") {
                                strComments = recvDetails.COMMENTS;
                                if (strComments != "") {
                                    strComments = "Comments: \\n \\n " + strComments;
                                    if (this.gstrPrevComments != strComments) {
                                        this.statusMsgs = [];
                                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: strComments.toString() });
                                        this.gstrPrevComments = strComments;
                                    }
                                }
                            }
                            if (schedCount == "1" && (recvDetails.CARRIER_ID == null || recvDetails.CARRIER_ID == "Select Carrier" || recvDetails.CARRIER_ID == "" || txtLadg == "")) {
                                this.statusMsgs = [];
                                this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Carrier and Lading are mandatory" });
                                this.selecstedRow = null;
                                setTimeout(function () { _this.selectedINVITEMID = ""; }, 1);
                                setTimeout(function () { recvDetails.RBFlAG = false; }, 2);
                                this.grdRecvLinesRbBtnCheck = false;
                                this.lstRecvSendPoLines.forEach(function (x) { return x.RBFlAG = false; });
                                blnSelectRdbtn = true;
                                return [2 /*return*/];
                            }
                            else {
                                setTimeout(function () {
                                    recvDetails.RBFlAG = true;
                                    var itemtxtRecvQty = document.getElementById('txtRecvQty' + _this.selectedINVITEMID);
                                    if (itemtxtRecvQty != null) {
                                        itemtxtRecvQty.focus();
                                    }
                                }, 2);
                            }
                            this.txtSerchItemId = lnkItemId_2;
                            this.hdnItemId = this.txtSerchItemId;
                            this.gstrlnkitemid = recvDetails.INV_ITEM_ID;
                            this.gstrlnklineNbr = lnkLineNbr.toString();
                            if (this.gStrLotSerial != AtParEnums_1.Enable_Lot_Serial_Tracking[AtParEnums_1.Enable_Lot_Serial_Tracking.None].toString()) {
                                if (this.gStrLotSerial == AtParEnums_1.Enable_Lot_Serial_Tracking[AtParEnums_1.Enable_Lot_Serial_Tracking.MMIS].toString()) {
                                    if (strLot == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() || strSerial == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                        this.btnLotSerialDisable = false;
                                        recvDetails.TXTQTYFLAG = true;
                                        recvDetails.DDLUOMFLAG = true;
                                    }
                                    else {
                                        this.btnLotSerialDisable = true;
                                        recvDetails.TXTQTYFLAG = false;
                                    }
                                }
                                else if (this.gStrLotSerial == AtParEnums_1.Enable_Lot_Serial_Tracking[AtParEnums_1.Enable_Lot_Serial_Tracking.AtPar].toString()) {
                                    this.btnLotSerialDisable = false;
                                    recvDetails.TXTQTYFLAG = false;
                                }
                                if (parseInt(intScheduleCnt.toString()) > 1) {
                                    this.btnLotSerialDisable = true;
                                    recvDetails.TXTQTYFLAG = true;
                                    recvDetails.DDLUOMFLAG = true;
                                }
                            }
                            if (schedCount == "1") {
                                this.blnlnkItemIdEnable = false;
                                this.blnlnkLineNbrEnable = false;
                                if ((strLot == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() || strSerial == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) &&
                                    this.gStrLotSerial == AtParEnums_1.Enable_Lot_Serial_Tracking[AtParEnums_1.Enable_Lot_Serial_Tracking.MMIS].toString()) {
                                    recvDetails.TXTQTYFLAG = true;
                                    recvDetails.DDLUOMFLAG = true;
                                }
                                else {
                                    recvDetails.TXTQTYFLAG = false;
                                }
                                this.btnPntrDetailsDisable = false;
                            }
                            else {
                                this.btnPntrDetailsDisable = true;
                                //do this
                                this.blnlnkItemIdEnable = true;
                                this.blnlnkLineNbrEnable = true;
                            }
                            //if ((strLot == YesNo_Enum[YesNo_Enum.Y].toString() && strSerial == YesNo_Enum[YesNo_Enum.Y].toString()) &&
                            //    this.gStrLotSerial == Enable_Lot_Serial_Tracking[Enable_Lot_Serial_Tracking.MMIS].toString()) {
                            //    this.btnPntrDetailsDisable = true;
                            //    this.btnLotSerialDisable = true;
                            //}
                            if (lnkItemId_2 != null) {
                                if (lnkItemId_2 == "") {
                                    this.blnFlag = true;
                                }
                                //Do not default Lines which have schedules
                                if (strSerialControlled == null || strSerialControlled == "") {
                                    strSerialControlled = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                                }
                                if (strLotControlled == null && strLotControlled == "") {
                                    strLotControlled = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                                }
                                if (intScheduleCnt == 1 && (this.gStrLotSerial == AtParEnums_1.Enable_Lot_Serial_Tracking[AtParEnums_1.Enable_Lot_Serial_Tracking.None].toString() ||
                                    !(strSerialControlled == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() || strLotControlled == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()))) {
                                    this.blnFlag = true;
                                    //Recall Checking
                                    if (strRecallFlag == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                        dtRecallInfo = this.lstReCallInfo;
                                        if (dtRecallInfo != null && dtRecallInfo.length > 0) {
                                            dr = dtRecallInfo.filter(function (x) { return x.ITEM_ID == lnkItemId_2 && (x.LOT_NO == "" || x.LOT_NO == null) && (x.SERIAL_NO == "" || x.SERIAL_NO == null); });
                                            if (dr != null && dr.length > 0) {
                                                this.blnFlag = false;
                                            }
                                        }
                                    }
                                }
                                else if (intScheduleCnt > 1) {
                                    recvDetails.SCHDFLAG = true;
                                    this.blnSchedsExist = true;
                                }
                                else if (strSerialControlled == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() || strLotControlled == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                    this.blnSchedsExist = true;
                                    recvDetails.SCHDFLAG = true;
                                }
                                if (this.blnSchedsExist && this.blnReceiveall) {
                                    this.blnReceiveall = false;
                                    this.statusMsgs = [];
                                    this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Lines with schedules or lot serial have not been updated" });
                                }
                            }
                            recvDetails.NO_OF_BOXES = txtNoOfBoxes;
                            if (this.blnFlag == true && (txtQty == null || txtQty == "")) {
                                if (this.gblnASNPO == false && this.gStrDefaultInput == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                    if (strRecedQty != null && strRecedQty != "") {
                                        if (parseInt(strRecedQty) <= parseInt(strPoQty)) {
                                            txtQty = parseInt(strPoQty) - parseInt(strRecedQty);
                                            recvDetails.QTY = txtQty;
                                        }
                                    }
                                    else {
                                        txtQty = strPoQty;
                                        recvDetails.QTY = txtQty;
                                    }
                                }
                                else {
                                    txtQty = recvDetails.ASN_QTY;
                                    recvDetails.QTY = txtQty;
                                }
                            }
                        }
                        else if (this.lstRecvIutItems != null && this.lstRecvIutItems.length > 0) {
                            if (recvDetails.CARRIER_ID != "Select Carrier" && recvDetails.CARRIER_ID != null && recvDetails.CARRIER_ID != "") {
                                this.selectedDdlCarrier = recvDetails.CARRIER_ID;
                            }
                            else {
                                if (this.selectedDdlCarrier != "Select Carrier") {
                                    recvDetails.CARRIER_ID = this.selectedDdlCarrier;
                                }
                            }
                            lnkItemId = recvDetails.ITEM_ID;
                            txtQty = recvDetails.QTY;
                            strShippedQty = recvDetails.QTY_SHIPPED;
                            strSerialControlled = recvDetails.SERIAL_CONTROLLED;
                            strRecedQty = recvDetails.QTY_RECEIVED;
                            if (recvDetails.CARRIER_ID == null || recvDetails.CARRIER_ID == "Select Carrier" || recvDetails.CARRIER_ID == "" || txtLadg == "") {
                                this.statusMsgs = [];
                                this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Carrier and Lading are mandatory" });
                                this.selecstedRow = null;
                                setTimeout(function () { _this.selectedINVITEMID = ""; }, 1);
                                this.grdRecvLinesRbBtnCheck = false;
                                setTimeout(function () { recvDetails.RBFlAG = false; }, 2);
                                blnSelectRdbtn = true;
                                this.lstRecvIutItems.forEach(function (x) { return x.RBFlAG = false; });
                                return [2 /*return*/];
                            }
                            else {
                                setTimeout(function () {
                                    recvDetails.RBFlAG = true;
                                    var itemtxtRecvQty = document.getElementById('txtRecvQty' + _this.selectedINVITEMID);
                                    if (itemtxtRecvQty != null) {
                                        itemtxtRecvQty.focus();
                                    }
                                }, 2);
                            }
                            this.txtSerchItemId = lnkItemId;
                            this.hdnItemId = this.txtSerchItemId;
                            if (strRecedQty == null || strRecedQty == "") {
                                strRecedQty = "0";
                            }
                            if (txtQty == "" && this.gStrDefaultInput == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                if (parseInt(strRecedQty) <= parseInt(strShippedQty)) {
                                    if (strSerialControlled == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                        if ((parseInt(strShippedQty) - parseInt(strRecedQty)) != 0) {
                                            txtQty = "1";
                                            recvDetails.QTY = txtQty;
                                        }
                                        else {
                                            txtQty = (parseInt(strShippedQty) - parseInt(strRecedQty));
                                            recvDetails.QTY = txtQty;
                                        }
                                    }
                                    else {
                                        txtQty.Text = (parseInt(strShippedQty) - parseInt(strRecedQty));
                                        recvDetails.QTY = txtQty;
                                    }
                                }
                            }
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        ex_35 = _a.sent();
                        this.clientErrorMsg(ex_35, "poNonPo_RbtnChange");
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.updateDs = function (growPage, recvData) {
        return __awaiter(this, void 0, void 0, function () {
            var dtIutItems, txtNoOfBoxes, lnkItemId, lbInterUnit, txtQty, txtLadg, strSerialControlled, dblItemTolPer, dblLineShippedQty, dblLineRecdQty, strUOMVal, arrSelectedConf, strSelectedUOMFact, arrUOM, arrConf, intRowSel, lblPOQty, txtNoOfBoxes, lnkItemId, txtQty, txtLadg, lnkLineNbr, schdNbr, txttrkno, i, extTrkExist, i, extTrkExist, ex_36;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 12, , 13]);
                        this.lstRecvSendData = [];
                        this.statusCode = -1;
                        if (!(growPage == "ASP.mt_recv_po_or_nonpo_receipts_aspx")) return [3 /*break*/, 11];
                        if (!(this.lstRecvIutItems != null && this.lstRecvIutItems.length > 0)) return [3 /*break*/, 1];
                        dtIutItems = this.lstRecvIutItems.filter(function (x) { return x.ITEM_ID == recvData.ITEM_ID; })[0];
                        txtNoOfBoxes = recvData.NO_OF_PKGS;
                        lnkItemId = recvData.ITEM_ID;
                        lbInterUnit = recvData.INTERUNIT_LINE;
                        txtQty = recvData.QTY;
                        txtLadg = recvData.BILL_OF_LADING;
                        strSerialControlled = dtIutItems.SERIAL_CONTROLLED;
                        dblItemTolPer = 0;
                        dblLineShippedQty = parseInt(dtIutItems.QTY_SHIPPED);
                        dblLineRecdQty = 0;
                        if (dtIutItems.QTY_RECEIVED != null && dtIutItems.QTY_RECEIVED != "") {
                            dblLineRecdQty = parseInt(dtIutItems.QTY_RECEIVED);
                        }
                        if (txtQty != null && txtQty != "") {
                            if (strSerialControlled == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                if (parseInt(txtQty) > 1) {
                                    this.statusMsgs = [];
                                    this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Qty cannot be greater than 1 for serial item" });
                                    txtQty = "";
                                    recvData.QTY = "";
                                    setTimeout(function () {
                                        var itemtxtRecvQty = document.getElementById('txtRecvQty' + recvData.INV_ITEM_ID);
                                        if (itemtxtRecvQty != null) {
                                            itemtxtRecvQty.focus();
                                        }
                                    }, 2);
                                    return [2 /*return*/, true];
                                }
                            }
                            if (parseInt(txtQty) > (dblLineShippedQty + (dblLineShippedQty * dblItemTolPer / 100) - dblLineRecdQty) &&
                                this.gStrAllowExcessQty == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString()) {
                                this.statusMsgs = [];
                                this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Transfer qty should not be greater than Ordered Qty" });
                                txtQty = "";
                                recvData.QTY = "";
                                setTimeout(function () {
                                    var itemtxtRecvQty = document.getElementById('txtRecvQty' + recvData.INV_ITEM_ID);
                                    if (itemtxtRecvQty != null) {
                                        itemtxtRecvQty.focus();
                                    }
                                }, 2);
                                return [2 /*return*/];
                            }
                        }
                        if (txtQty == "" && this.grdRecvLinesRbBtnCheck == true) {
                            if (strSerialControlled == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                if ((dblLineShippedQty - dblLineRecdQty) != 0) {
                                    txtQty = "1";
                                }
                            }
                        }
                        if (dtIutItems.ITEM_ID == lnkItemId && dtIutItems.INTERUNIT_LINE == lbInterUnit) {
                            if (dtIutItems.NO_OF_PKGS != null) {
                                if ((txtNoOfBoxes != null)) {
                                    if (txtNoOfBoxes != null && txtNoOfBoxes != "") {
                                        dtIutItems.NO_OF_PKGS = txtNoOfBoxes;
                                    }
                                    else {
                                        dtIutItems.NO_OF_PKGS = "";
                                    }
                                }
                                else {
                                    if (dtIutItems.NO_OF_PKGS != null && dtIutItems.NO_OF_PKGS != "") {
                                        dtIutItems.NO_OF_PKGS = dtIutItems.NO_OF_PKGS;
                                    }
                                    else {
                                        dtIutItems.NO_OF_PKGS = "";
                                    }
                                }
                            }
                            dtIutItems.QTY = txtQty;
                            dtIutItems.BILL_OF_LADING = txtLadg;
                            if (recvData.CARRIER_ID != "Select Carrier") {
                                dtIutItems.CARRIER_ID = recvData.CARRIER_ID;
                            }
                        }
                        return [3 /*break*/, 11];
                    case 1:
                        strUOMVal = "";
                        arrSelectedConf = [];
                        strSelectedUOMFact = "";
                        arrUOM = [];
                        arrConf = [];
                        intRowSel = 0;
                        lblPOQty = recvData.LINE_PO_QTY;
                        txtNoOfBoxes = recvData.NO_OF_BOXES;
                        lnkItemId = recvData.INV_ITEM_ID;
                        txtQty = recvData.QTY;
                        txtLadg = recvData.BILL_OF_LADING;
                        lnkLineNbr = recvData.LINE_NBR;
                        schdNbr = recvData.SCHED_NBR;
                        txttrkno = recvData.EXT_TRK_NO;
                        strUOMVal = recvData.SELECTEDUOM;
                        if (strUOMVal != null && strUOMVal != undefined && strUOMVal != "") {
                            arrUOM = strUOMVal.split("(");
                        }
                        if (arrUOM != null && arrUOM.length > 1) {
                            arrConf = arrUOM[1].split(" ");
                        }
                        //When SelectedUOM conversion rate is in Fractions like 1/100 then splitting it with / 
                        if (arrConf.length > 1) {
                            if (arrConf[0] != null && arrConf[0].indexOf("/") == -1) {
                                //when selectedUOM conversion rate is like(BX( 1 EA)) 
                                strSelectedUOMFact = arrConf[0];
                            }
                            else {
                                //when selectedUOM conversion rate is like(BX( 1/100 EA)) 
                                arrSelectedConf = arrConf[0].split("/");
                                strSelectedUOMFact = (parseInt(arrSelectedConf[0]) / parseInt(arrSelectedConf[1])).toString();
                            }
                        }
                        else {
                            strSelectedUOMFact = arrConf[0];
                        }
                        if (!(this.dtScheduleItems != null && this.dtScheduleItems.length > 0)) return [3 /*break*/, 6];
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < this.dtScheduleItems.length)) return [3 /*break*/, 5];
                        if (!(this.dtScheduleItems[i].SCHED_NBR == schdNbr)) return [3 /*break*/, 4];
                        if (!(this.blnlnkItemIdEnable == false || this.blnlnkLineNbrEnable == false)) return [3 /*break*/, 4];
                        if (txtNoOfBoxes != null) {
                            if (txtNoOfBoxes != "") {
                                this.dtScheduleItems[i].NO_OF_BOXES = txtNoOfBoxes;
                            }
                            else {
                                this.dtScheduleItems[i].NO_OF_BOXES = 1;
                            }
                        }
                        else {
                            if (this.grdRecvLinesRbBtnCheck) {
                                if (this.dtScheduleItems[i].NO_OF_BOXES != null) {
                                }
                                else {
                                    this.dtScheduleItems[i].NO_OF_BOXES = parseInt(this.txtPkgs);
                                }
                            }
                        }
                        this.dtScheduleItems[i].LINE_QTY = txtQty;
                        this.dtScheduleItems[i].BILL_OF_LADING = txtLadg;
                        this.dtScheduleItems[i].RECV_UOM = arrUOM[0];
                        this.dtScheduleItems[i].RECV_CONVERSION_RATE = parseInt(strSelectedUOMFact);
                        this.dtScheduleItems[i].RECEIVED_FLAG = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString();
                        return [4 /*yield*/, this.checkColumnExist("EXT_TRK_NO", "RECEIVE BY SCHEDULE")];
                    case 3:
                        extTrkExist = _a.sent();
                        if (extTrkExist) {
                            if (this.grdRecvLinesRbBtnCheck) {
                                if (txttrkno != null && txttrkno != "") {
                                    this.dtScheduleItems[i].EXT_TRK_NO = txttrkno.trim();
                                }
                                else {
                                    this.dtScheduleItems[i].EXT_TRK_NO = this.txtSchdExTrk;
                                }
                            }
                            else {
                                if (this.dtScheduleItems[i].EXT_TRK_NO != "") {
                                    this.dtScheduleItems[i].EXT_TRK_NO = this.dtScheduleItems[i].EXT_TRK_NO;
                                }
                                else {
                                    this.dtScheduleItems[i].EXT_TRK_NO = "";
                                }
                            }
                        }
                        else {
                            if (this.grdRecvLinesRbBtnCheck) {
                                if (this.dtScheduleItems[i].EXT_TRK_NO != "") {
                                    this.dtScheduleItems[i].EXT_TRK_NO = this.dtScheduleItems[i].EXT_TRK_NO;
                                }
                                else {
                                    this.dtScheduleItems[i].EXT_TRK_NO = this.txtSchdExTrk;
                                }
                            }
                            else {
                                if (this.dtScheduleItems[i].EXT_TRK_NO != "") {
                                    this.dtScheduleItems[i].EXT_TRK_NO = this.dtScheduleItems[i].EXT_TRK_NO;
                                }
                                else {
                                    this.dtScheduleItems[i].EXT_TRK_NO = "";
                                }
                            }
                        }
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        this.lstRecvSendData = recvData;
                        return [3 /*break*/, 11];
                    case 6:
                        i = 0;
                        _a.label = 7;
                    case 7:
                        if (!(i < this.lstRecvSendPoLines.length)) return [3 /*break*/, 10];
                        if (!(this.lstRecvSendPoLines[i].LINE_NBR == lnkLineNbr)) return [3 /*break*/, 9];
                        if (!(this.blnlnkItemIdEnable == false || this.blnlnkLineNbrEnable == false)) return [3 /*break*/, 9];
                        if (txtNoOfBoxes != null) {
                            if (txtNoOfBoxes != "") {
                                this.lstRecvSendPoLines[i].NO_OF_BOXES = txtNoOfBoxes;
                            }
                            else {
                                this.lstRecvSendPoLines[i].NO_OF_BOXES = 1;
                            }
                        }
                        else {
                            if (this.grdRecvLinesRbBtnCheck) {
                                if (this.lstRecvSendPoLines[i].NO_OF_BOXES != null) {
                                }
                                else {
                                    this.lstRecvSendPoLines[i].NO_OF_BOXES = parseInt(this.txtPkgs);
                                }
                            }
                        }
                        this.lstRecvSendPoLines[i].LINE_QTY = txtQty;
                        // this.lstRecvSendPoLines[i].QTY = txtQty;
                        this.lstRecvSendPoLines[i].BILL_OF_LADING = txtLadg;
                        this.lstRecvSendPoLines[i].RECV_UOM = arrUOM[0];
                        this.lstRecvSendPoLines[i].RECV_CONVERSION_RATE = parseInt(strSelectedUOMFact);
                        this.lstRecvSendPoLines[i].RECEIVED_FLAG = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString();
                        return [4 /*yield*/, this.checkColumnExist("EXT_TRK_NO", "RECEIVE ITEMS")];
                    case 8:
                        extTrkExist = _a.sent();
                        if (extTrkExist) {
                            if (this.grdRecvLinesRbBtnCheck) {
                                if (txttrkno != null && txttrkno != "") {
                                    this.lstRecvSendPoLines[i].EXT_TRK_NO = txttrkno.trim();
                                }
                                else {
                                    this.lstRecvSendPoLines[i].EXT_TRK_NO = this.txtTrk;
                                }
                            }
                            else {
                                if (this.lstRecvSendPoLines[i].EXT_TRK_NO != "") {
                                    this.lstRecvSendPoLines[i].EXT_TRK_NO = this.lstRecvSendPoLines[i].EXT_TRK_NO;
                                }
                                else {
                                    this.lstRecvSendPoLines[i].EXT_TRK_NO = "";
                                }
                            }
                        }
                        else {
                            if (this.grdRecvLinesRbBtnCheck) {
                                if (this.lstRecvSendPoLines[i].EXT_TRK_NO != "") {
                                    this.lstRecvSendPoLines[i].EXT_TRK_NO = this.lstRecvSendPoLines[i].EXT_TRK_NO;
                                }
                                else {
                                    this.lstRecvSendPoLines[i].EXT_TRK_NO = this.txtTrk;
                                }
                            }
                            else {
                                if (this.lstRecvSendPoLines[i].EXT_TRK_NO != "") {
                                    this.lstRecvSendPoLines[i].EXT_TRK_NO = this.lstRecvSendPoLines[i].EXT_TRK_NO;
                                }
                                else {
                                    this.lstRecvSendPoLines[i].EXT_TRK_NO = "";
                                }
                            }
                        }
                        _a.label = 9;
                    case 9:
                        i++;
                        return [3 /*break*/, 7];
                    case 10:
                        this.lstRecvSendData = recvData;
                        _a.label = 11;
                    case 11: return [3 /*break*/, 13];
                    case 12:
                        ex_36 = _a.sent();
                        this.clientErrorMsg(ex_36, "updateDs");
                        return [3 /*break*/, 13];
                    case 13: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.changedata = function (ctrl, recvData) {
        return __awaiter(this, void 0, void 0, function () {
            var strVendorItemId, strUpcId, strMfgItemId, strGTIN, lbVendorItemId, lbCustItemId, blnflg, blnNoItem, i, lineNbr, i_6, i_7, i_8, lblinterLineNbr, i_9, selectedCarrier, txttrkno, lineNbr, i_10, i_11, blnSelectRdbtn, ex_37;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 7, , 8]);
                        this.statusMsgs = [];
                        this.statusCode = -1;
                        strVendorItemId = "";
                        strUpcId = "";
                        strMfgItemId = "";
                        strGTIN = "";
                        lbVendorItemId = "";
                        lbCustItemId = "";
                        blnflg = false;
                        blnNoItem = false;
                        if (!(recvData != null && recvData.length > 0)) return [3 /*break*/, 6];
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < recvData.length)) return [3 /*break*/, 5];
                        if (this.lstRecvSendPoLines != null && this.lstRecvSendPoLines.length > 0) {
                            this.lnkItemId = recvData[i].INV_ITEM_ID;
                            this.txtNoOfBoxes = recvData[i].NO_OF_BOXES;
                            this.txtQty = recvData[i].QTY; //.LINE_QTY;
                            lbVendorItemId = recvData[i].ITM_ID_VNDR;
                            lbCustItemId = recvData[i].CUST_ITEM_NO;
                        }
                        else if (this.lstRecvIutItems != null) {
                            this.lnkItemId = recvData[i].ITEM_ID;
                            this.txtNoOfBoxes = recvData[i].NO_OF_PKGS;
                            this.txtQty = recvData[i].QTY;
                            lbVendorItemId = recvData[i].VEND_ITEM_ID;
                            lbCustItemId = recvData[i].CUSTOM_ITEM_NO;
                        }
                        strUpcId = recvData[i].UPC_ID;
                        strMfgItemId = recvData[i].MFG_ITEM_ID;
                        strGTIN = recvData[i].GTIN;
                        if (ctrl == "NoOfBoxes") {
                            lineNbr = recvData[i].LINE_NBR;
                            if (this.txtNoOfBoxes != "") {
                                if (this.txtPkgsIsReadonly == false && this.grdRecvLinesRbBtnCheck) {
                                    for (i_6 = 0; i_6 < this.lstRecvSendPoLines.length; i_6++) {
                                        if (this.lstRecvSendPoLines[i_6].LINE_NBR == recvData[i_6].LINE_NBR) {
                                            this.lstRecvSendPoLines[i_6].NO_OF_BOXES = parseInt(this.txtPkgs);
                                        }
                                    }
                                    if (this.txtPkgs.trim().length == 0) {
                                        this.txtNoOfBoxes = "1";
                                    }
                                    else {
                                        this.txtNoOfBoxes = this.txtPkgs;
                                    }
                                }
                            }
                            else if (this.txtNoOfBoxes != "") {
                                if (this.txtPkgsIsReadonly == false && this.grdRecvLinesRbBtnCheck) {
                                    for (i_7 = 0; i_7 < this.lstRecvIutItems.length; i_7++) {
                                        if (this.lstRecvIutItems[i_7].INTERUNIT_LINE == recvData[i_7].INTERUNIT_LINE &&
                                            this.lstRecvIutItems[i_7].ITEM_ID == this.lnkItemId) {
                                            this.lstRecvIutItems[i_7].NO_OF_PKGS = this.txtPkgs;
                                        }
                                    }
                                    if (this.txtPkgs.trim().length == 0) {
                                        this.txtNoOfBoxes = " ";
                                    }
                                    else {
                                        this.txtNoOfBoxes = this.txtPkgs;
                                    }
                                }
                            }
                            else {
                                if (this.lstRecvSendPoLines != null && this.lstRecvSendPoLines.length > 0) {
                                    if (this.grdRecvLinesRbBtnCheck) {
                                        for (i_8 = 0; i_8 < this.lstRecvSendPoLines.length; i_8++) {
                                            if (this.lstRecvSendPoLines[i_8].LINE_NBR == lineNbr) {
                                                this.lstRecvSendPoLines[i_8].NO_OF_BOXES = parseInt(this.txtPkgs);
                                            }
                                        }
                                    }
                                }
                                if (this.lstRecvIutItems != null && this.lstRecvIutItems.length > 0) {
                                    lblinterLineNbr = recvData[i].INTERUNIT_LINE;
                                    if (this.grdRecvLinesRbBtnCheck) {
                                        for (i_9 = 0; i_9 < this.lstRecvIutItems.length; i_9++) {
                                            if (this.lstRecvIutItems[i_9].INTERUNIT_LINE == lblinterLineNbr && this.lstRecvIutItems[i_9].ITEM_ID == this.lnkItemId) {
                                                this.lstRecvIutItems[i_9].NO_OF_PKGS = this.txtPkgs;
                                                if (this.txtNoOfBoxes != "") {
                                                    this.txtNoOfBoxes = this.txtPkgs;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (ctrl == "Carrier") {
                            selectedCarrier = this.selectedDdlCarrier;
                            if (this.selectedDdlCarrier != "" && this.recvGrdCarrierEnable && this.grdRecvLinesRbBtnCheck) {
                                recvData[i].CARRIER_ID = this.selectedDdlCarrier;
                            }
                        }
                        if (ctrl == "Lading") {
                            this.txtLadg = recvData[i].BILL_OF_LADING;
                            if (this.grdRecvLinesRbBtnCheck) {
                                if (this.txtLading.length == 0) {
                                    this.txtLadg = "";
                                }
                                else {
                                    this.txtLadg = this.txtLading;
                                }
                            }
                        }
                        if (ctrl == "ExtTrkno") {
                            txttrkno = recvData[i].EXT_TRK_NO;
                            lineNbr = recvData[i].LINE_NBR;
                            if (txttrkno != null) {
                                if (this.grdRecvLinesRbBtnCheck) {
                                    for (i_10 = 0; i_10 < this.lstRecvSendPoLines.length; i_10++) {
                                        if (this.lstRecvSendPoLines[i_10].LINE_NBR == lineNbr) {
                                            this.lstRecvSendPoLines[i_10].EXT_TRK_NO = this.txtTrk;
                                        }
                                    }
                                    if (this.txtTrk.length == 0) {
                                        txttrkno = " ";
                                    }
                                    else {
                                        txttrkno = this.txtTrk;
                                    }
                                }
                            }
                            else {
                                if (this.lstRecvSendPoLines != null && this.lstRecvSendPoLines.length > 0) {
                                    if (this.grdRecvLinesRbBtnCheck) {
                                        for (i_11 = 0; i_11 < this.lstRecvSendPoLines.length; i_11++) {
                                            if (this.lstRecvSendPoLines[i_11].LINE_NBR == lineNbr) {
                                                this.lstRecvSendPoLines[i_11].EXT_TRK_NO = this.txtTrk;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (!(ctrl == "Search")) return [3 /*break*/, 4];
                        this.grdRecvLinesRbBtnCheck = false;
                        recvData[i].RBFlAG = false;
                        if (this.hdnItemId != "") {
                            this.txtSerchItemId = this.hdnItemId;
                        }
                        if (!(this.txtSerchItemId != "")) return [3 /*break*/, 4];
                        if (this.lnkItemId == this.txtSerchItemId) {
                            blnflg = true;
                            blnNoItem = true;
                        }
                        else if (strGTIN != null && strGTIN == this.txtSerchItemId) {
                            blnflg = true;
                            blnNoItem = true;
                        }
                        else if (strMfgItemId != null && strMfgItemId == this.txtSerchItemId) {
                            blnflg = true;
                            blnNoItem = true;
                        }
                        else if (lbCustItemId != null && lbCustItemId == this.txtSerchItemId) {
                            blnflg = true;
                            blnNoItem = true;
                        }
                        else if (strUpcId != null && strUpcId == this.txtSerchItemId) {
                            blnflg = true;
                            blnNoItem = true;
                        }
                        else if ((lbVendorItemId != null) && lbVendorItemId == this.txtSerchItemId) {
                            blnflg = true;
                            blnNoItem = true;
                        }
                        else {
                            blnflg = false;
                        }
                        if (!blnflg) return [3 /*break*/, 3];
                        recvData[i].RBFlAG = true;
                        this.hdnItemId = "";
                        blnSelectRdbtn = false;
                        return [4 /*yield*/, this.poNonPo_RbtnChange(recvData[i], blnSelectRdbtn)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        recvData[i].RBFlAG = false;
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 1];
                    case 5:
                        if (ctrl == "Search") {
                            if (blnNoItem == false) {
                                this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: this.txtSerchItemId + ": ItemId not found" });
                                this.hdnItemId = "";
                                this.txtSerchItemId = "";
                                return [2 /*return*/];
                            }
                        }
                        if (ctrl == "Lading") {
                            if (this.txtPkgs == "") {
                                this.txtPkgs = "";
                            }
                            else {
                            }
                        }
                        else if (ctrl == "NoOfBoxes") {
                        }
                        _a.label = 6;
                    case 6: return [3 /*break*/, 8];
                    case 7:
                        ex_37 = _a.sent();
                        this.clientErrorMsg(ex_37, "changedata");
                        return [3 /*break*/, 8];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.chkItemQty = function (recvData) {
        return __awaiter(this, void 0, void 0, function () {
            var strUOMVal, arrSelectedConf, strSelectedUOMFact, arrUOM, arrConf, dblConvFact, dblFraction, txtGridLading, lbQtyPO, strUOM, dblLineRecdQty, dblItemTolPer, intQty, intPoQty, growPage, chkUpdate, intConverfactor, ddlUOM, strUOM_1, dblLineRecdQty_1, dblItemTolPer_1, lnkItem, lnkItem, fact, rQty, recvQty, intQty_1, intPoQty_1, ex_38;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 6, , 7]);
                        this.statusMsgs = [];
                        this.statusCode = -1;
                        strUOMVal = "";
                        arrSelectedConf = [];
                        strSelectedUOMFact = "";
                        arrUOM = [];
                        arrConf = [];
                        dblConvFact = 0;
                        dblFraction = 0;
                        txtGridLading = "";
                        lbQtyPO = "";
                        strUOM = "";
                        dblLineRecdQty = 0;
                        dblItemTolPer = 0;
                        this.txtQty = recvData.QTY;
                        intQty = 0;
                        intPoQty = 0;
                        growPage = "";
                        if (this.schPO == false) {
                            growPage = "ASP.mt_recv_po_or_nonpo_receipts_aspx";
                        }
                        else {
                            growPage = "ASP.mt_recv_Schedule.aspx";
                        }
                        //IUT Qty checking 
                        strUOM = recvData.UNIT_OF_MEASURE;
                        lbQtyPO = recvData.QTY_PO;
                        if (!(this.lstRecvIutItems != undefined && this.lstRecvIutItems != null && this.lstRecvIutItems.length > 0)) return [3 /*break*/, 2];
                        this.ddlGridCarrier = recvData.CARRIER_ID;
                        txtGridLading = recvData.BILL_OF_LADING;
                        this.txtQty = recvData.QTY;
                        if (this.txtQty != "" && (recvData.CARRIER_ID == "Select Carrier" || recvData.CARRIER_ID == "" || recvData.CARRIER_ID == null || txtGridLading == "")) {
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Carrier and Lading are mandatory" });
                            this.txtQty = "";
                            recvData.QTY = "";
                            recvData.RBFlAG = false;
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.updateDs(growPage, recvData)];
                    case 1:
                        chkUpdate = _a.sent();
                        if (chkUpdate) {
                            return [2 /*return*/, true];
                        }
                        return [3 /*break*/, 5];
                    case 2:
                        intConverfactor = 0;
                        ddlUOM = recvData.UNIT_OF_MEASURE;
                        txtGridLading = recvData.BILL_OF_LADING;
                        strUOM_1 = "";
                        dblLineRecdQty_1 = 0;
                        dblItemTolPer_1 = 0;
                        if (growPage == "ASP.mt_recv_po_or_nonpo_receipts_aspx") {
                            if (recvData.CONVERSION_RATE != null && recvData.CONVERSION_RATE != "") {
                                intConverfactor = parseInt(recvData.CONVERSION_RATE);
                            }
                            this.mStandardConversionRate = recvData.CONVERSION_RATE.toString();
                            if (recvData.RECEIVED_QTY != null && recvData.RECEIVED_QTY != "") {
                                dblLineRecdQty_1 = parseInt(recvData.RECEIVED_QTY);
                            }
                            if (recvData.QTY_RECV_TOL_PCT != null && recvData.QTY_RECV_TOL_PCT != "") {
                                dblItemTolPer_1 = parseInt(recvData.QTY_RECV_TOL_PCT);
                            }
                            this.txtQty = recvData.QTY; //.LINE_QTY;
                            lnkItem = recvData.INV_ITEM_ID;
                            if (this.txtQty != "" && (recvData.CARRIER_ID == "" || recvData.CARRIER_ID == "Select Carrier" || recvData.CARRIER_ID == null || txtGridLading == "")) {
                                this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Carrier and Lading are mandatory" });
                                this.txtQty = "";
                                recvData.QTY = "";
                                recvData.RBFlAG = false;
                                return [2 /*return*/];
                            }
                        }
                        else {
                            this.txtQty = recvData.QTY;
                            lnkItem = recvData.INV_ITEM_ID;
                            fact = this.lstRecvSendPoLines.filter(function (x) { return x.INV_ITEM_ID == recvData.INV_ITEM_ID && x.LINE_NBR == recvData.LINE_NBR; });
                            if (fact != null && fact.length > 0) {
                                if (fact[0].CONVERSION_RATE !== null || fact[0].CONVERSION_RATE != undefined) {
                                    intConverfactor = fact[0].CONVERSION_RATE;
                                }
                            }
                            rQty = this.dtScheduleItems.filter(function (x) { return x.RECEIVED_QTY == recvData.RECEIVED_QTY; });
                            if (rQty.length > 0) {
                                if (rQty[0].RECEIVED_QTY !== null || rQty[0].RECEIVED_QTY != undefined) {
                                    dblLineRecdQty_1 = rQty[0].RECEIVED_QTY;
                                }
                            }
                            recvQty = this.dtScheduleItems.filter(function (x) { return x.QTY_RECV_TOL_PCT == recvData.QTY_RECV_TOL_PCT; });
                            if (recvQty.length > 0) {
                                if (recvQty[0].QTY_RECV_TOL_PCT !== null || recvQty[0].QTY_RECV_TOL_PCT != undefined) {
                                    dblLineRecdQty_1 = recvQty[0].QTY_RECV_TOL_PCT;
                                }
                            }
                            if (fact != null && fact.length > 0 && fact[0].CONVERSION_RATE != null && fact[0].CONVERSION_RATE != undefined) {
                                this.mStandardConversionRate = fact[0].CONVERSION_RATE.toString();
                            }
                            this.strUOM = fact[0].UNIT_OF_MEASURE;
                            this.strLineId = fact[0].LINE_ID;
                            this.StrSerialControlled = fact[0].SERIAL_CONTROLLED;
                            this.StrLotControlled = fact[0].LOT_CONTROLLED;
                            this.strItemId = fact[0].INV_ITEM_ID;
                            if (fact != null && fact.length > 0 && fact[0].LINE_NBR != null && fact[0].LINE_NBR != undefined) {
                                this.strLineNbr = fact[0].LINE_NBR.toString();
                            }
                            this.lstRecvSendPoLines;
                            this.lstGridRecvSendPoLines;
                            strUOM_1 = fact[0].UNIT_OF_MEASURE;
                            if (this.txtQty != "" && (recvData.CARRIER_ID == "" || recvData.CARRIER_ID == "Select Carrier" || recvData.CARRIER_ID == null || txtGridLading == "")) {
                                this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Carrier and Lading are mandatory" });
                                this.txtQty = "";
                                recvData.QTY = "";
                                recvData.RBFlAG = false;
                                return [2 /*return*/];
                            }
                        }
                        if (this.txtQty != "" && this.gStrAllowExcessQty == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString()) {
                            intQty_1 = parseInt(this.txtQty);
                            intPoQty_1 = parseInt(lbQtyPO);
                            strUOMVal = recvData.SELECTEDUOM; //check once  recvData.DDLUOMS[0].value;
                            if (strUOMVal != null && strUOMVal != "") {
                                arrUOM = strUOMVal.split("(");
                            }
                            if (arrUOM.length > 1) {
                                arrConf = arrUOM[1].split(" ");
                            }
                            //When SelectedUOM conversion rate is in Fractions like 1/100 then splitting it with / 
                            if (arrConf.length > 1) {
                                if (arrConf[0] != null && arrConf[0].indexOf("/") == -1) {
                                    strSelectedUOMFact = arrConf[0];
                                }
                                else {
                                    arrSelectedConf = arrConf[0].split("/");
                                    strSelectedUOMFact = (parseInt(arrSelectedConf[0]) / parseInt(arrSelectedConf[1])).toString();
                                }
                            }
                            else {
                                strSelectedUOMFact = arrConf[0];
                            }
                            if (arrUOM[0] != strUOM_1) {
                                dblConvFact = parseInt(strSelectedUOMFact);
                                if (this.gStrAltUOMDisplay == this.gRecv_StandardUOM) {
                                    if (strUOM_1 == arrUOM[0]) {
                                        if (arrUOM[0] == this.standardUOM) {
                                            if (parseInt(this.txtQty) > (parseInt(lbQtyPO) + (parseInt(lbQtyPO) * dblItemTolPer_1 / 100) - dblLineRecdQty_1)) {
                                                this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Receive quantity cannot be greater than open quantity" });
                                                this.txtQty = "";
                                                recvData.QTY = "";
                                                setTimeout(function () {
                                                    var itemtxtRecvQty = document.getElementById('txtRecvQty' + recvData.INV_ITEM_ID);
                                                    if (itemtxtRecvQty != null) {
                                                        itemtxtRecvQty.focus();
                                                    }
                                                }, 1);
                                                return [2 /*return*/];
                                            }
                                        }
                                        else {
                                            dblConvFact = parseInt(strSelectedUOMFact) / parseInt(this.mStandardConversionRate);
                                            dblFraction = parseInt(this.txtQty) * dblConvFact;
                                            if (parseInt(lbQtyPO) < dblFraction) {
                                                this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Receive quantity cannot be greater than open quantity" });
                                                this.txtQty = "";
                                                recvData.QTY = "";
                                                setTimeout(function () {
                                                    var itemtxtRecvQty = document.getElementById('txtRecvQty' + recvData.INV_ITEM_ID);
                                                    if (itemtxtRecvQty != null) {
                                                        itemtxtRecvQty.focus();
                                                    }
                                                }, 1);
                                                return [2 /*return*/];
                                            }
                                        }
                                    }
                                    else {
                                        dblConvFact = parseInt(strSelectedUOMFact) / parseInt(this.mStandardConversionRate);
                                        dblFraction = (parseInt(this.txtQty) * dblConvFact);
                                        if (parseInt(lbQtyPO) < dblFraction) {
                                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Receive quantity cannot be greater than open quantity" });
                                            this.txtQty = "";
                                            recvData.QTY = "";
                                            setTimeout(function () {
                                                var itemtxtRecvQty = document.getElementById('txtRecvQty' + recvData.INV_ITEM_ID);
                                                if (itemtxtRecvQty != null) {
                                                    itemtxtRecvQty.focus();
                                                }
                                            }, 1);
                                            return [2 /*return*/];
                                        }
                                    }
                                }
                                else if (this.gStrAltUOMDisplay == this.gRecv_PoUOM) {
                                    if (arrUOM[0] == this.gPOUOM) {
                                        if (parseInt(this.txtQty) > (parseInt(lbQtyPO) + (parseInt(lbQtyPO) * dblItemTolPer_1 / 100) - dblLineRecdQty_1)) {
                                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Receive quantity cannot be greater than open quantity" });
                                            this.txtQty = "";
                                            recvData.QTY = "";
                                            setTimeout(function () {
                                                var itemtxtRecvQty = document.getElementById('txtRecvQty' + recvData.INV_ITEM_ID);
                                                if (itemtxtRecvQty != null) {
                                                    itemtxtRecvQty.focus();
                                                }
                                            }, 1);
                                            return [2 /*return*/];
                                        }
                                    }
                                    else {
                                        dblConvFact = parseInt(strSelectedUOMFact) / parseInt(this.gPOUOMConversionRate);
                                        dblFraction = parseInt(this.txtQty) * dblConvFact;
                                        if (parseInt(lbQtyPO) < dblFraction) {
                                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Receive quantity cannot be greater than open quantity" });
                                            this.txtQty = "";
                                            setTimeout(function () {
                                                var itemtxtRecvQty = document.getElementById('txtRecvQty' + recvData.INV_ITEM_ID);
                                                if (itemtxtRecvQty != null) {
                                                    itemtxtRecvQty.focus();
                                                }
                                            }, 1);
                                            return [2 /*return*/];
                                        }
                                    }
                                }
                            }
                            else {
                                if (parseInt(this.txtQty) > (parseInt(lbQtyPO) + (parseInt(lbQtyPO) * dblItemTolPer_1 / 100) - dblLineRecdQty_1)) {
                                    this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Receive quantity cannot be greater than open quantity" });
                                    this.txtQty = "";
                                    recvData.QTY = "";
                                    setTimeout(function () {
                                        var itemtxtRecvQty = document.getElementById('txtRecvQty' + recvData.INV_ITEM_ID);
                                        if (itemtxtRecvQty != null) {
                                            itemtxtRecvQty.focus();
                                        }
                                    }, 1);
                                    return [2 /*return*/];
                                }
                            }
                        }
                        else {
                            this.txtQty = "";
                        }
                        return [4 /*yield*/, this.updateDs("ASP.mt_recv_po_or_nonpo_receipts_aspx", recvData)];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, this.updateTextBox(recvData, this.gstrlnkitemid, this.gstrlnklineNbr)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        ex_38 = _a.sent();
                        this.clientErrorMsg(ex_38, "chkItemQty");
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.updateTextBox = function (recvData, strselectitemid, strSelectedLineNbr) {
        return __awaiter(this, void 0, void 0, function () {
            var strLot, strSerial, sch_count, growPage, lnkItemId_3, lnkLineNbr_1, lbSchedNbr_1, strUOM, TxtBxEnable, drow, drAsn, drow, drAsn;
            return __generator(this, function (_a) {
                try {
                    this.statusMsgs = [];
                    this.statusCode = -1;
                    strLot = "";
                    strSerial = "";
                    sch_count = "";
                    growPage = "ASP.mt_recv_po_or_nonpo_receipts_aspx";
                    if (this.lstRecvSendPoLines != null && this.lstRecvSendPoLines.length > 0) {
                        if (growPage == "ASP.mt_recv_po_or_nonpo_receipts_aspx") {
                            strLot = recvData.LOT_CONTROLLED;
                            strSerial = recvData.SERIAL_CONTROLLED;
                            sch_count = recvData.SCHED_COUNT;
                            lnkItemId_3 = recvData.INV_ITEM_ID;
                            lnkLineNbr_1 = recvData.LINE_NBR;
                            lbSchedNbr_1 = recvData.SCHED_NBR;
                            strUOM = recvData.UNIT_OF_MEASURE;
                            TxtBxEnable = false;
                            if (TxtBxEnable == false) {
                                drow = linq_es5_1.asEnumerable(this.lstRecvSendPoLines).Where(function (x) { return x.INVENTORY_ITEM == lnkItemId_3 && x.LINE_NBR == lnkLineNbr_1 && x.SCHED_NBR == parseInt(lbSchedNbr_1) && x.RECEIVED_FLAG == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString(); }).ToArray();
                                if (drow.length > 0 && drow[0].QTY != null) {
                                    this.txtQty = drow[0].QTY.toString(); //.LINE_QTY.toString();//check once
                                }
                                else {
                                    if (this.gblnASNPO && sch_count == "1") {
                                        drAsn = linq_es5_1.asEnumerable(this.lstRecvSendPoLines).Where(function (x) { return x.INV_ITEM_ID == lnkItemId_3 && x.LINE_NBR == lnkLineNbr_1 && x.SCHED_NBR == parseInt(lbSchedNbr_1); }).ToArray();
                                        // dtReceiveDetails.Select("INV_ITEM_ID='" + lnkItemId.Text + "' AND LINE_NBR='" + lnkLineNbr.Text + "' AND SCHED_NBR='" + lbSchedNbr.ToString + "' ");
                                        if (drAsn.length > 0) {
                                            if (drAsn[0].ASN_QTY != null && drAsn[0].ASN_QTY != undefined) {
                                                this.txtQty = drAsn[0].ASN_QTY.toString();
                                            }
                                            else {
                                                this.txtQty = "";
                                            }
                                        }
                                    }
                                    else {
                                        this.txtQty = "";
                                    }
                                }
                            }
                            if (this.gStrLotSerial == AtParEnums_1.Enable_Lot_Serial_Tracking[AtParEnums_1.Enable_Lot_Serial_Tracking.AtPar].toString()) {
                                drow = linq_es5_1.asEnumerable(this.lstRecvSendPoLines).Where(function (x) { return x.INV_ITEM_ID == lnkItemId_3 && x.LINE_NBR == lnkLineNbr_1 && x.SCHED_NBR == parseInt(lbSchedNbr_1) && x.RECEIVED_FLAG == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString(); }).ToArray();
                                //check once   dtReceiveDetails.Select("LotSerial_Qty<>'' AND INV_ITEM_ID='" + lnkItemId.Text + "' AND LINE_NBR='" + lnkLineNbr.Text + "' AND SCHED_NBR='" + lbSchedNbr.ToString + "'AND RECEIVED_FLAG = 'Y'");
                                if (drow.length > 0 && drow[0].QTY != null) {
                                    this.txtQty = drow[0].QTY.toString();
                                    //for (let i = 0; i < recvData. in ddlUOM.Items) {
                                    //    string[] strUOMarry = lstddlUOM.ToString.Split("(");
                                    //    if (strUOM == strUOMarry(0)) {
                                    //        ddlUOM.ClearSelection();
                                    //        ddlUOM.Items.FindByText(lstddlUOM.ToString).Selected = true;
                                    //    }
                                    //}
                                }
                                else {
                                    if (this.gblnASNPO && sch_count == "1") {
                                        drAsn = linq_es5_1.asEnumerable(this.lstRecvSendPoLines).Where(function (x) { return x.INV_ITEM_ID == lnkItemId_3 && x.LINE_NBR == lnkLineNbr_1 && x.SCHED_NBR == parseInt(lbSchedNbr_1); }).ToArray();
                                        //dtReceiveDetails.Select("INV_ITEM_ID='" + lnkItemId.Text + "' AND LINE_NBR='" + lnkLineNbr.Text + "' AND SCHED_NBR='" + lbSchedNbr.ToString + "' ");
                                        if (drAsn.length > 0 && drAsn[0].ASN_QTY != null) {
                                            this.txtQty = drAsn[0].ASN_QTY.toString();
                                        }
                                    }
                                    else {
                                        if ((lnkItemId_3 == strselectitemid || lnkLineNbr_1 == strSelectedLineNbr)) {
                                            this.txtQty = "";
                                            //this.gblnlotser = false;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "updateTextBox");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.confirmData = function (btn) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                try {
                    this.statusMsgs = [];
                    this.confirmationService.confirm({
                        message: "Do you want to delete the existing PO/IUT?",
                        accept: function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        this.spnrService.start();
                                        this.hdnConfirmPoDelete = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString();
                                        this.hdnConfirmIUTDelete = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString();
                                        if (!(btn == "posearch")) return [3 /*break*/, 2];
                                        this.recvSearchPos = false;
                                        this.recvIUTSearch = false;
                                        this.tbl = false;
                                        this.lstRecvSendPoLines = [];
                                        this.lstRecvIutItems = [];
                                        return [4 /*yield*/, this.showPoSearchPopup()];
                                    case 1:
                                        _a.sent();
                                        return [3 /*break*/, 4];
                                    case 2:
                                        this.tbl = false;
                                        this.recvSearchPos = false;
                                        this.recvIUTSearch = false;
                                        this.lstRecvSendPoLines = [];
                                        return [4 /*yield*/, this.btnGet_Click()];
                                    case 3:
                                        _a.sent();
                                        _a.label = 4;
                                    case 4:
                                        this.spnrService.stop();
                                        return [2 /*return*/];
                                }
                            });
                        }); },
                        reject: function () {
                            _this.hdnConfirmPoDelete = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                            _this.hdnConfirmIUTDelete = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                            _this.spnrService.stop();
                        }
                    });
                    this.spnrService.stop();
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "confirmData");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.showPoSearchPopup = function () {
        return __awaiter(this, void 0, void 0, function () {
            var shiptoId, searchType, includeASNPos, ex_39;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        shiptoId = "";
                        searchType = "";
                        if (this.selectedShipToId == "Select ShipToID" || this.selectedShipToId == "") {
                            shiptoId = "";
                        }
                        else {
                            shiptoId = this.selectedShipToId;
                        }
                        if (this.txtShipId != "") {
                            shiptoId = this.txtShipId;
                        }
                        if (this.rbtnDueDate) {
                            searchType = "Due Date";
                        }
                        else if (this.rbtnPODate) {
                            searchType = "PO Date";
                        }
                        includeASNPos = this.hdnIncludeASNPOs;
                        return [4 /*yield*/, this.poSearchBindDataGrid(shiptoId, searchType, includeASNPos)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        ex_39 = _a.sent();
                        this.clientErrorMsg(ex_39, "showPoSearchPopup");
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.poSearchBindDataGrid = function (pShiptoId, pSearchType, pIncASNPOs) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var recvSearchPOEntity, ex_40;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.statusMsgs = [];
                        this.lstRecvSearchPO = [];
                        this.lstSeachItems = [];
                        recvSearchPOEntity = new vm_recv_searchheader_1.VM_RECV_SEARCHHEADER();
                        recvSearchPOEntity.BUSINESS_UNIT = this.selectedBUnits;
                        recvSearchPOEntity.ITEM_ID = this.txtItemId;
                        recvSearchPOEntity.VNDRID = this.txtVendorId;
                        recvSearchPOEntity.VENDOR_NAME = this.txtVendorName;
                        recvSearchPOEntity.SHPTID = pShiptoId;
                        recvSearchPOEntity.FROM_DATE = this.txtFrmDate;
                        recvSearchPOEntity.TO_DATE = this.txtToDate;
                        recvSearchPOEntity.SEARCH_TYPE = pSearchType;
                        recvSearchPOEntity.INCLUDE_ASN_POS = pIncASNPOs; //"Y";
                        this.lstRecvSearchPO.push(recvSearchPOEntity);
                        this.spnrService.start();
                        this.tbl = false;
                        this.page = false;
                        this.recvIUTSearch = false;
                        this.recvSearchPos = true;
                        this.grdRecvSearchPos = false;
                        return [4 /*yield*/, this.recvPoNonPoService.searchHeader(this.lstRecvSearchPO).
                                catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.statusCode = data.StatusCode;
                                _this.statusMsgs = [];
                                switch (data.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        if (data.DataList != null && data.DataList.length > 0) {
                                            _this.lstSeachItems = data.DataList;
                                            for (var i = 0; i < _this.lstSeachItems.length; i++) {
                                                _this.lstSeachItems[i].RBFlAG = false;
                                            }
                                            _this.grdRecvSearchPos = true;
                                        }
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Custom: {
                                        _this.statusMsgs.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                }
                            })];
                    case 1:
                        _a.sent();
                        this.spnrService.stop();
                        return [3 /*break*/, 3];
                    case 2:
                        ex_40 = _a.sent();
                        this.clientErrorMsg(ex_40, "poSearchBindDataGrid");
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.confirmIUT = function (cntrl) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                try {
                    this.statusMsgs = [];
                    this.confirmationService.confirm({
                        message: "Do you want to delete the existing PO/IUT?",
                        accept: function () {
                            _this.spnrService.start();
                            _this.hdnConfirmPoDelete = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString();
                            _this.hdnConfirmIUTDelete = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString();
                            _this.lstRecvIutItems = [];
                            _this.recvSearchPos = false;
                            _this.recvIUTSearch = false;
                            _this.tbl = false;
                            _this.btnGet_Click();
                            _this.spnrService.stop();
                        },
                        reject: function () {
                            _this.hdnConfirmPoDelete = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                            _this.hdnConfirmIUTDelete = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                            _this.spnrService.stop();
                        }
                    });
                    this.spnrService.stop();
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "confirmIUT");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.showIUTSearchPopup = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var recvIutSearchPOEntity, dateStr, date, dtfrm, frmdt, dtto, todt, ex_41;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.statusMsgs = [];
                        this.lstRecvIUTSearchPO = [];
                        recvIutSearchPOEntity = new VM_IUT_SENDHEADER_1.VM_IUT_SENDHEADER();
                        recvIutSearchPOEntity.BUSINESS_UNIT = this.selectedBUnits;
                        recvIutSearchPOEntity.ITEM_ID = this.txtItemId;
                        dateStr = new Date(new Date()).toLocaleString().replace(/[^A-Za-z 0-9 \.,\?""!@#\$%\^&\*\(\)-_=\+;:<>\/\\\|\}\{\[\]`~]*/g, '');
                        date = new Date(dateStr);
                        dtfrm = new Date(this.txtFrmDate);
                        frmdt = (dtfrm.getMonth() + 1) + '/' + (dtfrm.getDay() + 1) + '/' + dtfrm.getFullYear();
                        dtto = new Date(this.txtToDate);
                        todt = (dtto.getMonth() + 1) + '/' + (dtto.getDay() + 1) + '/' + dtto.getFullYear();
                        recvIutSearchPOEntity.FROM_DATE = frmdt;
                        recvIutSearchPOEntity.TO_DATE = todt;
                        recvIutSearchPOEntity.PRODUCT = AtParEnums_1.EnumApps.Receiving;
                        this.lstRecvIUTSearchPO.push(recvIutSearchPOEntity);
                        return [4 /*yield*/, this.recvPoNonPoService.searchIUTHeader(this.lstRecvIUTSearchPO).
                                catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.statusCode = data.StatusCode;
                                _this.statusMsgs = [];
                                switch (data.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        if (data.DataList != null && data.DataList.length > 0) {
                                            _this.lstRecvSearchIuts = data.DataList;
                                            for (var i = 0; i < _this.lstRecvSearchIuts.length; i++) {
                                                _this.lstRecvSearchIuts[i].RBFlAG = false;
                                            }
                                            _this.tbl = false;
                                            _this.page = false;
                                            _this.recvSearchPos = false;
                                            _this.recvIUTSearch = true;
                                        }
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Custom: {
                                        _this.statusMsgs.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                }
                            })];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        ex_41 = _a.sent();
                        this.clientErrorMsg(ex_41, "showIUTSearchPopup");
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.asnPopupshow = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    this.statusMsgs = [];
                    if (this.txtPONumber != undefined && this.txtPONumber != "") {
                        this.txtPONumber = this.txtPONumber.toUpperCase().replace("'", "''");
                    }
                    if (this.selectedBUnits == "Select BusinessUnit") {
                        this.selectedBUnits = "";
                    }
                    this.breadCrumbMenu.SUB_MENU_NAME = ' Multiple receipts exists for this Purchase Order';
                    this.spnrService.emitChangeBreadCrumbEvt(JSON.stringify(this.breadCrumbMenu));
                    this.tbl = false;
                    this.page = false;
                    this.purchase = true;
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "asnPopupshow");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.loadparameters = function (screenName) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var drInput, drShipToId, drNonPo, drUOM, drReqShipToId, drdisplayRecdQty, drIUT, drASNdwnd, drASNReceiptStatus, drNonStock, drDueOrPo, drLotSerial, drAltUOM, drAllowExcessQty, drZeroRecWarn, drSearchPOWithOutBU, drDefaultDateRange, drDisplayComments, drIncludeASNPOs, drDefPrinter, drSelPrinter, drPoComments, drPoIDConcacinate, drPrintingOption, drdonotDefaulttrckno, intDelvShiptoIdsCnt, ex_42, ex_43;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 7, , 8]);
                        drInput = linq_es5_1.asEnumerable(this.lstProfileApp).Where(function (x) { return x.PARAMETER_ID == "DEFAULT_INPUT"; }).ToArray();
                        if (drInput.length > 0) {
                            this.gStrDefaultInput = drInput[0].PARAMETER_VALUE.toString(); // drInput(0)("PARAMETER_VALUE").ToString();
                        }
                        drShipToId = linq_es5_1.asEnumerable(this.lstProfileApp).Where(function (x) { return x.PARAMETER_ID == "EDIT_SHIPTO_ID"; }).ToArray();
                        if (drShipToId.length > 0) {
                            this.gStrEditShipToId = drShipToId[0].PARAMETER_VALUE.toString();
                        }
                        drNonPo = linq_es5_1.asEnumerable(this.lstProfileApp).Where(function (x) { return x.PARAMETER_ID == "NON_PO_ITEMS_RECEIVE"; }).ToArray();
                        if (drNonPo.length > 0) {
                            this.gStrNonPoItemsReceive = drNonPo[0].PARAMETER_VALUE.toString();
                        }
                        drUOM = linq_es5_1.asEnumerable(this.lstProfileApp).Where(function (x) { return x.PARAMETER_ID == "EDIT_UOM"; }).ToArray();
                        if (drUOM.length > 0) {
                            this.gStrUOMEditFlag = drUOM[0].PARAMETER_VALUE.toString();
                        }
                        else {
                            this.gStrUOMEditFlag = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                        }
                        drReqShipToId = linq_es5_1.asEnumerable(this.lstProfileApp).Where(function (x) { return x.PARAMETER_ID == "REQD_SHIPTO_ID"; }).ToArray();
                        if (drReqShipToId.length > 0) {
                            this.gStrReqdShipToId = drReqShipToId[0].PARAMETER_VALUE.toString();
                        }
                        if (drReqShipToId.length > 0 && this.hdnReqShiptoId != null) {
                            this.hdnReqShiptoId = drReqShipToId[0].PARAMETER_VALUE.toString();
                        }
                        drdisplayRecdQty = linq_es5_1.asEnumerable(this.lstProfileApp).Where(function (x) { return x.PARAMETER_ID == "DISPLAY_RECVD_QTY"; }).ToArray();
                        if (drdisplayRecdQty.length > 0) {
                            this.gStrDisplayReceivedQty = drdisplayRecdQty[0].PARAMETER_VALUE.toString();
                        }
                        drIUT = linq_es5_1.asEnumerable(this.lstProfileApp).Where(function (x) { return x.PARAMETER_ID == "PO_IUT_RECEIVING"; }).ToArray();
                        if (drIUT.length > 0) {
                            if (drIUT[0].PARAMETER_VALUE.toString() != null) {
                                this.gStrAllowIUTAccess = drIUT[0].PARAMETER_VALUE.toString();
                            }
                            else {
                                this.gStrAllowIUTAccess = "";
                            }
                        }
                        else {
                            this.gStrAllowIUTAccess = "";
                        }
                        drASNdwnd = linq_es5_1.asEnumerable(this.lstOrgParms).Where(function (x) { return x.PARAMETER_ID == "ASN_DOWNLOAD_BY"; }).ToArray();
                        if (drASNdwnd.length > 0) {
                            this.gStrASNDownload = drASNdwnd[0].PARAMETER_VALUE;
                        }
                        else {
                            this.gStrASNDownload = "";
                        }
                        drASNReceiptStatus = linq_es5_1.asEnumerable(this.lstOrgParms).Where(function (x) { return x.PARAMETER_ID == "ASN_RECEIPT_STATUS"; }).ToArray();
                        if (drASNReceiptStatus.length > 0) {
                            this.gASNReceiptStatus = drASNReceiptStatus[0].PARAMETER_VALUE;
                        }
                        else {
                            this.gASNReceiptStatus = "";
                        }
                        drNonStock = linq_es5_1.asEnumerable(this.lstOrgParms).Where(function (x) { return x.PARAMETER_ID == "NON_STOCK_STORE"; }).ToArray();
                        if (drNonStock.length > 0) {
                            this.gStrNonStockStore = drNonStock[0].PARAMETER_VALUE;
                        }
                        drDueOrPo = linq_es5_1.asEnumerable(this.lstOrgParms).Where(function (x) { return x.PARAMETER_ID == "SEARCH_BY_DUE_OR_PO_DATE"; }).ToArray();
                        if (drDueOrPo.length > 0) {
                            this.gStrSearchType = drDueOrPo[0].PARAMETER_VALUE;
                        }
                        drLotSerial = linq_es5_1.asEnumerable(this.lstOrgParms).Where(function (x) { return x.PARAMETER_ID == "LOT_SERIAL_ENABLED"; }).ToArray();
                        if (drLotSerial.length > 0) {
                            this.gStrLotSerial = drLotSerial[0].PARAMETER_VALUE;
                        }
                        drAltUOM = linq_es5_1.asEnumerable(this.lstOrgParms).Where(function (x) { return x.PARAMETER_ID == "ALT_UOM_DISPLAY_OPT"; }).ToArray();
                        if (drAltUOM.length > 0) {
                            this.gStrAltUOMDisplay = drAltUOM[0].PARAMETER_VALUE;
                        }
                        drAllowExcessQty = linq_es5_1.asEnumerable(this.lstProfileApp).Where(function (x) { return x.PARAMETER_ID == "ALLOW_EXCESS_RECV_QTY"; }).ToArray();
                        if (drAllowExcessQty.length > 0) {
                            this.gStrAllowExcessQty = drAllowExcessQty[0].PARAMETER_VALUE;
                        }
                        drZeroRecWarn = linq_es5_1.asEnumerable(this.lstProfileApp).Where(function (x) { return x.PARAMETER_ID == "ZERO_RECEIPT_WARN"; }).ToArray();
                        if (drZeroRecWarn.length > 0) {
                            this.gStrZeroReceiptWarn = drZeroRecWarn[0].PARAMETER_VALUE;
                        }
                        if (drZeroRecWarn != null && drZeroRecWarn.length > 0) {
                            this.hdnCnfmZroQty = drZeroRecWarn[0].PARAMETER_VALUE;
                        }
                        drSearchPOWithOutBU = linq_es5_1.asEnumerable(this.lstProfileApp).Where(function (x) { return x.PARAMETER_ID == "SEARCH_PO_WITHOUT_BU"; }).ToArray();
                        if (drSearchPOWithOutBU != null && drSearchPOWithOutBU.length > 0) {
                            if ((drSearchPOWithOutBU[0].PARAMETER_VALUE != null || drSearchPOWithOutBU[0].PARAMETER_VALUE != "") && (this.hdnSearchWithOutBU != "")) {
                                this.hdnSearchWithOutBU = drSearchPOWithOutBU[0].PARAMETER_VALUE;
                            }
                        }
                        drDefaultDateRange = linq_es5_1.asEnumerable(this.lstProfileApp).Where(function (x) { return x.PARAMETER_ID == "DEFAULT_DATE_RANGE"; }).ToArray();
                        if (drDefaultDateRange.length > 0) {
                            this.gDefaultDateRange = drDefaultDateRange[0].PARAMETER_VALUE;
                        }
                        drDisplayComments = linq_es5_1.asEnumerable(this.lstProfileApp).Where(function (x) { return x.PARAMETER_ID == "DISPLAY_COMMENTS"; }).ToArray();
                        if (drDisplayComments.length > 0) {
                            this.gDisplayComments = drDisplayComments[0].PARAMETER_VALUE;
                        }
                        drIncludeASNPOs = linq_es5_1.asEnumerable(this.lstProfileApp).Where(function (x) { return x.PARAMETER_ID == "SEARCH_FOR_ASN_POS"; }).ToArray();
                        if (drIncludeASNPOs.length > 0 && (this.hdnIncludeASNPOs != null)) {
                            if (drIncludeASNPOs[0].PARAMETER_VALUE != null && drIncludeASNPOs[0].PARAMETER_VALUE != "") {
                                this.hdnIncludeASNPOs = drIncludeASNPOs[0].PARAMETER_VALUE;
                            }
                            else {
                                this.hdnIncludeASNPOs = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                            }
                        }
                        drDefPrinter = linq_es5_1.asEnumerable(this.lstProfileApp).Where(function (x) { return x.PARAMETER_ID == "DEFAULT_LABEL_PRINTER"; }).ToArray();
                        if (drDefPrinter.length > 0) {
                            this.gStrDefPrinter = drDefPrinter[0].PARAMETER_VALUE;
                        }
                        drSelPrinter = linq_es5_1.asEnumerable(this.lstProfileApp).Where(function (x) { return x.PARAMETER_ID == "LABEL_PRINTERS"; }).ToArray();
                        if (drSelPrinter.length > 0) {
                            this.gStrSelPrinter = drSelPrinter[0].PARAMETER_VALUE;
                        }
                        drPoComments = linq_es5_1.asEnumerable(this.lstOrgParms).Where(function (x) { return x.PARAMETER_ID == "RECV_PRINT_POID_COMMENTS"; }).ToArray();
                        if (drPoComments.length > 0) {
                            this.gStrPrintPoIDComments = drPoComments[0].PARAMETER_VALUE;
                        }
                        drPoIDConcacinate = linq_es5_1.asEnumerable(this.lstOrgParms).Where(function (x) { return x.PARAMETER_ID == "RECV_CONCATINATE_POID_TRKNO"; }).ToArray();
                        if (drPoIDConcacinate.length > 0) {
                            this.gConcatinateTrkNoPoID = drPoIDConcacinate[0].PARAMETER_VALUE;
                        }
                        drPrintingOption = linq_es5_1.asEnumerable(this.lstProfileApp).Where(function (x) { return x.PARAMETER_ID == "RECEIPT_DELIVER_PRINT_OPTIONS"; }).ToArray();
                        if (drPrintingOption.length > 0) {
                            this.gStrRecDelprintoption = drPrintingOption[0].PARAMETER_VALUE;
                        }
                        else {
                            this.gStrRecDelprintoption = AtParEnums_1.Shiping_Label_PrinterType[AtParEnums_1.Shiping_Label_PrinterType.None].toString();
                        }
                        drdonotDefaulttrckno = linq_es5_1.asEnumerable(this.lstOrgParms).Where(function (x) { return x.PARAMETER_ID == "DONOT_DEFAULT_TRACKING_NUMBER"; }).ToArray();
                        if (drdonotDefaulttrckno.length > 0) {
                            this.gdonotDefaulttrackingNumber = drdonotDefaulttrckno[0].PARAMETER_VALUE;
                        }
                        try {
                            intDelvShiptoIdsCnt = 0;
                            if (this.shipToIdCount != null) {
                                intDelvShiptoIdsCnt = this.shipToIdCount;
                            }
                            if (intDelvShiptoIdsCnt > 0) {
                                this.gPrintStockHeader = "Y";
                            }
                            else {
                                this.gPrintStockHeader = "N";
                            }
                        }
                        catch (ex) {
                            this.clientErrorMsg(ex, "loadparameters");
                        }
                        if (!(screenName == "mt_recv_po_or_nonpo_receipts")) return [3 /*break*/, 6];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        //Create an instance of ATPARSERVICE class
                        this.statusCode = -1;
                        this.spnrService.start();
                        return [4 /*yield*/, this.commonService.getNiceLabelsPrintersData(AtParEnums_1.EnumApps.Receiving, "1", "").
                                catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.lstSetUpProPrinters = data.DataList;
                                _this.statusCode = data.StatusCode;
                                switch (data.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Custom: {
                                        _this.statusMsgs.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                }
                            })];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.enablePrintButtons()];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        ex_42 = _a.sent();
                        this.clientErrorMsg(ex_42, "loadparameters");
                        return [3 /*break*/, 5];
                    case 5:
                        if (this.gStrDefaultInput == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                            this.blnImgCountAll = true;
                            this.blnImgResetAll = true;
                        }
                        else {
                            this.blnImgCountAll = false;
                            this.blnImgResetAll = false;
                        }
                        if (this.gStrEditShipToId == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                            //this.blnShipToId = true;
                            //this.ddlShipToId = true;
                            this.blntxtShipIdDisable = false;
                        }
                        else {
                            //ddlShipToId.Enabled = false;
                            //txtShipId.Enabled = false;
                            this.blntxtShipIdDisable = true;
                        }
                        if (this.gStrNonPoItemsReceive == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                            this.btnNonPo = true;
                        }
                        else {
                            this.btnNonPo = false;
                        }
                        if (this.gStrAllowIUTAccess == "Purchasing") {
                            this.btnIUTSearch = false;
                            this.txtIutIsEditMode = true;
                        }
                        else {
                            if (this.gStrAllowIUTAccess == "Inter Unit") {
                                this.btnPoSearch = false;
                                this.btnIUTSearch = true;
                                this.txtIutIsEditMode = false;
                            }
                            else if (this.gStrAllowIUTAccess != "") {
                                this.btnIUTSearch = true;
                                this.txtIutIsEditMode = false;
                            }
                            else {
                                this.btnIUTSearch = false;
                                this.txtIutIsEditMode = true;
                            }
                        }
                        if (this.gStrSearchType == "DUE DATE") {
                            //rbtnDueDate.Checked = true;
                        }
                        else {
                            //rbtnPODate.Checked = true;
                        }
                        if (this.gStrNonStockStore == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                            this.blnTxtExtTrk = true;
                            this.blnLblExtTrk = true;
                        }
                        else {
                            this.blnTxtExtTrk = false;
                            this.blnLblExtTrk = false;
                        }
                        _a.label = 6;
                    case 6: return [3 /*break*/, 8];
                    case 7:
                        ex_43 = _a.sent();
                        this.clientErrorMsg(ex_43, "loadparameters");
                        return [3 /*break*/, 8];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.enablePrintButtons = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    if (this.gStrRecDelprintoption == AtParEnums_1.Shiping_Label_PrinterType[AtParEnums_1.Shiping_Label_PrinterType.None].toString()) {
                    }
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "enablePrintButtons");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.clearData = function () {
        try {
            this.lstRecvSendPoLines = [];
            this.lstRecvIutItems = [];
            this.lstMainItemLotSerial = [];
            // this.selectedBUnits = "Select BusinessUnit";
            this.selectedINVITEMID = "";
            this.hdnBunit = "";
            this.lblPhoneValue = "";
            this.txtSerchItemId = "";
            this.txtPkgs = "";
            this.hdnItemId = "";
            this.txtLading = "";
            this.txtTrk = "";
            this.gblnASNPO = false;
            this.gSTime = "";
            this.gstrPrevComments = "";
            this.gInvoiceMthdCode = "";
            this.gDropShipFlag = "";
            this.gstrLoader = "";
            this.gstrlnkitemid = "";
            this.gstrlnklineNbr = "";
            this.selectedDdlCarrier = "Select Carrier";
            this.lblReceiverId = "";
            this.lblBuyerId = "";
            this.hdnNonPo = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
        }
        catch (ex) {
            this.clientErrorMsg(ex, "clearData");
        }
    };
    PoNonPoReceiptsComponent.prototype.clearSentDetails = function () {
        try {
            this.txtPONumber = "";
            this.txtIUT = "";
            this.txtInvoice = "";
            this.txtItemId = "";
            this.txtVendorId = "";
            this.txtVendorName = "";
            this.currentFromDate = new Date();
            this.txtToDate = new Date();
            if (this.gDefaultDateRange != null && this.gDefaultDateRange !== "") {
                this.currentFromDate.setDate(this.currentFromDate.getDate() - parseInt(this.gDefaultDateRange));
                this.txtFrmDate = (this.currentFromDate.getMonth() + 1) + '/' + (this.currentFromDate.getDate()) + '/' + this.currentFromDate.getFullYear();
                this.txtToDate = (this.currentDate.getMonth() + 1) + '/' + (this.currentDate.getDate()) + '/' + this.currentDate.getFullYear();
            }
            else {
                this.txtToDate = (this.currentDate.getMonth() + 1) + '/' + (this.currentDate.getDate()) + '/' + this.currentDate.getFullYear();
                this.txtFrmDate = (this.currentFromDate.getMonth() + 1) + '/' + (this.currentFromDate.getDate()) + '/' + this.currentFromDate.getFullYear();
            }
            this.chkIncludeAllPOLines = false;
        }
        catch (ex) {
            this.clientErrorMsg(ex, "clearSentDetails");
        }
    };
    /**
    *
    * LotSerial
    */
    PoNonPoReceiptsComponent.prototype.btnLotSerial_Click = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var dtLotSerial, ex_44;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        if (this.presentScreen == "PO") {
                            this.breadCrumbMenu.SUB_MENU_NAME = 'Lot/Serial';
                        }
                        else if (this.presentScreen == "ScheduledPo") {
                            this.breadCrumbMenu.SUB_MENU_NAME = 'Receive By Schedule - Lot/Serial';
                        }
                        this.spnrService.emitChangeBreadCrumbEvt(JSON.stringify(this.breadCrumbMenu));
                        this.statusMsgs = [];
                        this.LotSerialentity = new VM_RECV_LOTSERIAL_1.VM_RECV_LOTSERIAL();
                        // this.lstItemLotSerial = [];
                        this.lstFinalLotSerial = [];
                        dtLotSerial = [];
                        this.bysch = false;
                        this.tbl = false;
                        this.page = false;
                        this.lotserial = true;
                        return [4 /*yield*/, this.loadparameters("mt_recv_LotSerial")];
                    case 1:
                        _a.sent();
                        if (this.lstMainItemLotSerial != null && this.lstMainItemLotSerial.length > 0) {
                            this.lstFinalLotSerial = this.lstMainItemLotSerial.filter(function (x) { return x.ITEM_ID == _this.txtSerchItemId && x.LINE_NBR == _this.gstrlnklineNbr && x.SCHED_NBR == _this.schedNbr && x.DELETE_FLAG == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString(); });
                        }
                        if (this.lstFinalLotSerial.length > 0) {
                            this.lotserialGrid = true;
                            this.intTolRecvQty = parseInt(this.selecstedRow.QTY);
                        }
                        else {
                            this.lotserialGrid = false;
                            this.statusMsgs = [];
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "No Records Found" });
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        ex_44 = _a.sent();
                        this.clientErrorMsg(ex_44, "btnLotSerial_Click");
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.buildColumns = function () {
        return __awaiter(this, void 0, void 0, function () {
            var dr;
            return __generator(this, function (_a) {
                try {
                    dr = new VM_RECV_LOTSERIAL_1.VM_RECV_LOTSERIAL();
                    dr.TRANSACTION_ID = "";
                    dr.ITEM_ID = "";
                    dr.LINE_NBR = "";
                    dr.SCHED_NBR = "";
                    dr.SERIAL_ID = "";
                    dr.LOT_ID = "";
                    dr.QTY = "";
                    dr.EXPIRY_DATE = "";
                    dr.UOM = "";
                    dr.CONVERSION_RATE = "";
                    dr.DELETE_FLAG = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "buildColumns");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.grdLotSerial_RowDataBound = function (lotSerialGrdData) {
        return __awaiter(this, void 0, void 0, function () {
            var i, strSelectedUOM, ex_45;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 5, , 6]);
                        this.statusMsgs = [];
                        if (!(lotSerialGrdData != null && lotSerialGrdData.length > 0)) return [3 /*break*/, 4];
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < lotSerialGrdData.length)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.populateUOM(this.lotSerialConverfactor, this.selecstedRow.UNIT_OF_MEASURE, this.selecstedRow.LINE_NBR.toString(), this.serialControl, AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString(), lotSerialGrdData[i])];
                    case 2:
                        _a.sent();
                        if (this.strLotSerialUom != null && this.strLotSerialUom != "") {
                            lotSerialGrdData[i].SELECTED_UOM = this.strLotSerialUom;
                        }
                        if (lotSerialGrdData[i].UOM != null && lotSerialGrdData[i].UOM != "" && this.ddllotserialUomEnable) {
                            strSelectedUOM = lotSerialGrdData[i].UOM;
                            if (this.selecstedRow.UNIT_OF_MEASURE != strSelectedUOM) {
                                //foreach(ListItem UomItem in ddlUOM.Items) {
                                //    string[] arrUom = UomItem.Text.Split("(");
                                //    if (arrUom(0) == strSelectedUOM) {
                                //        ddlUOM.ClearSelection();
                                //        ddlUOM.Items.FindByValue(UomItem.Text).Selected = true;
                                //    }
                                //}
                            }
                        }
                        if (this.gStrLotSerial == AtParEnums_1.Enable_Lot_Serial_Tracking[AtParEnums_1.Enable_Lot_Serial_Tracking.MMIS].toString()) {
                            if (this.serialControl == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                this.txtLotSerialQtyIsEditMode = true;
                            }
                            else {
                                this.txtLotSerialQtyIsEditMode = false;
                            }
                            if (this.lotControl == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() && this.serialControl == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString()) {
                                this.txtSerialIDIsEditMode = true;
                                this.txtLotIdIsEditMode = false;
                                this.txtLotSerialQtyIsEditMode = false;
                                setTimeout(function () {
                                    var lotItem = document.getElementById("txtLotserialLotId");
                                    if (lotItem != null) {
                                        lotItem.focus();
                                    }
                                }, 2);
                                return [2 /*return*/];
                                // txtLot.Focus();
                                //  document.getElementById('txtLotserialLotId').focus();
                            }
                            else if (this.lotControl == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() && this.serialControl == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                this.txtSerialIDIsEditMode = false;
                                this.txtLotIdIsEditMode = false;
                                this.txtLotSerialQtyIsEditMode = true;
                                setTimeout(function () {
                                    var serialItem = document.getElementById("txtLotserialSerialId");
                                    if (serialItem != null) {
                                        serialItem.focus();
                                    }
                                }, 2);
                                return [2 /*return*/];
                            }
                            else if (this.serialControl == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() && this.lotControl == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString()) {
                                this.txtSerialIDIsEditMode = false;
                                this.txtLotIdIsEditMode = true;
                                this.txtLotSerialQtyIsEditMode = true;
                                setTimeout(function () {
                                    var lotItem = document.getElementById("txtLotserialSerialId");
                                    if (lotItem != null) {
                                        lotItem.focus();
                                    }
                                }, 2);
                            }
                        }
                        else {
                            if (this.serialControl == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                this.txtLotSerialQtyIsEditMode = true;
                            }
                            else {
                                this.txtLotSerialQtyIsEditMode = false;
                            }
                            this.txtSerialIDIsEditMode = false;
                            this.txtLotIdIsEditMode = false;
                            setTimeout(function () {
                                var lotItem = document.getElementById("txtLotserialSerialId");
                                if (lotItem != null) {
                                    lotItem.focus();
                                }
                            }, 2);
                        }
                        if (this.txtLotSerialQtyIsEditMode == true) {
                            lotSerialGrdData[i].QTY = lotSerialGrdData[i].QTY;
                        }
                        if (lotSerialGrdData[i].QTY == null || lotSerialGrdData[i].QTY == "") {
                            lotSerialGrdData[i].QTY = "1";
                        }
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        ex_45 = _a.sent();
                        this.clientErrorMsg(ex_45, "grdLotSerial_RowDataBound");
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.btnLotSerialAdd_Click = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var ex_46;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 6, , 7]);
                        if (this.presentScreen == "PO") {
                            this.breadCrumbMenu.SUB_MENU_NAME = 'Lot/Serial - Add';
                            this.breadCrumbMenu.IS_MESSAGE = true;
                            this.spnrService.emitChangeBreadCrumbEvt(JSON.stringify(this.breadCrumbMenu));
                        }
                        else if (this.presentScreen == "ScheduledPo") {
                            this.breadCrumbMenu.SUB_MENU_NAME = 'Receive By Schedule - Lot/Serial - Add';
                            this.breadCrumbMenu.IS_MESSAGE = true;
                            this.spnrService.emitChangeBreadCrumbEvt(JSON.stringify(this.breadCrumbMenu));
                        }
                        this.mode = "ADD";
                        this.statusMsgs = [];
                        if (!(this.lstMainItemLotSerial == null || this.lstMainItemLotSerial.length == 0)) return [3 /*break*/, 3];
                        this.LotSerialentity = new VM_RECV_LOTSERIAL_1.VM_RECV_LOTSERIAL();
                        this.LotSerialentity.TRANSACTION_ID = this.gTransactionID.toString();
                        this.LotSerialentity.ITEM_ID = this.txtSerchItemId;
                        this.LotSerialentity.LINE_NBR = this.gstrlnklineNbr;
                        this.LotSerialentity.SCHED_NBR = this.schedNbr;
                        this.LotSerialentity.SERIAL_ID = "";
                        this.LotSerialentity.LOT_ID = "";
                        this.LotSerialentity.QTY = "";
                        this.LotSerialentity.EXPIRY_DATE = null;
                        this.LotSerialentity.UOM = "";
                        this.LotSerialentity.CONVERSION_RATE = "";
                        this.LotSerialentity.SELECTED_UOM = "";
                        this.LotSerialentity.DELETE_FLAG = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                        if (this.lstFinalLotSerial != null && this.lstFinalLotSerial.length > 0) {
                            this.LotSerialentity.ROWINDEX = this.lstFinalLotSerial[this.lstFinalLotSerial.length - 1].ROWINDEX + 1;
                        }
                        else {
                            this.LotSerialentity.ROWINDEX = 0;
                        }
                        this.lstLotSerial.push(this.LotSerialentity);
                        if (!(this.lstLotSerial.length > 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.grdLotSerial_RowDataBound(this.lstLotSerial)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [3 /*break*/, 5];
                    case 3:
                        this.lstLotSerial = this.lstMainItemLotSerial.filter(function (x) { return x.ITEM_ID == _this.txtSerchItemId && x.LINE_NBR == _this.gstrlnklineNbr && x.SCHED_NBR == _this.schedNbr && x.DELETE_FLAG == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString(); });
                        this.LotSerialentity = new VM_RECV_LOTSERIAL_1.VM_RECV_LOTSERIAL();
                        this.LotSerialentity.TRANSACTION_ID = this.gTransactionID.toString();
                        this.LotSerialentity.ITEM_ID = this.txtSerchItemId;
                        this.LotSerialentity.LINE_NBR = this.gstrlnklineNbr;
                        this.LotSerialentity.SCHED_NBR = this.schedNbr;
                        this.LotSerialentity.SERIAL_ID = "";
                        this.LotSerialentity.LOT_ID = "";
                        this.LotSerialentity.QTY = "";
                        this.LotSerialentity.EXPIRY_DATE = null;
                        this.LotSerialentity.UOM = "";
                        this.LotSerialentity.CONVERSION_RATE = "";
                        this.LotSerialentity.SELECTED_UOM = "";
                        this.LotSerialentity.DELETE_FLAG = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                        if (this.lstFinalLotSerial != null && this.lstFinalLotSerial.length > 0) {
                            this.LotSerialentity.ROWINDEX = this.lstFinalLotSerial[this.lstFinalLotSerial.length - 1].ROWINDEX + 1;
                        }
                        else {
                            this.LotSerialentity.ROWINDEX = 0;
                        }
                        this.lstLotSerial.push(this.LotSerialentity);
                        if (!(this.lstLotSerial != null && this.lstLotSerial.length > 0)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.grdLotSerial_RowDataBound(this.lstLotSerial)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        this.lotserial = false;
                        this.LotSerialentity.QTY = "1";
                        this.txtLotserialExpDate = "";
                        this.editform = true;
                        return [3 /*break*/, 7];
                    case 6:
                        ex_46 = _a.sent();
                        this.clientErrorMsg(ex_46, "btnLotSerialAdd_Click");
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.btnLotSerialDelete_Click = function (lotserialDeletedData) {
        return __awaiter(this, void 0, void 0, function () {
            var ex_47;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.statusMsgs = [];
                        return [4 /*yield*/, this.lotSerialDeleteConfirm(lotserialDeletedData)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        ex_47 = _a.sent();
                        this.clientErrorMsg(ex_47, "btnLotSerialDelete_Click");
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.lotSerialDeleteConfirm = function (lotserialData) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                try {
                    this.statusMsgs = [];
                    this.confirmationService.confirm({
                        message: "Do you want to delete the existing LotSerial ID?",
                        accept: function () { return __awaiter(_this, void 0, void 0, function () {
                            var lotserialitems, i, deletedLst, i, LotserialEntity, LotserialEntity, msg;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        this.spnrService.start();
                                        if (lotserialData != null) {
                                            lotserialData.DELETE_FLAG = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString();
                                            if (lotserialData.QTY != null && lotserialData.QTY != "" && lotserialData.QTY != undefined) {
                                                this.intTolRecvQty = this.intTolRecvQty - (parseInt(lotserialData.QTY));
                                            }
                                            this.lotSerialDeleteFlg = true;
                                            if (this.lstMainItemLotSerial != null && this.lstMainItemLotSerial.length > 0) {
                                                lotserialitems = this.lstMainItemLotSerial.filter(function (x) { return x.ITEM_ID == lotserialData.ITEM_ID && x.LINE_NBR == lotserialData.LINE_NBR &&
                                                    x.SCHED_NBR == lotserialData.SCHED_NBR && x.LOT_ID == lotserialData.LOT_ID && x.SERIAL_ID == lotserialData.SERIAL_ID; });
                                                if (lotserialitems != null) {
                                                    for (i = 0; i < lotserialitems.length; i++) {
                                                        lotserialitems[i].DELETE_FLAG = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString();
                                                    }
                                                }
                                            }
                                        }
                                        if (this.lstFinalLotSerial.length > 0) {
                                            deletedLst = linq_es5_1.asEnumerable(this.lstFinalLotSerial).Where(function (x) { return x.DELETE_FLAG == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString(); }).ToArray();
                                            if (deletedLst.length > 0) {
                                                this.lstFinalLotSerial = [];
                                                for (i = 0; i < deletedLst.length; i++) {
                                                    LotserialEntity = new VM_RECV_LOTSERIAL_1.VM_RECV_LOTSERIAL();
                                                    LotserialEntity.TRANSACTION_ID = deletedLst[i].TRANSACTION_ID;
                                                    LotserialEntity.ITEM_ID = deletedLst[i].ITEM_ID;
                                                    LotserialEntity.LINE_NBR = deletedLst[i].LINE_NBR;
                                                    LotserialEntity.SCHED_NBR = deletedLst[i].SCHED_NBR;
                                                    LotserialEntity.SERIAL_ID = deletedLst[i].SERIAL_ID;
                                                    LotserialEntity.LOT_ID = deletedLst[i].LOT_ID;
                                                    LotserialEntity.QTY = deletedLst[i].QTY;
                                                    LotserialEntity.EXPIRY_DATE = deletedLst[i].EXPIRY_DATE;
                                                    LotserialEntity.UOM = deletedLst[i].UOM;
                                                    LotserialEntity.CONVERSION_RATE = deletedLst[i].CONVERSION_RATE;
                                                    LotserialEntity.DELETE_FLAG = deletedLst[i].DELETE_FLAG;
                                                    this.lstFinalLotSerial.push(LotserialEntity);
                                                }
                                            }
                                            else if (this.lstFinalLotSerial.length == 1) {
                                                LotserialEntity = new VM_RECV_LOTSERIAL_1.VM_RECV_LOTSERIAL();
                                                LotserialEntity.TRANSACTION_ID = this.lstFinalLotSerial[0].TRANSACTION_ID;
                                                LotserialEntity.ITEM_ID = this.lstFinalLotSerial[0].ITEM_ID;
                                                LotserialEntity.LINE_NBR = this.lstFinalLotSerial[0].LINE_NBR;
                                                LotserialEntity.SCHED_NBR = this.lstFinalLotSerial[0].SCHED_NBR;
                                                LotserialEntity.SERIAL_ID = this.lstFinalLotSerial[0].SERIAL_ID;
                                                LotserialEntity.LOT_ID = this.lstFinalLotSerial[0].LOT_ID;
                                                LotserialEntity.QTY = this.lstFinalLotSerial[0].QTY;
                                                LotserialEntity.EXPIRY_DATE = this.lstFinalLotSerial[0].EXPIRY_DATE;
                                                LotserialEntity.UOM = this.lstFinalLotSerial[0].UOM;
                                                LotserialEntity.CONVERSION_RATE = this.lstFinalLotSerial[0].CONVERSION_RATE;
                                                LotserialEntity.DELETE_FLAG = this.lstFinalLotSerial[0].DELETE_FLAG;
                                                this.lstFinalLotSerial = [];
                                                this.lstFinalLotSerial.push(LotserialEntity);
                                            }
                                        }
                                        if (!(this.lstFinalLotSerial != null && this.lstFinalLotSerial.length > 0)) return [3 /*break*/, 2];
                                        return [4 /*yield*/, this.grdLotSerial_RowDataBound(this.lstFinalLotSerial)];
                                    case 1:
                                        _a.sent();
                                        if (this.lstFinalLotSerial.length == 1 && this.lstFinalLotSerial[0].DELETE_FLAG == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                            this.lotserialGrid = false;
                                        }
                                        _a.label = 2;
                                    case 2:
                                        this.spnrService.stop();
                                        msg = AtParConstants_1.AtParConstants.Deleted_Msg.replace("1%", "Lot Serial").replace("2%", lotserialData.SERIAL_ID);
                                        this.statusMsgs.push({
                                            severity: 'success', summary: AtParConstants_1.AtParConstants.GrowlTitle_Success, detail: msg
                                        });
                                        return [2 /*return*/];
                                }
                            });
                        }); },
                        reject: function () {
                        }
                    });
                    this.spnrService.stop();
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "lotSerialDeleteConfirm");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.btnLotSerialSave_Click = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var _loop_7, this_7, i_12, i;
            return __generator(this, function (_a) {
                try {
                    this.statusMsgs = [];
                    this.cntLotSerialQty = 0;
                    if (this.lstMainItemLotSerial != null && this.lstMainItemLotSerial.length > 0) {
                        if (this.lstFinalLotSerial != null && this.lstFinalLotSerial.length == 1 && this.lstFinalLotSerial[0].DELETE_FLAG == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y]) {
                        }
                        else {
                            if (this.lstFinalLotSerial != null && this.lstFinalLotSerial.length > 0) {
                                _loop_7 = function (i_12) {
                                    var lotSerialDataLst = this_7.lstMainItemLotSerial.filter(function (x) { return x.ITEM_ID == _this.lstFinalLotSerial[i_12].ITEM_ID &&
                                        x.TRANSACTION_ID == _this.lstFinalLotSerial[i_12].TRANSACTION_ID && x.LOT_ID == _this.lstFinalLotSerial[i_12].LOT_ID &&
                                        x.LINE_NBR == _this.lstFinalLotSerial[i_12].LINE_NBR && x.SCHED_NBR == _this.lstFinalLotSerial[i_12].SCHED_NBR &&
                                        x.SERIAL_ID == _this.lstFinalLotSerial[i_12].SERIAL_ID; });
                                    if (lotSerialDataLst == null || lotSerialDataLst.length == 0) {
                                        this_7.lstMainItemLotSerial.push(this_7.lstFinalLotSerial[i_12]);
                                    }
                                };
                                this_7 = this;
                                for (i_12 = 0; i_12 < this.lstFinalLotSerial.length; i_12++) {
                                    _loop_7(i_12);
                                }
                            }
                        }
                    }
                    else {
                        this.lstMainItemLotSerial = this.lstFinalLotSerial;
                    }
                    for (i = 0; i < this.lstFinalLotSerial.length; i++) {
                        if (this.lstFinalLotSerial[i].ITEM_ID == this.txtSerchItemId && this.lstFinalLotSerial[i].LINE_NBR == this.gstrlnklineNbr &&
                            this.lstFinalLotSerial[i].DELETE_FLAG == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString()) {
                            if (this.lstFinalLotSerial[i].QTY != "" && this.lstFinalLotSerial[i].QTY != null && this.lstFinalLotSerial[i].QTY != undefined) {
                                this.cntLotSerialQty = this.cntLotSerialQty + parseInt(this.lstFinalLotSerial[i].QTY);
                            }
                        }
                    }
                    if (this.cntLotSerialQty != 0) {
                        this.selecstedRow.QTY = this.cntLotSerialQty;
                        this.selecstedRow.QTYDESABLEFLAG = true;
                    }
                    else {
                        this.selecstedRow.QTYDESABLEFLAG = false;
                    }
                    this.lotSerialDeleteFlg = false;
                    this.selecstedRow.RBFlAG = true;
                    this.statusMsgs.push({ severity: 'success', summary: AtParConstants_1.AtParConstants.GrowlTitle_Success, detail: "Saved Successfully, Click the Go Back button to show the items grid." });
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "btnLotSerialSave_Click");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.addNewRowToGrid = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var strUOMVal, arrSelectedConf, strSelectedUOMFact, strExpDate, dblFraction, arrUOM, arrConf, strRecallFlag, dtRecallInfo, drrecall, strValue, dtTodaydate, strExpYear, dtExpdate, intQtyPo, checklotserialitem, strCon_Rate, msg, msg, ex_48;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 7, , 8]);
                        this.statusMsgs = [];
                        strUOMVal = "";
                        arrSelectedConf = [];
                        strSelectedUOMFact = "";
                        strExpDate = new Date();
                        dblFraction = 0;
                        arrUOM = [];
                        arrConf = [];
                        strUOMVal = this.LotSerialentity.SELECTED_UOM;
                        if (strUOMVal != null && strUOMVal != "") {
                            arrUOM = strUOMVal.split("(");
                        }
                        if (arrUOM.length > 1) {
                            arrConf = arrUOM[1].split(" ");
                        }
                        //When SelectedUOM conversion rate is in Fractions like 1/100 then splitting it with / 
                        if (arrConf.length > 1) {
                            if (arrConf[0].indexOf("/") == -1) {
                                //when selectedUOM conversion rate is like(BX( 1 EA)) 
                                strSelectedUOMFact = arrConf[0];
                            }
                            else {
                                //when selectedUOM conversion rate is like(BX( 1/100 EA)) 
                                arrSelectedConf = arrConf[0].split("/");
                                strSelectedUOMFact = (parseInt(arrSelectedConf[0]) / parseInt(arrSelectedConf[1])).toString();
                            }
                        }
                        else {
                            strSelectedUOMFact = arrConf[0];
                        }
                        strRecallFlag = this.lstRecvSendPoLines[0].RECAL_FLAG.toString();
                        if (strRecallFlag == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                            dtRecallInfo = this.lstReCallInfo;
                            if (dtRecallInfo.length > 0) {
                                drrecall = linq_es5_1.asEnumerable(dtRecallInfo).Where(function (x) { return x.ITEM_ID == _this.txtSerchItemId && x.LOT_NO == "" && x.SERIAL_NO == ""; }).ToArray();
                                if (drrecall.length > 0) {
                                    strValue = "";
                                    strValue = this.txtSerchItemId + "( LOT " + this.LotSerialentity.LOT_ID + " " + " /Serial " + this.LotSerialentity.SERIAL_ID + ")";
                                    this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "This Item " + strValue + " is on recall. The item cannot be received." });
                                    this.LotSerialentity.QTY = "";
                                    this.txtLotSerialQtyIsEditMode = true;
                                    return [2 /*return*/];
                                }
                            }
                        }
                        if (this.gStrLotSerial == AtParEnums_1.Enable_Lot_Serial_Tracking[AtParEnums_1.Enable_Lot_Serial_Tracking.MMIS].toString()) {
                            if (this.serialControl == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                this.LotSerialentity.QTY = "1";
                                this.txtLotSerialQtyIsEditMode = true;
                            }
                            else {
                                this.txtLotSerialQtyIsEditMode = false;
                            }
                            if (this.lotControl == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() && this.serialControl == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString()) {
                                if (this.LotSerialentity.LOT_ID == "" || this.LotSerialentity.QTY == "") {
                                    this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please Enter Mandatory Fields" });
                                    return [2 /*return*/];
                                }
                            }
                            else if (this.lotControl == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() && this.serialControl == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                if (this.LotSerialentity.LOT_ID == "" || this.LotSerialentity.SERIAL_ID == "" || this.LotSerialentity.QTY == "") {
                                    this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please Enter Mandatory Fields" });
                                    return [2 /*return*/];
                                }
                            }
                            else if (this.lotControl == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString() && this.serialControl == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                if (this.LotSerialentity.SERIAL_ID == "" || this.LotSerialentity.QTY == "") {
                                    this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please Enter Mandatory Fields" });
                                    return [2 /*return*/];
                                }
                            }
                        }
                        else {
                            if (this.serialControl == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                this.LotSerialentity.QTY = "1";
                                this.txtLotSerialQtyIsEditMode = true;
                            }
                            else {
                                this.txtLotSerialQtyIsEditMode = false;
                            }
                            if ((this.LotSerialentity.LOT_ID == "" && this.LotSerialentity.SERIAL_ID == "") || this.LotSerialentity.QTY == "") {
                                this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please Enter Mandatory Fields" });
                                return [2 /*return*/];
                            }
                            if (this.LotSerialentity.SERIAL_ID != "" && (parseInt(this.LotSerialentity.QTY) * parseInt(strSelectedUOMFact)) != 1) {
                                this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Quantity should be 1" });
                                return [2 /*return*/];
                            }
                        }
                        dtTodaydate = new Date();
                        strExpYear = "";
                        if (this.txtLotserialExpDate != null && this.txtLotserialExpDate != "") {
                            dtExpdate = this.txtLotserialExpDate;
                            //date validating                   
                            if (Date.parse(this.txtLotserialExpDate.getMonth() + '/' + this.txtLotserialExpDate.getDate() + '/' + this.txtLotserialExpDate.getFullYear()) < Date.parse(dtTodaydate.getMonth() + "/" + dtTodaydate.getDate() + "/" + dtTodaydate.getFullYear())) {
                                this.statusMsgs = [];
                                this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Selected Lot/Serial is Expired." });
                                return [2 /*return*/];
                            }
                            else {
                                strExpDate = this.txtLotserialExpDate;
                            }
                        }
                        else {
                            strExpDate = null;
                        }
                        if (this.gStrUOMEditFlag == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                            if (this.gStrAltUOMDisplay == this.gRecv_StandardUOM) {
                                dblFraction = parseInt(this.LotSerialentity.QTY) * (parseInt(strSelectedUOMFact) / this.lotSerialConverfactor);
                            }
                            else if (this.gStrAltUOMDisplay == this.gRecv_PoUOM) {
                                dblFraction = parseInt(this.LotSerialentity.QTY) * (parseInt(strSelectedUOMFact) / this.lotSerialConverfactor);
                            }
                        }
                        else {
                            dblFraction = parseInt(this.LotSerialentity.QTY);
                        }
                        if (this.lotControl == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString()) {
                            if ((parseInt(this.strTotalQty) < dblFraction) && this.gStrAllowExcessQty == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString()) {
                                this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Receive quantity cannot be greater than open quantity." });
                                this.LotSerialentity.QTY = "";
                                // txtQty.Focus();
                                return [2 /*return*/];
                            }
                        }
                        if (this.LotSerialentity.SERIAL_ID != "" && this.LotSerialentity.SERIAL_ID != undefined) {
                            this.LotSerialentity.SERIAL_ID = this.LotSerialentity.SERIAL_ID.toUpperCase();
                        }
                        else {
                            this.LotSerialentity.SERIAL_ID = this.LotSerialentity.SERIAL_ID;
                        }
                        if (this.LotSerialentity.LOT_ID != "" && this.LotSerialentity.LOT_ID != undefined) {
                            this.LotSerialentity.LOT_ID = this.LotSerialentity.LOT_ID.toUpperCase();
                        }
                        else {
                            this.LotSerialentity.LOT_ID = this.LotSerialentity.LOT_ID;
                        }
                        this.LotSerialentity.CONVERSION_RATE = strSelectedUOMFact;
                        this.LotSerialentity.UOM = arrUOM[0].toString();
                        intQtyPo = parseInt(this.selecstedRow.QTY_PO);
                        checklotserialitem = void 0;
                        if (!(this.mode != "ADD")) return [3 /*break*/, 1];
                        checklotserialitem = this.lstFinalLotSerial.filter(function (x) { return x.SERIAL_ID == _this.LotSerialentity.SERIAL_ID
                            && x.LOT_ID == _this.LotSerialentity.LOT_ID; });
                        return [3 /*break*/, 3];
                    case 1:
                        checklotserialitem = this.lstFinalLotSerial.filter(function (x) { return x.SERIAL_ID == _this.LotSerialentity.SERIAL_ID
                            && x.LOT_ID == _this.LotSerialentity.LOT_ID; });
                        if (!(checklotserialitem.length > 0)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.btnLotSerialAdd_Click()];
                    case 2:
                        _a.sent();
                        if (!this.txtLotSerialQtyIsEditMode) {
                            this.LotSerialentity.QTY = "";
                        }
                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Item already added to the existing issue." });
                        return [2 /*return*/];
                    case 3:
                        if (this.LotSerialentity.QTY != null && this.LotSerialentity.QTY != "") {
                            strCon_Rate = this.LotSerialentity.CONVERSION_RATE == "" ? "1" : this.LotSerialentity.CONVERSION_RATE;
                            if (this.mode == "ADD") {
                                this.intTolRecvQty = this.intTolRecvQty + (parseInt(this.LotSerialentity.QTY)) * parseInt(strCon_Rate);
                                if (this.gStrAllowExcessQty == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString()) {
                                    if (this.intTolRecvQty > intQtyPo) {
                                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Receive quantity cannot be greater than open quantity." });
                                        this.intTolRecvQty = this.intTolRecvQty - (parseInt(this.LotSerialentity.QTY)) * parseInt(strCon_Rate);
                                        if (!this.txtLotSerialQtyIsEditMode) {
                                            this.LotSerialentity.QTY = "";
                                        }
                                        return [2 /*return*/];
                                        //if (!(this.serialControl == YesNo_Enum[YesNo_Enum.Y].toString())) {
                                        //    }                     
                                        // txtQty.Focus();
                                        //setTimeout(() => {
                                        //    let txtltserial=document.getElementById('txtLotserialQty');                              
                                        //    if (txtltserial != null) {
                                        //        txtltserial.focus();
                                        //    }
                                        //}, 1)
                                    }
                                }
                            }
                        }
                        this.LotSerialentity.DELETE_FLAG = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                        if (strExpDate != null) {
                            this.LotSerialentity.EXPIRY_DATE = ((strExpDate.getMonth()) + 1 + '/' + (strExpDate.getDate()) + '/' + strExpDate.getFullYear() + ' 12:00:00 AM').toString();
                        }
                        else {
                            this.LotSerialentity.EXPIRY_DATE = null;
                        }
                        this.LotSerialentity.TRANSACTION_ID = this.gTransactionID.toString();
                        this.LotSerialentity.ITEM_ID = this.txtSerchItemId;
                        this.LotSerialentity.LINE_NBR = this.gstrlnklineNbr;
                        this.LotSerialentity.SCHED_NBR = this.schedNbr;
                        if (!(this.mode == "ADD")) return [3 /*break*/, 5];
                        if (this.lotSerialSchdFlg) {
                            this.LotSerialentity.LOTSERIALSCHDFLG = true;
                        }
                        this.lstFinalLotSerial.push(this.LotSerialentity);
                        return [4 /*yield*/, this.btnLotSerialAdd_Click()];
                    case 4:
                        _a.sent();
                        msg = AtParConstants_1.AtParConstants.Created_Msg.replace("1%", "Lot/Serial").replace("2%", "");
                        this.statusMsgs.push({
                            severity: 'success', summary: AtParConstants_1.AtParConstants.GrowlTitle_Success, detail: msg
                        });
                        return [2 /*return*/];
                    case 5:
                        this.lstFinalLotSerial[this.LotSerialentity.ROWINDEX].LOT_ID = this.LotSerialentity.LOT_ID;
                        this.lstFinalLotSerial[this.LotSerialentity.ROWINDEX].SERIAL_ID = this.LotSerialentity.SERIAL_ID;
                        this.lstFinalLotSerial[this.LotSerialentity.ROWINDEX].QTY = this.LotSerialentity.QTY;
                        this.lstFinalLotSerial[this.LotSerialentity.ROWINDEX].EXPIRY_DATE = this.LotSerialentity.EXPIRY_DATE;
                        msg = AtParConstants_1.AtParConstants.Updated_Msg.replace("1%", "Lot/Serial").replace("2%", "");
                        this.statusMsgs.push({
                            severity: 'success', summary: AtParConstants_1.AtParConstants.GrowlTitle_Success, detail: msg
                        });
                        this.editform = false;
                        this.lotserial = true;
                        _a.label = 6;
                    case 6: return [3 /*break*/, 8];
                    case 7:
                        ex_48 = _a.sent();
                        this.clientErrorMsg(ex_48, "addNewRowToGrid");
                        return [3 /*break*/, 8];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.btnLotSerialGrdEdit_Click = function (lotId, serialId, qty, expiryDate, selectedUom, rowIndex, rowData) {
        return __awaiter(this, void 0, void 0, function () {
            var ex_49;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        if (this.presentScreen == "PO") {
                            this.breadCrumbMenu.SUB_MENU_NAME = 'Lot/Serial - Edit';
                            this.breadCrumbMenu.IS_MESSAGE = true;
                            this.spnrService.emitChangeBreadCrumbEvt(JSON.stringify(this.breadCrumbMenu));
                        }
                        else if (this.presentScreen == "ScheduledPo") {
                            this.breadCrumbMenu.SUB_MENU_NAME = 'Receive By Schedule - Lot/Serial - Edit';
                            this.breadCrumbMenu.IS_MESSAGE = true;
                            this.spnrService.emitChangeBreadCrumbEvt(JSON.stringify(this.breadCrumbMenu));
                        }
                        this.mode = "EDIT";
                        if (expiryDate != null && expiryDate != "") {
                            this.txtLotserialExpDate = new Date(expiryDate);
                        }
                        if (rowData.EXPIRY_DATE == null || rowData.EXPIRY_DATE == "") {
                            this.txtLotserialExpDate = "";
                        }
                        this.LotSerialentity.LOT_ID = lotId;
                        this.LotSerialentity.SERIAL_ID = serialId;
                        this.LotSerialentity.QTY = qty;
                        this.LotSerialentity.EXPIRY_DATE = this.txtLotserialExpDate;
                        this.LotSerialentity.SELECTED_UOM = selectedUom;
                        this.LotSerialentity.ROWINDEX = rowIndex;
                        if (!(this.lstFinalLotSerial.length > 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.grdLotSerial_RowDataBound(this.lstFinalLotSerial)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        this.editform = !this.editform;
                        this.lotserial = false;
                        return [3 /*break*/, 4];
                    case 3:
                        ex_49 = _a.sent();
                        this.clientErrorMsg(ex_49, "btnLotSerialGrdEdit_Click");
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.btnLotSerialEditSave_Click = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ex_50;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.statusMsgs = [];
                        return [4 /*yield*/, this.addNewRowToGrid()];
                    case 1:
                        _a.sent();
                        if (this.mode == "ADD") {
                        }
                        else {
                            this.lotserial = false;
                            this.editform = true;
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        ex_50 = _a.sent();
                        this.clientErrorMsg(ex_50, "btnLotSerialEditSave_Click");
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.btnGoBackToLotSerial_Click = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    this.statusMsgs = null;
                    if (this.presentScreen == "PO") {
                        this.breadCrumbMenu.SUB_MENU_NAME = 'Lot/Serial';
                    }
                    else if (this.presentScreen == "ScheduledPo") {
                        this.breadCrumbMenu.SUB_MENU_NAME = 'Receive By Schedule - Lot/Serial';
                    }
                    this.spnrService.emitChangeBreadCrumbEvt(JSON.stringify(this.breadCrumbMenu));
                    this.editform = false;
                    this.lotserial = true;
                    if (this.lstFinalLotSerial.length > 0) {
                        this.lotserialGrid = true;
                    }
                    else {
                        this.lotserialGrid = false;
                        this.statusMsgs = [];
                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "No Records Found" });
                    }
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "btnGoBackToLotSerial_Click");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.btnLotSerialGoBack_Click = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var lotserialitems, i, lotserialitems, x, index;
            return __generator(this, function (_a) {
                try {
                    if (this.presentScreen == "PO") {
                        this.bysch = false;
                        this.lotserial = false;
                        this.lotserialGrid = false;
                        this.editform = false;
                        this.tbl = true;
                        this.page = true;
                        this.breadCrumbMenu.SUB_MENU_NAME = '';
                        this.spnrService.emitChangeBreadCrumbEvt(JSON.stringify(this.breadCrumbMenu));
                    }
                    else if (this.presentScreen == "ScheduledPo") {
                        this.bysch = true;
                        this.lotserial = false;
                        this.lotserialGrid = false;
                        this.editform = false;
                        this.tbl = false;
                        this.page = false;
                        this.breadCrumbMenu.SUB_MENU_NAME = ' Receive By Schedule';
                        this.spnrService.emitChangeBreadCrumbEvt(JSON.stringify(this.breadCrumbMenu));
                    }
                    if (this.lstFinalLotSerial.length == 1) {
                        if (this.lstFinalLotSerial[0].ITEM_ID == this.txtSerchItemId && this.lstFinalLotSerial[0].LINE_NBR == this.gstrlnklineNbr &&
                            this.lstFinalLotSerial[0].DELETE_FLAG == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                            if (this.lotSerialDeleteFlg != true) {
                                this.selecstedRow.QTY = "";
                                this.selecstedRow.QTYDESABLEFLAG = false;
                            }
                        }
                    }
                    if (this.cntLotSerialQty == 0) {
                        this.selecstedRow.QTY = "";
                    }
                    this.intTolRecvQty = 0;
                    if (this.lotSerialDeleteFlg == true) {
                        if (this.lstMainItemLotSerial != null && this.lstMainItemLotSerial.length > 0) {
                            lotserialitems = this.lstMainItemLotSerial.filter(function (x) { return x.ITEM_ID == _this.txtSerchItemId && x.LINE_NBR == _this.gstrlnklineNbr && x.SCHED_NBR == _this.schedNbr; });
                            if (lotserialitems != null) {
                                for (i = 0; i < lotserialitems.length; i++) {
                                    lotserialitems[i].DELETE_FLAG = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                                }
                            }
                        }
                        this.lotSerialDeleteFlg = false;
                    }
                    else {
                        lotserialitems = this.lstMainItemLotSerial.filter(function (x) { return x.ITEM_ID == _this.txtSerchItemId && x.LINE_NBR == _this.gstrlnklineNbr && x.SCHED_NBR == _this.schedNbr && x.DELETE_FLAG == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString(); });
                        for (x = 0; x < lotserialitems.length; x++) {
                            index = this.lstMainItemLotSerial.indexOf(lotserialitems[x]);
                            if (index !== -1) {
                                this.lstMainItemLotSerial.splice(index, 1);
                            }
                        }
                    }
                    //var lstFiltered = this.lstRecvSendPoLines.filter(x => x.INV_ITEM_ID == this.txtSerchItemId && x.LINE_NBR == parseInt(this.gstrlnklineNbr));
                    //if (lstFiltered != null && lstFiltered.length > 0) {
                    //    lstFiltered[0].QTY = cntQty;
                    //}
                    //lstFiltered[0].RBFlAG = true;
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "btnLotSerialGoBack_Click");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.LotSerial_selectChanged = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.statusMsgs = [];
                try {
                    this.statusMsgs = [];
                    this.LotSerialentity.SELECTED_UOM = event.label;
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "LotSerial_selectChanged");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.convert = function (str) {
        var date = new Date(str), mnth = ("0" + (date.getMonth() + 1)).slice(-2), day = ("0" + date.getDate()).slice(-2);
        return [mnth, day, date.getFullYear()].join("/");
    };
    /**
    *
    * End LotSerial
    */
    /**
    * Scheduled PO
    * @param ven
    */
    PoNonPoReceiptsComponent.prototype.byschedule = function (poLineRowData) {
        try {
            this.presentScreen = "ScheduledPo";
            this.statusMsgs = [];
            if (poLineRowData.RBFlAG == true) {
                this.breadCrumbMenu.SUB_MENU_NAME = ' Receive By Schedule';
                this.spnrService.emitChangeBreadCrumbEvt(JSON.stringify(this.breadCrumbMenu));
                this.bysch = !this.bysch;
                this.tbl = false;
                this.page = false;
                this.txtLading = '';
                this.txtSchdExTrk = "";
                this.schPO = true;
                this.lotSerialSchdFlg = true;
                this.scheduledPOBind(poLineRowData);
                this.strItemId = poLineRowData.INV_ITEM_ID;
                this.strLineNbr = poLineRowData.LINE_NBR;
                var elmnt = this.document.getElementById('main-section');
                elmnt.scrollTop = 0;
            }
        }
        catch (ex) {
            this.clientErrorMsg(ex, "byschedule");
        }
    };
    PoNonPoReceiptsComponent.prototype.scheduledPOBind = function (ven) {
        return __awaiter(this, void 0, void 0, function () {
            var fact, ex_51;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.statusMsgs = [];
                        fact = this.lstRecvSendPoLines.filter(function (x) { return x.INV_ITEM_ID == ven.INV_ITEM_ID && x.LINE_NBR == ven.LINE_NBR; });
                        if (fact != null && fact.length > 0) {
                            if (fact[0].CONVERSION_RATE !== null || fact[0].CONVERSION_RATE != undefined) {
                                this.dblConvertionfactor = fact[0].CONVERSION_RATE;
                            }
                        }
                        this.mStandardConversionRate = fact[0].CONVERSION_RATE.toString();
                        this.strUOM = fact[0].UNIT_OF_MEASURE.toString();
                        this.strLineId = fact[0].LINE_ID.toString();
                        this.StrSerialControlled = fact[0].SERIAL_CONTROLLED.toString();
                        this.StrLotControlled = fact[0].LOT_CONTROLLED.toString();
                        this.strItemId = fact[0].INV_ITEM_ID.toString();
                        this.strLineNbr = fact[0].LINE_NBR.toString();
                        return [4 /*yield*/, this.buildSchdDetails()];
                    case 1:
                        _a.sent();
                        this.lstBunits;
                        this.lstShipToIds;
                        this.lstOrgParms;
                        this.lstProfileApp;
                        this.lstUserApp;
                        this.lstScreenApp;
                        this.lstInventoryBunits;
                        this.shipToIdCount;
                        this.grdReceiveItems_RowDataBound(this.dtScheduleItems);
                        this.btnPntrLotSerialDisable = false;
                        return [3 /*break*/, 3];
                    case 2:
                        ex_51 = _a.sent();
                        this.clientErrorMsg(ex_51, "scheduledPOBind");
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.buildSchdDetails = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var filteredList, filteredScreenList;
            return __generator(this, function (_a) {
                try {
                    this.dtScheduleItems = [];
                    filteredList = this.lstGridRecvSendPoLines.filter(function (x) { return x.INV_ITEM_ID == _this.strItemId && x.LINE_NBR == parseInt(_this.strLineNbr); });
                    if (filteredList != null) {
                        filteredList.forEach(function (x) {
                            x.QTY = x.ASN_QTY, x.QTY_PO = x.LINE_PO_QTY, x.CARRIER_ID = x.QTY == null ? "" : x.CARRIER_ID,
                                x.BILL_OF_LADING = x.QTY == null ? "" : x.BILL_OF_LADING, x.EXT_TRK_NO = x.QTY == null ? "" : x.EXT_TRK_NO,
                                x.NO_OF_BOXES = x.QTY == null ? null : x.NO_OF_BOXES, x.QTYDESABLEFLAG = x.LOTSERIALSCHDFLAG == true ? true : x.LOTSERIALSCHDFLAG,
                                x.SCHDQTYCHANGFLAG = x.SCHDQTYCHANGFLAG == true ? true : x.SCHDQTYCHANGFLAG;
                        });
                    }
                    if (this.lstMainItemLotSerial != null && this.lstMainItemLotSerial.length > 0) {
                        this.lstMainItemLotSerial.forEach(function (x) { x.LOTSERIALSCHDFLG = false; });
                    }
                    this.dtScheduleItems = filteredList;
                    filteredScreenList = this.lstScreenApp.filter(function (x) { return x.SCREEN_NAME == 'RECEIVE BY SCHEDULE'; });
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "buildSchdDetails");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.txtCheckQty = function (ven, qty) {
        return __awaiter(this, void 0, void 0, function () {
            var intConverfactor, strUOM, dblLineRecdQty, dblItemTolPer, ex_52;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.statusMsgs = [];
                        intConverfactor = void 0;
                        strUOM = void 0;
                        dblLineRecdQty = void 0;
                        dblItemTolPer = void 0;
                        return [4 /*yield*/, this.chkItemQty(ven)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        ex_52 = _a.sent();
                        this.clientErrorMsg(ex_52, "txtCheckQty");
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.btnSchedulePo_Save = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ex_53;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.statusMsgs = [];
                        return [4 /*yield*/, this.SaveScheduleItemsData('save')];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        ex_53 = _a.sent();
                        this.clientErrorMsg(ex_53, "btnSchedulePo_Save");
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.SaveScheduleItemsData = function (save) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var blnQty, strUOMVal, arrUOM, arrConf, strSelectedUOMFact, arrSelectedConf, ShedLineNbr, j, i, txtlad, k, cntQty, i, lstFiltered;
            return __generator(this, function (_a) {
                try {
                    this.statusMsgs = [];
                    blnQty = false;
                    strUOMVal = void 0;
                    arrUOM = [];
                    arrConf = [];
                    strSelectedUOMFact = "";
                    arrSelectedConf = [];
                    ShedLineNbr = void 0;
                    j = 0;
                    for (i = 0; i < this.lstGridRecvSendPoLines.length; i++) {
                        if (this.lstGridRecvSendPoLines[i].LINE_NBR == parseInt(this.strLineNbr)) {
                            this.txtNoOfBoxes = this.dtScheduleItems[j].NO_OF_BOXES;
                            this.strItemId = this.strItemId;
                            this.strLineNbr = this.strLineNbr;
                            this.txtQty = this.dtScheduleItems[j].QTY;
                            this.ddlGridCarrier = this.dtScheduleItems[j].CARRIER_ID;
                            this.txtLadg = this.dtScheduleItems[j].BILL_OF_LADING;
                            this.txtSchdExTrk = this.dtScheduleItems[j].EXT_TRK_NO; //txtTrk
                            this.dtScheduleItems[j].ASN_QTY = this.dtScheduleItems[j].QTY;
                            if (this.txtQty != "" && this.txtQty != null) {
                                blnQty = true;
                            }
                            if ((this.txtQty != "" && this.txtQty != null && this.txtQty != undefined) && (this.txtLadg == "" || this.txtLadg == null || this.txtLadg == undefined || this.ddlGridCarrier == "Select Carrier" || this.ddlGridCarrier == "" || this.ddlGridCarrier == null)) {
                                this.statusMsgs = [];
                                this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Carrier and Lading are mandatory" });
                                this.txtQty = "";
                                this.dtScheduleItems[j].RBFlAG = false;
                                this.dtScheduleItems[j].RBFlAG = false;
                                txtlad = document.getElementById('txtBillOfLading' + this.dtScheduleItems[j].SCHED_NBR);
                                if (txtlad != null) {
                                    txtlad.focus();
                                }
                            }
                            else {
                                strUOMVal = this.dtScheduleItems[j].DDLUOMS[0].value; //check once
                                arrUOM = strUOMVal.split("(");
                                if (arrUOM.length > 1) {
                                    arrConf = arrUOM[1].split(" ");
                                }
                                if (arrConf.length > 1) {
                                    if (arrConf[0].indexOf("/") == -1) {
                                        //when selectedUOM conversion rate is like(BX( 1 EA)) 
                                        strSelectedUOMFact = arrConf[0];
                                    }
                                    else {
                                        //when selectedUOM conversion rate is like(BX( 1/100 EA)) 
                                        arrSelectedConf = arrConf[0].split("/");
                                        strSelectedUOMFact = (parseInt(arrSelectedConf[0]) / parseInt(arrSelectedConf[1])).toString();
                                    }
                                }
                                else {
                                    strSelectedUOMFact = arrConf[0];
                                }
                                if (this.txtNoOfBoxes != null || this.txtNoOfBoxes != "" || this.txtNoOfBoxes != undefined) {
                                    this.lstGridRecvSendPoLines[i].NO_OF_BOXES = parseInt(this.txtNoOfBoxes);
                                }
                                else {
                                    ShedLineNbr = this.dtScheduleItems[j].SCHED_NBR;
                                    for (k = 0; k < this.lstGridRecvSendPoLines.length; k++) {
                                        if (this.lstGridRecvSendPoLines[k].LINE_NBR == parseInt(this.strLineNbr) && this.lstGridRecvSendPoLines[k].SCHED_NBR == parseInt(ShedLineNbr.toString())) {
                                            if (this.lstGridRecvSendPoLines[k].NO_OF_BOXES != null || this.lstGridRecvSendPoLines[k].NO_OF_BOXES != undefined) {
                                                this.lstGridRecvSendPoLines[k].NO_OF_BOXES = this.lstGridRecvSendPoLines[k].NO_OF_BOXES;
                                            }
                                            else {
                                                this.lstGridRecvSendPoLines[k].NO_OF_BOXES = 1;
                                            }
                                        }
                                    }
                                }
                                if (this.txtSchdExTrk != "" && this.txtSchdExTrk != null) {
                                    this.lstGridRecvSendPoLines[i].EXT_TRK_NO = this.txtSchdExTrk;
                                }
                                else {
                                    this.lstGridRecvSendPoLines[i].EXT_TRK_NO = "";
                                }
                                this.lstGridRecvSendPoLines[i].LINE_QTY = parseInt(this.txtQty);
                                this.lstGridRecvSendPoLines[i].BILL_OF_LADING = this.txtLadg;
                                if (this.ddlGridCarrier != "Select Carrier") {
                                    this.lstGridRecvSendPoLines[i].CARRIER_ID = this.ddlGridCarrier;
                                }
                                this.lstGridRecvSendPoLines[i].RECV_UOM = arrUOM[0];
                                this.lstGridRecvSendPoLines[i].RECV_CONVERSION_RATE = parseInt(strSelectedUOMFact);
                                if (this.txtQty != "") {
                                    this.lstGridRecvSendPoLines[i].RECEIVED_FLAG = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString();
                                    this.dtScheduleItems[j].SCHDQTYCHANGFLAG = true;
                                }
                                j++;
                            }
                        }
                    }
                    if (blnQty) {
                        if (save == 'save') {
                            this.isScheduleSave = true;
                            cntQty = 0;
                            for (i = 0; i < this.dtScheduleItems.length; i++) {
                                if (this.dtScheduleItems[i].INV_ITEM_ID == this.strItemId && this.dtScheduleItems[i].LINE_NBR == this.strLineNbr) {
                                    if (this.dtScheduleItems[i].QTY != "" && this.dtScheduleItems[i].QTY != null && this.dtScheduleItems[i].QTY != undefined &&
                                        this.dtScheduleItems[i].CARRIER_ID != null && this.dtScheduleItems[i].CARRIER_ID != "Select Carrier" && this.dtScheduleItems[i].CARRIER_ID != "") {
                                        cntQty = cntQty + parseInt(this.dtScheduleItems[i].QTY);
                                    }
                                }
                            }
                            lstFiltered = this.lstRecvSendPoLines.filter(function (x) { return x.INV_ITEM_ID == _this.strItemId && x.LINE_NBR == parseInt(_this.strLineNbr); });
                            if (lstFiltered != null && lstFiltered.length > 0) {
                                if (cntQty > 0) {
                                    lstFiltered[0].QTY = cntQty;
                                    lstFiltered[0].RECEIVED_FLAG = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString();
                                    lstFiltered[0].LOTSERIALSCHDFLAG = true;
                                }
                            }
                            lstFiltered[0].RBFlAG = true;
                            if (this.statusMsgs != null && this.statusMsgs.length == 0) {
                                this.statusMsgs = [];
                                this.statusMsgs.push({ severity: 'success', summary: AtParConstants_1.AtParConstants.GrowlTitle_Success, detail: "Saved Successfully, Click Go Back to show the items grid." });
                            }
                        }
                        else if (save == 'Print') { }
                    }
                    else {
                        this.statusMsgs = [];
                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please enter Receive Quantity" });
                    }
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "SaveScheduleItemsData");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.scheduleReceiveAll = function () {
        return __awaiter(this, void 0, void 0, function () {
            var i_13, i, ex_54;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 5, , 6]);
                        this.blnReceiveall = true;
                        if ((this.selectedSchdDdlCarrier == 'Select Carrier' || this.selectedSchdDdlCarrier == '' || this.selectedSchdDdlCarrier == undefined) || (this.txtLading == '' || this.txtLading == null || this.txtLading == undefined)) {
                            this.statusMsgs = [];
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Carrier and Lading are mandatory" });
                        }
                        this.lstCheckedBUnits = [];
                        this.startIndex = +sessionStorage.getItem("Recordsstartindex");
                        this.endIndex = +sessionStorage.getItem("RecordsEndindex");
                        if (this.dtScheduleItems != null && this.dtScheduleItems.length > 0) {
                            if (this.endIndex > this.dtScheduleItems.length) {
                                this.endIndex = this.dtScheduleItems.length;
                            }
                            for (i_13 = this.endIndex - 1; i_13 >= this.startIndex; i_13--) {
                                this.lstCheckedBUnits.push(this.dtScheduleItems[i_13]);
                            }
                        }
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < this.lstCheckedBUnits.length)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.schedulePo_RbtnChange(this.lstCheckedBUnits[i], false)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4:
                        if (this.blnSchedsExist) {
                            this.statusMsgs = [];
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Lines with schedules or lot serial have not been updated" });
                            //this.selectedSCHEDNBR = "";
                            // setTimeout(() => { this.selectedSCHEDNBR = ""; }, 1);
                            return [2 /*return*/];
                        }
                        return [3 /*break*/, 6];
                    case 5:
                        ex_54 = _a.sent();
                        this.spnrService.stop();
                        this.clientErrorMsg(ex_54, "scheduleReceiveAll");
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.scheduleResetAll = function () {
        return __awaiter(this, void 0, void 0, function () {
            var intScheduleCnt, strRecedQty, strSerialControlled, strLotControlled, strPoQty, txtNoOfBoxes, blnFlag, dtReceiveDetails, strLot, strSerial, lnkLineNbr, lbQtyPO, lnkItemId, txtQty, i;
            return __generator(this, function (_a) {
                try {
                    intScheduleCnt = 0;
                    strRecedQty = null;
                    strSerialControlled = null;
                    strLotControlled = null;
                    strPoQty = null;
                    txtNoOfBoxes = void 0;
                    blnFlag = false;
                    dtReceiveDetails = void 0;
                    strLot = void 0;
                    strSerial = void 0;
                    lnkLineNbr = void 0;
                    lbQtyPO = void 0;
                    lnkItemId = void 0;
                    txtQty = void 0;
                    if (this.gStrDefaultInput) {
                        for (i = 0; i < this.dtScheduleItems.length; i++) {
                            strLot = this.dtScheduleItems[i].LOT_CONTROLLED;
                            this.lotControl = this.dtScheduleItems[i].LOT_CONTROLLED;
                            strSerial = this.dtScheduleItems[i].SERIAL_CONTROLLED;
                            this.serialControl = this.dtScheduleItems[i].SERIAL_CONTROLLED;
                            lnkLineNbr = this.dtScheduleItems[i].LINE_NBR;
                            this.schedNbr = this.dtScheduleItems[i].SCHED_NBR + "";
                            lbQtyPO = this.dtScheduleItems[i].LINE_PO_QTY;
                            lnkItemId = this.dtScheduleItems[i].INV_ITEM_ID;
                            txtQty = this.dtScheduleItems[i].QTY; //.LINE_QTY;
                            strRecedQty = this.dtScheduleItems[i].RECEIVED_QTY + "";
                            ;
                            strPoQty = this.dtScheduleItems[i].QTY_PO + ""; //LINE_PO_QTY check once Qty
                            intScheduleCnt = this.dtScheduleItems[i].SCHED_COUNT;
                            strSerialControlled = this.dtScheduleItems[i].SERIAL_CONTROLLED;
                            strLotControlled = this.dtScheduleItems[i].LOT_CONTROLLED;
                            if (lnkItemId != null) {
                                if (lnkItemId == "") {
                                    this.blnFlag = true;
                                }
                                //Do not default Lines which have schedules
                                if (strSerialControlled == null || strSerialControlled == "") {
                                    strSerialControlled = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                                }
                                if (strLotControlled == null && strLotControlled == "") {
                                    strLotControlled = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                                }
                                if (intScheduleCnt == 1 && (this.gStrLotSerial == AtParEnums_1.Enable_Lot_Serial_Tracking[AtParEnums_1.Enable_Lot_Serial_Tracking.None].toString() ||
                                    !(strSerialControlled == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() || strLotControlled == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()))) {
                                    this.blnFlag = true;
                                }
                                else if (intScheduleCnt > 1) {
                                    this.lstRecvSendPoLines[i].SCHDFLAG = true;
                                    this.blnSchedsExist = true;
                                }
                                else if (strSerialControlled == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() || strLotControlled == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                    this.blnSchedsExist = true;
                                    this.lstRecvSendPoLines[i].SCHDFLAG = true;
                                }
                            }
                            if (this.blnFlag) {
                                this.lstRecvSendPoLines[i].QTY = null;
                                this.lstRecvSendPoLines[i].RBFlAG = false;
                                if ((this.lstRecvSendPoLines[i].NO_OF_BOXES != null)) {
                                    this.lstRecvSendPoLines[i].NO_OF_BOXES = null;
                                    this.txtPkgs = "";
                                }
                                this.lstRecvSendPoLines[i].CARRIER_ID = "Select Carrier";
                                this.lstRecvSendPoLines[i].BILL_OF_LADING = "";
                                this.lstRecvSendPoLines[i].NO_OF_BOXES = null;
                                this.txtPkgs = "";
                                this.txtLading = "";
                            }
                        }
                    }
                    if (this.blnSchedsExist) {
                        this.statusMsgs = [];
                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Lines with schedules or lot serial have not been updated" });
                        // this.selectedSCHEDNBR = "";
                        return [2 /*return*/];
                    }
                }
                catch (ex) {
                    this.spnrService.stop();
                    this.clientErrorMsg(ex, "scheduleResetAll");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.radioButtonChanged = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            var rbtn, ex_55;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        this.statusMsgs = [];
                        this.statusCode = -1;
                        if (this.dtScheduleItems != null && this.dtScheduleItems.length > 0) {
                            if (event == null) {
                                if (this.dtScheduleItems.length == 1) {
                                    this.selecstedRow = this.dtScheduleItems[0];
                                }
                                else {
                                    return [2 /*return*/];
                                }
                            }
                            else {
                                this.selecstedRow = this.dtScheduleItems.filter(function (x) { return x.SCHED_NBR == event; })[0];
                            }
                        }
                        this.txtPkgs = "1";
                        rbtn = "";
                        if (this.schPO == false) {
                            rbtn = "ASP.mt_recv_po_or_nonpo_receipts_aspx";
                        }
                        else {
                            rbtn = "ASP.mt_recv_Schedule.aspx";
                        }
                        this.spnrService.start();
                        return [4 /*yield*/, this.schedulePo_RbtnChange(this.selecstedRow, false)];
                    case 1:
                        _a.sent();
                        this.spnrService.stop();
                        this.spnrService.start();
                        if (!(this.selecstedRow != null && this.selecstedRow != undefined)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.updateDs(rbtn, this.selecstedRow)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        this.spnrService.stop();
                        return [3 /*break*/, 5];
                    case 4:
                        ex_55 = _a.sent();
                        this.spnrService.stop();
                        this.clientErrorMsg(ex_55, "radioButtonChanged");
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.schedulePo_RbtnChange = function (recvDetails, blnSelectRdbtn) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var txtPkgs, blnSchedsExist, intScheduleCnt, strRecedQty, strSerialControlled, strLotControlled, strPoQty, txtNoOfBoxes, txtLadg, txtTrkNo, lnkLine, schdNBR, currentdate, extTrkExist, i, i, dtReceiveDetails, strLot, strSerial, lnkLineNbr, lbQtyPO, lnkItemId_4, txtQty, intConverfactor, strUOM, schedCount, strInvItem, strRecallFlag, dtRecallInfo, dr, strComments, dtRecallInfo, dr, ex_56;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.statusMsgs = [];
                        this.statusCode = -1;
                        txtPkgs = "";
                        blnSchedsExist = false;
                        this.blnFlag = false;
                        intScheduleCnt = 0;
                        strRecedQty = null;
                        strSerialControlled = null;
                        strLotControlled = null;
                        strPoQty = null;
                        txtNoOfBoxes = void 0;
                        if (recvDetails.INV_ITEM_ID != null) {
                            this.hdnItemId = recvDetails.INV_ITEM_ID;
                        }
                        txtLadg = recvDetails.BILL_OF_LADING;
                        txtTrkNo = recvDetails.EXT_TRK_NO;
                        lnkLine = recvDetails.LINE_NBR;
                        schdNBR = recvDetails.SCHED_NBR;
                        if (this.dtScheduleItems != null && this.dtScheduleItems.length > 0) {
                            txtNoOfBoxes = recvDetails.NO_OF_BOXES;
                        }
                        txtPkgs = "1";
                        //if (!recvDetails.SCHDFLAG) {
                        if (this.txtLading != null && this.txtLading != undefined && this.txtLading.length == 0) {
                            if (txtLadg == null || txtLadg == "") {
                                currentdate = new Date();
                                txtLadg = this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.UserID].toString() + (currentdate.getMonth() + 1) + this.AddZero(currentdate.getDate()) + currentdate.getFullYear() + currentdate.getHours() + currentdate.getMinutes() + currentdate.getSeconds();
                                this.txtLading = txtLadg;
                                recvDetails.BILL_OF_LADING = txtLadg;
                            }
                            else {
                                this.txtLading = txtLadg;
                            }
                        }
                        else if (txtLadg != null && txtLadg != "") {
                            this.txtLading = txtLadg;
                        }
                        else {
                            if (this.txtLading != null && this.txtLading != "") {
                                txtLadg = this.txtLading;
                                recvDetails.BILL_OF_LADING = txtLadg;
                            }
                        }
                        return [4 /*yield*/, this.checkColumnExist("EXT_TRK_NO", "RECEIVE BY SCHEDULE")];
                    case 1:
                        extTrkExist = _a.sent();
                        if (extTrkExist) {
                            if (!this.txtExtTrkIsEditMode) {
                                if (this.txtSchdExTrk != null && this.txtSchdExTrk != undefined && this.txtSchdExTrk != "" && this.txtSchdExTrk.length == 0) {
                                    if (txtTrkNo == null && txtTrkNo == "") {
                                        txtTrkNo = "";
                                    }
                                    else {
                                        this.txtSchdExTrk = txtTrkNo.trim();
                                        txtTrkNo = txtTrkNo.trim();
                                    }
                                }
                                else if (txtTrkNo != null && txtTrkNo != "") {
                                    this.txtSchdExTrk = txtTrkNo.trim();
                                    txtTrkNo = txtTrkNo.trim();
                                }
                                else {
                                    if (this.txtSchdExTrk != null && this.txtSchdExTrk != "") {
                                        txtTrkNo = this.txtSchdExTrk;
                                        recvDetails.EXT_TRK_NO = this.txtSchdExTrk;
                                    }
                                }
                            }
                        }
                        else {
                            if (this.dtScheduleItems != null && this.dtScheduleItems.length > 0) {
                                for (i = 0; i < this.dtScheduleItems.length; i++) {
                                    if (this.dtScheduleItems[i].LINE_NBR == lnkLine && recvDetails.SCHED_NBR == schdNBR) {
                                        if (this.dtScheduleItems[i].EXT_TRK_NO != null && this.dtScheduleItems[i].EXT_TRK_NO != "") {
                                            if (this.dtScheduleItems[i].EXT_TRK_NO.trim() != "") {
                                                this.txtSchdExTrk = this.dtScheduleItems[i].EXT_TRK_NO;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (recvDetails.SCHED_COUNT <= 1) {
                            if (recvDetails.CARRIER_ID != "Select Carrier" && recvDetails.CARRIER_ID != null && recvDetails.CARRIER_ID != "") {
                                this.selectedSchdDdlCarrier = recvDetails.CARRIER_ID;
                            }
                            else {
                                if (this.selectedSchdDdlCarrier != "Select Carrier" && this.selectedSchdDdlCarrier != "") {
                                    recvDetails.CARRIER_ID = this.selectedSchdDdlCarrier;
                                }
                            }
                        }
                        if (txtNoOfBoxes == null) {
                            txtNoOfBoxes = 1;
                            recvDetails.NO_OF_BOXES = txtNoOfBoxes;
                            txtPkgs = "1";
                        }
                        if (txtNoOfBoxes != null) {
                            if (txtPkgs != null && txtPkgs != undefined && txtPkgs != "" && txtPkgs.trim().length == 0) {
                                if (txtNoOfBoxes == null) {
                                    if (this.lstRecvSendPoLines != null) {
                                        txtNoOfBoxes = 1;
                                        recvDetails.NO_OF_BOXES = txtNoOfBoxes;
                                        txtPkgs = "1";
                                    }
                                    else {
                                        txtNoOfBoxes = 1;
                                        recvDetails.NO_OF_BOXES = txtNoOfBoxes;
                                        txtPkgs = "1";
                                    }
                                }
                                else {
                                    this.txtPkgs = txtNoOfBoxes.toString();
                                }
                            }
                            else if (txtNoOfBoxes != null && txtNoOfBoxes != undefined) {
                                this.txtPkgs = txtNoOfBoxes.toString();
                            }
                            else {
                                if (this.txtPkgs != null && this.txtPkgs != undefined && this.txtPkgs != "" && this.txtPkgs.length > 0) {
                                    txtNoOfBoxes = parseInt(this.txtPkgs);
                                    recvDetails.NO_OF_BOXES = txtNoOfBoxes;
                                }
                                else {
                                    if (this.dtScheduleItems != null) {
                                        txtNoOfBoxes = 1;
                                        recvDetails.NO_OF_BOXES = txtNoOfBoxes;
                                        this.txtPkgs = "1";
                                    }
                                    else {
                                        txtNoOfBoxes = 1;
                                        this.txtPkgs = "1";
                                        recvDetails.NO_OF_BOXES = txtNoOfBoxes;
                                    }
                                }
                            }
                        }
                        else {
                            if (this.dtScheduleItems != null && this.dtScheduleItems.length > 0) {
                                for (i = 0; i < this.dtScheduleItems.length; i++) {
                                    if (this.dtScheduleItems[i].LINE_NBR == lnkLine && this.grdRecvLinesRbBtnCheck) {
                                        if (this.dtScheduleItems[i].NO_OF_BOXES != null) {
                                            this.txtPkgs = this.dtScheduleItems[i].NO_OF_BOXES.toString();
                                        }
                                    }
                                }
                            }
                        }
                        if (this.dtScheduleItems != null && this.dtScheduleItems.length > 0) {
                            dtReceiveDetails = this.dtScheduleItems;
                            strLot = recvDetails.LOT_CONTROLLED;
                            this.lotControl = recvDetails.LOT_CONTROLLED;
                            strSerial = recvDetails.SERIAL_CONTROLLED;
                            this.serialControl = recvDetails.SERIAL_CONTROLLED;
                            lnkLineNbr = recvDetails.LINE_NBR;
                            this.schedNbr = recvDetails.SCHED_NBR;
                            lbQtyPO = recvDetails.LINE_PO_QTY;
                            lnkItemId_4 = recvDetails.INV_ITEM_ID;
                            txtQty = recvDetails.QTY;
                            strRecedQty = recvDetails.RECEIVED_QTY;
                            strPoQty = recvDetails.QTY_PO; //LINE_PO_QTY check once Qty
                            intScheduleCnt = recvDetails.SCHED_COUNT;
                            strSerialControlled = recvDetails.SERIAL_CONTROLLED;
                            strLotControlled = recvDetails.LOT_CONTROLLED;
                            intConverfactor = parseInt(recvDetails.CONVERSION_RATE);
                            this.lotSerialConverfactor = parseInt(recvDetails.CONVERSION_RATE);
                            strUOM = recvDetails.UNIT_OF_MEASURE;
                            schedCount = recvDetails.SCHED_COUNT;
                            strInvItem = recvDetails.INVENTORY_ITEM;
                            this.hdnItemType = strInvItem;
                            this.hdnInvItemId = lnkItemId_4;
                            this.hdnItmLineNo = lnkLineNbr;
                            this.hdnItmSchedLineNo = parseInt(this.schedNbr);
                            this.strTotalQty = (parseInt(strPoQty) - parseInt(strRecedQty)).toString();
                            strRecallFlag = recvDetails.RECAL_FLAG.toString();
                            if (strRecallFlag == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                recvDetails.QTY = "";
                                recvDetails.TXTQTYFLAG = true;
                                dtRecallInfo = this.lstReCallInfo;
                                if (dtRecallInfo != null && dtRecallInfo.length > 0) {
                                    dr = dtRecallInfo.filter(function (x) { return x.ITEM_ID == lnkItemId_4 && (x.LOT_NO == "" || x.LOT_NO == null) && (x.SERIAL_NO == "" || x.SERIAL_NO == null); });
                                    if (dr != null && dr.length > 0) {
                                        recvDetails.QTY = "";
                                        recvDetails.TXTQTYFLAG = true;
                                    }
                                }
                            }
                            //Comments Checking
                            if (this.gDisplayComments == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() &&
                                recvDetails.COMMENTS != null && recvDetails.COMMENTS != "") {
                                strComments = recvDetails.COMMENTS;
                                if (strComments != "") {
                                    strComments = "Comments: \\n \\n " + strComments;
                                    if (this.gstrPrevComments != strComments) {
                                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: strComments.toString() });
                                        this.gstrPrevComments = strComments;
                                    }
                                }
                            }
                            if ((recvDetails.CARRIER_ID == null || recvDetails.CARRIER_ID == "" || recvDetails.CARRIER_ID == "Select Carrier" || txtLadg == "")) {
                                this.statusMsgs = [];
                                this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Carrier and Lading are mandatory" });
                                this.selecstedRow = null;
                                setTimeout(function () { _this.selectedSCHEDNBR = ""; }, 1);
                                setTimeout(function () { recvDetails.RBFlAG = false; }, 2);
                                this.grdRecvLinesRbBtnCheck = false;
                                this.lstRecvSendPoLines.forEach(function (x) { return x.RBFlAG = false; });
                                blnSelectRdbtn = true;
                                return [2 /*return*/];
                            }
                            else {
                                setTimeout(function () {
                                    recvDetails.RBFlAG = true;
                                    var itemtxtRecvQty = document.getElementById('txtRecvQty' + _this.selectedSCHEDNBR); // recvDetails.SCHED_NBR)
                                    if (itemtxtRecvQty != null) {
                                        itemtxtRecvQty.focus();
                                    }
                                }, 2);
                            }
                            this.txtSerchItemId = lnkItemId_4;
                            this.hdnItemId = this.txtSerchItemId;
                            this.gstrlnkitemid = recvDetails.INV_ITEM_ID;
                            this.gstrlnklineNbr = lnkLineNbr.toString();
                            if (this.gStrLotSerial != AtParEnums_1.Enable_Lot_Serial_Tracking[AtParEnums_1.Enable_Lot_Serial_Tracking.None].toString()) {
                                if (this.gStrLotSerial == AtParEnums_1.Enable_Lot_Serial_Tracking[AtParEnums_1.Enable_Lot_Serial_Tracking.MMIS].toString()) {
                                    if (strLot == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() || strSerial == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                        this.btnLotSerialDisable = false;
                                        recvDetails.TXTQTYFLAG = true;
                                        recvDetails.DDLUOMFLAG = true;
                                    }
                                    else {
                                        this.btnLotSerialDisable = true;
                                        recvDetails.TXTQTYFLAG = false;
                                    }
                                }
                                else if (this.gStrLotSerial == AtParEnums_1.Enable_Lot_Serial_Tracking[AtParEnums_1.Enable_Lot_Serial_Tracking.AtPar].toString()) {
                                    this.btnLotSerialDisable = false;
                                    recvDetails.TXTQTYFLAG = false;
                                    if (strSerial == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                        recvDetails.DDLUOMFLAG = true;
                                    }
                                }
                                //if (parseInt(intScheduleCnt.toString()) > 1) {
                                //    this.btnLotSerialDisable = true;
                                //    recvDetails.TXTQTYFLAG = true;
                                //    recvDetails.DDLUOMFLAG = true;
                                //}
                            }
                            else {
                                this.btnLotSerialDisable = true;
                                recvDetails.TXTQTYFLAG = false;
                            }
                            if (strSerial == "" || strSerial == null || strSerial == undefined) {
                                strSerial = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                            }
                            if (strLot == "" || strLot == null || strLot == undefined) {
                                strLot = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                            }
                            if (schedCount == "1") {
                                this.blnlnkItemIdEnable = false;
                                this.blnlnkLineNbrEnable = false;
                                if ((strLot == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() || strSerial == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) &&
                                    this.gStrLotSerial == AtParEnums_1.Enable_Lot_Serial_Tracking[AtParEnums_1.Enable_Lot_Serial_Tracking.MMIS].toString()) {
                                    recvDetails.TXTQTYFLAG = true;
                                    recvDetails.DDLUOMFLAG = true;
                                }
                                else {
                                    recvDetails.TXTQTYFLAG = false;
                                }
                                this.btnPntrDetailsDisable = false;
                            }
                            else {
                                this.btnPntrDetailsDisable = true;
                                this.blnlnkItemIdEnable = true;
                                this.blnlnkLineNbrEnable = true;
                            }
                            if (lnkItemId_4 != null) {
                                if (lnkItemId_4 == "") {
                                    this.blnFlag = true;
                                }
                                //Do not default Lines which have schedules
                                if (strSerialControlled == null || strSerialControlled == "") {
                                    strSerialControlled = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                                }
                                if (strLotControlled == null && strLotControlled == "") {
                                    strLotControlled = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                                }
                                if (intScheduleCnt == 1 && (this.gStrLotSerial == AtParEnums_1.Enable_Lot_Serial_Tracking[AtParEnums_1.Enable_Lot_Serial_Tracking.None].toString() ||
                                    !(strSerialControlled == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() || strLotControlled == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()))) {
                                    this.blnFlag = true;
                                }
                                else if (intScheduleCnt > 1) {
                                    //Recall Checking
                                    if (strRecallFlag == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                        dtRecallInfo = this.lstReCallInfo;
                                        if (dtRecallInfo != null && dtRecallInfo.length > 0) {
                                            dr = dtRecallInfo.filter(function (x) { return x.ITEM_ID == lnkItemId_4 && (x.LOT_NO == "" || x.LOT_NO == null) && (x.SERIAL_NO == "" || x.SERIAL_NO == null); });
                                            if (dr != null && dr.length > 0) {
                                                recvDetails.QTY = "";
                                                recvDetails.TXTQTYFLAG = true;
                                            }
                                        }
                                    }
                                }
                                else if (intScheduleCnt > 1) {
                                    recvDetails.SCHDFLAG = true;
                                    this.blnSchedsExist = true;
                                }
                                else if (strSerialControlled == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() || strLotControlled == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                    this.blnSchedsExist = true;
                                    recvDetails.SCHDFLAG = true;
                                }
                            }
                            recvDetails.NO_OF_BOXES = txtNoOfBoxes;
                            if (this.blnFlag == true && (txtQty == null || txtQty == "")) {
                                if (this.gblnASNPO == false && this.gStrDefaultInput == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                                    if (strRecedQty != null && strRecedQty != "") {
                                        if (parseInt(strRecedQty) <= parseInt(strPoQty)) {
                                            txtQty = parseInt(strPoQty) - parseInt(strRecedQty);
                                            recvDetails.QTY = txtQty;
                                        }
                                    }
                                    else {
                                        txtQty = strPoQty;
                                        recvDetails.QTY = txtQty;
                                    }
                                }
                                else {
                                    txtQty = recvDetails.ASN_QTY;
                                    recvDetails.QTY = txtQty;
                                }
                            }
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        ex_56 = _a.sent();
                        this.clientErrorMsg(ex_56, "schedulePo_RbtnChange");
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.printSchedule = function () {
        try {
            this.statusMsgs = [];
            this.SaveScheduleItemsData('Print');
        }
        catch (ex) {
            this.clientErrorMsg(ex, "printSchedule");
        }
    };
    PoNonPoReceiptsComponent.prototype.goPage = function () {
        var _this = this;
        try {
            this.statusMsgs = [];
            this.presentScreen = "PO";
            this.tbl = true;
            this.page = true;
            this.bysch = false;
            this.purchase = false;
            this.blnScheduleItems == false;
            this.selectedSCHEDNBR = "";
            this.selectedSchdDdlCarrier = "Select Carrier";
            this.breadCrumbMenu.SUB_MENU_NAME = '';
            if (this.isScheduleSave != true) {
                if (this.dtScheduleItems != null && this.dtScheduleItems.length > 0) {
                    this.dtScheduleItems.forEach(function (x) {
                        x.QTY = x.ASN_QTY, x.QTY_PO = x.LINE_PO_QTY, x.CARRIER_ID = x.SCHDQTYCHANGFLAG == true ? x.CARRIER_ID : "",
                            x.EXT_TRK_NO = "", x.NO_OF_BOXES = null, x.LOTSERIALSCHDFLAG = x.LOTSERIALSCHDFLAG == true ? true : x.LOTSERIALSCHDFLAG;
                    });
                    var _loop_8 = function (i) {
                        var lotserialitems = this_8.lstMainItemLotSerial.filter(function (x) { return x.ITEM_ID == _this.dtScheduleItems[i].INV_ITEM_ID && x.LINE_NBR.toString() == _this.dtScheduleItems[i].LINE_NBR.toString() &&
                            x.SCHED_NBR.toString() == _this.dtScheduleItems[i].SCHED_NBR.toString() && x.LOTSERIALSCHDFLG == true; });
                        for (var x = 0; x < lotserialitems.length; x++) {
                            var index = this_8.lstMainItemLotSerial.indexOf(lotserialitems[x]);
                            if (index !== -1) {
                                this_8.lstMainItemLotSerial.splice(index, 1);
                            }
                        }
                    };
                    var this_8 = this;
                    for (var i = 0; i < this.dtScheduleItems.length; i++) {
                        _loop_8(i);
                    }
                }
            }
            this.txtTrk = "";
            this.spnrService.emitChangeBreadCrumbEvt(JSON.stringify(this.breadCrumbMenu));
            this.isScheduleSave = false;
            this.lotSerialSchdFlg = false;
        }
        catch (ex) {
            this.clientErrorMsg(ex, "goPage");
        }
    };
    /**
    *
    * End Scheduled PO
    */
    /**
     *
     * NonPO
     */
    PoNonPoReceiptsComponent.prototype.btnNonPo_Click = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                this.statusMsgs = [];
                try {
                    if (this.hdnNonPo == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString()) {
                        this.confirmationService.confirm({
                            message: "Do you want to delete the existing PO/IUT?",
                            accept: function () { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    this.spnrService.start();
                                    this.hdnConfirmPoDelete = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                                    this.hdnConfirmIUTDelete = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                                    this.hdnConfirmNonPo = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                                    this.recvSearchPos = false;
                                    this.recvIUTSearch = false;
                                    this.tbl = false;
                                    this.plus = true;
                                    this.minus = false;
                                    this.lstRecvSendPoLines = [];
                                    this.lstRecvIutItems = [];
                                    this.spnrService.stop();
                                    return [2 /*return*/];
                                });
                            }); },
                            reject: function () {
                                _this.hdnConfirmPoDelete = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                                _this.hdnConfirmIUTDelete = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                                _this.hdnConfirmNonPo = AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString();
                                _this.spnrService.stop();
                            }
                        });
                        this.spnrService.stop();
                    }
                    else {
                        this.presentScreen = "NONPO";
                        this.txtPONumber = "";
                        this.breadCrumbMenu.SUB_MENU_NAME = 'Receiving NON PO Items';
                        this.spnrService.emitChangeBreadCrumbEvt(JSON.stringify(this.breadCrumbMenu));
                        this.nonPO = true;
                        this.plus = true;
                        this.minus = false;
                        this.page = false;
                        this.tbl = false;
                        this.getinitialvalues();
                    }
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "btnNonPo_Click");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.getinitialvalues = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ex_57;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.statusMsgs = [];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 5, , 6]);
                        this.presentScreen = "NONPO";
                        this.poNewItem.NO_OF_PACKAGES = "1";
                        this.poNewItem.CARRIER_ID = "";
                        this.poNewItem.COMMENTS = "";
                        this.poNewItem.DELIVER_TO = "";
                        this.poNewItem.DEPT_ID = "";
                        this.poNewItem.DESCR = "";
                        this.poNewItem.END_DT_TIME = "";
                        this.poNewItem.LINE_NBR = "";
                        this.poNewItem.LOCATION = "";
                        this.poNewItem.LOCDESCR = "";
                        this.poNewItem.VENDOR_ID = "";
                        this.poNewItem.PO_ID = "";
                        this.poNewItem.TYPE_OF_PACKAGE = "";
                        return [4 /*yield*/, this.generateTrackingId()];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.populateShipToIdsDrpdwn(this.lstShipToIds)];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, this.populateCarrierDropDown(this.poNewItem.CARRIER_ID)];
                    case 4:
                        _a.sent();
                        if (this.poNewItem.TRACKING_NBR != "" && this.poNewItem.TRACKING_NBR != null && this.poNewItem.TRACKING_NBR != undefined) {
                            this.trackNoStatus = 0;
                        }
                        if (this.poNewItem.SHIPTO_ID != "" && this.poNewItem.SHIPTO_ID != null && this.poNewItem.SHIPTO_ID != undefined) {
                            this.shipIDStatus = 0;
                        }
                        if ((this.shipIDStatus == 0) && (this.trackNoStatus == 0)) {
                            this.nonPoDisable = false;
                        }
                        else {
                            this.nonPoDisable = true;
                        }
                        if (this.blntxtShipIdDisable == true && (this.poNewItem.SHIPTO_ID == "" || this.poNewItem.SHIPTO_ID == null || this.poNewItem.SHIPTO_ID == undefined)) {
                            this.nonPoDisable = false;
                        }
                        return [3 /*break*/, 6];
                    case 5:
                        ex_57 = _a.sent();
                        this.clientErrorMsg(ex_57, "getinitialvalues");
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.generateTrackingId = function () {
        return __awaiter(this, void 0, void 0, function () {
            var currentdate, ex_58;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.statusMsgs = [];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 5, , 6]);
                        currentdate = new Date();
                        if (!(this.gdonotDefaulttrackingNumber != 'Y')) return [3 /*break*/, 3];
                        this.btnTrackingNumber = false;
                        this.lblTrackingNumber = true;
                        return [4 /*yield*/, this.generateTrack()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        this.poNewItem.TRACKING_NBR = "";
                        this.btnTrackingNumber = true;
                        this.lblTrackingNumber = false;
                        _a.label = 4;
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        ex_58 = _a.sent();
                        this.clientErrorMsg(ex_58, "generateTrackingId");
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.generateTrack = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var ex_59;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.statusMsgs = [];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.recvPoNonPoService.generateTrackingNumber().catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                var testdata = data;
                                _this.poNewItem.TRACKING_NBR = testdata.toString();
                            })];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        ex_59 = _a.sent();
                        this.clientErrorMsg(ex_59, "generateTrack");
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.btnTrackingNumber_Click = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.statusMsgs = [];
                try {
                    this.generateTrack();
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "btnTrackingNumber_Click");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.AddZero = function (num) {
        this.statusMsgs = [];
        try {
            return (num >= 0 && num < 10) ? "0" + num : num + "";
        }
        catch (ex) {
            this.clientErrorMsg(ex, "AddZero");
        }
    };
    PoNonPoReceiptsComponent.prototype.bindModelDataChange = function (event) {
        this.statusMsgs = [];
        try {
            if ("txtShipId" == event.TextBoxID.toString()) {
                this.shipIDStatus = event.validationrules.filter(function (x) { return x.status == false; }).length;
            }
            if ("txtTrackNo" == event.TextBoxID.toString()) {
                this.trackNoStatus = event.validationrules.filter(function (x) { return x.status == false; }).length;
            }
            if (this.poNewItem.TRACKING_NBR != "" && this.poNewItem.TRACKING_NBR != null && this.poNewItem.TRACKING_NBR != undefined) {
                this.trackNoStatus = 0;
            }
            if (this.poNewItem.SHIPTO_ID != "" && this.poNewItem.SHIPTO_ID != null && this.poNewItem.SHIPTO_ID != undefined) {
                this.shipIDStatus = 0;
            }
            if ((this.shipIDStatus == 0) && (this.trackNoStatus == 0)) {
                this.nonPoDisable = false;
            }
            else {
                this.nonPoDisable = true;
            }
        }
        catch (ex) {
            this.clientErrorMsg(ex, "bindModelDataChange");
        }
    };
    PoNonPoReceiptsComponent.prototype.shipNonPoToId_selectChanged = function (option, event) {
        this.statusMsgs = [];
        try {
            this.statusMsgs = [];
            if (this.poNewItem.SHIPTO_ID == "" || this.poNewItem.SHIPTO_ID == null || this.poNewItem.SHIPTO_ID == undefined || this.poNewItem.SHIPTO_ID == "Select ShipToID") {
                this.nonPoDisable = true;
            }
            else {
                if (this.poNewItem.TRACKING_NBR != "" && this.poNewItem.TRACKING_NBR != null && this.poNewItem.TRACKING_NBR != undefined) {
                    this.nonPoDisable = false;
                }
                else {
                    this.nonPoDisable = true;
                }
            }
        }
        catch (ex) {
            this.clientErrorMsg(ex, "shipNonPoToId_selectChanged");
        }
    };
    PoNonPoReceiptsComponent.prototype.btnNonPoSend_Click = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ex_60;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.statusMsgs = [];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        if (this.poNewItem.TRACKING_NBR == "" || this.poNewItem.TRACKING_NBR == null || this.poNewItem.TRACKING_NBR == undefined) {
                            this.statusMsgs = [];
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: 'Enter Tracking#' });
                            return [2 /*return*/];
                        }
                        if (this.poNewItem.LOCATION == '' || this.poNewItem.LOCATION == null || this.poNewItem.LOCATION == undefined) {
                        }
                        else {
                            if (this.poNewItem.LOCATION.length > 30) {
                                this.statusMsgs = [];
                                this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: 'Location value cannot be more than 30 chars' });
                                return [2 /*return*/];
                            }
                        }
                        if ((this.poNewItem.SHIPTO_ID == null || this.poNewItem.SHIPTO_ID == undefined || this.poNewItem.SHIPTO_ID == "" || this.poNewItem.SHIPTO_ID == "Select ShipToID")) {
                            this.statusMsgs = [];
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: 'Enter ShipTo ID' });
                            return [2 /*return*/];
                        }
                        if (this.poNewItem.CARRIER_ID == 'Select Carrier' || this.poNewItem.CARRIER_ID == "" || this.poNewItem.CARRIER_ID == undefined) {
                            this.poNewItem.CARRIER_ID = "";
                        }
                        this.spnrService.start();
                        return [4 /*yield*/, this.nonPoInsert('')];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        ex_60 = _a.sent();
                        this.clientErrorMsg(ex_60, "btnNonPoSend_Click");
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.btnSaveNext_Click = function (save) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.statusMsgs = [];
                try {
                    this.spnrService.start();
                    this.SaveNonPo(save);
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "btnSaveNext_Click");
                }
                return [2 /*return*/];
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.SaveNonPo = function (save) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, ex_61;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.statusCode = -1;
                        this.statusMsgs = [];
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        if (this.poNewItem.TRACKING_NBR == "" || this.poNewItem.TRACKING_NBR == null || this.poNewItem.TRACKING_NBR == undefined) {
                            this.statusMsgs = [];
                            this.spnrService.stop();
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: 'Enter Tracking#' });
                            return [2 /*return*/];
                        }
                        if (this.poNewItem.LOCATION == '' || this.poNewItem.LOCATION == null || this.poNewItem.LOCATION == undefined) {
                        }
                        else {
                            if (this.poNewItem.LOCATION.length > 30) {
                                this.statusMsgs = [];
                                this.spnrService.stop();
                                this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: 'Location value cannot be more than 30 chars' });
                                return [2 /*return*/];
                            }
                        }
                        if ((this.poNewItem.SHIPTO_ID == null || this.poNewItem.SHIPTO_ID == undefined || this.poNewItem.SHIPTO_ID == "" || this.poNewItem.SHIPTO_ID == "Select ShipToID")) {
                            this.statusMsgs = [];
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: 'Enter ShipTo ID' });
                            this.spnrService.stop();
                            return [2 /*return*/];
                        }
                        if (this.poNewItem.CARRIER_ID == 'Select Carrier' || this.poNewItem.CARRIER_ID == "" || this.poNewItem.CARRIER_ID == undefined) {
                            this.poNewItem.CARRIER_ID = "";
                        }
                        _a = this;
                        return [4 /*yield*/, this.nonPoInsert(save)];
                    case 2:
                        _a.statusCode = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        ex_61 = _b.sent();
                        this.clientErrorMsg(ex_61, "SaveNonPo");
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.changeDate = function (date) {
        this.statusMsgs = [];
        try {
            var time = date.toLocaleString();
            if (time != "") {
                var hours = date.getHours() > 12 ? date.getHours() - 12 : date.getHours();
                var am_pm = date.getHours() >= 12 ? "PM" : "AM";
                hours = hours < 10 ? "0" + hours : hours;
                var minutes = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes();
                var seconds = date.getSeconds() < 10 ? "0" + date.getSeconds() : date.getSeconds();
                return hours + ":" + minutes + ":" + seconds + " " + am_pm;
            }
        }
        catch (ex) {
            this.clientErrorMsg(ex, "changeDate");
        }
    };
    PoNonPoReceiptsComponent.prototype.nonPoInsert = function (savenext) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var dateStr, ex_62;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.statusMsgs = [];
                        this.statusCode = -1;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        dateStr = new Date(new Date()).toLocaleString().replace(/[^A-Za-z 0-9 \.,\?""!@#\$%\^&\*\(\)-_=\+;:<>\/\\\|\}\{\[\]`~]*/g, '');
                        //let date = new Date(dateStr);
                        this.lstNonPoItems = [];
                        if (this.poNewItem.LINE_NBR == undefined || this.poNewItem.LINE_NBR == "" || this.poNewItem.LINE_NBR == null) {
                            this.poNewItem.LINE_NBR = '0';
                        }
                        else {
                            this.poNewItem.LINE_NBR = this.poNewItem.LINE_NBR;
                        }
                        this.lstNonPoItems.push({
                            TRANSACTION_ID: null,
                            TRACKING_NBR: this.poNewItem.TRACKING_NBR,
                            LOCATION: this.poNewItem.LOCATION,
                            CARRIER_ID: this.poNewItem.CARRIER_ID,
                            DELIVER_TO: this.poNewItem.DELIVER_TO,
                            STATUS: AtParEnums_1.AppTransactionStatus.Receive.toString(),
                            USER_ID: this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.UserID].toString(),
                            DESCR: this.poNewItem.DESCR,
                            VENDOR_NAME1: this.poNewItem.VENDOR_ID,
                            DEPT_ID: this.poNewItem.DEPT_ID,
                            PO_ID: this.poNewItem.PO_ID,
                            LINE_NBR: this.poNewItem.LINE_NBR,
                            SHIPTO_ID: this.poNewItem.SHIPTO_ID,
                            NON_PO_ITEM: AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString(),
                            TYPE_OF_PACKAGE: this.poNewItem.TYPE_OF_PACKAGE,
                            END_DT_TIME: dateStr.replace(',', ''),
                            START_DT_TIME: dateStr.replace(',', ''),
                            COMMENTS: this.poNewItem.COMMENTS,
                            LOCDESCR: this.poNewItem.LOCDESCR,
                            PO_DT: '',
                            VENDOR_ID: this.poNewItem.VENDOR_ID,
                            NOTES_COMMENTS: '',
                            NO_OF_PACKAGES: this.poNewItem.NO_OF_PACKAGES,
                        });
                        return [4 /*yield*/, this.recvPoNonPoService.sendNonPoDetails(this.lstNonPoItems).catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.spnrService.stop();
                                _this.statusMsgs = [];
                                _this.statusCode = data.StatusCode;
                                if (data.StatusCode == AtParStatusCodes_1.AtparStatusCodes.RECV_S_TRACKINGALREADYEXISTS) {
                                    _this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: 'Tracking# Already Exists' });
                                    return;
                                }
                                switch (data.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        _this.nonPoDisable = true;
                                        if (savenext == null || savenext == '') {
                                            _this.clearControls();
                                        }
                                        else {
                                            _this.poNewItem.DESCR = '';
                                            _this.poNewItem.COMMENTS = '';
                                            _this.poNewItem.PO_ID = '';
                                            _this.poNewItem.VENDOR_ID = '';
                                            _this.poNewItem.LINE_NBR = '';
                                            _this.poNewItem.NO_OF_PACKAGES = "1";
                                            _this.poNewItem.TYPE_OF_PACKAGE = '';
                                            _this.generateTrackingId();
                                            _this.poNewItem.CARRIER_ID = _this.poNewItem.CARRIER_ID;
                                            _this.populateShipToIdsDrpdwn(_this.lstShipToIds);
                                        }
                                        if (_this.blntxtShipIdDisable == true) {
                                            _this.nonPoDisable = false;
                                        }
                                        _this.statusMsgs.push({ severity: 'success', summary: AtParConstants_1.AtParConstants.GrowlTitle_Success, detail: 'Sent Successfully.' });
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Custom: {
                                        _this.statusMsgs.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        break;
                                    }
                                }
                            })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, this.statusCode];
                    case 3:
                        ex_62 = _a.sent();
                        this.clientErrorMsg(ex_62, "nonPoInsert");
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.btnPrint_Click = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var blnstockhdr, blnNonstkhdr, blnNonStockHed, blnStockHed, blnmsgdisplayed, intNoOfBoxses, drowRecStatus, drowRecNonStockStatus, drowRecStockStatus, drowPrnterDet, drowPrnterDet, _a, _b, ex_63;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        this.statusMsgs = [];
                        this.statusCode = -1;
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 14, , 15]);
                        blnstockhdr = false;
                        blnNonstkhdr = false;
                        blnNonStockHed = false;
                        blnStockHed = false;
                        blnmsgdisplayed = false;
                        intNoOfBoxses = 0;
                        drowRecStatus = linq_es5_1.asEnumerable(this.lstRecvSendPoLines).Where(function (x) { return x.QTY != null && x.RECEIVED_FLAG == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString(); }).ToArray();
                        drowRecNonStockStatus = linq_es5_1.asEnumerable(this.lstRecvSendPoLines).Where(function (x) { return x.QTY != null && x.RECEIVED_FLAG == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() && x.INVENTORY_ITEM == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString(); }).ToArray();
                        drowRecStockStatus = linq_es5_1.asEnumerable(this.lstRecvSendPoLines).Where(function (x) { return x.QTY != null && x.RECEIVED_FLAG == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString() && x.INVENTORY_ITEM == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString(); }).ToArray();
                        if (this.poNewItem.NO_OF_PACKAGES == "" || this.poNewItem.NO_OF_PACKAGES == undefined || this.poNewItem.NO_OF_PACKAGES == null) {
                            this.intNoOfBoxses = 1;
                        }
                        else {
                            this.intNoOfBoxses = parseInt(this.poNewItem.NO_OF_PACKAGES);
                        }
                        if (!(this.lstSetUpProPrinters.length > 0)) return [3 /*break*/, 12];
                        if (!(this.gStrSelPrinter == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.Y].toString())) return [3 /*break*/, 5];
                        drowPrnterDet = linq_es5_1.asEnumerable(this.lstSetUpProPrinters).Where(function (x) { return x.LABEL_DESCRIPTION == "NonPO"; }).ToArray();
                        if (!(drowPrnterDet != null && drowPrnterDet.length > 0)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.showModalPopup(drowPrnterDet)];
                    case 2:
                        _c.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Printer Not Configured for the Functionality NonPO" });
                        blnmsgdisplayed = true;
                        _c.label = 4;
                    case 4: return [3 /*break*/, 11];
                    case 5:
                        if (!(this.gStrDefPrinter != "")) return [3 /*break*/, 10];
                        drowPrnterDet = linq_es5_1.asEnumerable(this.lstSetUpProPrinters).Where(function (x) { return x.FRIENDLY_NAME == _this.gStrDefPrinter; }).ToArray();
                        if (!(drowPrnterDet != null && drowPrnterDet.length > 0)) return [3 /*break*/, 9];
                        if (!(drowPrnterDet[0].LABEL_DESCRIPTION == "NonPO")) return [3 /*break*/, 8];
                        blnNonStockHed = true;
                        _a = this;
                        return [4 /*yield*/, this.SaveNonPo('save')];
                    case 6:
                        _a.statusCode = _c.sent();
                        _b = this;
                        return [4 /*yield*/, this.printNonPONiceLabel(intNoOfBoxses, this.lstSetUpProPrinters, this.gStrDefPrinter)];
                    case 7:
                        _b.statusCode = _c.sent();
                        if (this.statusCode != AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK) {
                            this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: "Failed to Print Non Po Label  " });
                            blnmsgdisplayed = true;
                        }
                        return [3 /*break*/, 9];
                    case 8:
                        blnmsgdisplayed = true;
                        _c.label = 9;
                    case 9: return [3 /*break*/, 11];
                    case 10:
                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please setup printer settings " });
                        blnmsgdisplayed = true;
                        _c.label = 11;
                    case 11: return [3 /*break*/, 13];
                    case 12:
                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please Configure Label Printers before Printing" });
                        blnmsgdisplayed = true;
                        _c.label = 13;
                    case 13: return [3 /*break*/, 15];
                    case 14:
                        ex_63 = _c.sent();
                        this.clientErrorMsg(ex_63, "btnPrint_Click");
                        return [3 /*break*/, 15];
                    case 15: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.printNonPONiceLabel = function (noofLabels, printerDet, printerName) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var strValue, pPrinterAddressOrName, pPrinterPort, pPrinterTye, pNiceLabelName, pNoOfPrints, pErrMsg, lstPrintTbl, drowPrnterDet, intNoOfBoxses, strFilter, prntResSet, drPrintRow, k, ex_64;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 5, , 6]);
                        this.statusMsgs = [];
                        this.statusCode = 0;
                        strValue = "";
                        pPrinterAddressOrName = "";
                        pPrinterPort = "";
                        pPrinterTye = "";
                        pNiceLabelName = "";
                        pNoOfPrints = "";
                        pErrMsg = "";
                        lstPrintTbl = [];
                        drowPrnterDet = [];
                        intNoOfBoxses = 0;
                        strFilter = "";
                        if (printerName == null && printerName == "") {
                            drowPrnterDet = linq_es5_1.asEnumerable(printerDet).Where(function (x) { return x.LABEL_DESCRIPTION == "NonPO"; }).ToArray();
                        }
                        else {
                            drowPrnterDet = linq_es5_1.asEnumerable(printerDet).Where(function (x) { return x.LABEL_DESCRIPTION == "NonPO" && x.FRIENDLY_NAME == printerName; }).ToArray(); //check once LABEL_DESCRIPTION 
                        }
                        if (drowPrnterDet.length == 0) {
                            this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please Configure Non Stock Label Printer" });
                            return [2 /*return*/];
                        }
                        pPrinterAddressOrName = drowPrnterDet[0].IP_ADDRESS;
                        pPrinterPort = drowPrnterDet[0].PORT_NO;
                        if (drowPrnterDet[0].NETWORK_TYPE.toString() == "Mobile") {
                            pPrinterTye = "TcpIP";
                        }
                        else {
                        }
                        intNoOfBoxses = noofLabels;
                        pNoOfPrints = "1";
                        pNiceLabelName = drowPrnterDet[0].LABEL_FILE_NAME;
                        prntResSet = linq_es5_1.asEnumerable(this.lstRecvSendPoLines).Where(function (x) { return x.INVENTORY_ITEM == AtParEnums_1.YesNo_Enum[AtParEnums_1.YesNo_Enum.N].toString(); }).ToArray();
                        drPrintRow = new vm_recv_nonpo_printerdetails_1.VM_RECV_NONPO_PRINTERDETAILS();
                        drPrintRow.BUSINESS_UNIT = "";
                        drPrintRow.CARRIER = this.poNewItem.CARRIER_ID;
                        drPrintRow.DELIVER_TO_NAME = this.poNewItem.DELIVER_TO;
                        drPrintRow.DEPT_ID = this.poNewItem.DEPT_ID;
                        drPrintRow.ITEM_DESCR = this.poNewItem.DESCR;
                        drPrintRow.LINE_NO = this.poNewItem.LINE_NBR;
                        drPrintRow.LOCATION_DESCR = this.poNewItem.LOCDESCR;
                        drPrintRow.LOCATION_ID = this.poNewItem.LOCATION;
                        drPrintRow.PKG_TYPE = this.poNewItem.TYPE_OF_PACKAGE;
                        drPrintRow.PO_ID = this.poNewItem.PO_ID;
                        if (this.blnShipToId == false) {
                            drPrintRow.SHIPTO_ID = this.poNewItem.SHIPTO_ID;
                        }
                        else {
                            drPrintRow.SHIPTO_ID = this.poNewItem.SHIPTO_ID;
                        }
                        drPrintRow.TRACKING_NO = this.poNewItem.TRACKING_NBR;
                        drPrintRow.USER_ID = this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.UserID].toString();
                        drPrintRow.VENDOR = this.poNewItem.VENDOR_ID;
                        k = 1;
                        _a.label = 1;
                    case 1:
                        if (!(k <= intNoOfBoxses)) return [3 /*break*/, 4];
                        drPrintRow.NO_OF_BOXES = k + " of " + intNoOfBoxses;
                        lstPrintTbl.push(drPrintRow);
                        if (!(lstPrintTbl != null && lstPrintTbl.length > 0)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.recvPoNonPoService.printNiceLabel(pPrinterAddressOrName, pPrinterPort, pPrinterTye, pNiceLabelName, pNoOfPrints, pErrMsg, lstPrintTbl).
                                catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.statusCode = data.StatusCode;
                                switch (data.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        _this.spnrService.stop();
                                        _this.statusMsgs = [];
                                        _this.statusMsgs.push({ severity: 'success', summary: AtParConstants_1.AtParConstants.GrowlTitle_Success, detail: "Sent Sucessfully." });
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.statusMsgs = [];
                                        _this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.statusMsgs = [];
                                        _this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Custom: {
                                        _this.statusMsgs = [];
                                        _this.statusMsgs.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        _this.spnrService.stop();
                                        break;
                                    }
                                }
                            })];
                    case 2:
                        _a.sent();
                        if (this.statusCode != AtParStatusCodes_1.AtparStatusCodes.ATPAR_OK) {
                            this.statusMsgs = [];
                            this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: "Failed to Print Non Stock Header Label" });
                            return [2 /*return*/, this.statusCode];
                        }
                        _a.label = 3;
                    case 3:
                        k++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, this.statusCode];
                    case 5:
                        ex_64 = _a.sent();
                        this.clientErrorMsg(ex_64, "printNonPONiceLabel");
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.clearControls = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ex_65;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        this.poNewItem.TRACKING_NBR = "";
                        this.poNewItem.LOCATION = "";
                        this.poNewItem.LOCDESCR = "";
                        this.poNewItem.NO_OF_PACKAGES = "1";
                        this.poNewItem.VENDOR_ID = "";
                        this.poNewItem.DESCR = "";
                        this.poNewItem.SHIPTO_ID = "";
                        this.poNewItem.DEPT_ID = "";
                        this.poNewItem.PO_ID = "";
                        this.poNewItem.LINE_NBR = "";
                        this.poNewItem.CARRIER_ID = "";
                        this.poNewItem.TYPE_OF_PACKAGE = "";
                        this.poNewItem.COMMENTS = "";
                        this.poNewItem.DELIVER_TO = "";
                        this.generateTrackingId();
                        return [4 /*yield*/, this.populateShipToIdsDrpdwn(this.lstShipToIds)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.populateCarrierDropDown(this.poNewItem.CARRIER_ID)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        ex_65 = _a.sent();
                        this.clientErrorMsg(ex_65, "clearControls");
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.btnGoBack_Click = function () {
        this.statusMsgs = [];
        this.presentScreen = "PO";
        try {
            this.breadCrumbMenu.SUB_MENU_NAME = '';
            this.spnrService.emitChangeBreadCrumbEvt(JSON.stringify(this.breadCrumbMenu));
            this.page = true;
            if ((this.lstRecvSendPoLines != null && this.lstRecvSendPoLines.length > 0) || (this.lstRecvIutItems != null && this.lstRecvIutItems.length > 0)) {
                this.tbl = true;
            }
            this.nonPO = false;
        }
        catch (ex) {
            this.clientErrorMsg(ex, "btnGoBack_Click");
        }
    };
    PoNonPoReceiptsComponent.prototype.btnRecipient_Click = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ex_66;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.statusMsgs = [];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 5, , 6]);
                        this.lstRecipientsChck = [];
                        if (!(this.poNewItem.DELIVER_TO == "" || this.poNewItem.DELIVER_TO == undefined || this.poNewItem.DELIVER_TO == null)) return [3 /*break*/, 2];
                        this.statusMsgs = [];
                        this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Recipient is Mandatory" });
                        return [3 /*break*/, 4];
                    case 2:
                        this.page = false;
                        this.nonPO = false;
                        this.nonPOReceipts = true;
                        return [4 /*yield*/, this.getRecipients(this.poNewItem.DELIVER_TO)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        ex_66 = _a.sent();
                        this.clientErrorMsg(ex_66, "btnRecipient_Click");
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.getRecipients = function (recipient) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var ex_67;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.statusMsgs = [];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.recvPoNonPoService.getRecipients(recipient).catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.blnRecipients = false;
                                _this.spnrService.stop();
                                _this.statusMsgs = [];
                                switch (data.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        _this.lstRecipients = data.DataList;
                                        if (_this.lstRecipients.length > 0) {
                                            _this.blnRecipients = true;
                                        }
                                        if (_this.lstRecipients.length <= 0) {
                                            _this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: 'No Records were returned' });
                                        }
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.statusMsgs.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.statusMsgs.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Custom: {
                                        _this.statusMsgs.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        break;
                                    }
                                }
                            })];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        ex_67 = _a.sent();
                        this.clientErrorMsg(ex_67, "getRecipients");
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    PoNonPoReceiptsComponent.prototype.btnGoBackRecipient_Click = function () {
        this.statusMsgs = [];
        try {
            this.page = false;
            this.nonPO = true;
            this.nonPOReceipts = false;
            this.lstRecipientsChck = [];
        }
        catch (ex) {
            this.clientErrorMsg(ex, "btnGoBackRecipient_Click");
        }
    };
    PoNonPoReceiptsComponent.prototype.changeStatus = function (ven3) {
        this.statusMsgs = [];
        try {
            this.lstRecipientsChck = [];
            if (ven3 != null || ven3 != undefined) {
                var dd = ven3;
                this.lstRecipientsChck.push(ven3);
                return;
            }
            else {
                this.statusMsgs.push({
                    severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please Select the Recipient."
                });
                return;
            }
        }
        catch (ex) {
            this.clientErrorMsg(ex, "changeStatus");
        }
    };
    PoNonPoReceiptsComponent.prototype.btnRecipientAdd_Click = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.statusMsgs = [];
                try {
                    if (this.lstRecipientsChck == undefined || this.lstRecipientsChck == null || this.lstRecipientsChck.length == 0) {
                        this.statusMsgs.push({
                            severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please Select the Recipient."
                        });
                    }
                    else {
                        if (this.lstRecipientsChck != null && this.lstRecipientsChck.length > 0) {
                            this.lstCheckedRecipients = this.lstRecipientsChck;
                        }
                        if (this.lstCheckedRecipients != null && this.lstCheckedRecipients.length > 0) {
                            this.poNewItem.LOCATION = this.lstCheckedRecipients[0].LOCATION;
                            this.poNewItem.LOCDESCR = this.lstCheckedRecipients[0].LOC_DESCR;
                            this.poNewItem.DEPT_ID = this.lstCheckedRecipients[0].DEPT_ID;
                            this.poNewItem.DELIVER_TO = this.lstCheckedRecipients[0].RECIEPENTNAME;
                        }
                        this.lstCheckedRecipients = this.lstCheckedRecipients;
                        this.statusMsgs.push({
                            severity: 'success', summary: AtParConstants_1.AtParConstants.GrowlTitle_Success, detail: "Recipient Details Saved Successfully"
                        });
                        this.lstRecipientsChck = [];
                    }
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "btnRecipientAdd_Click");
                }
                return [2 /*return*/];
            });
        });
    };
    /**
    *
    * End NonPO
    */
    PoNonPoReceiptsComponent.prototype.clientErrorMsg = function (strExMsg, funName) {
        this.statusMsgs = [];
        this.atParConstant.catchClientError(this.statusMsgs, this.spnrService, strExMsg.toString(), funName, this.constructor.name);
    };
    PoNonPoReceiptsComponent.prototype.ngOnDestroy = function () {
        this.deviceTokenEntry = null;
        this.statusMsgs = null;
        this.lstShipToIds = null;
        this.lstOrgParms = null;
        this.lstProfileApp = null;
        this.lstUserApp = null;
        this.lstInventoryBunits = null;
        this.gblnASNPO = false;
        this.lstScreenApp = null;
        this.lstRecvIUTGetPo = null;
        this.arrlstIUTSearch = null;
        this.arrlstPOSearch = null;
        this.lstRecvPoItems = null;
        this.lstRecvSendPoHdrs = null;
        this.lstRecvIutPoItems = null;
        this.lstRecvSendPoLines = null;
        this.lstRecvIutItems = null;
        this.lstSetUpProPrinters = null;
        this.lstCarriersData = null;
        this.lstRecvAltUomData = null;
        this.lstReceivePoHeaderData = null;
        this.lstReceiveDetailsData = null;
        this.lstPrinterLabelRecvHeader = null;
        this.lstFinalLotSerial = null;
        this.lstRecvSendData = null;
        this.selecstedRow = null;
        this.lstRecvSearchPO = null;
        this.lstSeachItems = null;
        this.lstRecvIUTSearchPO = null;
        this.lstRecvSearchIuts = null;
        this.ddlBusinessUnits = null;
        this.ddlCarrier = null;
        this.grdDdlCarrier = null;
        this.ddlShipToId = null;
        this.ddlRecvUom = null;
        this.selectedBUnits = null;
        this.selectedDdlCarrier = null;
        this.selectedShipToId = null;
        this.selectedRecvUom = null;
        this.gstrLoader = null;
        this.hdnBunit = null;
        this.hdnPO = null;
        this.hdnIUT = null;
        this.hdnPoSearch = null;
        this.hdnIUTSearch = null;
        this.hdnConfirmNonPo = null;
        this.hdnConfirmPoDelete = null;
        this.hdnConfirmIUTDelete = null;
        this.txtShipId = null;
        this.txtPONumber = null;
        this.txtIUT = null;
        this.txtInvoice = null;
        this.txtPkgs = null;
        this.txtTrk = null;
        this.txtSchdExTrk = null;
        this.txtLading = null;
        this.lblReceiverId = null;
        this.lblBuyerId = null;
        this.lblPhoneValue = null;
        this.standardUOM = null;
        this.standardConversionRate = null;
        this.txtNoOfBoxes = null;
        this.lnkItemId = null;
        this.txtQty = null;
        this.ddlGridCarrier = null;
        this.txtLadg = null;
        this.lnkLineNbr = null;
        this.ERS_TYPE = null;
        this.concatinateTrkNoPoID = null;
        this.txtSerchItemId = null;
        this.txtItemId = null;
        this.txtVendorId = null;
        this.txtVendorName = null;
        this.hdnReqShiptoId = null;
        this.hdnIncludeASNPOs = null;
        this.gIUTTransactionID = null;
        this.gStrASNDownload = null;
        this.gStrReceiverId = null;
        this.gStrLotSerial = null;
        this.gTransactionID = null;
        this.gInvoiceMthdCode = null;
        this.gDropShipFlag = null;
        this.gStrDefaultInput = null;
        this.gStrEditShipToId = null;
        this.gStrNonPoItemsReceive = null;
        this.gStrUOMEditFlag = null;
        this.gStrReqdShipToId = null;
        this.gStrDisplayReceivedQty = null;
        this.gStrAllowIUTAccess = null;
        this.gASNReceiptStatus = null;
        this.gStrNonStockStore = null;
        this.gStrSearchType = null;
        this.gStrAltUOMDisplay = null;
        this.gStrAllowExcessQty = null;
        this.gStrZeroReceiptWarn = null;
        this.gDefaultDateRange = null;
        this.gDisplayComments = null;
        this.gStrDefPrinter = null;
        this.gStrSelPrinter = null;
        this.gStrPrintPoIDComments = null;
        this.gConcatinateTrkNoPoID = null;
        this.gStrRecDelprintoption = null;
        this.gdonotDefaulttrackingNumber = null;
        this.gPrintStockHeader = null;
        this.gRecv_StandardUOM = null;
        this.gRecv_PoUOM = null;
        this.gPOUOM = null;
        this.gPOUOMConversionRate = null;
        this.gSTime = null;
        this.gStrInvoice = null;
        this.gstrPrevComments = null;
        this.gstrlnkitemid = null;
        this.gstrlnklineNbr = null;
        this.lstBunits = null;
        this.gblnCancel = null;
        this.gblnLotSerialFlg = null;
        this.gblnScheduleFlg = null;
        this.nonStockCount = null;
        this.stockCount = null;
        this.recordsPerPageSize = null;
        this.intAppId = null;
        this.statusCode = null;
        this.statusType = null;
        this.shipToIdCount = null;
        this.blnShipToId = null;
        this.chkIncludeAllPOLines = null;
        this.btnPntrHeaderVisible = null;
        this.btnPntrDetailsVisible = null;
        this.btnPntrLotSerialVisible = null;
        this.txtIutIsEditMode = null;
        this.blnGrdRecvPoItems = null;
        this.blnGrdRecvIutItems = null;
        this.btnIUTSearch = null;
        this.btnNonPo = null;
        this.btnPoSearch = null;
        this.btnGetEnableDisable = null;
        this.btnPoSearchEnableDisable = null;
        this.btnIUTSearchEnableDisable = null;
        this.btnNonPoEnableDisable = null;
        this.recvGrdCarrierEnable = null;
        this.ddlRecvUomEnable = null;
        this.btnLotSerialDisable = null;
        this.btnPntrHeaderDisable = null;
        this.btnPntrDetailsDisable = null;
        this.blnTxtExtTrk = null;
        this.blnLblExtTrk = null;
        this.blnImgCountAll = null;
        this.blnImgResetAll = null;
        this.blnPrinted = null;
        this.txtLadingIsEditMode = null;
        this.txtExtTrkIsEditMode = null;
        this.grdRecvLinesRbBtnCheck = null;
        this.grdRecvIutItemsRbBtnCheck = null;
        this.txtPkgsIsReadonly = null;
        this.rbtnDueDate = null;
        this.rbtnPODate = null;
    };
    return PoNonPoReceiptsComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], PoNonPoReceiptsComponent.prototype, "appId", void 0);
__decorate([
    core_1.ViewChild(datatable_1.DataTable),
    __metadata("design:type", datatable_1.DataTable)
], PoNonPoReceiptsComponent.prototype, "dataTableComponent", void 0);
PoNonPoReceiptsComponent = __decorate([
    core_1.Component({
        template: __webpack_require__(2108),
        providers: [datatableservice_1.datatableservice, atpar_common_service_1.AtParCommonService, recv_po_nonpo_receipts_service_1.RecvPoNonPoReceiptsService, api_1.ConfirmationService]
    }),
    __param(5, core_1.Inject(platform_browser_1.DOCUMENT)),
    __metadata("design:paramtypes", [datatableservice_1.datatableservice, event_spinner_service_1.SpinnerService,
        HttpService_1.HttpService,
        AtParConstants_1.AtParConstants,
        atpar_common_service_1.AtParCommonService, Object, recv_po_nonpo_receipts_service_1.RecvPoNonPoReceiptsService,
        api_1.ConfirmationService])
], PoNonPoReceiptsComponent);
exports.PoNonPoReceiptsComponent = PoNonPoReceiptsComponent;


/***/ }),

/***/ 1615:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var AtParEnums_1 = __webpack_require__(14);
var ReleaseOrdersComponent = (function () {
    function ReleaseOrdersComponent() {
        this.recvReleaseAppId = AtParEnums_1.EnumApps.Receiving;
    }
    return ReleaseOrdersComponent;
}());
ReleaseOrdersComponent = __decorate([
    core_1.Component({
        template: __webpack_require__(2109),
    })
], ReleaseOrdersComponent);
exports.ReleaseOrdersComponent = ReleaseOrdersComponent;


/***/ }),

/***/ 1616:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var datatableservice_1 = __webpack_require__(131);
var VM_RECV_SETUPSHIPTO_ID_ALLOCATION_1 = __webpack_require__(1764);
var atpar_common_service_1 = __webpack_require__(43);
var recv_setup_shiptoids_service_1 = __webpack_require__(1846);
var event_spinner_service_1 = __webpack_require__(24);
var HttpService_1 = __webpack_require__(12);
var AtParEnums_1 = __webpack_require__(14);
var AtParConstants_1 = __webpack_require__(31);
var datatable_1 = __webpack_require__(71);
var routepath_1 = __webpack_require__(70);
var platform_browser_1 = __webpack_require__(58);
var SetupShipToIdsComponent = (function () {
    function SetupShipToIdsComponent(dataservice, httpService, spinnerService, commonService, setupShpIdsServices, document, atParConstant) {
        this.dataservice = dataservice;
        this.httpService = httpService;
        this.spinnerService = spinnerService;
        this.commonService = commonService;
        this.setupShpIdsServices = setupShpIdsServices;
        this.document = document;
        this.atParConstant = atParConstant;
        this.growlMessage = [];
        this.deviceTokenEntry = [];
        this.statusType = "";
        this.pop = false;
        this.page = true;
        this.form = false;
        this.editform = false;
        this.lstBusinessData = [];
        this.ddlBusinessData = [];
        this.selectedOrgID = '';
        this.disableAdd = false;
        this.disableUpdate = false;
        this._strStatus = "";
        this.status = false;
        this.ShipToID = '';
        this.ShipToName = '';
        this.selectedStatus = false;
        this.strShipToID = "";
        this.strShipToName = "";
        this.SETID = "";
        this.SHIPTO_ID = "";
        this.SHIPTO_NAME = "";
        this.ADDRESS1 = "";
        this.CITY = "";
        this.STATE = "";
        this.ZIP = "";
        this.PHONE = "";
        this.ATTENTION_TO = "";
        this.COMMENT = "";
        this.editShipToIDDatas = "";
        this.editOrgID = '';
        this.OrgIDStatus = 1;
        this.breadCrumbMenu = new routepath_1.Menus();
        this.newItem = new VM_RECV_SETUPSHIPTO_ID_ALLOCATION_1.VM_RECV_SETUPSHIPTO_ID_ALLOCATION();
    }
    SetupShipToIdsComponent.prototype.edit = function (ven) {
        try {
            this.editform = true;
            this.form = false;
            this.page = false;
            this.pop = false;
        }
        catch (ex) {
            this.clientErrorMsg(ex, "edit");
        }
    };
    SetupShipToIdsComponent.prototype.btnBack_Click = function () {
        try {
            this.growlMessage = [];
            this.breadCrumbMenu.SUB_MENU_NAME = '';
            this.spinnerService.emitChangeBreadCrumbEvt(JSON.stringify(this.breadCrumbMenu));
            this.selectedOrgID = "Select Org";
            this.ShipToID = "";
            this.ShipToName = "";
            this.form = false;
            this.page = true;
            this.pop = false;
            this.editform = false;
            this.spinnerService.stop();
        }
        catch (ex) {
            this.clientErrorMsg(ex, "btnBack_Click");
        }
    };
    SetupShipToIdsComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    this.deviceTokenEntry = JSON.parse(localStorage.getItem("DeviceTokenEntry"));
                    this.startIndex = +sessionStorage.getItem("Recordsstartindex");
                    this.EndIndex = +sessionStorage.getItem("RecordsEndindex");
                    this.recordsPerPageSize = +this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.RecordsPerPage];
                    this.addStatusTypes();
                    this.populateBusinessUnits();
                    this.mainlstGridData = new Array();
                }
                catch (ex) {
                    this.clientErrorMsg(ex, "ngOnInit");
                }
                return [2 /*return*/];
            });
        });
    };
    SetupShipToIdsComponent.prototype.addStatusTypes = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.ddlStatusType = [];
                this.ddlStatusType.push({ label: 'All', value: "" });
                this.ddlStatusType.push({ label: 'Active', value: true });
                this.ddlStatusType.push({ label: 'InActive', value: false });
                return [2 /*return*/];
            });
        });
    };
    SetupShipToIdsComponent.prototype.populateBusinessUnits = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var isOrgBUnitsExist_1, ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        isOrgBUnitsExist_1 = false;
                        this.spinnerService.start();
                        return [4 /*yield*/, this.commonService.getBusinessUnits(this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.UserID], AtParEnums_1.BusinessType.Purchasing.toString())
                                .catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.spinnerService.stop();
                                _this.ddlBusinessData = [];
                                _this.ddlBusinessData.push({ label: "Select Org", value: "Select Org" });
                                switch (data.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        _this.lstBusinessData = data.DataList;
                                        if (_this.lstBusinessData.length > 0) {
                                            for (var i = 0; i < _this.lstBusinessData.length; i++) {
                                                _this.ddlBusinessData.push({ label: _this.lstBusinessData[i].toString(), value: _this.lstBusinessData[i].toString() });
                                            }
                                        }
                                        _this.selectedOrgID = _this.ddlBusinessData[0].value;
                                        isOrgBUnitsExist_1 = true;
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        isOrgBUnitsExist_1 = false;
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        isOrgBUnitsExist_1 = false;
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Custom: {
                                        _this.growlMessage.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        isOrgBUnitsExist_1 = false;
                                        break;
                                    }
                                }
                            })];
                    case 1:
                        _a.sent();
                        this.spinnerService.stop();
                        return [3 /*break*/, 3];
                    case 2:
                        ex_1 = _a.sent();
                        this.clientErrorMsg(ex_1, "populateBusinessUnits");
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    SetupShipToIdsComponent.prototype.getShiptoIdDetails = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var isOrgBUnitsExist_2, ex_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        this.ddlBusinessData = [];
                        isOrgBUnitsExist_2 = false;
                        this.growlMessage = [];
                        this.spinnerService.start();
                        return [4 /*yield*/, this.commonService.getBusinessUnits(this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.UserID], AtParEnums_1.BusinessType.Purchasing.toString())
                                .catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                _this.spinnerService.stop();
                                switch (data.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        _this.lstBusinessData = data.DataList;
                                        if (_this.lstBusinessData.length > 0) {
                                            for (var i = 0; i < _this.lstBusinessData.length; i++) {
                                                _this.ddlBusinessData.push({ label: _this.lstBusinessData[i], value: _this.lstBusinessData[i] });
                                            }
                                        }
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        isOrgBUnitsExist_2 = false;
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        isOrgBUnitsExist_2 = false;
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Custom: {
                                        _this.growlMessage.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        isOrgBUnitsExist_2 = false;
                                        break;
                                    }
                                }
                            })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.getShipToIDS()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        ex_2 = _a.sent();
                        this.clientErrorMsg(ex_2, "getShiptoIdDetails");
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    SetupShipToIdsComponent.prototype.btnAddShipToID_Click = function () {
        this.breadCrumbMenu.SUB_MENU_NAME = 'Add ShipTo ID';
        this.spinnerService.emitChangeBreadCrumbEvt(JSON.stringify(this.breadCrumbMenu));
        this.growlMessage = [];
        this.selectedOrgID = "";
        this.form = true;
        this.editform = false;
        this.page = false;
        this.pop = false;
        this.disableAdd = true;
        try {
            this.spinnerService.start();
            this.populateBusinessUnits();
            this.spinnerService.stop();
            this.newItem = new VM_RECV_SETUPSHIPTO_ID_ALLOCATION_1.VM_RECV_SETUPSHIPTO_ID_ALLOCATION;
            this.addselectedOrgID = "";
        }
        catch (ex) {
            this.clientErrorMsg(ex, "btnAddShipToID_Click");
        }
    };
    SetupShipToIdsComponent.prototype.getShipToIDS = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var ex_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.mainlstGridData = [];
                        this.spinnerService.start();
                        if (this.ShipToID != "" || this.newItem.ORG_ID == undefined || this.newItem.ORG_ID == null) {
                            this.strShipToID = this.ShipToID;
                        }
                        if (this.ShipToName != "" || this.newItem.ORG_ID == undefined || this.newItem.ORG_ID == null) {
                            this.strShipToName = this.ShipToName;
                        }
                        return [4 /*yield*/, this.setupShpIdsServices.getShipToIDs(this.selectedOrgID, this.ShipToID, this.ShipToName, "", this.lstBusinessData, this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.UserID])
                                .catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                switch (data.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        if (data.DataList.length > 0) {
                                            _this.lstShipToIDAllc = data.DataList;
                                            for (var i = 0; i < _this.lstShipToIDAllc.length; i++) {
                                                if (_this.lstShipToIDAllc[i].ACTIVESTATUS == "Active") {
                                                    _this.lstShipToIDAllc[i].CURRENTSTATUS = false;
                                                }
                                                else {
                                                    _this.lstShipToIDAllc[i].CURRENTSTATUS = true;
                                                }
                                                _this.mainlstGridData.push(_this.lstShipToIDAllc[i]);
                                            }
                                            _this.pop = true;
                                            break;
                                        }
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        _this.pop = false;
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        _this.pop = false;
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Custom: {
                                        _this.growlMessage.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        _this.pop = false;
                                        break;
                                    }
                                }
                            })];
                    case 1:
                        _a.sent();
                        this.spinnerService.stop();
                        return [3 /*break*/, 3];
                    case 2:
                        ex_3 = _a.sent();
                        this.clientErrorMsg(ex_3, "getShipToIDS");
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    SetupShipToIdsComponent.prototype.btnGo_Click = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ex_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 5, , 6]);
                        this.pop = false;
                        this.statusType = "";
                        return [4 /*yield*/, this.addStatusTypes()];
                    case 1:
                        _a.sent();
                        if (this.pop) {
                            this.dataTableComponent.reset();
                        }
                        this.growlMessage = [];
                        if (!(this.selectedOrgID == "Select Org")) return [3 /*break*/, 2];
                        this.pop = false;
                        this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: "Please Select Org ID" });
                        return [2 /*return*/];
                    case 2: return [4 /*yield*/, this.getShipToIDS()];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        ex_4 = _a.sent();
                        this.clientErrorMsg(ex_4, "btnGo_Click");
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    SetupShipToIdsComponent.prototype.ddlOrgIdChanged = function () {
        try {
            if (this.form) {
                if (this.addselectedOrgID == "Select Org" || this.addselectedOrgID == "" || this.addselectedOrgID == undefined || this.addselectedOrgID == null) {
                    this.OrgIDStatus = 1;
                }
                else {
                    this.OrgIDStatus = 0;
                }
            }
            if (this.editform) {
                this.ShipToIDStstaus = 0;
                if ((this.editShipToIDDatas == "Select Org" || this.editShipToIDDatas == "" || this.editShipToIDDatas == undefined || this.editShipToIDDatas == null)) {
                    this.OrgIDStatus = 1;
                }
                else {
                    this.OrgIDStatus = 0;
                }
            }
            if (this.ShipToIDStstaus == 0 && this.OrgIDStatus == 0 && (this.newItem.SHIPTO_ID != "" || this.newItem.SHIPTO_ID != undefined || this.newItem.SHIPTO_ID != null)) {
                if ((this.ShipToNameStatus == 0 || this.ShipToNameStatus == undefined) &&
                    (this.Address1Status == 0 || this.Address1Status == undefined) &&
                    (this.CityStatus == 0 || this.CityStatus == undefined) &&
                    (this.StateStatus == 0 || this.StateStatus == undefined) &&
                    (this.ZipStatus == 0 || this.ZipStatus == undefined) &&
                    (this.tPhoneStatus == 0 || this.tPhoneStatus == undefined) &&
                    (this.AttentionToStatus == 0 || this.AttentionToStatus == undefined) &&
                    (this.CommentStatus == 0 || this.CommentStatus == undefined)) {
                    this.disableAdd = false;
                    this.disableUpdate = false;
                }
                else {
                    this.disableAdd = true;
                    this.disableUpdate = true;
                }
            }
            else {
                this.disableAdd = true;
                this.disableUpdate = true;
            }
        }
        catch (ex) {
            this.clientErrorMsg(ex, "ddlOrgIdChanged");
        }
    };
    SetupShipToIdsComponent.prototype.btnSave_Click = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var ex_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.lstShipToIDs = [];
                        this.newItem.SHIPTO_NAME = this.newItem.DESCR;
                        this.newItem.ORG_ID = this.addselectedOrgID;
                        this.newItem.STATUS = true;
                        this.lstShipToIDs.push(this.newItem);
                        this.growlMessage = [];
                        this.spinnerService.start();
                        return [4 /*yield*/, this.setupShpIdsServices.insertShipToIDs(this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.UserID], this.lstShipToIDs)
                                .catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                switch (data.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        _this.statusMesssage = AtParConstants_1.AtParConstants.Added_Msg.replace("1%", "ShipTo ID").replace("2%", _this.newItem.SHIPTO_ID);
                                        _this.growlMessage.push({ severity: 'success', summary: AtParConstants_1.AtParConstants.GrowlTitle_Success, detail: _this.statusMesssage });
                                        _this.OrgIDStatus = 1;
                                        _this.form = true;
                                        _this.page = false;
                                        document.getElementById("ShipToId").focus();
                                        _this.disableAdd = true;
                                        _this.newItem = new VM_RECV_SETUPSHIPTO_ID_ALLOCATION_1.VM_RECV_SETUPSHIPTO_ID_ALLOCATION();
                                        _this.addselectedOrgID = "";
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Custom: {
                                        _this.growlMessage.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        break;
                                    }
                                }
                                _this.atParConstant.scrollToTop();
                            })];
                    case 1:
                        _a.sent();
                        this.spinnerService.stop();
                        return [3 /*break*/, 3];
                    case 2:
                        ex_5 = _a.sent();
                        this.clientErrorMsg(ex_5, "btnSave_Click");
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    SetupShipToIdsComponent.prototype.btnUpdate_Click = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var i, ex_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.lstShipToIDs = [];
                        if (this.editOrgID != this.editShipToIDDatas) {
                            this.NewOrgId = '*' + this.editShipToIDDatas;
                            this.newItem.ORG_ID = this.editOrgID;
                        }
                        else {
                            this.NewOrgId = this.editShipToIDDatas;
                            this.newItem.ORG_ID = this.editShipToIDDatas;
                        }
                        this.newItem.SHIPTO_NAME = this.newItem.DESCR;
                        this.lstShipToIDs.push(this.newItem);
                        for (i = 0; i < this.lstShipToIDs.length; i++) {
                            if (this.lstShipToIDs[i].STATUS == false) {
                                this.lstShipToIDs[i].STATUS = true;
                            }
                        }
                        this.growlMessage = [];
                        this.spinnerService.start();
                        return [4 /*yield*/, this.setupShpIdsServices.updateShiptoIDs(this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.UserID], this.lstShipToIDs, this.NewOrgId)
                                .catch(this.httpService.handleError).then(function (res) {
                                var data = res.json();
                                if (data.StatType != AtParEnums_1.StatusType.Success) {
                                    _this.editShipToIDDatas = _this.editOrgID;
                                }
                                switch (data.StatType) {
                                    case AtParEnums_1.StatusType.Success: {
                                        _this.statusMesssage = AtParConstants_1.AtParConstants.Updated_Msg.replace("1%", "ShipTo ID").replace("2%", _this.newItem.SHIPTO_ID);
                                        _this.growlMessage.push({ severity: 'success', summary: AtParConstants_1.AtParConstants.GrowlTitle_Success, detail: _this.statusMesssage });
                                        _this.editform = true;
                                        _this.page = false;
                                        _this.form = false;
                                        document.getElementById("txtddlOrgID").focus();
                                        _this.OrgIDStatus = 1;
                                        _this.ShipToIDStstaus = 1;
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Warn: {
                                        _this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Error: {
                                        _this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                        break;
                                    }
                                    case AtParEnums_1.StatusType.Custom: {
                                        _this.growlMessage.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                        break;
                                    }
                                }
                                _this.atParConstant.scrollToTop();
                            })];
                    case 1:
                        _a.sent();
                        this.spinnerService.stop();
                        return [3 /*break*/, 3];
                    case 2:
                        ex_6 = _a.sent();
                        this.clientErrorMsg(ex_6, "btnUpdate_Click");
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    SetupShipToIdsComponent.prototype.updateShiptoIDStatus = function (status) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var prStatus, statuscode_1, exMsg_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        prStatus = status.STATUS;
                        this.growlMessage = [];
                        this.spinnerService.start;
                        return [4 /*yield*/, this.setupShpIdsServices.updateShipToIDStatus(this.deviceTokenEntry[AtParEnums_1.TokenEntry_Enum.UserID], status.ORG_ID, status.SHIPTO_ID, status.CURRENTSTATUS)
                                .catch(this.httpService.handleError).then(function (res) { return __awaiter(_this, void 0, void 0, function () {
                                var data, filterData, matchedrecord, x, lstVendorDetails;
                                return __generator(this, function (_a) {
                                    data = res.json();
                                    statuscode_1 = data.StatusCode;
                                    switch (data.StatType) {
                                        case AtParEnums_1.StatusType.Success: {
                                            this.growlMessage = [];
                                            this.statusMesssage = AtParConstants_1.AtParConstants.Updated_Msg.replace("1%", "ShipTo ID").replace("2%", status.SHIPTO_ID + ' Status');
                                            this.growlMessage.push({ severity: 'success', summary: AtParConstants_1.AtParConstants.GrowlTitle_Success, detail: this.statusMesssage });
                                            this.editform = false;
                                            this.page = true;
                                            this.form = false;
                                            filterData = [];
                                            this.lstShipToIDAllc = [];
                                            matchedrecord = this.mainlstGridData.filter(function (x) { return x.SHIPTO_ID == status.SHIPTO_ID; });
                                            matchedrecord[0].CURRENTSTATUS = status.CURRENTSTATUS;
                                            if (this.statusType.toString() == "false") {
                                                filterData = this.mainlstGridData.filter(function (x) { return x.CURRENTSTATUS == false; });
                                            }
                                            else if (this.statusType.toString() == "true") {
                                                filterData = this.mainlstGridData.filter(function (x) { return x.CURRENTSTATUS == true; });
                                            }
                                            else {
                                                filterData = this.mainlstGridData;
                                            }
                                            if (filterData != null) {
                                                for (x = 0; x < filterData.length; x++) {
                                                    lstVendorDetails = new VM_RECV_SETUPSHIPTO_ID_ALLOCATION_1.VM_RECV_SETUPSHIPTO_ID_ALLOCATION();
                                                    lstVendorDetails.ORG_ID = filterData[x].ORG_ID;
                                                    lstVendorDetails.SHIPTO_ID = filterData[x].SHIPTO_ID;
                                                    lstVendorDetails.SHIPTO_NAME = filterData[x].SHIPTO_NAME;
                                                    lstVendorDetails.ADDRESS_1 = filterData[x].ADDRESS_1;
                                                    lstVendorDetails.CITY = filterData[x].CITY;
                                                    lstVendorDetails.STATE = filterData[x].STATE;
                                                    lstVendorDetails.ZIP = filterData[x].ZIP;
                                                    lstVendorDetails.PHONE_NO = filterData[x].PHONE_NO;
                                                    lstVendorDetails.STATUS = filterData[x].STATUS;
                                                    lstVendorDetails.CITY = filterData[x].CITY;
                                                    lstVendorDetails.ATTENTION_TO = filterData[x].ATTENTION_TO;
                                                    lstVendorDetails.COMMENTS = filterData[x].COMMENTS;
                                                    lstVendorDetails.CHK_VALUE = filterData[x].CHK_VALUE;
                                                    lstVendorDetails.CHK_ALLOCATED = filterData[x].CHK_ALLOCATED;
                                                    lstVendorDetails.ROWINDEX = filterData[x].ROWINDEX;
                                                    lstVendorDetails.DESCR = filterData[x].DESCR;
                                                    lstVendorDetails.CURRENTSTATUS = filterData[x].CURRENTSTATUS;
                                                    //   lstVendorDetails.ACTIVESTATUS = filterData[x].ACTIVESTATUS;
                                                    lstVendorDetails.EFF_STATUS = filterData[x].EFF_STATUS;
                                                    lstVendorDetails.USER_ID = filterData[x].USER_ID;
                                                    lstVendorDetails.SETID = filterData[x].SETID;
                                                    lstVendorDetails.checkvalue = filterData[x].checkvalue;
                                                    lstVendorDetails.LAST_UPDATE_USERID = filterData[x].LAST_UPDATE_USERID;
                                                    this.lstShipToIDAllc.push(lstVendorDetails);
                                                }
                                            }
                                            break;
                                        }
                                        case AtParEnums_1.StatusType.Warn: {
                                            if (data.StatusCode == "1142311") {
                                                status.CURRENTSTATUS = !status.CURRENTSTATUS;
                                            }
                                            this.growlMessage.push({ severity: 'warn', summary: AtParConstants_1.AtParConstants.GrowlTitle_Warn, detail: data.StatusMessage });
                                            break;
                                        }
                                        case AtParEnums_1.StatusType.Error: {
                                            this.growlMessage.push({ severity: 'error', summary: AtParConstants_1.AtParConstants.GrowlTitle_Error, detail: data.StatusMessage });
                                            break;
                                        }
                                        case AtParEnums_1.StatusType.Custom: {
                                            this.growlMessage.push({ severity: 'info', summary: AtParConstants_1.AtParConstants.GrowlTitle_Info, detail: data.StatusMessage });
                                            break;
                                        }
                                    }
                                    return [2 /*return*/];
                                });
                            }); })];
                    case 1:
                        _a.sent();
                        this.spinnerService.stop();
                        return [2 /*return*/, statuscode_1];
                    case 2:
                        exMsg_1 = _a.sent();
                        this.clientErrorMsg(exMsg_1, "updateShiptoIDStatus");
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    SetupShipToIdsComponent.prototype.statusShipToIDUpdate = function (setupshipid) {
        return __awaiter(this, void 0, void 0, function () {
            var exMsg_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.growlMessage = [];
                        this.spinnerService.start();
                        return [4 /*yield*/, this.updateShiptoIDStatus(setupshipid)];
                    case 1:
                        _a.sent();
                        this.spinnerService.stop();
                        return [3 /*break*/, 3];
                    case 2:
                        exMsg_2 = _a.sent();
                        this.clientErrorMsg(exMsg_2, "statusShipToIDUpdate");
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    SetupShipToIdsComponent.prototype.dataFilter = function (evtdata, filed, filterMatchMode) {
        return __awaiter(this, void 0, void 0, function () {
            var filterData, x, lstVendorDetails;
            return __generator(this, function (_a) {
                this.growlMessage = [];
                this.lstShipToIDAllc.length = 0;
                if (this.statusType.toString() == "true") {
                    filterData = this.mainlstGridData.filter(function (x) { return x.CURRENTSTATUS == true; });
                }
                else if (this.statusType.toString() == "false") {
                    filterData = this.mainlstGridData.filter(function (x) { return x.CURRENTSTATUS == false; });
                }
                else {
                    filterData = this.mainlstGridData;
                }
                if (filterData != null) {
                    for (x = 0; x < filterData.length; x++) {
                        lstVendorDetails = new VM_RECV_SETUPSHIPTO_ID_ALLOCATION_1.VM_RECV_SETUPSHIPTO_ID_ALLOCATION();
                        lstVendorDetails.ORG_ID = filterData[x].ORG_ID;
                        lstVendorDetails.SHIPTO_ID = filterData[x].SHIPTO_ID;
                        lstVendorDetails.SHIPTO_NAME = filterData[x].SHIPTO_NAME;
                        lstVendorDetails.ADDRESS_1 = filterData[x].ADDRESS_1;
                        lstVendorDetails.CITY = filterData[x].CITY;
                        lstVendorDetails.STATE = filterData[x].STATE;
                        lstVendorDetails.ZIP = filterData[x].ZIP;
                        lstVendorDetails.PHONE_NO = filterData[x].PHONE_NO;
                        lstVendorDetails.STATUS = filterData[x].BILL_ONLY_EMAIL;
                        lstVendorDetails.ATTENTION_TO = filterData[x].ATTENTION_TO;
                        lstVendorDetails.COMMENTS = filterData[x].COMMENTS;
                        lstVendorDetails.CHK_VALUE = filterData[x].CHK_VALUE;
                        lstVendorDetails.CHK_ALLOCATED = filterData[x].CHK_ALLOCATED;
                        lstVendorDetails.ROWINDEX = filterData[x].ROWINDEX;
                        lstVendorDetails.DESCR = filterData[x].DESCR;
                        lstVendorDetails.CURRENTSTATUS = filterData[x].CURRENTSTATUS;
                        // lstVendorDetails.ACTIVESTATUS = filterData[x].ACTIVESTATUS;
                        lstVendorDetails.EFF_STATUS = filterData[x].EFF_STATUS;
                        lstVendorDetails.USER_ID = filterData[x].USER_ID;
                        lstVendorDetails.SETID = filterData[x].SETID;
                        lstVendorDetails.checkvalue = filterData[x].checkvalue;
                        lstVendorDetails.LAST_UPDATE_USERID = filterData[x].LAST_UPDATE_USERID;
                        this.lstShipToIDAllc.push(lstVendorDetails);
                    }
                }
                return [2 /*return*/];
            });
        });
    };
    SetupShipToIdsComponent.prototype.bindModelDataChange = function (event) {
        try {
            if ("ShipToId" == event.TextBoxID.toString()) {
                this.ShipToIDStstaus = event.validationrules.filter(function (x) { return x.status == false; }).length;
            }
            if ("ShipToName" == event.TextBoxID.toString()) {
                this.ShipToNameStatus = event.validationrules.filter(function (x) { return x.status == false; }).length;
            }
            if ("Address1" == event.TextBoxID.toString()) {
                this.Address1Status = event.validationrules.filter(function (x) { return x.status == false; }).length;
            }
            if ("City" == event.TextBoxID.toString()) {
                this.CityStatus = event.validationrules.filter(function (x) { return x.status == false; }).length;
            }
            if ("State" == event.TextBoxID.toString()) {
                this.StateStatus = event.validationrules.filter(function (x) { return x.status == false; }).length;
            }
            if ("Zip" == event.TextBoxID.toString()) {
                this.ZipStatus = event.validationrules.filter(function (x) { return x.status == false; }).length;
            }
            if ("Phone" == event.TextBoxID.toString()) {
                this.tPhoneStatus = event.validationrules.filter(function (x) { return x.status == false; }).length;
            }
            if ("AttentionTo" == event.TextBoxID.toString()) {
                this.AttentionToStatus = event.validationrules.filter(function (x) { return x.status == false; }).length;
            }
            if ("Comment" == event.TextBoxID.toString()) {
                this.CommentStatus = event.validationrules.filter(function (x) { return x.status == false; }).length;
            }
            if (this.editform) {
                this.ShipToIDStstaus = 0;
                this.OrgIDStatus = 0;
            }
            if (this.ShipToIDStstaus == 0 && this.OrgIDStatus == 0) {
                if ((this.ShipToNameStatus == 0 || this.ShipToNameStatus == undefined) &&
                    (this.Address1Status == 0 || this.Address1Status == undefined) &&
                    (this.CityStatus == 0 || this.CityStatus == undefined) &&
                    (this.StateStatus == 0 || this.StateStatus == undefined) &&
                    (this.ZipStatus == 0 || this.ZipStatus == undefined) &&
                    (this.tPhoneStatus == 0 || this.tPhoneStatus == undefined) &&
                    (this.AttentionToStatus == 0 || this.AttentionToStatus == undefined) &&
                    (this.CommentStatus == 0 || this.CommentStatus == undefined)) {
                    this.disableAdd = false;
                    this.disableUpdate = false;
                }
                else {
                    this.disableAdd = true;
                    this.disableUpdate = true;
                }
            }
            else {
                this.disableAdd = true;
                this.disableUpdate = true;
            }
        }
        catch (exMsg) {
            this.clientErrorMsg(exMsg, "bindModelDataChange");
        }
    };
    SetupShipToIdsComponent.prototype.editShipToIDData = function (ven) {
        try {
            this.breadCrumbMenu.SUB_MENU_NAME = 'Edit ShipTo ID';
            this.spinnerService.emitChangeBreadCrumbEvt(JSON.stringify(this.breadCrumbMenu));
            this.growlMessage = [];
            this.newItem = ven;
            this.editform = true;
            this.editShipToIDDatas = ven.SETID;
            this.editOrgID = ven.SETID;
            this.pop = false;
            this.page = false;
            this.form = false;
            this.disableUpdate = false;
        }
        catch (exMsg) {
            this.clientErrorMsg(exMsg, "editShipToIDData");
        }
    };
    SetupShipToIdsComponent.prototype.clientErrorMsg = function (strExMsg, funName) {
        this.growlMessage = [];
        this.atParConstant.catchClientError(this.growlMessage, this.spinnerService, strExMsg.toString(), funName, this.constructor.name);
    };
    SetupShipToIdsComponent.prototype.ngOnDestroy = function () {
        this.deviceTokenEntry = null;
        this.growlMessage = null;
        this.recordsPerPageSize = null;
        this.ddlBusinessData = null;
        this.ddlStatusType = null;
        this.newItem = null;
        this.lstShipToIDAllc = null;
        this.lstBusinessData = null;
        this.spinnerService = null;
    };
    return SetupShipToIdsComponent;
}());
__decorate([
    core_1.ViewChild(datatable_1.DataTable),
    __metadata("design:type", datatable_1.DataTable)
], SetupShipToIdsComponent.prototype, "dataTableComponent", void 0);
SetupShipToIdsComponent = __decorate([
    core_1.Component({
        template: __webpack_require__(2110),
        providers: [datatableservice_1.datatableservice, atpar_common_service_1.AtParCommonService, recv_setup_shiptoids_service_1.SetupShipToIDsServices, HttpService_1.HttpService, AtParConstants_1.AtParConstants]
    }),
    __param(5, core_1.Inject(platform_browser_1.DOCUMENT)),
    __metadata("design:paramtypes", [datatableservice_1.datatableservice,
        HttpService_1.HttpService,
        event_spinner_service_1.SpinnerService,
        atpar_common_service_1.AtParCommonService,
        recv_setup_shiptoids_service_1.SetupShipToIDsServices, Object, AtParConstants_1.AtParConstants])
], SetupShipToIdsComponent);
exports.SetupShipToIdsComponent = SetupShipToIdsComponent;


/***/ }),

/***/ 1617:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var AtParEnums_1 = __webpack_require__(14);
var UserParametersComponent = (function () {
    function UserParametersComponent() {
        this.recvAppId = AtParEnums_1.EnumApps.Receiving;
    }
    return UserParametersComponent;
}());
UserParametersComponent = __decorate([
    core_1.Component({
        template: __webpack_require__(2111)
    })
], UserParametersComponent);
exports.UserParametersComponent = UserParametersComponent;


/***/ }),

/***/ 1618:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var ReceivingComponent = (function () {
    function ReceivingComponent() {
    }
    return ReceivingComponent;
}());
ReceivingComponent = __decorate([
    core_1.Component({
        template: __webpack_require__(2112)
    })
], ReceivingComponent);
exports.ReceivingComponent = ReceivingComponent;


/***/ }),

/***/ 1738:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MT_RECV_MANAGE_CARRIERS = (function () {
    function MT_RECV_MANAGE_CARRIERS() {
    }
    return MT_RECV_MANAGE_CARRIERS;
}());
exports.MT_RECV_MANAGE_CARRIERS = MT_RECV_MANAGE_CARRIERS;


/***/ }),

/***/ 1739:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var VM_RECV_SENDNONPOHEADER = (function () {
    function VM_RECV_SENDNONPOHEADER() {
    }
    return VM_RECV_SENDNONPOHEADER;
}());
exports.VM_RECV_SENDNONPOHEADER = VM_RECV_SENDNONPOHEADER;


/***/ }),

/***/ 1751:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var VM_IUT_SEARCHHEADER = (function () {
    function VM_IUT_SEARCHHEADER() {
        this.RBFlAG = false;
    }
    return VM_IUT_SEARCHHEADER;
}());
exports.VM_IUT_SEARCHHEADER = VM_IUT_SEARCHHEADER;


/***/ }),

/***/ 1752:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var VM_IUT_SENDHEADER = (function () {
    function VM_IUT_SENDHEADER() {
    }
    return VM_IUT_SENDHEADER;
}());
exports.VM_IUT_SENDHEADER = VM_IUT_SENDHEADER;


/***/ }),

/***/ 1763:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var VM_RECV_LOTSERIAL = (function () {
    function VM_RECV_LOTSERIAL() {
        this.QTY = "";
        this.EXPIRY_DATE = ""; // Date = new Date();
        this.ROWINDEX = 0;
        this.LOTSERIALSCHDFLG = false;
    }
    return VM_RECV_LOTSERIAL;
}());
exports.VM_RECV_LOTSERIAL = VM_RECV_LOTSERIAL;


/***/ }),

/***/ 1764:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var VM_RECV_SETUPSHIPTO_ID_ALLOCATION = (function () {
    function VM_RECV_SETUPSHIPTO_ID_ALLOCATION() {
        this.ORG_ID = "";
        this.SHIPTO_ID = "";
        this.SHIPTO_NAME = "";
        this.ADDRESS_1 = "";
        this.CITY = "";
        this.STATE = "";
        this.ZIP = "";
        this.PHONE_NO = "";
        this.STATUS = false;
        this.ATTENTION_TO = "";
        this.COMMENTS = "";
        this.CHK_VALUE = "";
        this.CHK_ALLOCATED = "";
        this.ROWINDEX = "";
        this.DESCR = "";
        this.ACTIVESTATUS = "";
        this.EFF_STATUS = "";
        this.USER_ID = "";
        this.SETID = "";
        this.checkvalue = false;
    }
    return VM_RECV_SETUPSHIPTO_ID_ALLOCATION;
}());
exports.VM_RECV_SETUPSHIPTO_ID_ALLOCATION = VM_RECV_SETUPSHIPTO_ID_ALLOCATION;


/***/ }),

/***/ 1841:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var CarrierReportComponent = (function () {
    function CarrierReportComponent() {
    }
    return CarrierReportComponent;
}());
CarrierReportComponent = __decorate([
    core_1.Component({
        template: __webpack_require__(2101)
    })
], CarrierReportComponent);
exports.CarrierReportComponent = CarrierReportComponent;


/***/ }),

/***/ 1842:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
__webpack_require__(32);
var HttpService_1 = __webpack_require__(12);
var ManageCarriersService = (function () {
    function ManageCarriersService(httpService) {
        this.httpService = httpService;
    }
    ManageCarriersService.prototype.getCarriersData = function (Search) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.httpService.getSync({
                            apiMethod: "/api/ManageCarriers/GetCarriersData",
                            params: {
                                "search": Search,
                            }
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ManageCarriersService.prototype.updateCarriers = function (mode, searchString, startPosition, carrier, status) {
        return this.httpService.create({
            apiMethod: "/api/ManageCarriers/UpdateCarriers",
            params: {
                "mode": mode,
                "searchString": searchString,
                "startPosition": startPosition,
                "carrier": carrier,
                "status": status,
            }
        });
    };
    return ManageCarriersService;
}());
ManageCarriersService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [HttpService_1.HttpService])
], ManageCarriersService);
exports.ManageCarriersService = ManageCarriersService;


/***/ }),

/***/ 1843:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
__webpack_require__(32);
var Rx_1 = __webpack_require__(37);
var HttpService_1 = __webpack_require__(12);
var ParcelCountReportService = (function () {
    function ParcelCountReportService(httpService) {
        this.httpService = httpService;
    }
    ParcelCountReportService.prototype.getParcelCountReport = function (fDate, tDate, carrierID, trackingNo) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.httpService.getSync({
                        apiMethod: "/api/ParcelCountReport/GetParcelCountReport",
                        params: {
                            "fDate": fDate,
                            "tDate": tDate,
                            "carrierID": carrierID,
                            "trackingNo": trackingNo
                        }
                    })];
            });
        });
    };
    ParcelCountReportService.prototype.handleError = function (error) {
        debugger;
        console.error(error);
        return Rx_1.Observable.throw(error.json().error || 'Server error');
    };
    return ParcelCountReportService;
}());
ParcelCountReportService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [HttpService_1.HttpService])
], ParcelCountReportService);
exports.ParcelCountReportService = ParcelCountReportService;


/***/ }),

/***/ 1844:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
__webpack_require__(32);
var Rx_1 = __webpack_require__(37);
var HttpService_1 = __webpack_require__(12);
var RecvPoNonPoReceiptsService = (function () {
    function RecvPoNonPoReceiptsService(httpService) {
        this.httpService = httpService;
    }
    RecvPoNonPoReceiptsService.prototype.getReceivePrerequisites = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.httpService.getSync({
                            "apiMethod": "/api/POorNONPOReceipts/GetReceivePrerequisites",
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    RecvPoNonPoReceiptsService.prototype.getIUTDetails = function (lstIUTHeader) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.httpService.create({
                            "apiMethod": "/api/POorNONPOReceipts/GetIUTDetails",
                            formData: lstIUTHeader
                        }).toPromise()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    RecvPoNonPoReceiptsService.prototype.getHeader = function (lstPoHeader) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.httpService.create({
                        apiMethod: "/api/POorNONPOReceipts/GetHeader",
                        formData: lstPoHeader
                    }).toPromise()];
            });
        });
    };
    RecvPoNonPoReceiptsService.prototype.deleteHeader = function (lstDeleteHeader) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.httpService.create({
                            "apiMethod": "/api/POorNONPOReceipts/DeleteHeader",
                            formData: lstDeleteHeader
                        }).toPromise()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    RecvPoNonPoReceiptsService.prototype.sendIUTDetails = function (dicDataItems) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.httpService.update({
                            "apiMethod": "/api/POorNONPOReceipts/SendIUTDetails",
                            formData: dicDataItems
                        }).toPromise()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    RecvPoNonPoReceiptsService.prototype.sendDetails = function (dicSendDataItems) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.httpService.update({
                            "apiMethod": "/api/POorNONPOReceipts/SendDetails",
                            formData: dicSendDataItems
                        }).toPromise()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    RecvPoNonPoReceiptsService.prototype.printNiceLabel = function (prntrAddressOrName, pntrPort, pntrTye, niceLblName, noOfPrints, errMsg, lstprintDetails) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.httpService.update({
                            "apiMethod": "/api/POorNONPOReceipts/PrintNiceLabel",
                            formData: lstprintDetails,
                            params: {
                                "printerAddressOrName": prntrAddressOrName,
                                "printerPort": pntrPort,
                                "printerTye": pntrTye,
                                "niceLabelName": niceLblName,
                                "noOfPrints": noOfPrints,
                                "errMsg": errMsg
                            }
                        }).toPromise()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    RecvPoNonPoReceiptsService.prototype.printStaionaryReport = function (dicPrintDetails, noOfCopies) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.httpService.update({
                            "apiMethod": "/api/POorNONPOReceipts/PrintStaionaryReport",
                            formData: dicPrintDetails,
                            params: {
                                "noOfCopies": noOfCopies
                            }
                        }).toPromise()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    RecvPoNonPoReceiptsService.prototype.searchHeader = function (lstRecvPOHeader) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.httpService.create({
                            "apiMethod": "/api/POorNONPOReceipts/SearchHeader",
                            formData: lstRecvPOHeader
                        }).toPromise()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    RecvPoNonPoReceiptsService.prototype.searchIUTHeader = function (lstIUTHeader) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.httpService.create({
                            "apiMethod": "/api/POorNONPOReceipts/SearchIUTHeader",
                            formData: lstIUTHeader
                        }).toPromise()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    //Non Po
    RecvPoNonPoReceiptsService.prototype.sendNonPoDetails = function (lstSendHeader) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.httpService.update({
                            "apiMethod": "/api/POorNONPOReceipts/SendNonPos",
                            formData: lstSendHeader
                        }).toPromise()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    RecvPoNonPoReceiptsService.prototype.generateTrackingNumber = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.httpService.getSync({
                            "apiMethod": "/api/POorNONPOReceipts/GenerateTrackingNo",
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    RecvPoNonPoReceiptsService.prototype.getRecipients = function (recipient) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.httpService.getSync({
                            "apiMethod": "/api/POorNONPOReceipts/GetBadgeDetails",
                            params: {
                                "recpName": recipient
                            }
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    RecvPoNonPoReceiptsService.prototype.handleError = function (error) {
        console.error(error);
        return Rx_1.Observable.throw(error.json().error || 'Server error');
    };
    return RecvPoNonPoReceiptsService;
}());
RecvPoNonPoReceiptsService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [HttpService_1.HttpService])
], RecvPoNonPoReceiptsService);
exports.RecvPoNonPoReceiptsService = RecvPoNonPoReceiptsService;


/***/ }),

/***/ 1845:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var router_1 = __webpack_require__(29);
var recv_component_1 = __webpack_require__(1618);
var recv_activity_report_component_1 = __webpack_require__(1603);
var recv_allocate_inventory_business_units_component_1 = __webpack_require__(1604);
var recv_allocate_shiptoids_component_1 = __webpack_require__(1605);
var recv_asn_discrepancy_report_component_1 = __webpack_require__(1606);
var recv_carrier_information_component_1 = __webpack_require__(1607);
var recv_daily_activity_component_1 = __webpack_require__(1608);
var recv_daily_user_activity_component_1 = __webpack_require__(1609);
var recv_deviation_report_component_1 = __webpack_require__(1610);
var recv_lot_serial_tracking_report_component_1 = __webpack_require__(1611);
var recv_manage_carriers_component_1 = __webpack_require__(1612);
var recv_parcel_count_report_component_1 = __webpack_require__(1613);
var recv_po_nonpo_receipts_component_1 = __webpack_require__(1614);
var recv_release_orders_component_1 = __webpack_require__(1615);
var recv_setup_shiptoids_component_1 = __webpack_require__(1616);
var recv_user_parameters_component_1 = __webpack_require__(1617);
exports.routes = [
    {
        path: '', component: recv_component_1.ReceivingComponent,
        children: [
            { path: 'activityreport', component: recv_activity_report_component_1.ActivityReportComponent },
            { path: 'allocateinventorybusinessunits', component: recv_allocate_inventory_business_units_component_1.AllocateInventoryBusinessUnitsComponent },
            { path: 'allocateshiptoids', component: recv_allocate_shiptoids_component_1.AllocateShipToIdsComponent },
            { path: 'asndiscrepancyreport', component: recv_asn_discrepancy_report_component_1.AsnDiscrepancyReportComponent },
            { path: 'carrierinformation', component: recv_carrier_information_component_1.CarrierInformationComponent },
            { path: 'dailyactivity', component: recv_daily_activity_component_1.DailyActivityComponent },
            { path: 'dailyuseractivity', component: recv_daily_user_activity_component_1.DailyUserActivityComponent },
            { path: 'deviationreport', component: recv_deviation_report_component_1.DeviationReportComponent },
            { path: 'lot/serialtrackingreport', component: recv_lot_serial_tracking_report_component_1.LotSerialTrackingReportComponent },
            { path: 'managecarriers', component: recv_manage_carriers_component_1.ManageCarriersComponent },
            { path: 'parcelcountreport', component: recv_parcel_count_report_component_1.ParcelCountReportComponent },
            { path: 'po/nonporeceipts', component: recv_po_nonpo_receipts_component_1.PoNonPoReceiptsComponent },
            { path: 'releaseorders', component: recv_release_orders_component_1.ReleaseOrdersComponent },
            { path: 'setupshiptoids', component: recv_setup_shiptoids_component_1.SetupShipToIdsComponent },
            { path: 'userparameters', component: recv_user_parameters_component_1.UserParametersComponent },
        ]
    }
];
var ReceivingRoutingModule = (function () {
    function ReceivingRoutingModule() {
    }
    return ReceivingRoutingModule;
}());
ReceivingRoutingModule = __decorate([
    core_1.NgModule({
        imports: [router_1.RouterModule.forChild(exports.routes)],
        exports: [router_1.RouterModule]
    })
], ReceivingRoutingModule);
exports.ReceivingRoutingModule = ReceivingRoutingModule;


/***/ }),

/***/ 1846:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
__webpack_require__(32);
var Rx_1 = __webpack_require__(37);
var HttpService_1 = __webpack_require__(12);
var SetupShipToIDsServices = (function () {
    function SetupShipToIDsServices(httpservice) {
        this.httpservice = httpservice;
    }
    SetupShipToIDsServices.prototype.getShipToIDs = function (setID, shipToID, shipToName, status, bArray, serverUserID) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.httpservice.getSync({
                            apiMethod: "/api/ShipToIDs/GetShipToIDs",
                            params: {
                                "userID": serverUserID,
                                "setID": setID,
                                "shipToID": shipToID,
                                "shipToName": shipToName,
                                "status": status,
                                "bArray": bArray,
                                "serverUserID": serverUserID
                            }
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    SetupShipToIDsServices.prototype.updateShipToIDStatus = function (userID, orgID, shipToID, status) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.httpservice.update({
                        apiMethod: "/api/ShipToIDs/UpdateShiptoIDStatus",
                        params: {
                            "userID": userID,
                            "orgID": orgID,
                            "shipToID": shipToID,
                            "status": status
                        }
                    }).toPromise()];
            });
        });
    };
    SetupShipToIDsServices.prototype.insertShipToIDs = function (userID, lstShiptoids) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.httpservice.create({
                            apiMethod: "/api/ShipToIDs/InsertShiptoIDs",
                            formData: lstShiptoids,
                            params: {
                                "userID": userID
                            },
                        }).toPromise()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    SetupShipToIDsServices.prototype.updateShiptoIDs = function (userID, lstShiptoids, NewOrgId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.httpservice.update({
                            apiMethod: "/api/ShipToIDs/UpdateShiptoIDs",
                            formData: lstShiptoids,
                            params: {
                                "userID": userID,
                                "NewOrgId": NewOrgId
                            }
                        }).toPromise()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    SetupShipToIDsServices.prototype.handleError = function (error) {
        console.error(error);
        return Rx_1.Observable.throw(error.json().error || 'Server error');
    };
    return SetupShipToIDsServices;
}());
SetupShipToIDsServices = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [HttpService_1.HttpService])
], SetupShipToIDsServices);
exports.SetupShipToIDsServices = SetupShipToIDsServices;


/***/ }),

/***/ 1847:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var recv_component_1 = __webpack_require__(1618);
var recv_activity_report_component_1 = __webpack_require__(1603);
var recv_allocate_inventory_business_units_component_1 = __webpack_require__(1604);
var recv_allocate_shiptoids_component_1 = __webpack_require__(1605);
var recv_asn_discrepancy_report_component_1 = __webpack_require__(1606);
var recv_carrier_information_component_1 = __webpack_require__(1607);
var recv_carrier_report_component_1 = __webpack_require__(1841);
var recv_daily_activity_component_1 = __webpack_require__(1608);
var recv_daily_user_activity_component_1 = __webpack_require__(1609);
var recv_deviation_report_component_1 = __webpack_require__(1610);
var recv_lot_serial_tracking_report_component_1 = __webpack_require__(1611);
var recv_manage_carriers_component_1 = __webpack_require__(1612);
var recv_parcel_count_report_component_1 = __webpack_require__(1613);
var recv_po_nonpo_receipts_component_1 = __webpack_require__(1614);
var recv_release_orders_component_1 = __webpack_require__(1615);
var recv_setup_shiptoids_component_1 = __webpack_require__(1616);
var recv_user_parameters_component_1 = __webpack_require__(1617);
var recv_routing_module_1 = __webpack_require__(1845);
var shared_module_1 = __webpack_require__(632);
var ReceivingModule = (function () {
    function ReceivingModule() {
    }
    return ReceivingModule;
}());
ReceivingModule = __decorate([
    core_1.NgModule({
        imports: [
            recv_routing_module_1.ReceivingRoutingModule,
            shared_module_1.SharedModule
        ],
        declarations: [
            recv_component_1.ReceivingComponent,
            recv_activity_report_component_1.ActivityReportComponent,
            recv_allocate_inventory_business_units_component_1.AllocateInventoryBusinessUnitsComponent,
            recv_allocate_shiptoids_component_1.AllocateShipToIdsComponent,
            recv_asn_discrepancy_report_component_1.AsnDiscrepancyReportComponent,
            recv_carrier_information_component_1.CarrierInformationComponent,
            recv_carrier_report_component_1.CarrierReportComponent,
            recv_daily_activity_component_1.DailyActivityComponent,
            recv_daily_user_activity_component_1.DailyUserActivityComponent,
            recv_deviation_report_component_1.DeviationReportComponent,
            recv_lot_serial_tracking_report_component_1.LotSerialTrackingReportComponent,
            recv_manage_carriers_component_1.ManageCarriersComponent,
            recv_parcel_count_report_component_1.ParcelCountReportComponent,
            recv_po_nonpo_receipts_component_1.PoNonPoReceiptsComponent,
            recv_release_orders_component_1.ReleaseOrdersComponent,
            recv_setup_shiptoids_component_1.SetupShipToIdsComponent,
            recv_user_parameters_component_1.UserParametersComponent
        ]
    })
], ReceivingModule);
exports.ReceivingModule = ReceivingModule;


/***/ }),

/***/ 1891:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var VM_PRINTLABEL_RECEIVE_HEADER = (function () {
    function VM_PRINTLABEL_RECEIVE_HEADER() {
    }
    return VM_PRINTLABEL_RECEIVE_HEADER;
}());
exports.VM_PRINTLABEL_RECEIVE_HEADER = VM_PRINTLABEL_RECEIVE_HEADER;


/***/ }),

/***/ 1892:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var VM_RECV_IUT_ITEMS = (function () {
    function VM_RECV_IUT_ITEMS() {
        this.RBFlAG = false;
        this.SCHDFLAG = false;
        this.DDLUOMFLAG = false;
        this.TXTQTYFLAG = false;
    }
    return VM_RECV_IUT_ITEMS;
}());
exports.VM_RECV_IUT_ITEMS = VM_RECV_IUT_ITEMS;


/***/ }),

/***/ 1893:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var VM_RECV_IUTGETPOS = (function () {
    function VM_RECV_IUTGETPOS() {
    }
    return VM_RECV_IUTGETPOS;
}());
exports.VM_RECV_IUTGETPOS = VM_RECV_IUTGETPOS;


/***/ }),

/***/ 1894:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var VM_RECV_NONPO_PRINTERDETAILS = (function () {
    function VM_RECV_NONPO_PRINTERDETAILS() {
        this.BUSINESS_UNIT = "1";
    }
    return VM_RECV_NONPO_PRINTERDETAILS;
}());
exports.VM_RECV_NONPO_PRINTERDETAILS = VM_RECV_NONPO_PRINTERDETAILS;


/***/ }),

/***/ 1895:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var VM_RECV_POHEADER = (function () {
    function VM_RECV_POHEADER() {
    }
    return VM_RECV_POHEADER;
}());
exports.VM_RECV_POHEADER = VM_RECV_POHEADER;


/***/ }),

/***/ 1896:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var VM_RECV_PRINTER_HEADER = (function () {
    function VM_RECV_PRINTER_HEADER() {
    }
    return VM_RECV_PRINTER_HEADER;
}());
exports.VM_RECV_PRINTER_HEADER = VM_RECV_PRINTER_HEADER;


/***/ }),

/***/ 1897:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var VM_RECV_SEARCHHEADER = (function () {
    function VM_RECV_SEARCHHEADER() {
        this.RBFlAG = false;
    }
    return VM_RECV_SEARCHHEADER;
}());
exports.VM_RECV_SEARCHHEADER = VM_RECV_SEARCHHEADER;


/***/ }),

/***/ 1898:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var VM_RECV_SENDLINEHEADER = (function () {
    function VM_RECV_SENDLINEHEADER() {
        this.RBFlAG = false;
        this.SCHDFLAG = false;
        this.DDLUOMFLAG = false;
        this.TXTQTYFLAG = false;
        this.QTYDESABLEFLAG = false;
        this.LOTSERIALSCHDFLAG = false;
        this.SCHDQTYCHANGFLAG = false;
    }
    return VM_RECV_SENDLINEHEADER;
}());
exports.VM_RECV_SENDLINEHEADER = VM_RECV_SENDLINEHEADER;


/***/ }),

/***/ 1899:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var VM_RECV_SENDPOHEADER = (function () {
    function VM_RECV_SENDPOHEADER() {
    }
    return VM_RECV_SENDPOHEADER;
}());
exports.VM_RECV_SENDPOHEADER = VM_RECV_SENDPOHEADER;


/***/ }),

/***/ 2096:
/***/ (function(module, exports) {

module.exports = "<div>\r\n<atpar-activity-report [productId]=\"recvProductId\"></atpar-activity-report>\r\n</div>";

/***/ }),

/***/ 2097:
/***/ (function(module, exports) {

module.exports = "<div id=\"main\" class=\"content-page\"> \r\n    <atpar-growl [value]=\"growlMessage\" sticky=\"sticky\"></atpar-growl>\r\n    <div class=\"page-content-wrapper\">\r\n        <div class=\"container x_panel no-border\" *ngIf=\"true\">\r\n            <br>\r\n            <div class=\"col-xs-12 col-sm-12 col-md-12\">\r\n                <div class=\"panel panel-default\" style=\"border: 1px solid #eee;\">\r\n                    <div class=\"panel-body\" style=\"padding:0px;\">\r\n                        <form class=\"form-horizontal form-label-left\">\r\n                            <div class=\"col-xs-12\">\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                    <label for=\"\" class=\"col-xs-12 col-sm-6 col-md-4 control-label\">Org Group ID </label>\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                        <label *ngIf=\"blnShowOrgGroupLabel\" class=\"control-label lbl-left\">{{orgGrpIDData}}</label>\r\n                                        <atpar-select [options]=\"lstOrgGroups\" [id]=\"'ddllstOrgGroups'\" [required]=\"true\" [(ngModel)]=\"selectedOrgGroupId\" [ngModelOptions]=\"{standalone: true}\" filter=\"filter\" *ngIf=\"blnShowOrgGroupDD\" (onChange)=\"ddlOrgGrpIdChanged()\"></atpar-select>\r\n                                        <!--<input type=\"text\" name=\"\" id=\"input\" class=\"form-control bdr-purple\" value=\"NOI - NOI\" pattern=\"\" title=\"\" disabled>-->\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                    <label for=\"\" class=\"col-xs-12 col-sm-6 col-md-4 control-label\">User ID</label>\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                        <atpar-select [options]=\"lstUsers\" [id]=\"'ddllstUsers'\" [required]=\"true\" [(ngModel)]=\"selectedDropDownUserId\" [ngModelOptions]=\"{standalone: true}\" filter=\"filter\" (onChange)=\"ddlUserChanged()\"></atpar-select>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                    <label for=\"\" class=\"col-xs-12 col-sm-6 col-md-4 control-label\">Business Unit</label>\r\n\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                        <!--<input type=\"text\" class=\"form-control bdr-purple\" />-->\r\n                                        <atpar-ac-server [(ngModel)]=\"selectedBunit\" [ngModelOptions]=\"{standalone: true}\" [suggestions]=\"lstFilteredBUnits\" (completeMethod)=\"fillBUnitsAuto($event)\"></atpar-ac-server>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"clear\"></div>\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                    <label for=\"\" class=\"col-xs-12 col-sm-6 col-md-4 control-label\">Description</label>\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                        <!--<input type=\"text\" class=\"form-control bdr-purple\" />-->\r\n                                        <atpar-text [(ngModel)]=\"selectedDescription\" [ngModelOptions]=\"{standalone: true}\" (bindModelDataChange)=\"bindModelDataChange($event)\" [validations]=\"''\" [id]=\"'txtdescription'\"></atpar-text>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                    <button class=\"btn btn-purple sbtn\" (click)=\"getAllBUnits()\">Go &nbsp; <i class=\"fa fa-arrow-right\"></i></button>\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                        <div class=\"col-xs-12 table-responsive\" *ngIf=\"showGrid\">\r\n                            <div class=\"container\">\r\n                                <atpar-datatable [value]=\"lstDBData\" [style]=\"{'width':'100%'}\" [paginator]=\"true\" [pageLinks]=\"3\" (filteredData)=\"myfilterdata($event)\" [rows]=\"recordsPerPageSize\" [globalFilter]=\"gb\" [rowsPerPageOptions]=\"[10,20, 30, 40, 50, 60, 70, 80, 90, 100]\" [responsive]=\"true\">\r\n\r\n                                    <p-column [style]=\"{'width':'7%', 'text-align':'center'}\" header=\"Select\">\r\n                                        <template pTemplate=\"filter\" let-col>\r\n                                            <ul class=\"list-inline li-all-none\">\r\n                                                <li>\r\n\r\n                                                    <span (click)=\"checkAll()\" style=\"cursor:pointer\">All</span>\r\n                                                </li> |\r\n                                                <li>\r\n                                                    <span (click)=\"unCheckAll()\" style=\"cursor:pointer\">None</span>\r\n\r\n                                                </li>\r\n                                            </ul>\r\n                                        </template>\r\n                                        <template let-ven=\"rowData\" pTemplate=\"body\">\r\n                                            <atpar-switch (change)=\"selectedRow(ven,$event)\" [(ngModel)]=\"ven.checkvalue\"></atpar-switch>\r\n                                        </template>\r\n                                    </p-column>\r\n                                    <p-column [style]=\"{'width':'10%'}\" field=\"BUSINESS_UNIT\" header=\"Business Unit\" sortable=\"custom\" (sortFunction)=\"customSort($event)\" [filter]=\"true\" filterPlaceholder=\"Search\"> </p-column>\r\n                                    <p-column [style]=\"{'width':'45%'}\" field=\"DESCR\" header=\"Description\" sortable=\"custom\" (sortFunction)=\"customSort($event)\" [filter]=\"true\" filterPlaceholder=\"Search\"> </p-column>\r\n                                    <p-column [style]=\"{'width':'35%'}\" field=\"USER_ID\" header=\"User\" sortable=\"custom\" (sortFunction)=\"customSort($event)\"> </p-column>\r\n\r\n                                </atpar-datatable>\r\n                            </div>\r\n                            <br>\r\n                            <div class=\"col-xs-12 col-sm-6 col-sm-offset-5 col-md-4 col-md-offset-5\">\r\n                                <button class=\"btn btn-purple sbtn\" id=\"btnsubmitForGrid\" (click)=\"allocateBUnits()\">Submit &nbsp;<i class=\"fa fa-check\"></i></button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n";

/***/ }),

/***/ 2098:
/***/ (function(module, exports) {

module.exports = "<div id=\"main\" class=\"content-page\">\r\n    <div class=\"\">\r\n        <div class=\"page-content-wrapper\">\r\n            <div class=\"container x_panel no-border\">\r\n                <br>\r\n                <div class=\"panel panel-default\" style=\"border: 1px solid #eee;\">\r\n                    <div class=\"panel-body\" style=\"padding:0px;\">\r\n                        <div class=\"col-md-12\">\r\n                            <form class=\"form-horizontal form-label-left\">\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                    <label for=\"\" class=\"control-label col-xs-12 col-md-4 col-sm-6\">Org Group ID </label>\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                        <label *ngIf=\"blnShowOrgGroupLabel\" class=\"control-label lbl-left\">{{orgGrpId}}</label>\r\n                                        <atpar-select [options]=\"lstOrgGroups\" [id]=\"'ddllstOrgGroups'\" [required]=\"true\" [(ngModel)]=\"selectedOrgGroupId\" [ngModelOptions]=\"{standalone: true}\" filter=\"filter\" *ngIf=\"blnShowOrgGroupDD\" (onChange)=\"ddlOrgGrpIdChanged()\"></atpar-select>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                    <label for=\"\" class=\"control-label col-xs-12 col-md-4 col-sm-6\"> User ID</label>\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                        <atpar-select [options]=\"lstUsers\" [id]=\"'ddllstUsers'\" filter=\"filter\" [required]=\"true\" [(ngModel)]=\"selectedDropDownUserId\" [ngModelOptions]=\"{standalone: true}\" (onChange)=\"ddl_Change()\"></atpar-select>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                    <label for=\"\" class=\"control-label col-xs-12 col-md-4 col-sm-6\">SetID / Company</label>\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                        <atpar-text [(ngModel)]=\"setId\" [name]=\"txtSETID\" [id]=\"'SETID'\" [ngModelOptions]=\"{standalone: true}\"></atpar-text>\r\n                                    </div>\r\n                                </div>\r\n                                <div style=\"clear:both;\"></div>\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                    <label for=\"\" class=\"control-label col-xs-12 col-md-4 col-sm-6\">ShipTo ID </label>\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                        <atpar-text [(ngModel)]=\"shipToId\" [name]=\"txtSHIPTO_ID\" [id]=\"'SHIPTO_ID'\" [ngModelOptions]=\"{standalone: true}\"></atpar-text>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                    <label for=\"\" class=\"control-label col-xs-12 col-md-4 col-sm-6\"> Display</label>\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                        <atpar-select [options]=\"displayOptions\" [id]=\"'ddlDisplay'\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"seletedStatus\" (onChange)=\"ddl_Change()\"></atpar-select>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-md-4 col-sm-12 col-xs-12 form-group\">\r\n                                    <button type=\"submit\" class=\"btn btn-purple sbtn\" (click)=\"getAllShipToIds()\">Go &nbsp; <i class=\"fa fa-arrow-right\"></i></button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                        <div class=\"col-xs-12 table-responsive\" *ngIf=\"showGrid\">\r\n                            <div class=\"container\">\r\n                                <atpar-datatable [value]=\"lstDBData\" [style]=\"{'width':'100%'}\" [paginator]=\"true\" [pageLinks]=\"3\"\r\n                                                 (onSort)=\"customSort($event)\"\r\n                                                 (filteredData)=\"myfilterdata($event)\" [rows]=\"recordsPerPageSize\" [globalFilter]=\"gb\" [rowsPerPageOptions]=\"[10,20, 30, 40, 50, 60, 70, 80, 90, 100]\" [responsive]=\"true\">\r\n\r\n                                    <p-column [style]=\"{'width':'7%', 'text-align':'center'}\" header=\"Select\">\r\n                                        <template pTemplate=\"filter\" let-col>\r\n                                            <ul class=\"list-inline li-all-none\">\r\n                                                <li>\r\n                                                    <span (click)=\"checkAll()\" style=\"cursor:pointer\">All</span>\r\n                                                </li> |\r\n                                                <li>\r\n                                                    <span (click)=\"unCheckAll()\" style=\"cursor:pointer\">None</span>\r\n                                                </li>\r\n                                            </ul>\r\n                                        </template>\r\n                                        <template let-ven=\"rowData\" pTemplate=\"body\">\r\n                                            <atpar-switch (change)=\"selectedRow(ven,$event)\" [(ngModel)]=\"ven.checkvalue\"></atpar-switch>\r\n                                        </template>\r\n                                    </p-column>\r\n                                    <p-column field=\"SETID\" header=\"Set ID\" [sortable]=\"true\" [filter]=\"true\" filterPlaceholder=\"Search\" [style]=\"{'width':'9%'}\"> </p-column>\r\n                                    <p-column field=\"SHIPTO_ID\" header=\"Ship To ID\" [sortable]=\"true\" [filter]=\"true\" filterPlaceholder=\"Search\" [style]=\"{'width':'12%'}\"> </p-column>\r\n                                    <p-column field=\"DESCR\" header=\"Description\" [sortable]=\"true\" [filter]=\"true\" filterPlaceholder=\"Search\" [style]=\"{'width':'40%'}\"> </p-column>\r\n                                    <p-column field=\"USER_ID\" header=\"User\" [sortable]=\"true\" [style]=\"{'width':'25%'}\"> </p-column>\r\n                                </atpar-datatable>\r\n                            </div>\r\n                            <br />\r\n                            <div class=\"col-xs-12 col-sm-6 col-sm-offset-5 col-md-4 col-md-offset-5\">\r\n                                <button class=\"btn btn-purple sbtn\" id=\"btnsubmitForGrid\" (click)=\"allocateShipToIds()\">Submit &nbsp;<i class=\"fa fa-check\"></i></button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <atpar-growl [value]=\"growlMessage\" sticky=\"sticky\"></atpar-growl>\r\n</div>\r\n";

/***/ }),

/***/ 2099:
/***/ (function(module, exports) {

module.exports = "<div>\r\n    <span>Receiving ASN Discrepancy Report Screen</span>\r\n</div>";

/***/ }),

/***/ 2100:
/***/ (function(module, exports) {

module.exports = "<div>\r\n    <atpar-carrier-information [appId]=\"recvAppId\"></atpar-carrier-information>\r\n</div>";

/***/ }),

/***/ 2101:
/***/ (function(module, exports) {

module.exports = "<div>\r\n    <span>Receiving Carrier Report Screen</span>\r\n</div>";

/***/ }),

/***/ 2102:
/***/ (function(module, exports) {

module.exports = "<div>\r\n    <span>Receiving Daily Activity Report Screen</span>\r\n</div>";

/***/ }),

/***/ 2103:
/***/ (function(module, exports) {

module.exports = "<div>\r\n    <span>Receiving Daily User Activity Screen</span>\r\n</div>";

/***/ }),

/***/ 2104:
/***/ (function(module, exports) {

module.exports = "<div>\r\n    <span>Receiving Deviation Report Screen</span>\r\n</div>";

/***/ }),

/***/ 2105:
/***/ (function(module, exports) {

module.exports = "<div>\r\n    <span>Receiving Lot/Serial Tracking Report Screen</span>\r\n</div>";

/***/ }),

/***/ 2106:
/***/ (function(module, exports) {

module.exports = "<div id=\"main\" class=\"content-page\">\r\n    <div class=\"\">\r\n        <div class=\"page-content-wrapper\">\r\n            <div class=\"container x_panel no-border\">\r\n                <br>\r\n                <div class=\"panel panel-default\" style=\"border: 1px solid #eee;\">\r\n                    <div class=\"panel-body\" style=\"padding:0px 0 10px 0;\">\r\n                        <div class=\"col-xs-12\">\r\n                            <form class=\"form-horizontal form-label-left\" *ngIf=\"showAddButton\">\r\n                                    <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                        <atpar-text [(ngModel)]=\"txtCarrierSearch\" [name]=\"txtCarrierSearch\" [validations]=\"'except_less_greater_symbols'\" [id]=\"'costCenterSearch'\" [ngModelOptions]=\"{standalone: true}\" [placeholder]=\"'Carrier'\"></atpar-text>\r\n                                    </div>\r\n                                    <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                        <button type=\"button\" class=\"btn btn-purple sbtn\" name=\"btnGo\" (click)=\"bindGrid()\">Go &nbsp; <i class=\"fa fa-arrow-right\"></i></button>\r\n                                        <button type=\"button\" class=\"btn btn-purple sbtn\" name=\"btnAdd\" (click)=\"addCarrier()\">  Add Carrier &nbsp;<i class=\"fa fa-plus\"></i></button>\r\n                                    </div>                               \r\n                            </form>\r\n                        </div>\r\n                        <br />\r\n                            <div class=\"col-xs-12\" *ngIf=\"form\">\r\n                                <div class=\"form-horizontal form-label-left\">\r\n                                    <div class=\"form-group\">\r\n                                        <label for=\"\" class=\"control-label col-xs-12 col-md-3 col-sm-3\">Search String </label>\r\n                                        <div class=\"col-xs-12 col-sm-3 col-md-3\">\r\n                                            <atpar-text [(ngModel)]=\"manageCarriers.SEARCH_STRING\" [name]=\"txtSEARCHSTRNG\" *ngIf=\"!disableSearchString\" [isFocused]=\"'true'\" title=\"Allows Only Alphabets,numbers,No Space,_-\" [validations]=\"'mandatory,alpha_numeric_underscore_hyphen_nospace'\" (bindModelDataChange)=\"bindModelDataChange($event)\" [id]=\"'SEARCHSTRNG'\" [ngModelOptions]=\"{standalone: true}\"></atpar-text>\r\n                                            <atpar-text [(ngModel)]=\"manageCarriers.SEARCH_STRING\" [name]=\"txtSEARCHSTRNG\" *ngIf=\"disableSearchString\" [validations]=\"'mandatory,alpha_numeric_underscore_hyphen_nospace'\" (bindModelDataChange)=\"bindModelDataChange($event)\" [id]=\"'SEARCHSTRNG'\" [ngModelOptions]=\"{standalone: true}\" [disabled]=\"disableSearchString\"></atpar-text>\r\n                                        </div>\r\n                                        <div class=\"col-xs-12 col-sm-6 col-md-6 help_txt\">\r\n                                            Please Enter Search String\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"form-group\">\r\n                                        <label for=\"\" class=\"control-label col-xs-12 col-md-3 col-sm-3\">Start Position</label>\r\n                                        <div class=\"col-xs-12 col-sm-3 col-md-3\">\r\n                                            <atpar-text [(ngModel)]=\"manageCarriers.START_POSITION\" [name]=\"txtSTARTPOS\" *ngIf=\"disableSearchString\"  [isFocused]=\"'true'\" [validations]=\"'mandatory,numeric,max=3'\" (bindModelDataChange)=\"bindModelDataChange($event)\" [id]=\"'STARTPOS'\" [ngModelOptions]=\"{standalone: true}\"></atpar-text>\r\n                                            <atpar-text [(ngModel)]=\"manageCarriers.START_POSITION\" [name]=\"txtSTARTPOS\" *ngIf=\"!disableSearchString\" [validations]=\"'mandatory,numeric,max=3'\" title=\"Allows Only Numbers\" (bindModelDataChange)=\"bindModelDataChange($event)\" [id]=\"'STARTPOS'\" [ngModelOptions]=\"{standalone: true}\"></atpar-text>\r\n                                        </div>\r\n                                        <div class=\"col-xs-12 col-sm-6 col-md-6 help_txt\">\r\n                                            Please Enter Start Position\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"form-group \">\r\n                                        <label for=\"\" class=\"control-label col-xs-12 col-md-3 col-sm-3\">Carrier</label>\r\n                                        <div class=\"col-xs-12 col-sm-3 col-md-3\">\r\n                                            <atpar-text [(ngModel)]=\"manageCarriers.CARRIER\" [name]=\"txtCARRIER\"  [validations]=\"'mandatory,alpha_numeric_underscore_hyphen_nospace'\" title=\"Allows Only Alphabets,numbers,No Space,_-\" (bindModelDataChange)=\"bindModelDataChange($event)\" [id]=\"'CARRIER'\" [ngModelOptions]=\"{standalone: true}\"></atpar-text>\r\n                                        </div>\r\n                                        <div class=\"col-xs-12 col-sm-6 col-md-6 help_txt\">\r\n                                            Please Enter Carrier\r\n                                        </div>\r\n                                    </div>\r\n                                    <div style=\"clear:both;\"></div>\r\n                                    <div class=\"col-xs-12 col-md-4 col-md-offset-5 col-sm-6 col-sm-offset-5\">\r\n                                        <button class=\"btn btn-purple small\" (click)=\"saveOrUpdateCarriers()\" *ngIf=\"mode=='Add'\" [disabled]=\"loading\">Save &nbsp; <i class=\"fa fa-floppy-o\"></i></button>\r\n                                        <button class=\"btn btn-purple small\" (click)=\"saveOrUpdateCarriers()\" *ngIf=\"mode=='Edit'\" [disabled]=\"loading\">Update &nbsp; <i class=\"fa fa-check\"></i></button>\r\n                                        <button class=\"btn btn-purple small\" (click)=\"close()\"><i class=\"fa fa-arrow-left\"></i> &nbsp;Go Back</button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                     \r\n                        <div class=\"col-xs-12\" *ngIf=\"table\">\r\n                            <br>\r\n                            <div class=\"container\">\r\n                            <atpar-datatable [value]=\"lstManageCarriers\" #dt [style]=\"{'width':'100%'}\" [paginator]=\"true\" [pageLinks]=\"3\" [rows]=\"pageSize\" expandableRows=\"true\" [rowsPerPageOptions]=\"[10,20,30,40,50,60,70,80,90,100]\" [globalFilter]=\"gb\" [responsive]=\"true\">\r\n                                <p-column header=\"Action\" [style]=\"{'width':'4%','text-align':'center'}\">\r\n                                    <template let-carriers=\"rowData\" pTemplate=\"body\">\r\n                                        <i class=\"fa fa-pencil fa-bg bg-blue\" title=\"Edit\" (click)=\"editCarrier(carriers)\" style=\"cursor:pointer\"></i>\r\n                                    </template>\r\n                                </p-column>\r\n                                <!--<p-column expander=\"true\" styleClass=\"col-icon\"></p-column>-->\r\n                                <p-column field=\"SEARCH_STRING\" header=\"Search String\" [sortable]=\"true\" [filter]=\"true\" filterPlaceholder=\"Search\" [style]=\"{'width':'39%'}\"> </p-column>\r\n                                <p-column field=\"START_POSITION\" header=\"Start Position\" [sortable]=\"true\" [filter]=\"true\" filterPlaceholder=\"Search\" [style]=\"{'width':'10%'}\"> </p-column>\r\n                                <p-column field=\"CARRIER\" header=\"Carrier\" [sortable]=\"true\" [filter]=\"true\" filterPlaceholder=\"Search\" [style]=\"{'width':'39%'}\"> </p-column>\r\n                                <p-column header=\"Status\" field=\"STATUS\" [filter]=\"true\" [style]=\"{'overflow':'visible','width':'8%','text-align':'center'}\" filterMatchMode=\"equals\">\r\n                                    <template pTemplate=\"filter\" let-col>\r\n                                        <atpar-select-grid [options]=\"ddlStatusType\" [id]=\"'ddlddlStatusType'\" [style]=\"{'width':'100%'}\" (onChange)=\"dt.filter($event.value,col.field,col.filterMatchMode)\"></atpar-select-grid>\r\n                                    </template>\r\n                                    <template let-col let-carriers=\"rowData\" pTemplate=\"body\">\r\n                                        <atpar-switch [checked]=carriers[col.field] (click)=\"changeStatus(carriers)\" style=\"margin-left:12%\"></atpar-switch>\r\n                                    </template>\r\n                                </p-column>\r\n                            </atpar-datatable>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <atpar-growl [value]=\"growlMessage\" sticky=\"sticky\"></atpar-growl>\r\n</div>\r\n";

/***/ }),

/***/ 2107:
/***/ (function(module, exports) {

module.exports = "<div id=\"main\" class=\"content-page\">\r\n    <div class=\"page-content-wrapper\">\r\n        <div class=\"container x_panel no-border\">\r\n            <br />\r\n            <div class=\"\">\r\n                <div class=\"panel panel-default\" style=\"border:1px solid #eee;\">\r\n                    <div class=\"panel-body\" style=\"padding:0px 0px 10px 0px;\">\r\n                        <form class=\"form-horizontal form-label-left\" novalidate>\r\n                            <div class=\"col-xs-12\">\r\n                                <div class=\"pull-right\" id=\"tdExports\" *ngIf=\"tdExports\">\r\n                                    <br />\r\n                                    <ul class=\"list-inline\">\r\n                                        <li class=\"no-padding\">\r\n                                            <i class=\"fa fa-envelope-o fa-bg-lg bg-blue\" aria-hidden=\"true\" id=\"imgMail\" title=\"Send Mail\" style=\"cursor:pointer;\" (click)=\"onSendMailIconClick($event)\"></i>&nbsp;\r\n                                        </li>\r\n                                        <li class=\"no-padding\">\r\n                                            <i class=\"fa fa-print fa-bg-lg bg-blue\" aria-hidden=\"true\" id=\"imgPrint\" title=\"Print\" style=\"cursor:pointer;\" (click)=\"onPrintClick($event)\"></i>&nbsp;\r\n                                        </li>\r\n                                        <li class=\"no-padding\">\r\n                                            <i class=\"fa fa-file-excel-o fa-bg-lg bg-blue\" aria-hidden=\"true\" id=\"imgExcel\" title=\"Excel Format\" style=\"cursor:pointer;\" (click)=\"onExportToExcelClick($event)\"></i>&nbsp;\r\n                                        </li>\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"col-xs-12\">\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                    <label for=\"\" class=\"control-label col-xs-12 col-md-4 col-sm-6\">Carrier</label>\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                        <atpar-select [options]=\"lstCarriers\" [id]=\"'ddllstCarriers'\" filter=\"filter\" [(ngModel)]=\"selectedDropDownCarrierId\" [ngModelOptions]=\"{standalone: true}\"></atpar-select>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                    <label for=\"\" class=\"control-label col-xs-12 col-md-4 col-sm-6\">Tracking Number</label>\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                        <atpar-text [(ngModel)]=\"trackingNumber\" [name]=\"txtTrackingNumber\" [id]=\"'TRACKINGNUMBER'\" [ngModelOptions]=\"{standalone: true}\"></atpar-text>\r\n                                    </div>\r\n                                </div>\r\n                                <div style=\"clear:both;\"></div>\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                    <label for=\"\" class=\"control-label col-xs-12 col-md-4 col-sm-4\">From Date</label>\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                        <p-calendar [showIcon]=\"true\" [id]=\"'FromDatePicker'\" [(ngModel)]=\"fromDate\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" yearRange=\"1980:2100\" [placeholder]=\"'From Date'\" [dateFormat]=\"'mm/dd/yy'\" [required]=\"true\" [readonlyInput]=\"true\" [ngModelOptions]=\"{standalone: true}\"></p-calendar>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                    <label for=\"\" class=\"control-label col-xs-12 col-sm-6 col-md-4\">To Date</label>\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                        <p-calendar [showIcon]=\"true\" [id]=\"'ToDatePicker'\" [(ngModel)]=\"toDate\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" yearRange=\"1980:2100\" [placeholder]=\"'To Date'\" [dateFormat]=\"'mm/dd/yy'\" [required]=\"true\" [readonlyInput]=\"true\" [ngModelOptions]=\"{standalone : true}\"></p-calendar>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-md-4 col-sm-12 col-xs-12 form-group\">\r\n                                    <button type=\"submit\" class=\"btn btn-purple sbtn\" (click)=\"btnGo_Click()\">Go &nbsp; <i class=\"fa fa-arrow-right\"></i></button>\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n\r\n                        <br />\r\n\r\n                        <div class=\"col-xs-12 table-responsive\" *ngIf=\"showGrid\">\r\n                            <div class=\"container\">\r\n                                <atpar-datatable [value]=\"lstParcelCountReportHeader\" [paginator]=\"true\" [pageLinks]=\"3\" rowGroupMode=\"subheader\" [rows]=\"pageSize\" expandableRows=\"true\" [rowsPerPageOptions]=\"[10,20,30,40,50,60,70,80,90,100]\" [globalFilter]=\"gb\" [responsive]=\"true\">\r\n                                    <p-column header=\"\" styleClass=\"col-icon\" [style]=\"{'width': '6%','overflow':'visible','text-align':'center'}\" expander=\"true\"></p-column>\r\n                                    <p-column field=\"START_DT_TIME\" header=\"Date Time\" [sortable]=\"true\"></p-column>\r\n                                    <p-column field=\"USER_ID\" header=\"User\" [sortable]=\"true\"></p-column>\r\n                                    <p-column field=\"TOTCNT\" header=\"Total Count\" [sortable]=\"true\"></p-column>\r\n                                    <p-column field=\"SIGNATURE\" header=\"Signature\">\r\n                                        <template let-col let-ven=\"rowData\" pTemplate=\"body\">\r\n                                            <img src=\"data:image/jpg;base64,{{ven.SIGNATURE}}\" *ngIf=\"ven.SIGNATURE!=null ? true:false\" class=\"img-responsive\">\r\n                                        </template>\r\n                                    </p-column>\r\n                                    \r\n                                    <template let-expandRow pTemplate=\"rowexpansion\">\r\n                                        <atpar-datatable [value]=\"expandRow.DETAILS\" [globalFilter]=\"gb\" [responsive]=\"true\">\r\n                                            <p-column header=\"Tracking Number\" field=\"TRACKING_NO\" [style]=\"{'text-align':'center'}\"></p-column>\r\n                                            <p-column header=\"Quantity\" field=\"NO_OF_BOXES\" [style]=\"{'text-align':'center'}\"></p-column>\r\n                                        </atpar-datatable>\r\n                                    </template>                                                                        \r\n                                </atpar-datatable>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <atpar-growl [value]=\"growlMessage\" sticky=\"sticky\"></atpar-growl>\r\n    <mail-dialog header=\"Enter Recipient`s Email Address\" [width]=\"450\" (onClose)=\"closeMailPopup()\" [(visible)]=\"isMailDialog\" [responsive]=\"true\" showEffect=\"fade\" [modal]=\"true\">\r\n        <div class=\"ui-grid ui-grid-responsive ui-fluid\">\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-2 col-md-2 col-sm-3 col-xs-3\">\r\n                    <span>To : </span>\r\n                </div>\r\n                <div class=\"col-lg-6 col-md-6 col-sm-8 col-xs-8\">\r\n                    <atpar-text [(ngModel)]=\"toMailAddr\" [name]=\"txtToMailAddr\" [id]=\"'txtToMailAddr'\"></atpar-text>\r\n                </div>\r\n                <div class=\"col-lg-2 col-md-2 col-sm-3 col-xs-3\">\r\n                    <span><button class=\"btn btn-purple sbtn\" (click)=\"onSendMailClick()\">Send &nbsp;<i class=\"fa fa-share-square-o\" aria-hidden=\"true\"></i></button> </span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </mail-dialog>\r\n</div>";

/***/ }),

/***/ 2108:
/***/ (function(module, exports) {

module.exports = "<style>\r\n    .po-icon{\r\n        width:34px;\r\n        height:34px;\r\n        padding:11px;\r\n    }\r\n    #label-custom{\r\n        width:auto!important;\r\n    }\r\n    .fa-bg\r\n    {\r\n        padding:4px!important;\r\n    }\r\n</style>\r\n<div id=\"main\" class=\"content-page\">\r\n    <div class=\"page-content-wrapper\">\r\n        <div class=\"container x_panel no-border\">\r\n            <br>\r\n            <div class=\"\">\r\n                <div class=\"panel panel-default\" style=\"border: 1px solid #eee;\">\r\n                    <div class=\"panel-body\" style=\"padding:10px 0px 10px 0;\">\r\n                        <form class=\"form-horizontal form-label-left\" *ngIf=\"page\" novalidate>\r\n                            <div class=\"col-xs-12\">\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                    <label for=\"\" class=\"control-label col-xs-12 col-md-4 col-sm-6\">Business Unit / Company</label>\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                        <atpar-select [options]=\"ddlBusinessUnits\" [(ngModel)]=\"selectedBUnits\" [id]=\"'ddlBUnits'\" [required]=\"true\" [ngModelOptions]=\"{standalone: true}\" filter=\"filter\" (onChange)=\"bUnit_selectChanged(ddlBusinessUnits,$event)\" [style]=\"{'width':'100%'}\"></atpar-select>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                    <label for=\"\" class=\"control-label col-xs-12 col-md-4 col-sm-6\">ShipTo ID</label>\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                        <label id=\"lblOrgGrpId\" class=\"control-label lbl-left\" *ngIf=\"blnlblOrgGrpId\">{{lblOrgGrpId}}</label>\r\n                                        <atpar-text [(ngModel)]=\"txtShipId\" [name]=\"txtShipId\" [id]=\"'txtShipId'\" [ngModelOptions]=\"{standalone: true}\" [disabled]=\"blntxtShipIdDisable\" *ngIf=\"!blnShipToId\"></atpar-text>\r\n                                        <atpar-select [options]=\"ddlShipToId\" [id]=\"'ddlShipToId'\" [(ngModel)]=\"selectedShipToId\" [ngModelOptions]=\"{standalone: true}\" filter=\"filter\" [disabled]=\"blntxtShipIdDisable\" (onChange)=\"shipToId_selectChanged(ddlShipToId,$event)\" *ngIf=\"blnShipToId\"></atpar-select>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                    <label for=\"\" class=\"control-label col-xs-12 col-md-4 col-sm-6\">Include All PO Lines</label>\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                        <atpar-switch [checked]=\"chkIncludeAllPOLines\" (change)=\"includeAllPoLinesChkChanged($event)\"></atpar-switch>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"clearfix\"></div>\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                    <label for=\"\" class=\"control-label col-xs-12 col-md-4 col-sm-6\">PO #</label>\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                        <atpar-text [(ngModel)]=\"txtPONumber\" [name]=\"txtPONumber\" [validations]=\"'mandatory,alpha_numeric_underscore_hyphen_backslash_nospace'\" [id]=\"'txtPONumber'\" [ngModelOptions]=\"{standalone: true}\"></atpar-text> <!--*ngIf=\"!isEditMode\"-->\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                    <label for=\"\" class=\"control-label col-xs-12 col-md-4 col-sm-6\">IUT</label>\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                        <atpar-text [(ngModel)]=\"txtIUT\" [name]=\"txtIUT\" [validations]=\"'mandatory,alpha_numeric_underscore_hyphen_backslash_nospace'\" [id]=\"'txtIUT'\" [ngModelOptions]=\"{standalone: true}\" [readonly]=\"txtIutIsEditMode\"></atpar-text> <!--*ngIf=\"!isEditMode\"-->\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                    <label for=\"\" class=\"control-label col-xs-12 col-md-4 col-sm-6\"> Invoice / Packing Slip</label>\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                        <atpar-text [(ngModel)]=\"txtInvoice\" [name]=\"txtInvoice\" [validations]=\"'alpha_numeric_underscore_hyphen_backslash_nospace'\" [id]=\"'txtInvoice'\" [ngModelOptions]=\"{standalone: true}\"></atpar-text> <!--*ngIf=\"!isEditMode\"-->\r\n                                    </div>\r\n                                </div>\r\n                                <div style=\"clear:both;\"></div>\r\n                                <div class=\"row\">\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-6 pull-left\">\r\n                                        <span class=\"text-redPo\">*</span><span class=\"text-primary\">PO or IUT No is mandatory</span>\r\n                                    </div>\r\n                                    <div class=\"col-xs-12 col-sm-6  col-md-5 \">\r\n                                        <button class=\"btn btn-purple sbtn\" id=\"'btnGet'\" [disabled]=\"btnGetEnableDisable\" (click)=\"btnGet_Click()\">Get &nbsp;<i class=\"fa fa-arrow-right\"></i></button>\r\n                                       \r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-md-12\">\r\n                                    <a>\r\n                                        <i class=\"fa fa-plus fa-bg bg-red\" *ngIf=\"plus\" style=\"cursor:pointer\" (click)=\"plusShow()\"></i>\r\n                                        <i class=\"fa fa-minus fa-bg bg-red\" *ngIf=\"minus\" style=\"cursor:pointer\" (click)=\"minusShow()\"></i>\r\n                                    </a>\r\n                                </div>\r\n                                <div *ngIf=\"!plus\">\r\n                                    <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                        <label for=\"\" class=\"control-label col-xs-12 col-md-4 col-sm-6\">Item ID</label>\r\n                                        <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                            <atpar-text [(ngModel)]=\"txtItemId\" [name]=\"txtItemId\" *ngIf=\"!isEditMode\" [validations]=\"'alpha_numeric_underscore_hyphen_backslash_nospace'\" [id]=\"'txtItemId'\" [ngModelOptions]=\"{standalone: true}\"></atpar-text>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                        <label for=\"\" class=\"control-label col-xs-12 col-md-4 col-sm-6\">Vendor ID</label>\r\n                                        <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                            <atpar-text [(ngModel)]=\"txtVendorId\" [name]=\"txtVendorId\" *ngIf=\"!isEditMode\" [validations]=\"'alpha_numeric_underscore_hyphen_backslash_nospace'\" [id]=\"'txtVendorId'\" [ngModelOptions]=\"{standalone: true}\"></atpar-text>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                        <label for=\"\" class=\"control-label col-xs-12 col-md-4 col-sm-6\">Vendor Name</label>\r\n                                        <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                            <atpar-text [(ngModel)]=\"txtVendorName\" [name]=\"txtVendorName\" *ngIf=\"!isEditMode\" [validations]=\"'alpha_numeric_underscore_hyphen_backslash_nospace'\" [id]=\"'txtVendorName'\" [ngModelOptions]=\"{standalone: true}\"></atpar-text>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div style=\"clear:both;\"></div>\r\n                                    <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                        <label for=\"\" class=\"control-label col-xs-12 col-md-4 col-sm-6\">From Date</label>\r\n                                        <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                            <p-calendar [showIcon]=\"true\" [id]=\"'FromDatePicker'\" [dateFormat]=\"'mm/dd/yy'\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" yearRange=\"1700:2200\" [(ngModel)]=\"txtFrmDate\" [required]=\"true\" [placeholder]=\"'From Date'\" [ngModelOptions]=\"{standalone: true}\"></p-calendar>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                        <label for=\"\" class=\"control-label col-xs-12 col-md-4 col-sm-6\">To Date</label>\r\n                                        <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                            <p-calendar [showIcon]=\"true\" [id]=\"'ToDatePicker'\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" yearRange=\"1700:2200\" [dateFormat]=\"'mm/dd/yy'\" [(ngModel)]=\"txtToDate\" [required]=\"true\" [placeholder]=\"'To Date'\" [ngModelOptions]=\"{standalone: true}\"></p-calendar>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                        <label class=\"radio-inline\">\r\n                                            <atpar-radioButton id=\"rbtnPODate\" [name]=\"Date\" [(ngModel)]=\"rbtnPODate\" value={{rbtnPODate}} label=\"PO Date\" [ngModelOptions]=\"{standalone: true}\"></atpar-radioButton>\r\n                                          \r\n                                        </label>\r\n                                        <label class=\"radio-inline\">\r\n                                            <atpar-radioButton id=\"rbtnDueDate\" [name]=\"Date\" [(ngModel)]=\"rbtnDueDate\" value={{rbtnDueDate}} label=\"Due Date\" [ngModelOptions]=\"{standalone: true}\"></atpar-radioButton>\r\n                                         \r\n                                        </label>\r\n                                    </div>\r\n                                    <div style=\"clear:both;\"></div>\r\n                                    <br />\r\n                                    <div class=\"col-xs-12 col-sm-6 col-sm-offset-5 col-md-5 col-md-offset-5\">\r\n                                        <button class=\"btn btn-purple sbtn\" id=\"'btnPoSearch'\" [disabled]=\"btnPoSearchEnableDisable\" *ngIf=\"btnPoSearch\" (click)=\"btnPoSearch_Click($event)\">PO Search &nbsp; <i class=\"fa fa-search\"></i></button>\r\n                                        <button class=\"btn btn-purple sbtn\" id=\"''btnIUTSearch''\" [disabled]=\"btnIUTSearchEnableDisable\" *ngIf=\"btnIUTSearch\" (click)=\"btnIutSearch_Click($event)\">IUT Search &nbsp; <i class=\"fa fa-search\"></i></button>\r\n                                        <button class=\"btn btn-purple sbtn\" id=\"'btnNonPo'\" [disabled]=\"btnNonPoEnableDisable\" *ngIf=\"btnNonPo\" (click)=\"btnNonPo_Click()\">NON PO &nbsp; <i class=\"fa fa-arrow-right\"></i></button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                        <div class=\"col-xs-12 table-responsive\" *ngIf=\"tbl\">\r\n                            <form class=\"form-horizontal form-label-left\">\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-5 form-group\">\r\n                                    <label for=\"\" class=\"control-label col-xs-12 col-md-4 col-sm-6\">Item ID</label>\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                        <div class=\"input-group\">\r\n                                            <atpar-ac-server [(ngModel)]=\"txtSerchItemId\"\r\n                                                             [suggestions]=\"lstFilterItems\" name=\"txtSerchItemId\" id=\"txtSerchItemId\"\r\n                                                             (completeMethod)=\"searchAutoCompleteItems($event)\"></atpar-ac-server>                                           \r\n                                            <span class=\"input-group-btn\">\r\n                                                <button class=\"btn btn-purple btn-grp-ht\" type=\"button\" (click)=\"btnTxtSerchItemId_Click()\"><i class=\"fa fa-search\"></i></button>&nbsp;\r\n                                                <button type=\"button\" class=\"btn btn-purple btn-grp-ht\" (click)=\"btnTxtPreSerchItemId_Click()\"><i class=\"fa fa-chevron-left\" aria-hidden=\"true\"></i></button>\r\n                                                <button type=\"button\" class=\"btn btn-purple btn-grp-ht\" (click)=\"btnTxtNextSerchItemId_Click()\"><i class=\"fa fa-chevron-right\" aria-hidden=\"true\"></i></button>\r\n                                            </span>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                    <label for=\"\" class=\"control-label col-xs-12 col-md-4 col-sm-6\">Carrier ID</label>\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                        <atpar-select [options]=\"ddlCarrier\" [(ngModel)]=\"selectedDdlCarrier\" [id]=\"'ddlCarrier'\" [ngModelOptions]=\"{standalone: true}\" filter=\"filter\" (onChange)=\"ddlCarrier_selectChanged(ddlCarrier,$event)\" [style]=\"{'width':'100%'}\"></atpar-select>                                     \r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-3 form-group\">\r\n                                    <label for=\"\" class=\"control-label col-xs-12 col-md-4 col-sm-6\">Lading</label>\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                        <atpar-text [(ngModel)]=\"txtLading\" [name]=\"txtLading\" [readonly]=\"txtLadingIsEditMode\" [validations]=\"'alpha_numeric_underscore_hyphen_backslash_nospace'\" [id]=\"'txtLading'\" [ngModelOptions]=\"{standalone: true}\"></atpar-text>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"clear:both;\"></div>\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-5 form-group\">\r\n                                    <label for=\"\" class=\"control-label col-xs-12 col-md-4 col-sm-6\">Pkgs</label>\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                        <atpar-text [(ngModel)]=\"txtPkgs\" [name]=\"txtPkgs\" [readonly]=\"txtPkgsIsReadonly\" [validations]=\"'alpha_numeric_underscore_hyphen_backslash_nospace'\" [id]=\"'txtPkgs'\" [ngModelOptions]=\"{standalone: true}\"  (focusout)=\"txtPkgs_TextChanged($event)\"></atpar-text>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                    <label for=\"\" class=\"control-label col-xs-12 col-md-4 col-sm-6\" *ngIf=\"blnLblExtTrk\">Ext Trk#</label>\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                        <atpar-text [(ngModel)]=\"txtTrk\" [name]=\"txtExtTrk\" [readonly]=\"txtExtTrkIsEditMode\" [validations]=\"'alpha_numeric_underscore_hyphen_backslash_nospace'\" [id]=\"'txtTrk'\" *ngIf=\"blnTxtExtTrk\" [ngModelOptions]=\"{standalone: true}\" (focusout)=\"txtTrk_TextChanged($event)\"></atpar-text>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-3 form-group\">\r\n                                    <ul class=\"list-inline\">\r\n                                        <li>\r\n                                            <span  style=\"cursor:pointer\"  (click)=\"receiveAll()\"><i class=\"fa fa-check fa-1x fa-bg fa-bg-lg bg-blue po-icon\"  *ngIf=\"blnImgCountAll\" value=\"Count All\" title=\"Receive All\" ></i></span>\r\n                                        </li>\r\n                                        <li>\r\n                                            <span style=\"cursor:pointer\" (click)=\"resetAll()\"> <i class=\"fa fa-refresh fa-1x fa-bg fa-bg-lg bg-green po-icon\" style=\"cursor:pointer\" *ngIf=\"blnImgResetAll\" value=\"Reset All\" title=\"Reset All\"></i></span>\r\n                                        </li>\r\n                                    </ul>\r\n\r\n                                </div>\r\n                            </form>\r\n                            <div class=\"col-xs-12 table-responsive\" *ngIf=\"true\">\r\n                                <div class=\"container no-scrl\">\r\n                                  <div>\r\n                                    <ul class=\"list-inline\">\r\n                                        <li class=\"col-xs-12 col-md-2 col-sm-4\">\r\n                                            <label for=\"\"><strong>Receiver ID : </strong> <span class=\"text-primary\"> {{lblReceiverId}}</span></label>\r\n                                        </li>\r\n                                        <li class=\"col-xs-12 col-md-2 col-sm-4\">\r\n                                            <label for=\"\"><strong> Buyer ID : </strong><span class=\"text-primary\">{{lblBuyerId}}</span></label><!--Ford,Jane-->\r\n                                        </li>\r\n                                        <li class=\"col-xs-12 col-md-2 col-sm-4\">\r\n                                            <label for=\"\"><strong> Ph : </strong><span class=\"text-primary\">{{lblPhoneValue}} </span></label>\r\n                                        </li>\r\n                                        <li class=\"pull-right\">\r\n                                            <div class=\"btn-group\" role=\"group\">\r\n                                                <button type=\"button\" class=\"btn btn-purple\" (click)=\"btnSend_Click($event)\">Send &nbsp;<i class=\"fa fa-share-square-o\" aria-hidden=\"true\"></i></button>\r\n                                                <button type=\"button\" class=\"btn btn-purple\" id=\"btnLot/Serial\" [disabled]=\"btnLotSerialDisable\" *ngIf=\"btnPntrLotSerialVisible\" (click)=\"btnLotSerial_Click($event)\">Lot / Serial &nbsp;<i class=\"fa fa-list-alt\" aria-hidden=\"true\"></i></button>\r\n                                                <button type=\"button\" class=\"btn btn-purple\" id=\"btnPrintHeader\" [disabled]=\"btnPntrHeaderDisable\" *ngIf=\"btnPntrHeaderVisible\" (click)=\"btnPrntHed_Click($event)\">Print Header &nbsp;<i class=\"fa fa-print\" aria-hidden=\"true\"></i></button>\r\n                                                <button type=\"button\" class=\"btn btn-purple\" id=\"btnPrintDetails\" [disabled]=\"btnPntrDetailsDisable\" *ngIf=\"btnPntrDetailsVisible\" (click)=\"btnPrntDet_Click($event)\">Print Details &nbsp;<i class=\"fa fa-print\" aria-hidden=\"true\"></i></button>\r\n                                            </div>\r\n                                        </li>\r\n                                    </ul>\r\n                                   </div>\r\n                                    <div class=\"clear\"></div>\r\n                                    <br />   \r\n                                    <div>\r\n                                        <p style=\"cursor:pointer\" [style.color]=\"gDisplayComments == 'Y' ? 'red' : 'black'\" title=\"{{lblHdrCommentsToolTip}}\">{{lblHdrComments}}</p>\r\n                                    </div>   \r\n                                    <!--PO items-->     \r\n                                    <atpar-datatable [value]=\"lstRecvSendPoLines\" [scrollable]=\"true\" [paginator]=\"true\" [pageLinks]=\"3\" [rows]=\"recordsPerPageSize\" expandableRows=\"true\" [rowsPerPageOptions]=\"[10,20,30,40,50,60,70,80,90,100]\" [globalFilter]=\"gb\" [responsive]=\"true\" *ngIf=\"blnGrdRecvPoItems\">\r\n\r\n                                        <p-column header=\"Action\" field=\"RBFlAG\" [style]=\"{'text-align':'center','width':'46px'}\">\r\n                                            <template let-col let-poLineRowData=\"rowData\" pTemplate type=\"body\">                                              \r\n                                                <atpar-radioButton name=\"linedata\" [(ngModel)]=\"selectedINVITEMID\" value=\"{{poLineRowData.INV_ITEM_ID}}\" (onClick)=\"grdRdbtnChanged($event)\"></atpar-radioButton>\r\n                                            </template>\r\n                                        </p-column>\r\n                                        <p-column *ngFor=\"let scrField of receItemColumns\" [field]=\"scrField.FIELD_NAME\" [header]=\"scrField.COLUMN_HEADER\" [sortable]=\"scrField.FIELD_NAME!='LINE_QTY'&&scrField.FIELD_NAME!='UNIT_OF_MEASURE'&&scrField.FIELD_NAME!='CARRIER_ID'&&scrField.FIELD_NAME!='EXT_TRK_NO'&&scrField.FIELD_NAME!='BILL_OF_LADING'&&scrField.FIELD_NAME!='NO_OF_BOXES'\" [filter]=\"scrField.ISFILTER\" [style]=\"{'text-align':'center','width':'146px'}\">\r\n                                            <template let-col let-poLineRowData=\"rowData\" pTemplate type=\"body\" *ngIf=\"scrField.FIELD_NAME=='INV_ITEM_ID'\">\r\n                                                <span *ngIf=\"!(poLineRowData.SCHED_COUNT>1)\">{{poLineRowData.INV_ITEM_ID}}</span>\r\n                                                <a *ngIf=\"(poLineRowData.SCHED_COUNT>1)\" style=\"color:purple;\" class=\"grid-link text-primary\" (click)=\"byschedule(poLineRowData)\"><u>{{poLineRowData.INV_ITEM_ID}}</u></a>                                               \r\n                                            </template>\r\n                                            <template let-col let-poLineRowData=\"rowData\" pTemplate type=\"body\" *ngIf=\"scrField.FIELD_NAME=='LINE_QTY'\">\r\n                                                <atpar-text [(ngModel)]=\"poLineRowData.QTY\" [disabled]=\"(poLineRowData.TXTQTYFLAG==true)||(poLineRowData.SCHED_COUNT>1) || (poLineRowData.QTYDESABLEFLAG==true)\" [name]=\"'txtRecvQty'\" [validations]=\"'numeric,max=5'\" [id]=\"'txtRecvQty'+poLineRowData.INV_ITEM_ID\" [ngModelOptions]=\"{standalone: true}\" (bindModelDataChange)=\"txtRecvQty_TextChanged($event,poLineRowData)\" (focusout)=\"txtCheckQty(poLineRowData,poLineRowData.QTY)\"></atpar-text>                                               \r\n                                            </template>\r\n                                            <template let-col let-poLineRowData=\"rowData\" pTemplate type=\"body\" *ngIf=\"scrField.FIELD_NAME=='INV_ITEM_ID'\">\r\n                                                <span *ngIf=\"!(poLineRowData.SCHED_COUNT>1)\">{{poLineRowData.INV_ITEM_ID}}</span>\r\n                                                <a *ngIf=\"(poLineRowData.SCHED_COUNT>1)\" style=\"color:purple;\" class=\"grid-link text-primary\" (click)=\"byschedule(poLineRowData)\"><u>{{poLineRowData.INV_ITEM_ID}}</u></a>\r\n                                            </template>\r\n                                            <template let-col let-poLineRowData=\"rowData\" pTemplate type=\"body\" *ngIf=\"scrField.FIELD_NAME=='UNIT_OF_MEASURE'\">\r\n                                                <atpar-select-grid [options]=\"poLineRowData.DDLUOMS\" [(ngModel)]=\"poLineRowData.SELECTEDUOM\" [disabled]=\"((poLineRowData.DDLUOMFLAG==true) || (poLineRowData.SCHED_COUNT>1))\" [id]=\"poLineRowData.INV_ITEM_ID+poLineRowData.UNIT_OF_MEASURE\" (onChange)=\"grdddlUOM_Changed(poLineRowData,$event)\"></atpar-select-grid>\r\n                                            </template>\r\n                                            <template let-col let-poLineRowData=\"rowData\" pTemplate type=\"body\" *ngIf=\"scrField.FIELD_NAME=='CARRIER_ID'\">\r\n                                                <atpar-select-grid [options]=\"grdDdlCarrier\" [(ngModel)]=\"poLineRowData.CARRIER_ID\" [disabled]=\"(poLineRowData.SCHED_COUNT>1)\" [id]=\"poLineRowData.INV_ITEM_ID+poLineRowData.CARRIER_ID\" [ngModelOptions]=\"{standalone: true}\" (onChange)=\"grdDdlCarrier_Changed(poLineRowData,$event)\"></atpar-select-grid>\r\n                                            </template>\r\n                                            <template let-col let-poLineRowData=\"rowData\" pTemplate type=\"body\" *ngIf=\"scrField.FIELD_NAME=='BILL_OF_LADING'\">\r\n                                                <atpar-text [(ngModel)]=\"poLineRowData.BILL_OF_LADING\" [disabled]=\"(poLineRowData.SCHED_COUNT>1)\" [name]=\"txtBillOfLading\" [validations]=\"'alpha_numeric_underscore_hyphen_backslash_nospace'\" [id]=\"'qtyx'\" [ngModelOptions]=\"{standalone: true}\"></atpar-text>\r\n                                            </template>\r\n                                            <template let-col let-poLineRowData=\"rowData\" pTemplate type=\"body\" *ngIf=\"scrField.FIELD_NAME=='LINE_NBR'\">\r\n                                                <span *ngIf=\"!(poLineRowData.SCHED_COUNT>1)\">{{poLineRowData.LINE_NBR}}</span>\r\n                                                <a *ngIf=\"(poLineRowData.SCHED_COUNT>1)\" style=\"color:purple;\" class=\"grid-link text-primary\" (click)=\"byschedule(poLineRowData)\"><u>{{poLineRowData.LINE_NBR}}</u></a>\r\n                                            </template>\r\n                                            <template let-col let-poLineRowData=\"rowData\" pTemplate type=\"body\" *ngIf=\"scrField.FIELD_NAME=='EXT_TRK_NO'\">\r\n                                                <atpar-text [(ngModel)]=\"poLineRowData.EXT_TRK_NO\" [disabled]=\"(poLineRowData.SCHED_COUNT>1)\" [name]=\"'txtExTrk'\" [validations]=\"''\" [id]=\"'txtExTrk'+poLineRowData.INV_ITEM_ID\" [ngModelOptions]=\"{standalone: true}\" (focusout)=\"txtExtTrackNoUnFocus(poLineRowData)\"></atpar-text>\r\n                                            </template>\r\n                                            <template let-col let-poLineRowData=\"rowData\" pTemplate type=\"body\" *ngIf=\"scrField.FIELD_NAME=='NO_OF_BOXES'\">\r\n                                                <atpar-text [(ngModel)]=\"poLineRowData.NO_OF_BOXES\" [name]=\"'txtNoofBoxes'\" [disabled]=\"(poLineRowData.SCHED_COUNT>1)\" [validations]=\"'numeric,max=3'\" [id]=\"'txtNoofBoxes'+poLineRowData.INV_ITEM_ID\" [ngModelOptions]=\"{standalone: true}\" (focusout)=\"txtNoOfBoxUnFocus(poLineRowData)\"></atpar-text>\r\n                                            </template>\r\n                                            <template let-col let-poLineRowData=\"rowData\" pTemplate type=\"body\" *ngIf=\"scrField.FIELD_NAME=='DESCR'\">\r\n                                                 <p style=\"cursor:pointer\" *ngIf=\"poLineRowData.DESCR.length>30\" title=\"{{poLineRowData.DESCR_TOOLTIP}}\">{{poLineRowData.DESCR}}</p>\r\n                                                <p *ngIf=\"poLineRowData.DESCR.length<=30\" >{{poLineRowData.DESCR}}</p>\r\n                                            </template>\r\n                                            <template let-col let-row=\"rowData\" pTemplate *ngIf=\"isShowColumn(scrField.FIELD_NAME,'ALL')\">\r\n                                                <span>{{row[col.field]}}</span>\r\n                                            </template>\r\n                                        </p-column>\r\n                                    </atpar-datatable>                                     \r\n                                  \r\n                                </div>\r\n                                <!--IUT items-->\r\n                                <div class=\"container no-scrl\">\r\n                                    <atpar-datatable [value]=\"lstRecvIutItems\" [scrollable]=\"true\" [paginator]=\"true\" [pageLinks]=\"3\" [rows]=\"recordsPerPageSize\" expandableRows=\"true\" [rowsPerPageOptions]=\"[10,20,30,40,50,60,70,80,90,100]\" [globalFilter]=\"gb\" [responsive]=\"true\" *ngIf=\"blnGrdRecvIutItems\">\r\n                                        <p-column header=\"Action\" [style]=\"{'text-align':'center','width':'46px'}\">\r\n                                            <template let-col let-iutRowData=\"rowData\" pTemplate type=\"body\">\r\n                                                <atpar-radioButton name=\"iutData\" [(ngModel)]=\"selectedINVITEMID\" value=\"{{iutRowData.ITEM_ID}}\" (onClick)=\"grdRdbtnChanged($event)\"></atpar-radioButton>&nbsp;\r\n                                            </template>\r\n                                        </p-column>                                           \r\n                                            <p-column *ngFor=\"let scrField of receIutItemColumns\" [field]=\"scrField.FIELD_NAME\" [header]=\"scrField.COLUMN_HEADER\" [sortable]=\"scrField.FIELD_NAME!='CARRIER_ID'&&scrField.FIELD_NAME!='BILL_OF_LADING'\" [filter]=\"scrField.ISFILTER\" [style]=\"{'text-align':'center','width':'146px'}\">                                                 \r\n                                                <template let-col let-iutRowData=\"rowData\" pTemplate type=\"body\" *ngIf=\"scrField.FIELD_NAME=='QTY'\">\r\n                                                    <atpar-text [(ngModel)]=\"iutRowData.QTY\" [name]=\"'txtRecvIutQty'\" [validations]=\"'numeric,max=5'\" [id]=\"'txtRecvQty'+iutRowData.ITEM_ID\"  [ngModelOptions]=\"{standalone: true}\"></atpar-text>\r\n                                                </template> \r\n                                                <template let-col let-iutRowData=\"rowData\" pTemplate type=\"body\" *ngIf=\"scrField.FIELD_NAME=='CARRIER_ID'\">\r\n                                                    <atpar-select-grid [options]=\"grdDdlCarrier\" [(ngModel)]=\"iutRowData.CARRIER_ID\" [id]=\"iutRowData.ITEM_ID+iutRowData.CARRIER_ID\" [ngModelOptions]=\"{standalone: true}\" (onChange)=\"iutGrdDdlCarrier_Changed(iutRowData,$event)\" filter=\"filter\"></atpar-select-grid>\r\n                                                </template>\r\n                                                <template let-col let-iutRowData=\"rowData\" pTemplate type=\"body\" *ngIf=\"scrField.FIELD_NAME=='BILL_OF_LADING'\">\r\n                                                    <atpar-text [(ngModel)]=\"iutRowData.BILL_OF_LADING\" [name]=\"txtBillOfLading\" [validations]=\"'alpha_numeric_underscore_hyphen_backslash_nospace'\" [id]=\"'qtyx'\" [ngModelOptions]=\"{standalone: true}\"></atpar-text>\r\n                                                </template> \r\n                                                <template let-col let-iutRowData=\"rowData\" pTemplate *ngIf=\"scrField.FIELD_NAME != 'QTY' && scrField.FIELD_NAME != 'CARRIER_ID' && scrField.FIELD_NAME!= 'BILL_OF_LADING'\">\r\n                                                    <span>{{iutRowData[col.field]}}</span>\r\n                                                </template>\r\n                                            </p-column>\r\n                                        </atpar-datatable>                                    \r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!--Scheduled Po-->\r\n                        <div *ngIf=\"bysch\">\r\n                            <form class=\"form-horizontal form-label-left\">\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                    <label for=\"\" class=\"control-label col-xs-12 col-md-4 col-sm-6\">Carrier ID</label>\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                        <atpar-select [options]=\"ddlCarrier\" [(ngModel)]=\"selectedSchdDdlCarrier\" [id]=\"'ddlCarrier'\" [ngModelOptions]=\"{standalone: true}\" filter=\"filter\" (onChange)=\"ddlSchdCarrier_selectChanged(ddlCarrier,$event)\" [style]=\"{'width':'100%'}\"></atpar-select>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                    <label for=\"\" class=\"control-label col-xs-12 col-md-4 col-sm-6\">Lading</label>\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                        <atpar-text [(ngModel)]=\"txtLading\" [name]=\"txtLading\" [readonly]=\"txtLadingIsEditMode\" [validations]=\"'alpha_numeric_underscore_hyphen_backslash_nospace'\" [id]=\"'txtLading'\" [ngModelOptions]=\"{standalone: true}\"></atpar-text>                                      \r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                    <label for=\"\" class=\"control-label col-xs-12 col-md-4 col-sm-6\">Pkgs</label>\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                        <atpar-text [(ngModel)]=\"txtPkgs\" [name]=\"'txtPkgs'\" [validations]=\"'numeric,max=5'\" [id]=\"'txtPkgs'\" [ngModelOptions]=\"{standalone: true}\" (focusout)=\"txtSchdPkgs_TextChanged($event)\"></atpar-text>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"clear\"></div>\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                    <label for=\"\" class=\"control-label col-xs-12 col-md-4 col-sm-6\">Ext Trk#</label>\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                        <atpar-text [(ngModel)]=\"txtSchdExTrk\" [name]=\"txtTrk\" [validations]=\"'alpha_numeric_underscore_hyphen_backslash_nospace'\" [id]=\"'txtTrk'\" [ngModelOptions]=\"{standalone: true}\" (focusout)=\"txtSchdTrk_TextChanged($event)\"></atpar-text><!--[readonly]=\"txtExtTrkIsEditMode\" *ngIf=\"blnTxtExtTrk\"-->\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-xs-12 col-sm-6 col-md-4 form-group\">\r\n                                    <div class=\"pull-right\">                                        \r\n                                        <button type=\"button\" class=\"btn btn-purple\" id=\"btnLot/Serial\" [disabled]=\"btnLotSerialDisable\" *ngIf=\"btnPntrLotSerialVisible\" (click)=\"btnLotSerial_Click($event)\">Lot / Serial &nbsp;<i class=\"fa fa-list-alt\" aria-hidden=\"true\"></i></button>\r\n                                        <button class=\"btn btn-purple sbtn\" (click)=\"print()\">Print Details &nbsp;<i class=\"fa fa-print\"></i></button>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                    <ul class=\"list-inline\">\r\n                                        <li>\r\n                                            <span style=\"cursor:pointer\" (click)=\"scheduleReceiveAll()\" *ngIf=\"blnImgCountAll\"><i class=\"fa fa-check fa-1x fa-bg fa-bg-lg bg-blue po-icon\" value=\"Count All\" title=\"Receive All\"></i></span>\r\n                                        </li>\r\n                                        <li>\r\n                                            <span style=\"cursor:pointer\" (click)=\"scheduleResetAll()\" *ngIf=\"blnImgResetAll\"> <i class=\"fa fa-refresh fa-1x fa-bg fa-bg-lg bg-green po-icon\" style=\"cursor:pointer\" value=\"Reset All\" title=\"Reset All\"></i></span>\r\n                                        </li>\r\n                                    </ul>\r\n                                </div> \r\n                            </form>\r\n\r\n                            <div class=\"col-xs-12 table-responsive\">\r\n                                <div class=\"container no-scrl\">\r\n                                    <atpar-datatable [value]=\"dtScheduleItems\" [paginator]=\"true\" [scrollable]=\"true\" [pageLinks]=\"3\" [rows]=\"recordsPerPageSize\" expandableRows=\"true\" [rowsPerPageOptions]=\"[10,20,30,40,50,60,70,80,90,100]\" [globalFilter]=\"gb\" [responsive]=\"true\">\r\n                                        <p-column header=\"Action\" field=\"RBFlAG\" [style]=\"{'text-align':'center','width':'46px'}\">\r\n                                            <template let-col let-ven=\"rowData\" pTemplate type=\"body\">\r\n                                                <atpar-radioButton name=\"rbtn\" [(ngModel)]=\"selectedSCHEDNBR\" value=\"{{ven.SCHED_NBR}}\" (onClick)=\"radioButtonChanged($event)\"></atpar-radioButton>&nbsp;\r\n                                            </template>\r\n                                        </p-column>\r\n                                        <p-column *ngFor=\"let scrField of receSchdlItemColumns\" [field]=\"scrField.FIELD_NAME\" [header]=\"scrField.COLUMN_HEADER\" [sortable]=\"false\" [filter]=\"scrField.ISFILTER\" [style]=\"{'text-align':'center','width':'146px'}\">\r\n                                            <template let-col let-recShdRowData=\"rowData\" pTemplate type=\"body\" *ngIf=\"scrField.FIELD_NAME=='QTY'\">\r\n                                                <atpar-text [(ngModel)]=\"recShdRowData.QTY\" [name]=\"'txtRecvQty'\" [disabled]=\"(recShdRowData.TXTQTYFLAG==true) || (recShdRowData.QTYDESABLEFLAG==true)\" [validations]=\"'numeric,max=5'\" [id]=\"'txtRecvQty'+recShdRowData.SCHED_NBR\" [ngModelOptions]=\"{standalone: true}\" (bindModelDataChange)=\"txtSchdRecvQty_TextChanged($event,recShdRowData)\" (focusout)=\"txtCheckQty(recShdRowData,recShdRowData.QTY)\"></atpar-text>\r\n                                            </template>\r\n                                            <template let-col let-recShdRowData=\"rowData\" pTemplate type=\"body\" *ngIf=\"scrField.FIELD_NAME=='UNIT_OF_MEASURE'\">\r\n                                                <atpar-select-grid [options]=\"recShdRowData.DDLUOMS\" [disabled]=\"(recShdRowData.DDLUOMFLAG==true)\" [id]=\"recShdRowData.INV_ITEM_ID+recShdRowData.UNIT_OF_MEASURE\" (onChange)=\"grdddlUOM_Changed(recShdRowData,$event)\"></atpar-select-grid> \r\n                                            </template>\r\n                                            <template let-col let-recShdRowData=\"rowData\" pTemplate type=\"body\" *ngIf=\"scrField.FIELD_NAME=='CARRIER_ID'\">\r\n                                                <atpar-select-grid [options]=\"grdDdlCarrier\" [(ngModel)]=\"recShdRowData.CARRIER_ID\" [id]=\"recShdRowData.INV_ITEM_ID+recShdRowData.CARRIER_ID\" [ngModelOptions]=\"{standalone: true}\" (onChange)=\"schdGrdDdlCarrier_Changed(recShdRowData,$event)\"></atpar-select-grid>\r\n                                            </template>\r\n                                            <template let-col let-recShdRowData=\"rowData\" pTemplate type=\"body\" *ngIf=\"scrField.FIELD_NAME=='BILL_OF_LADING'\">\r\n                                                <atpar-text [(ngModel)]=\"recShdRowData.BILL_OF_LADING\" [name]=\"txtBillOfLading\" [validations]=\"'alpha_numeric_underscore_hyphen_backslash_nospace'\" [id]=\"'txtBillOfLading'+recShdRowData.SCHED_NBR\" [ngModelOptions]=\"{standalone: true}\"></atpar-text>\r\n                                            </template>\r\n                                            <template let-col let-recShdRowData=\"rowData\" pTemplate type=\"body\" *ngIf=\"scrField.FIELD_NAME=='EXT_TRK_NO'\">\r\n                                                <atpar-text [(ngModel)]=\"recShdRowData.EXT_TRK_NO\" [name]=\"txtEXTTRKNO\" *ngIf=\"!isEditMode\" [validations]=\"'alpha_numeric_underscore_hyphen_backslash_nospace'\" [id]=\"'txtEXTTRKNO'\" [ngModelOptions]=\"{standalone: true}\" (focusout)=\"txtSchExtTrackNoUnFocus(recShdRowData)\"></atpar-text>\r\n                                            </template>\r\n                                            <template let-col let-recShdRowData=\"rowData\" pTemplate type=\"body\" *ngIf=\"scrField.FIELD_NAME=='NO_OF_BOXES'\">\r\n                                                <atpar-text [(ngModel)]=\"recShdRowData.NO_OF_BOXES\" [name]=\"'txtNoofBoxes'\" [disabled]=\"(recShdRowData.SCHED_COUNT>1)\" [validations]=\"'numeric,max=3'\" [id]=\"'txtNoofBoxes'+recShdRowData.SCHED_NBR\" [ngModelOptions]=\"{standalone: true}\" (focusout)=\"txtSchdNoOfBoxUnFocus(recShdRowData)\"></atpar-text>                                                \r\n                                            </template>\r\n                                            <template let-col let-recShdRowData=\"rowData\" pTemplate *ngIf=\"scrField.FIELD_NAME != 'QTY' && scrField.FIELD_NAME != 'CARRIER_ID' && scrField.FIELD_NAME!= 'BILL_OF_LADING'&& scrField.FIELD_NAME != 'UNIT_OF_MEASURE' && scrField.FIELD_NAME!= 'EXT_TRK_NO'&& scrField.FIELD_NAME!= 'NO_OF_BOXES'\">\r\n                                                <span>{{recShdRowData[col.field]}}</span>\r\n                                            </template>\r\n                                        </p-column>\r\n                                    </atpar-datatable>                                 \r\n                                </div>\r\n                                <br>\r\n                                <div class=\"col-xs-12 col-sm-6 col-sm-offset-5 col-md-4 col-md-offset-5\">\r\n                                    <button class=\"btn btn-purple sbtn\" (click)=\"btnSchedulePo_Save('Save')\">Save &nbsp;<i class=\"fa fa-floppy-o\"></i></button>\r\n                                    <button class=\"btn btn-purple sbtn\" (click)=\"goPage()\"><i class=\"fa fa-arrow-left\"></i> &nbsp;Go Back</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!--PO Search---->\r\n                        <div class=\"col-xs-12 table-responsive\" *ngIf=\"recvSearchPos\">\r\n                            <div class=\"container\">\r\n                                <atpar-datatable [value]=\"lstSeachItems\" [style]=\"{'width':'100%'}\" *ngIf=\"grdRecvSearchPos\" [paginator]=\"true\" [pageLinks]=\"3\" [rows]=\"recordsPerPageSize\" expandableRows=\"true\" [rowsPerPageOptions]=\"[10,20,30,40,50,60,70,80,90,100]\" [globalFilter]=\"gb\" [responsive]=\"true\">\r\n                                    <p-column header=\"Action\" field=\"RBFlAG\" [style]=\"{'text-align':'center','width':'4%'}\">\r\n                                        <template let-col let-recvPosData=\"rowData\" pTemplate type=\"body\">\r\n                                            <atpar-radioButton name=\"groupname\" value=\"{{recvPosData.RBFlAG}}\" (onClick)=\"grdPoSearchRdbtnChanged(recvPosData,$event)\"></atpar-radioButton>&nbsp;\r\n                                        </template>\r\n                                    </p-column>\r\n                                    <p-column field=\"BUSINESS_UNIT\" header=\"B Unit\" [sortable]=\"true\" [filter]=\"true\" filterPlaceholder=\"Search\"></p-column>\r\n                                    <p-column field=\"POID\" header=\"PO ID\" [sortable]=\"true\" [filter]=\"true\" filterPlaceholder=\"Search\"></p-column>\r\n                                    <p-column field=\"PODT\" header=\"PO Date\" [sortable]=\"true\" [filter]=\"true\" filterPlaceholder=\"Search\"></p-column><!--PO_DATE SHIPTO_ID  VENDOR_ID  RECEIVER_ID-->\r\n                                    <p-column field=\"SHPTID\" header=\"Ship To ID\" [sortable]=\"true\" [filter]=\"true\" filterPlaceholder=\"Search\"></p-column>\r\n                                    <p-column field=\"VNDRID\" header=\"Vendor ID\" [sortable]=\"true\" [filter]=\"true\" filterPlaceholder=\"Search\"></p-column>\r\n                                    <p-column field=\"RECVID\" header=\"Reciver ID\" [sortable]=\"true\" [filter]=\"true\" filterPlaceholder=\"Search\"></p-column>\r\n                                </atpar-datatable>\r\n                            </div>\r\n                            <br>\r\n                            <div class=\"col-xs-12 col-sm-6 col-sm-offset-5 col-md-4 col-md-offset-5\">\r\n                                <button class=\"btn btn-purple sbtn\" (click)=\"btnSearchPosGet_Click($event)\">Get &nbsp;<i class=\"fa fa-arrow-right\"></i></button><!--get()-->\r\n                                <button class=\"btn btn-purple sbtn\" (click)=\"searchPoBack()\"><i class=\"fa fa-arrow-left\"></i> &nbsp;Go Back</button>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!--IUT Search---->\r\n                        <div class=\"col-xs-12 table-responsive\" *ngIf=\"recvIUTSearch\">\r\n                            <div class=\"container\">\r\n                                <atpar-datatable [value]=\"lstRecvSearchIuts\" [paginator]=\"true\" [pageLinks]=\"3\" [rows]=\"recordsPerPageSize\" expandableRows=\"true\" [rowsPerPageOptions]=\"[10,20,30,40,50,60,70,80,90,100]\" [globalFilter]=\"gb\" [responsive]=\"true\">\r\n                                    <p-column header=\"Action\" field=\"RBFlAG\" [style]=\"{'text-align':'center','width':'4%'}\">\r\n                                        <template let-col let-recvIUTData=\"rowData\" pTemplate type=\"body\">\r\n                                            <atpar-radioButton name=\"groupname\" value=\"{{recvIUTData.RBFlAG}}\" (onClick)=\"grdrecvIUTDataRdbtnChanged(recvIUTData,$event)\"></atpar-radioButton>&nbsp;\r\n                                        </template>\r\n                                    </p-column>\r\n                                    <p-column field=\"DESTIN_BU\" header=\"Dest.BUnit\"></p-column>\r\n                                    <p-column field=\"INTERUNIT_ID\" header=\"Inter Unit ID\"></p-column>\r\n                                    <p-column field=\"ORIG_BU\" header=\"Source BUnit\"></p-column>\r\n                                    <p-column field=\"SHIP_DTTM\" header=\"Shipped Date\"></p-column>\r\n                                </atpar-datatable>\r\n                            </div>\r\n                            <br>\r\n                            <div class=\"col-xs-12 col-sm-6 col-sm-offset-5 col-md-4 col-md-offset-5\">\r\n                                <button class=\"btn btn-purple sbtn\" (click)=\"btnSearchIUTGet_Click($event)\">Get &nbsp;<i class=\"fa fa-arrow-right\"></i></button>\r\n                                <button class=\"btn btn-purple sbtn\" (click)=\"iutSearchPoBack()\"><i class=\"fa fa-arrow-left\"></i> &nbsp;Go Back</button>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!--Lot Serial data---->\r\n                        <div class=\"col-xs-12 table-responsive\" *ngIf=\"lotserial\">\r\n                            <button class=\"btn btn-purple sbtn pull-right\" style=\"margin-right:10px;\" (click)=\"btnLotSerialAdd_Click()\">Add &nbsp;<i class=\"fa fa-plus\"></i></button>\r\n                            <br>\r\n                            <div class=\"container\"  *ngIf=\"lotserialGrid\">\r\n                                <atpar-datatable [value]=\"lstFinalLotSerial\" [paginator]=\"true\" [pageLinks]=\"3\" [rows]=\"recordsPerPageSize\" expandableRows=\"true\" [rowsPerPageOptions]=\"[10,20,30,40,50,60,70,80,90,100]\" [globalFilter]=\"gb\" [responsive]=\"true\">\r\n                                  \r\n                                    <p-column field=\"\" header=\"Action\" [style]=\"{'text-align':'center','width':'5%'}\">\r\n                                        <template let-lotserial=\"rowData\" pTemplate type=\"body\">\r\n                                            <i class=\"fa fa-pencil fa-bg bg-blue\" title=\"Edit\" style=\"cursor:pointer;\" (click)=\"btnLotSerialGrdEdit_Click(lotserial.LOT_ID,lotserial.SERIAL_ID,lotserial.QTY,lotserial.EXPIRY_DATE,lotserial.SELECTED_UOM,lotserial.ROWINDEX,lotserial)\"></i>\r\n                                            <i class=\"fa fa-trash fa-bg bg-blue\" title=\"Delete\" style=\"cursor:pointer;\" (click)=\"btnLotSerialDelete_Click(lotserial)\"></i>\r\n                                        </template>\r\n                                    </p-column>\r\n                                    <p-column field=\"SERIAL_ID\" header=\"Serial ID\" [sortable]=\"true\" [style]=\"{'width':'25%'}\"></p-column>\r\n                                    <p-column field=\"LOT_ID\" header=\"Lot ID\" [sortable]=\"true\" [style]=\"{'width':'25%'}\"></p-column>\r\n                                    <p-column field=\"QTY\" header=\"Qty\" [sortable]=\"true\" [style]=\"{'width':'6%'}\"></p-column>\r\n                                    <p-column field=\"EXPIRY_DATE\" header=\"Exp Date\" [sortable]=\"true\" [style]=\"{'width':'14%'}\"></p-column>\r\n                                    <p-column field=\"SELECTED_UOM\" header=\"UOM\" [sortable]=\"true\" [style]=\"{'width':'6%'}\"></p-column>\r\n                                    <p-column field=\"ROWINDEX\" header=\"rowindex\" [sortable]=\"true\" *ngIf=\"false\" [style]=\"{'width':'6%'}\"></p-column>\r\n                                </atpar-datatable>\r\n                            </div>\r\n                            <br>\r\n                            <div class=\"col-xs-12 col-sm-6 col-sm-offset-5 col-md-4 col-md-offset-5\">\r\n                                <button class=\"btn btn-purple sbtn\" (click)=\"btnLotSerialSave_Click()\" *ngIf=\"lotserialGrid || lotSerialDeleteFlg\">Save &nbsp;<i class=\"fa fa-floppy-o\"></i></button>\r\n                                <button class=\"btn btn-purple sbtn\" (click)=\"btnLotSerialGoBack_Click()\" *ngIf=\"lotserial\"><i class=\"fa fa-arrow-left\"></i>&nbsp; Go Back</button>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        <form class=\"form-horizontal form-label-left\" *ngIf=\"editform\" novalidate>\r\n                            <div class=\"col-xs-12\">\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Serial ID</label>\r\n                                    <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                        <atpar-text [(ngModel)]=\"LotSerialentity.SERIAL_ID\" [name]=\"txtLotserialSerialId\" [readonly]=\"txtSerialIDIsEditMode\" [isFocused]=\"'true'\" [id]=\"'txtLotserialSerialId'\" [ngModelOptions]=\"{standalone: true}\" title=\"[ Allows alphabets,numerics,spaces and special characters]\"></atpar-text>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Lot ID</label>\r\n                                    <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                        <atpar-text [(ngModel)]=\"LotSerialentity.LOT_ID\" [name]=\"txtLotserialLotId\" [readonly]=\"txtLotIdIsEditMode\" [id]=\"'txtLotserialLotId'\" [ngModelOptions]=\"{standalone: true}\" title=\"[Allows alphabets,numerics,spaces and special characters]\"></atpar-text>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Qty</label>\r\n                                    <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                        <atpar-text [(ngModel)]=\"LotSerialentity.QTY\" [name]=\"txtLotserialQty\" [readonly]=\"txtLotSerialQtyIsEditMode\" [validations]=\"'mandatory,numeric,max=5'\" [id]=\"'txtLotserialQty'\" [ngModelOptions]=\"{standalone: true}\" title=\"[Allows only numeric values]\"></atpar-text>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Exp Date</label>\r\n                                    <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                        <p-calendar [showIcon]=\"true\" [id]=\"'txtLotserialExpDate'\" [dateFormat]=\"'mm/dd/yy'\" [(ngModel)]=\"txtLotserialExpDate\" [placeholder]=\"'MM/DD/YYYY'\" [ngModelOptions]=\"{standalone: true}\"></p-calendar>\r\n                                        <!--<atpar-text [(ngModel)]=\"txtLotserialExpDate\" [name]=\"txtLotserialExpDate\"[showTime]=\"true\"[hourFormat]=\"12\" [readonly]=\"txtLotserialExpDateIsEditMode\" [validations]=\"'alpha_numeric_underscore_hyphen_backslash_nospace'\" [id]=\"'txtLotserialExpDate'\" [ngModelOptions]=\"{standalone: true}\" title=\"[ Any character A-Z,a-z,0-9,!,', #,$...]\"></atpar-text>-->\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">UOM</label>\r\n                                    <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                        <atpar-select [options]=\"LotSerialentity.DDLUOMS\" [(ngModel)]=\"LotSerialentity.SELECTED_UOM\" [disabled]=\"ddlRecvUomEnable\" [id]=\"'ddlErps'\" filter=\"filter\" [ngModelOptions]=\"{standalone: true}\" (onChange)=\"LotSerial_selectChanged($event)\"></atpar-select>\r\n                                        <!--selectedlotserialUOM-->\r\n                                     </div>\r\n                                </div>\r\n\r\n                                <div class=\"col-xs-12 col-sm-6 col-sm-offset-5 col-md-4 col-md-offset-4\">\r\n                                    <button class=\"btn btn-purple small\" (click)=\"btnLotSerialEditSave_Click()\">Save  &nbsp;<i class=\"fa fa-floppy-o\"></i></button>\r\n                                    <button class=\"btn btn-purple small\" (click)=\"btnGoBackToLotSerial_Click()\"><i class=\"fa fa-arrow-left\"> &nbsp;</i>Go Back</button>\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n\r\n                        <!--Printer pop up---->\r\n                        <div class=\"col-xs-12 table-responsive\" *ngIf=\"printtbl\">\r\n                            <div class=\"container\">\r\n                                <atpar-datatable [value]=\"lstPrintersDetails\" [paginator]=\"true\" [pageLinks]=\"3\" [rows]=\"recordsPerPageSize\" expandableRows=\"true\" [rowsPerPageOptions]=\"[10,20,30,40,50,60,70,80,90,100]\" [globalFilter]=\"gb\" [responsive]=\"true\">\r\n                                  \r\n                                    <p-column header=\"Select\" field=\"RBPRINTER\" [style]=\"{'text-align':'center'}\">\r\n                                        <template let-col let-printerRowData=\"rowData\" pTemplate type=\"body\">\r\n                                            <atpar-radioButton name=\"linedata\" [(ngModel)]=\"selectedPrinterName\" value=\"{{printerRowData.FRIENDLY_NAME}}\" (onClick)=\"grdRbPrinterChanged(printerRowData,$event)\"></atpar-radioButton>\r\n                                        </template>\r\n                                    </p-column>                                  \r\n                                    <p-column field=\"FRIENDLY_NAME\" header=\"Printer Name\" [sortable]=\"true\" [filter]=\"true\" filterPlaceholder=\"Search\"></p-column>\r\n                                    <p-column field=\"IP_ADDRESS\" header=\"IP Address\" [sortable]=\"true\" [filter]=\"true\" filterPlaceholder=\"Search\"></p-column>\r\n                                    <p-column field=\"LABEL_DESCRIPTION\" header=\"labelDescription\" [sortable]=\"true\" [filter]=\"true\" filterPlaceholder=\"Search\"></p-column>\r\n                                </atpar-datatable>\r\n                            </div>\r\n                            <br>\r\n                            <div class=\"col-xs-12 col-sm-6 col-sm-offset-5 col-md-4 col-md-offset-5\">\r\n                                <button class=\"btn btn-purple sbtn\" (click)=\"btnDetailPrint_Click()\">Print &nbsp;<i class=\"fa fa-print\"></i></button>\r\n                                <button class=\"btn btn-purple sbtn\" (click)=\"printback()\"><i class=\"fa fa-arrow-left\"></i>&nbsp; Go Back</button>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!--ASNPO pop up---->\r\n                        <div class=\"col-xs-12 table-responsive\" *ngIf=\"purchase\">                          \r\n                            <ul class=\"list-unstyled\">\r\n                                <li><label><strong>Multiple Receipts exists for this Purchase Order</strong></label></li>\r\n                                <li>Business Unit : <strong>{{selectedBUnits}}</strong></li>\r\n                                <li>PO ID : <strong>{{txtPONumber}}</strong></li>\r\n                            </ul>\r\n                            <br />\r\n                            <div class=\"container\">\r\n                                <atpar-datatable [value]=\"lstAsnDetails\" [paginator]=\"true\" [pageLinks]=\"3\" [rows]=\"recordsPerPageSize\" expandableRows=\"true\" [rowsPerPageOptions]=\"[10,20,30,40,50,60,70,80,90,100]\" [globalFilter]=\"gb\" [responsive]=\"true\">\r\n                                    <p-column header=\"Action\" field=\"ASNRBFLAG\" [style]=\"{'text-align':'center','width':'4%'}\">\r\n                                        <template let-AsnPoRowData=\"rowData\" pTemplate type=\"body\">\r\n                                            <atpar-radioButton name=\"rdbtnRecAsn\" [(ngModel)]=\"selectedReceiverId\" value=\"{{AsnPoRowData.RECEIVERID}}\" (onClick)=\"asnGrdRdbtnChanged($event)\"></atpar-radioButton>\r\n                                        </template>\r\n                                    </p-column>\r\n                                    <p-column field=\"RECEIVERID\" header=\"Receiver ID\"></p-column>\r\n                                    <p-column field=\"RECPT_DATE\" header=\"Receiver Date\"></p-column>\r\n                                    <p-column field=\"INVOICE_NO\" header=\"Invoice NO\" *ngIf=\"gStrASNDownload == 'Invoice No'\"></p-column>\r\n                                    <p-column field=\"PACKSLIP_NO\" header=\"Pack Slip No\" *ngIf=\"gStrASNDownload == 'Pack Slip No'\"></p-column>\r\n                                </atpar-datatable>\r\n                            </div>\r\n                            <br>\r\n                            <div class=\"col-xs-12 col-sm-6 col-sm-offset-5 col-md-4 col-md-offset-5\">\r\n                                <button class=\"btn btn-purple sbtn\" (click)=\"btnAsnGet_Click()\">Get  &nbsp;<i class=\"fa fa-arrow-right\"></i></button>\r\n                                <button class=\"btn btn-purple sbtn\" (click)=\"btnAsnCancel_Click()\">Cancel  &nbsp;<i class=\"fa fa-arrow-right\"></i></button>\r\n                                <button class=\"btn btn-purple sbtn\" (click)=\"btnAsnGetBack_Click()\"><i class=\"fa fa-arrow-left\"></i>&nbsp; Go Back</button>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!--Non Po-->\r\n                        <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\" *ngIf=\"nonPO\">\r\n                            <div class=\"\">\r\n                                <div class=\"\">\r\n                                    <form class=\"form-horizontal form-label-left\">\r\n                                        <div class=\"col-xs-12\">\r\n                                            <div class=\"form-group\">\r\n                                                <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\" *ngIf=\"lblTrackingNumber\">Tracking Number</label>\r\n                                                <button class=\"btn btn-purple sbtn\" (click)=\"btnTrackingNumber_Click()\" *ngIf=\"btnTrackingNumber\">Tracking Number</button>\r\n                                                <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                                    <atpar-text [(ngModel)]=\"poNewItem.TRACKING_NBR\" [name]=\"txtTrackNo\" [id]=\"'txtTrackNo'\" [validations]=\"'mandatory'\" [ngModelOptions]=\"{standalone: true}\" (bindModelDataChange)=\"bindModelDataChange($event)\"></atpar-text>\r\n                                                </div>\r\n                                                <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"form-group\">\r\n                                                <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Location</label>\r\n                                                <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                                    <atpar-text [(ngModel)]=\"poNewItem.LOCATION\" [name]=\"txtLocation\" [validations]=\"'max=30'\" [id]=\"'txtLocation'\" [ngModelOptions]=\"{standalone: true}\"></atpar-text>\r\n                                                </div>\r\n                                                <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"form-group\">\r\n                                                <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Loc Desc</label>\r\n                                                <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                                    <atpar-text [(ngModel)]=\"poNewItem.LOCDESCR\" [name]=\"txtLocationDesc\" [id]=\"'txtLocationDesc'\" [ngModelOptions]=\"{standalone: true}\"></atpar-text>\r\n                                                </div>\r\n                                                <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"form-group\">\r\n                                                <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Recipient</label>\r\n                                                <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                                    <atpar-text [(ngModel)]=\"poNewItem.DELIVER_TO\" [validations]=\"'max=40'\" [name]=\"txtRecipient\" [id]=\"'txtRecipient'\" [ngModelOptions]=\"{standalone: true}\"></atpar-text>\r\n                                                </div>\r\n                                                <div class=\"col-md-1 col-sm-1 col-xs-12 control-label lbl-left\"><span style=\"cursor:pointer\" (click)=\"btnRecipient_Click()\"><i class=\"fa fa-flag fa-bg-lg bg-red\"></i></span></div>\r\n                                                <div class=\"col-md-5 col-sm-5 col-xs-12 help_txt\">\r\n\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"form-group\">\r\n                                                <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">PKGS</label>\r\n                                                <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                                    <atpar-text [(ngModel)]=\"poNewItem.NO_OF_PACKAGES\" [name]=\"txtPKGS\" [validations]=\"'numeric,max=3'\" [id]=\"'txtPKGS'\" [ngModelOptions]=\"{standalone: true}\"></atpar-text>\r\n                                                </div>\r\n                                                <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"form-group\">\r\n                                                <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Vendor</label>\r\n                                                <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                                    <atpar-text [(ngModel)]=\"poNewItem.VENDOR_ID\" [name]=\"txtVendor\" [id]=\"'txtVendor'\" [ngModelOptions]=\"{standalone: true}\"></atpar-text>\r\n                                                </div>\r\n                                                <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"form-group\">\r\n                                                <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Item Description</label>\r\n                                                <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                                    <atpar-text [(ngModel)]=\"poNewItem.DESCR\" [name]=\"txtItemDescription\" [id]=\"'ItemDescription'\" [ngModelOptions]=\"{standalone: true}\"></atpar-text>\r\n                                                </div>\r\n                                                <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"form-group\">\r\n                                                <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">ShipTo ID</label>\r\n                                                <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                                    <atpar-text [(ngModel)]=\"poNewItem.SHIPTO_ID\" [name]=\"txtShipId\" [disabled]=\"blntxtShipIdDisable\" [validations]=\"'mandatory'\" [id]=\"'txtShipId'\" [ngModelOptions]=\"{standalone: true}\" *ngIf=\"!blnShipToId\" (bindModelDataChange)=\"bindModelDataChange($event)\"></atpar-text>\r\n                                                    <atpar-select [options]=\"ddlShipToId\" [id]=\"'ddlShipToId'\" [required]=\"true\" [disabled]=\"blntxtShipIdDisable\" [(ngModel)]=\"poNewItem.SHIPTO_ID\" [ngModelOptions]=\"{standalone: true}\" filter=\"filter\" (onChange)=\"shipNonPoToId_selectChanged(ddlShipToId,$event)\" *ngIf=\"blnShipToId\"></atpar-select>\r\n                                                    <!--<atpar-select [options]=\"ddlShipToId\" [style]=\"{'width':'100%'}\" (bindModelDataChange)=\"bindModelDataChange($event)\" [validations]=\"'mandatory'\" [id]=\"'ddlShipToID'\" [(ngModel)]=\"poNewItem.SHIPTOID\" [ngModelOptions]=\"{standalone: true}\" filter=\"filter\"></atpar-select>-->\r\n                                               \r\n                                                 </div>\r\n                                                <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"form-group\">\r\n                                                <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Dept ID</label>\r\n                                                <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                                    <atpar-text [(ngModel)]=\"poNewItem.DEPT_ID\" [name]=\"txtDeptID\" [id]=\"'txtDeptID'\"\r\n                                                                [validations]=\"'max=50'\"\r\n                                                                [ngModelOptions]=\"{standalone: true}\"></atpar-text>\r\n                                                </div>\r\n                                                <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"form-group\">\r\n                                                <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">PO ID</label>\r\n                                                <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                                    <atpar-text [(ngModel)]=\"poNewItem.PO_ID\" [name]=\"txtPOID\" [id]=\"'txtPOID'\" [ngModelOptions]=\"{standalone: true}\"></atpar-text>\r\n                                                </div>\r\n                                                <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"form-group\">\r\n                                                <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Line #</label>\r\n                                                <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                                    <atpar-text [(ngModel)]=\"poNewItem.LINE_NBR\" [name]=\"txtLine\" [validations]=\"'numeric,max=3'\" [id]=\"'txtLine'\" [ngModelOptions]=\"{standalone: true}\"></atpar-text>\r\n                                                </div>\r\n                                                <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"form-group\">\r\n                                                <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Carrier ID</label>\r\n                                                <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                                    <atpar-select [options]=\"ddlNonPOCarrier\" [style]=\"{'width':'100%'}\" [id]=\"'ddlCarrierID'\" [(ngModel)]=\"poNewItem.CARRIER_ID\" [ngModelOptions]=\"{standalone: true}\" filter=\"filter\"></atpar-select>\r\n                                                </div>\r\n                                                <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"form-group\">\r\n                                                <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Package Type</label>\r\n                                                <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                                    <atpar-text [(ngModel)]=\"poNewItem.TYPE_OF_PACKAGE\" [name]=\"txtPackageType\" [validations]=\"'max=30'\" [id]=\"'txtPackageType'\" [ngModelOptions]=\"{standalone: true}\"></atpar-text>\r\n                                                </div>\r\n                                                <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"form-group\">\r\n                                                <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Comments</label>\r\n                                                <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                                    <atpar-text [(ngModel)]=\"poNewItem.COMMENTS\" [name]=\"txtComments\" [id]=\"'txtComments'\" [ngModelOptions]=\"{standalone: true}\"></atpar-text>\r\n                                                </div>\r\n                                                <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"col-xs-12 col-md-6 col-md-offset-3 col-sm-8 col-sm-offset-2\">\r\n                                <button class=\"btn btn-purple sbtn\" [disabled]=\"nonPoDisable\" (click)=\"btnPrint_Click()\">Print &nbsp;<i class=\"fa fa-print\"></i></button>\r\n                                <button class=\"btn btn-purple sbtn\" [disabled]=\"nonPoDisable\" (click)=\"btnNonPoSend_Click()\">Send &nbsp;<i class=\"fa fa-share-square-o\"></i></button>\r\n                                <button class=\"btn btn-purple sbtn\" [disabled]=\"nonPoDisable\" (click)=\"btnNonPoSend_Click()\">Save & New &nbsp;<i class=\"fa fa-floppy-o\"></i></button>\r\n                                <button class=\"btn btn-purple sbtn\" [disabled]=\"nonPoDisable\" (click)=\"btnSaveNext_Click(save)\">Save & Next &nbsp;<i class=\"fa fa-floppy-o\"></i></button>\r\n                                <button class=\"btn btn-purple sbtn\" (click)=\"btnGoBack_Click()\"><i class=\"fa fa-arrow-left\"></i> &nbsp;Go Back</button>\r\n                              \r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"col-xs-12\" *ngIf=\"nonPOReceipts\">\r\n                            <div class=\"container\">\r\n                                <div class=\"\" *ngIf=\"blnRecipients\">\r\n                                    <atpar-datatable [value]=\"lstRecipients\" [paginator]=\"true\" [pageLinks]=\"3\" [rows]=\"recordsPerPageSize\" expandableRows=\"true\" [rowsPerPageOptions]=\"[10,20,30,40,50,60,70,80,90,100]\" [globalFilter]=\"gb\" [responsive]=\"true\">\r\n                                        <!--<p-column expander=\"true\" styleClass=\"col-icon\"></p-column>-->\r\n                                        <p-column header=\"Action\" [style]=\"{'text-align':'center','width':'4%'}\">\r\n                                            <template let-ven=\"rowData\" let-col let-row=\"rowIndex\" pTemplate type=\"body\">\r\n                                                <!--<atpar-radioButton name=\"{{ven.rowIndex}}\" [(ngModel)]=\"ven.ACTIVEFLAG\" (click)=\"changeStatus(ven,ven['COUNT_'+Myindex],ven['COUNT'+Myindex],coldata.RECIEPENTNAME)\" value=\"{{ven['activeFlag_'+Myindex]}}\" label=\"{{ven['COUNT_'+Myindex]}}\"></atpar-radioButton>-->\r\n                                                <atpar-radioButton name=\"ven.RECIEPENTNAME\" [(ngModel)]=\"ven.ACTIVEFLAG\" value={{ven.ACTIVEFLAG}} (click)=\"changeStatus(ven)\" [ngModelOptions]=\"{standalone: true}\"></atpar-radioButton>\r\n                                            </template>\r\n                                        </p-column>                                    \r\n                                        <p-column field=\"RECIEPENTNAME\" header=\"RECPNAME\" [sortable]=\"true\" [filter]=\"true\" filterPlaceholder=\"Search\"></p-column>\r\n                                        <p-column field=\"LOCATION\" header=\"LOCATION\" [sortable]=\"true\" [filter]=\"true\" filterPlaceholder=\"Search\"></p-column>\r\n                                        <p-column field=\"PHONE_NO\" header=\"PHONE\" [sortable]=\"true\" [filter]=\"true\" filterPlaceholder=\"Search\"></p-column>\r\n                                        <p-column field=\"ADDRESS_1\" header=\"ADDR\" [sortable]=\"true\" [filter]=\"true\" filterPlaceholder=\"Search\"></p-column>\r\n                                        <p-column field=\"DEPT_ID\" header=\"DEPTID\" [sortable]=\"true\" [filter]=\"true\" filterPlaceholder=\"Search\"></p-column>\r\n                                        <p-column field=\"LOC_DESCR\" header=\"LOC_DESCR\" [sortable]=\"true\" [filter]=\"true\" filterPlaceholder=\"Search\"></p-column>\r\n                                    </atpar-datatable>\r\n                                </div>\r\n                                <div class=\"col-xs-12 col-sm-6 col-sm-offset-5 col-md-4 col-md-offset-5\">\r\n                                    <button class=\"btn btn-purple sbtn\" (click)=\"btnRecipientAdd_Click()\" *ngIf=\"blnRecipients\">Add &nbsp;<i class=\"fa fa-plus\"></i></button>\r\n                                    <button class=\"btn btn-purple sbtn\" (click)=\"btnGoBackRecipient_Click()\"><i class=\"fa fa-arrow-left\"></i> &nbsp;Go Back</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"content-section implementation\">\r\n            <atpar-confirmdialog header=\"Confirmation\" icon=\"fa fa-question-circle\" width=\"425\"></atpar-confirmdialog>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div>\r\n<atpar-growl [value]=\"statusMsgs\" sticky=\"sticky\"></atpar-growl>\r\n</div>\r\n";

/***/ }),

/***/ 2109:
/***/ (function(module, exports) {

module.exports = "\r\n<div>\r\n    <atpar-release-Orders [appId]=\"recvReleaseAppId\"></atpar-release-Orders>\r\n   \r\n</div>";

/***/ }),

/***/ 2110:
/***/ (function(module, exports) {

module.exports = "<div id=\"main\" class=\"content-page\">\r\n    <div class=\"page-content-wrapper\">\r\n        <div class=\"container x_panel no-border\">\r\n            <br>\r\n            <div class=\"\">\r\n                <div class=\"panel panel-default\" style=\"border: 1px solid #eee;\">\r\n                    <div class=\"panel-body\" style=\"padding:0px 0 10px 0;\">\r\n                        <form class=\"form-horizontal form-label-left\" *ngIf=\"page\">\r\n                            <div class=\"col-xs-12\">\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                    <label for=\"\" class=\"control-label col-xs-12 col-md-4 col-sm-6\">Org ID</label>\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                        <atpar-select [options]=\"ddlBusinessData\" [id]=\"'ddlOrg'\" [(ngModel)]=\"selectedOrgID\" [ngModelOptions]=\"{standalone: true}\" filter=\"filter\" [required]=\"true\"></atpar-select>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                    <label for=\"\" class=\"control-label col-xs-12 col-md-4 col-sm-6\">ShipTo ID</label>\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                        <atpar-text [(ngModel)]=\"ShipToID\" [name]=\"txtLocationID1\" *ngIf=\"!isEditMode\" [id]=\"'LocationID1'\" [ngModelOptions]=\"{standalone: true}\"></atpar-text>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-xs-12 col-sm-12 col-md-4 form-group\">\r\n                                    <label for=\"\" class=\"control-label col-xs-12 col-md-4 col-sm-6\">ShipTo Name</label>\r\n                                    <div class=\"col-xs-12 col-sm-6 col-md-8\">\r\n                                        <atpar-text [(ngModel)]=\"ShipToName\" [name]=\"txtLocationName\" *ngIf=\"!isEditMode\" [id]=\"'LocationName'\" [ngModelOptions]=\"{standalone: true}\"></atpar-text>\r\n                                    </div>\r\n                                </div>\r\n                                <div style=\"clear:both;\"></div>\r\n                                <div class=\"col-xs-12 col-sm-6 col-sm-offset-5 col-md-4 col-md-offset-5\">\r\n                                    <button class=\"btn btn-purple sbtn\" (click)=\"btnGo_Click()\">Go &nbsp; <i class=\"fa fa-arrow-right\"></i></button>\r\n                                    <button class=\"btn btn-purple sbtn\" (click)=\"btnAddShipToID_Click()\">  Add ShipTo ID &nbsp; <i class=\"fa fa-plus\"></i></button>\r\n                                </div>\r\n                                <div style=\"clear:both;\"></div>\r\n\r\n                            </div>\r\n                        </form>\r\n                        <div class=\"col-xs-12\" *ngIf=\"pop\">\r\n                            <div class=\"container\">\r\n                                <atpar-datatable [value]=\"lstShipToIDAllc\" #dt [style]=\"{'width':'100%'}\" [paginator]=\"true\" [pageLinks]=\"3\" [rows]=\"recordsPerPageSize\" expandableRows=\"true\" [rowsPerPageOptions]=\"[10,20,30,40,50,60,70,80,90,100]\" [globalFilter]=\"gb\" [responsive]=\"true\">\r\n                                    <p-column header=\"Action\" [style]=\"{'width': '4%','overflow':'visible','text-align':'center'}\">\r\n                                        <template pTemplate=\"filter\" let-col>\r\n                                        </template>\r\n                                        <template let-col let-ven=\"rowData\" pTemplate=\"body\">\r\n                                            <i class=\"fa fa-pencil fa-bg bg-blue\" (click)=\"editShipToIDData(ven)\" style=\"cursor:pointer;\" title=\"Edit\"></i>\r\n                                        </template>\r\n                                    </p-column>\r\n                                    <p-column field=\"SETID\" header=\"Org ID\" [sortable]=\"false\" [filter]=\"false\" filterPlaceholder=\"Search\" [style]=\"{'width':'15%'}\">\r\n                                    </p-column>\r\n                                    <p-column field=\"SHIPTO_ID\" header=\"Ship To ID\" [sortable]=\"true\" [filter]=\"true\" filterPlaceholder=\"Search\" [style]=\"{'width':'25%'}\">\r\n                                    </p-column>\r\n                                    <p-column field=\"DESCR\" header=\"ShipTo Name\" [sortable]=\"true\" [filter]=\"true\" filterPlaceholder=\"Search\" [style]=\"{'width':'50%'}\"></p-column>\r\n                                    <p-column field=\"CURRENTSTATUS\" header=\"Status\" [filter]=\"true\" [style]=\"{'width': '8%','overflow':'visible','text-align':'center'}\" filterMatchMode=\"equals\">\r\n                                        <template pTemplate=\"filter\" let-col>\r\n                                            <atpar-select-grid [options]=\"ddlStatusType\" [style]=\"{'width':'100%'}\" [id]=\"'ddlddlStatusType'\" [required]=\"false\"  [(ngModel)]=\"statusType\" (onChange)=\"dataFilter($event.value,col.field,col.filterMatchMode)\"></atpar-select-grid>\r\n                                        </template>\r\n                                        <template let-col let-device=\"rowData\" pTemplate=\"body\">\r\n\r\n                                            <atpar-switch [checked]=device[col.field] [(ngModel)]=\"device[col.field]\" name=\"changeStatus\" (click)=\"statusShipToIDUpdate(device)\"></atpar-switch>\r\n                                        </template>\r\n                                    </p-column>\r\n                                </atpar-datatable>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"form-horizontal form-label-left\" *ngIf=\"form\">\r\n                            <div class=\"col-xs-12\">\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">ShipTo ID</label>\r\n                                    <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                        <atpar-text [(ngModel)]=\"newItem.SHIPTO_ID\" [name]=\"txtShipToId\" *ngIf=\"!isEditMode\" [validations]=\"'mandatory,alpha_numeric_underscore_nospace,max=30'\" [id]=\"'ShipToId'\" [isFocused]=\"'true'\" [ngModelOptions]=\"{standalone: true}\"\r\n                                                    (bindModelDataChange)=\"bindModelDataChange($event)\"></atpar-text>\r\n                                    </div>\r\n                                    <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n                                        Use only letters (a-z), numbers (0-9), the underscore (_), and no spaces\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Org ID</label>\r\n                                    <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                        <atpar-select [options]=\"ddlBusinessData\" [id]=\"'ddlOrgID'\" [(ngModel)]=\"addselectedOrgID\" (onChange)=\"ddlOrgIdChanged()\" [ngModelOptions]=\"{standalone: true}\" filter=\"filter\" [required]=\"true\"></atpar-select>\r\n                                    </div>\r\n                                    <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">ShipTo Name</label>\r\n                                    <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                        <atpar-text [(ngModel)]=\"newItem.DESCR\" [name]=\"txtShipToName\" *ngIf=\"!isEditMode\" [validations]=\"'everything'\" [id]=\"'ShipToName'\" [ngModelOptions]=\"{standalone: true}\" (bindModelDataChange)=\"bindModelDataChange($event)\"></atpar-text>\r\n                                    </div>\r\n                                    <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n                                        Any Character A-Z,a-Z,0-9,',#,$...\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Address 1</label>\r\n                                    <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                        <atpar-text [(ngModel)]=\"newItem.ADDRESS_1\" [name]=\"txtAddress1\" *ngIf=\"!isEditMode\" [validations]=\"'alpha_numeric_hash_space'\" [id]=\"'Address1'\" [ngModelOptions]=\"{standalone: true}\" (bindModelDataChange)=\"bindModelDataChange($event)\"></atpar-text>\r\n                                    </div>\r\n                                    <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n                                        Use only A-Z,a-z,0-9,#,\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">City</label>\r\n                                    <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                        <atpar-text [(ngModel)]=\"newItem.CITY\" [name]=\"txtCity\" *ngIf=\"!isEditMode\" [validations]=\"'alpha_numeric_underscore_space'\" [id]=\"'City'\" [ngModelOptions]=\"{standalone: true}\" (bindModelDataChange)=\"bindModelDataChange($event)\"></atpar-text>\r\n                                    </div>\r\n                                    <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n                                        Use only letters (a-z), numbers (0-9), the underscore (_),\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">State</label>\r\n                                    <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                        <atpar-text [(ngModel)]=\"newItem.STATE\" [name]=\"txtState\" *ngIf=\"!isEditMode\" [validations]=\"'alpha_numeric_underscore_hyphen_backslash_nospace'\" [id]=\"'State'\" [ngModelOptions]=\"{standalone: true}\" (bindModelDataChange)=\"bindModelDataChange($event)\"></atpar-text>\r\n                                    </div>\r\n                                    <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Zip</label>\r\n                                    <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                        <atpar-text [(ngModel)]=\"newItem.ZIP\" [name]=\"txtZip\" *ngIf=\"!isEditMode\" [validations]=\"'alpha_numeric_underscore_space'\" [id]=\"'Zip'\" [ngModelOptions]=\"{standalone: true}\" (bindModelDataChange)=\"bindModelDataChange($event)\"></atpar-text>\r\n                                    </div>\r\n                                    <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n                                        Use only letters (a-z), numbers (0-9), the underscore (_),\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Phone</label>\r\n                                    <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                        <atpar-text [(ngModel)]=\"newItem.PHONE_NO\" [name]=\"txtPhone\" *ngIf=\"!isEditMode\" [validations]=\"'max=10,phone,numeric'\" [id]=\"'Phone'\" [ngModelOptions]=\"{standalone: true}\" (bindModelDataChange)=\"bindModelDataChange($event)\"></atpar-text>\r\n                                    </div>\r\n                                    <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n                                        Use the format 1231231234\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Attention To</label>\r\n                                    <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                        <atpar-text [(ngModel)]=\"newItem.ATTENTION_TO\" [name]=\"txtAttentionTo\" *ngIf=\"!isEditMode\" [validations]=\"'everything'\" [id]=\"'AttentionTo'\" [ngModelOptions]=\"{standalone: true}\" (bindModelDataChange)=\"bindModelDataChange($event)\"></atpar-text>\r\n                                    </div>\r\n                                    <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n                                        Any character A-Z,a-z,0-9,!,', #,$...\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Comments</label>\r\n                                    <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                        <atpar-text [(ngModel)]=\"newItem.COMMENTS\" [name]=\"txtComment\" *ngIf=\"!isEditMode\" [validations]=\"'everything'\" [id]=\"'Comment'\" [ngModelOptions]=\"{standalone: true}\" (bindModelDataChange)=\"bindModelDataChange($event)\"></atpar-text>\r\n                                    </div>\r\n                                    <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n                                        Any character A-Z,a-z,0-9,!,', #,$...\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-xs-12 col-sm-6 col-sm-offset-5 col-md-4 col-md-offset-5\">\r\n                                    <button class=\"btn btn-purple small\" (click)=\"btnSave_Click()\" [disabled]=\"disableAdd\"> Add &nbsp; <i class=\"fa fa-plus\"></i></button>\r\n                                    <button class=\"btn btn-purple small\" (click)=\"btnBack_Click()\"><i class=\"fa fa-arrow-left\"> &nbsp;</i>Go Back</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n\r\n                        <form class=\"form-horizontal form-label-left\" *ngIf=\"editform\">\r\n                            <div class=\"col-xs-12\">\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">ShipTo ID</label>\r\n                                    <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                        <label class=\"form-control-static\">{{newItem.SHIPTO_ID}}</label>\r\n                                        <!--<atpar-text [(ngModel)]=\"newItem.SHIPTO_ID\" [name]=\"txtShipToId\" *ngIf=\"!isEditMode\" [validations]=\"'mandatory,alpha_numeric_underscore_nospace'\" [id]=\"'ShipToId'\" [disabled]=\"newItem.SHIPTO_ID\" [ngModelOptions]=\"{standalone: true}\"  [readonly]=\"true\"></atpar-text>-->\r\n                                    </div>\r\n                                    <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n                                        Use only letters (a-z), numbers (0-9), the underscore (_), and no spaces\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Org ID</label>\r\n                                    <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                        <atpar-select [options]=\"ddlBusinessData\" [id]=\"'ddlOrgID'\" [(ngModel)]=\"editShipToIDDatas\" (onChange)=\"ddlOrgIdChanged()\" [ngModelOptions]=\"{standalone: true}\" filter=\"filter\" [required]=\"true\" [isfocus]=\"true\"></atpar-select>\r\n                                    </div>\r\n                                    <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">ShipTo Name</label>\r\n                                    <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                        <atpar-text [(ngModel)]=\"newItem.DESCR\" [name]=\"txtShipToName\" *ngIf=\"!isEditMode\" [validations]=\"'everything'\" [id]=\"'ShipToName'\" [ngModelOptions]=\"{standalone: true}\" (bindModelDataChange)=\"bindModelDataChange($event)\"></atpar-text>\r\n                                    </div>\r\n                                    <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n                                        Any character A-Z,a-z,0-9,!,', #,$...\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Address 1</label>\r\n                                    <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                        <atpar-text [(ngModel)]=\"newItem.ADDRESS_1\" [name]=\"txtAddress1\" *ngIf=\"!isEditMode\" [validations]=\"'alpha_numeric_hash_space'\" [id]=\"'Address1'\" [ngModelOptions]=\"{standalone: true}\" (bindModelDataChange)=\"bindModelDataChange($event)\"></atpar-text>\r\n                                    </div>\r\n                                    <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n                                        Use only A-Z,a-z,0-9,#,\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">City</label>\r\n                                    <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                        <atpar-text [(ngModel)]=\"newItem.CITY\" [name]=\"txtCity\" *ngIf=\"!isEditMode\" [validations]=\"'alpha_numeric_underscore_space'\" [id]=\"'City'\" [ngModelOptions]=\"{standalone: true}\" (bindModelDataChange)=\"bindModelDataChange($event)\"></atpar-text>\r\n                                    </div>\r\n                                    <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n                                        Use only letters (a-z), numbers (0-9), the underscore (_),\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">State</label>\r\n                                    <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                        <atpar-text [(ngModel)]=\"newItem.STATE\" [name]=\"txtState\" *ngIf=\"!isEditMode\" [validations]=\"'alpha_numeric_underscore_hyphen_backslash_nospace'\" [id]=\"'State'\" [ngModelOptions]=\"{standalone: true}\" (bindModelDataChange)=\"bindModelDataChange($event)\"></atpar-text>\r\n                                    </div>\r\n                                    <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Zip</label>\r\n                                    <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                        <atpar-text [(ngModel)]=\"newItem.ZIP\" [name]=\"txtZip\" *ngIf=\"!isEditMode\" [validations]=\"'alpha_numeric_underscore_space'\" [id]=\"'Zip'\" [ngModelOptions]=\"{standalone: true}\" (bindModelDataChange)=\"bindModelDataChange($event)\"></atpar-text>\r\n                                    </div>\r\n                                    <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n                                        Use only letters (a-z), numbers (0-9), the underscore (_),\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Phone</label>\r\n                                    <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                        <atpar-text [(ngModel)]=\"newItem.PHONE_NO\" [name]=\"txtPhone\" *ngIf=\"!isEditMode\" [validations]=\"'numeric,max=10,phone'\" [id]=\"'Phone'\" [ngModelOptions]=\"{standalone: true}\" (bindModelDataChange)=\"bindModelDataChange($event)\"></atpar-text>\r\n                                    </div>\r\n                                    <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n                                        Use the format 1231231234\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Attention To</label>\r\n                                    <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                        <atpar-text [(ngModel)]=\"newItem.ATTENTION_TO\" [name]=\"txtAttentionTo\" *ngIf=\"!isEditMode\" [validations]=\"'everything'\" [id]=\"'AttentionTo'\" [ngModelOptions]=\"{standalone: true}\" (bindModelDataChange)=\"bindModelDataChange($event)\"></atpar-text>\r\n                                    </div>\r\n                                    <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n                                        Any character A-Z,a-z,0-9,!,', #,$...\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"industry\" class=\"control-label col-md-3 col-sm-3 col-xs-12\">Comments</label>\r\n                                    <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n                                        <atpar-text [(ngModel)]=\"newItem.COMMENTS\" [name]=\"txtComment\" *ngIf=\"!isEditMode\" [validations]=\"'everything'\" [id]=\"'Comment'\" [ngModelOptions]=\"{standalone: true}\" (bindModelDataChange)=\"bindModelDataChange($event)\"></atpar-text>\r\n                                    </div>\r\n                                    <div class=\"col-md-6 col-sm-6 col-xs-12 help_txt\">\r\n                                        Any character A-Z,a-z,0-9,!,', #,$...\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-xs-12 col-sm-6 col-sm-offset-5 col-md-4 col-md-offset-5\">\r\n                                    <button class=\"btn btn-purple small\" (click)=\"btnUpdate_Click()\" [disabled]=\"disableUpdate\"> Update &nbsp;<i class=\"fa fa-check\"></i> </button>\r\n                                    <button class=\"btn btn-purple small\" (click)=\"btnBack_Click()\"> <i class=\"fa fa-arrow-left\"></i> &nbsp; Go Back </button>\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <atpar-growl [value]=\"growlMessage\" sticky=\"sticky\"></atpar-growl>\r\n</div>\r\n";

/***/ }),

/***/ 2111:
/***/ (function(module, exports) {

module.exports = "<div>\r\n    <atpar-user-parameters [appId]=\"recvAppId\"></atpar-user-parameters>\r\n    <!--<span>Receiving User Parameters Screen</span>-->\r\n</div>";

/***/ }),

/***/ 2112:
/***/ (function(module, exports) {

module.exports = "<div>\r\n    <router-outlet></router-outlet>\r\n</div>";

/***/ })

});
//# sourceMappingURL=11.601fce7cdc00a672fc7a.chunk.js.map