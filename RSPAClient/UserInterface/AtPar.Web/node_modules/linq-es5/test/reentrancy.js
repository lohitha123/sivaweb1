"use strict";
///////////////////////////////////////////////////////////////////////////////
//
// Licensed under the Apache License, Version 2.0  ( the  "License" );  you may 
// not use this file except in compliance with the License.  You may  obtain  a 
// copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required  by  applicable  law  or  agreed  to  in  writing,  software 
// distributed under the License is distributed on an "AS  IS"  BASIS,  WITHOUT
// WARRANTIES OR CONDITIONS  OF  ANY  KIND, either express or implied.  See the 
// License for the specific  language  governing  permissions  and  limitations 
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
var data_1 = require("./data");
var chai_1 = require("chai");
var linq_1 = require("../lib/linq");
describe('Reentrancy -', function () {
    it('ChunkBy()', function () {
        var iterable = linq_1.asEnumerable(data_1.phrase).ChunkBy(function (o) { return o.key; }, function (o) { return o.value; });
        var iterator = iterable[Symbol.iterator]();
        var arr = iterator.next().value;
        chai_1.assert.equal(arr.length, 3);
        arr = iterator.next().value;
        chai_1.assert.equal(arr.length, 1);
        arr = iterator.next().value;
        chai_1.assert.equal(arr.length, 1);
        arr = iterator.next().value;
        chai_1.assert.equal(arr.length, 1);
        arr = iterator.next().value;
        chai_1.assert.equal(arr.length, 2);
        chai_1.assert.isTrue(iterator.next().done);
        iterator = iterable[Symbol.iterator]();
        arr = iterator.next().value;
        chai_1.assert.equal(arr.length, 3);
        arr = iterator.next().value;
        chai_1.assert.equal(arr.length, 1);
        arr = iterator.next().value;
        chai_1.assert.equal(arr.length, 1);
        arr = iterator.next().value;
        chai_1.assert.equal(arr.length, 1);
        arr = iterator.next().value;
        chai_1.assert.equal(arr.length, 2);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('Range', function () {
        var iterable = linq_1.Range(0, 2);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(0, iterator.next().value);
        chai_1.assert.equal(1, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
        iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(0, iterator.next().value);
        chai_1.assert.equal(1, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('Repeat', function () {
        var iterable = linq_1.Repeat(0, 3);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(0, iterator.next().value);
        chai_1.assert.equal(0, iterator.next().value);
        chai_1.assert.equal(0, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
        iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(0, iterator.next().value);
        chai_1.assert.equal(0, iterator.next().value);
        chai_1.assert.equal(0, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('DefaultIfEmpty() - Not empty', function () {
        var iterable = linq_1.Range(0, 2).DefaultIfEmpty();
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(iterator.next().value, 0);
        chai_1.assert.equal(iterator.next().value, 1);
        chai_1.assert.isTrue(iterator.next().done);
        iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(iterator.next().value, 0);
        chai_1.assert.equal(iterator.next().value, 1);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('Select()', function () {
        var iterable = linq_1.asEnumerable(data_1.jsn).Select(function (a) { return a.name; });
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(iterator.next().value, 'd');
        chai_1.assert.equal(iterator.next().value, 'c');
        chai_1.assert.equal(iterator.next().value, 'b');
        chai_1.assert.equal(iterator.next().value, 'a');
        chai_1.assert.isTrue(iterator.next().done);
        iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(iterator.next().value, 'd');
        chai_1.assert.equal(iterator.next().value, 'c');
        chai_1.assert.equal(iterator.next().value, 'b');
        chai_1.assert.equal(iterator.next().value, 'a');
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('ThenBy()', function () {
        var enumerable = linq_1.asEnumerable(data_1.unorderedMix);
        var sorted = enumerable.ToArray().sort();
        var iterable = enumerable.OrderBy().ThenBy();
        var iterator = iterable[Symbol.iterator]();
        for (var _i = 0, sorted_1 = sorted; _i < sorted_1.length; _i++) {
            var exp = sorted_1[_i];
            var actual = iterator.next().value;
            if (isNaN(exp) && isNaN(actual))
                continue;
            chai_1.assert.equal(actual, exp);
        }
        var iterator = iterable[Symbol.iterator]();
        for (var _a = 0, sorted_2 = sorted; _a < sorted_2.length; _a++) {
            var exp = sorted_2[_a];
            var actual = iterator.next().value;
            if (isNaN(exp) && isNaN(actual))
                continue;
            chai_1.assert.equal(actual, exp);
        }
    });
    it('Distinct()', function () {
        var test = [
            { id: 1, "name": "d" },
            { id: 1, "name": "c" },
            { id: 3, "name": "b" },
            { id: 4, "name": "a" }
        ];
        var iterable = linq_1.asEnumerable(test).Distinct(function (o) { return o.id; });
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal("d", iterator.next().value.name);
        chai_1.assert.equal("b", iterator.next().value.name);
        chai_1.assert.equal("a", iterator.next().value.name);
        chai_1.assert.isTrue(iterator.next().done);
        iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal("d", iterator.next().value.name);
        chai_1.assert.equal("b", iterator.next().value.name);
        chai_1.assert.equal("a", iterator.next().value.name);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('Where()', function () {
        var iterable = linq_1.asEnumerable(data_1.simpleArray).Where(function (a) { return a % 2 == 1; });
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(1, iterator.next().value);
        chai_1.assert.equal(3, iterator.next().value);
        chai_1.assert.equal(5, iterator.next().value);
        chai_1.assert.equal(7, iterator.next().value);
        chai_1.assert.equal(9, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
        iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(1, iterator.next().value);
        chai_1.assert.equal(3, iterator.next().value);
        chai_1.assert.equal(5, iterator.next().value);
        chai_1.assert.equal(7, iterator.next().value);
        chai_1.assert.equal(9, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('Skip()', function () {
        var iterable = linq_1.asEnumerable(data_1.simpleArray).Skip(7);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(8, iterator.next().value);
        chai_1.assert.equal(9, iterator.next().value);
        chai_1.assert.equal(10, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
        iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(8, iterator.next().value);
        chai_1.assert.equal(9, iterator.next().value);
        chai_1.assert.equal(10, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('Take()', function () {
        var iterable = linq_1.asEnumerable(data_1.simpleArray).Take(3);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(1, iterator.next().value);
        chai_1.assert.equal(2, iterator.next().value);
        chai_1.assert.equal(3, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
        iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(1, iterator.next().value);
        chai_1.assert.equal(2, iterator.next().value);
        chai_1.assert.equal(3, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('Except()', function () {
        var iterable = linq_1.asEnumerable(data_1.simpleArray).Except([0, 2, 4, 6, 11]);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(1, iterator.next().value);
        chai_1.assert.equal(3, iterator.next().value);
        chai_1.assert.equal(5, iterator.next().value);
        chai_1.assert.equal(7, iterator.next().value);
        chai_1.assert.equal(8, iterator.next().value);
        chai_1.assert.equal(9, iterator.next().value);
        chai_1.assert.equal(10, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
        iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(1, iterator.next().value);
        chai_1.assert.equal(3, iterator.next().value);
        chai_1.assert.equal(5, iterator.next().value);
        chai_1.assert.equal(7, iterator.next().value);
        chai_1.assert.equal(8, iterator.next().value);
        chai_1.assert.equal(9, iterator.next().value);
        chai_1.assert.equal(10, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('Intersect()', function () {
        var iterable = linq_1.asEnumerable(data_1.simpleArray).Intersect([1, 3, 5, 11, 23, 44]);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(1, iterator.next().value);
        chai_1.assert.equal(3, iterator.next().value);
        chai_1.assert.equal(5, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
        iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(1, iterator.next().value);
        chai_1.assert.equal(3, iterator.next().value);
        chai_1.assert.equal(5, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('OfType()', function () {
        var iterable = linq_1.asEnumerable(data_1.mix).OfType(Object);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(iterator.next().value, 1);
        chai_1.assert.equal(iterator.next().value, data_1.mix[3]);
        chai_1.assert.equal(iterator.next().value, data_1.mix[4]);
        chai_1.assert.equal(iterator.next().value, data_1.mix[5]);
        chai_1.assert.equal(iterator.next().value, data_1.mix[10]);
        chai_1.assert.equal(iterator.next().value, data_1.mix[11]);
        chai_1.assert.equal(iterator.next().value, data_1.mix[12]);
        chai_1.assert.equal(iterator.next().value, data_1.mix[13]);
        chai_1.assert.equal(iterator.next().value, data_1.mix[14]);
        chai_1.assert.equal(iterator.next().value, data_1.mix[15]);
        chai_1.assert.equal(iterator.next().value, data_1.mix[17]);
        chai_1.assert.isTrue(iterator.next().done);
        iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(iterator.next().value, 1);
        chai_1.assert.equal(iterator.next().value, data_1.mix[3]);
        chai_1.assert.equal(iterator.next().value, data_1.mix[4]);
        chai_1.assert.equal(iterator.next().value, data_1.mix[5]);
        chai_1.assert.equal(iterator.next().value, data_1.mix[10]);
        chai_1.assert.equal(iterator.next().value, data_1.mix[11]);
        chai_1.assert.equal(iterator.next().value, data_1.mix[12]);
        chai_1.assert.equal(iterator.next().value, data_1.mix[13]);
        chai_1.assert.equal(iterator.next().value, data_1.mix[14]);
        chai_1.assert.equal(iterator.next().value, data_1.mix[15]);
        chai_1.assert.equal(iterator.next().value, data_1.mix[17]);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('Union()', function () {
        var iterable = linq_1.asEnumerable([0, 1, 2, 3, 4, 5, 6, 7]).Union([5, 6, 7, 8, 9]);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(0, iterator.next().value);
        chai_1.assert.equal(1, iterator.next().value);
        chai_1.assert.equal(2, iterator.next().value);
        chai_1.assert.equal(3, iterator.next().value);
        chai_1.assert.equal(4, iterator.next().value);
        chai_1.assert.equal(5, iterator.next().value);
        chai_1.assert.equal(6, iterator.next().value);
        chai_1.assert.equal(7, iterator.next().value);
        chai_1.assert.equal(8, iterator.next().value);
        chai_1.assert.equal(9, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
        iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(0, iterator.next().value);
        chai_1.assert.equal(1, iterator.next().value);
        chai_1.assert.equal(2, iterator.next().value);
        chai_1.assert.equal(3, iterator.next().value);
        chai_1.assert.equal(4, iterator.next().value);
        chai_1.assert.equal(5, iterator.next().value);
        chai_1.assert.equal(6, iterator.next().value);
        chai_1.assert.equal(7, iterator.next().value);
        chai_1.assert.equal(8, iterator.next().value);
        chai_1.assert.equal(9, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('Join()', function () {
        var iterable = linq_1.asEnumerable(data_1.people).Join(data_1.pets, function (person) { return person; }, function (pet) { return pet.Owner; }, function (person, pet) {
            return person.Name + " - " + pet.Name;
        });
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal("Hedlund, Magnus - Daisy", iterator.next().value);
        chai_1.assert.equal("Adams, Terry - Barley", iterator.next().value);
        chai_1.assert.equal("Adams, Terry - Boots", iterator.next().value);
        chai_1.assert.equal("Adams, Terry - Barley", iterator.next().value);
        chai_1.assert.equal("Adams, Terry - Boots", iterator.next().value);
        chai_1.assert.equal("Weiss, Charlotte - Whiskers", iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
        iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal("Hedlund, Magnus - Daisy", iterator.next().value);
        chai_1.assert.equal("Adams, Terry - Barley", iterator.next().value);
        chai_1.assert.equal("Adams, Terry - Boots", iterator.next().value);
        chai_1.assert.equal("Adams, Terry - Barley", iterator.next().value);
        chai_1.assert.equal("Adams, Terry - Boots", iterator.next().value);
        chai_1.assert.equal("Weiss, Charlotte - Whiskers", iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('GroupJoin()', function () {
        var iterable = linq_1.asEnumerable(data_1.msdn)
            .GroupJoin(data_1.pets, function (person) { return person; }, function (pet) { return pet.Owner; }, function (person, petCollection) {
            return {
                Owner: person.Name,
                Pets: linq_1.asEnumerable(petCollection).Select(function (pet) { return pet.Name; })
                    .ToArray()
            };
        });
        var iterator = iterable[Symbol.iterator]();
        var result = iterator.next().value;
        chai_1.assert.isTrue(Array.isArray(result.Pets));
        chai_1.assert.equal("Hedlund, Magnus", result.Owner);
        chai_1.assert.equal(1, result.Pets.length);
        chai_1.assert.equal("Daisy", result.Pets[0]);
        result = iterator.next().value;
        chai_1.assert.equal("Adams, Terry", result.Owner);
        chai_1.assert.equal(2, result.Pets.length);
        chai_1.assert.equal("Barley", result.Pets[0]);
        chai_1.assert.equal("Boots", result.Pets[1]);
        result = iterator.next().value;
        chai_1.assert.equal("Weiss, Charlotte", result.Owner);
        chai_1.assert.equal(1, result.Pets.length);
        chai_1.assert.equal("Whiskers", result.Pets[0]);
        chai_1.assert.isTrue(iterator.next().done);
        var iterator = iterable[Symbol.iterator]();
        var result = iterator.next().value;
        chai_1.assert.isTrue(Array.isArray(result.Pets));
        chai_1.assert.equal("Hedlund, Magnus", result.Owner);
        chai_1.assert.equal(1, result.Pets.length);
        chai_1.assert.equal("Daisy", result.Pets[0]);
        result = iterator.next().value;
        chai_1.assert.equal("Adams, Terry", result.Owner);
        chai_1.assert.equal(2, result.Pets.length);
        chai_1.assert.equal("Barley", result.Pets[0]);
        chai_1.assert.equal("Boots", result.Pets[1]);
        result = iterator.next().value;
        chai_1.assert.equal("Weiss, Charlotte", result.Owner);
        chai_1.assert.equal(1, result.Pets.length);
        chai_1.assert.equal("Whiskers", result.Pets[0]);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('GroupBy()', function () {
        var iterable = linq_1.asEnumerable(data_1.pets).GroupBy(function (pet) { return pet.Age; });
        var iterator = iterable[Symbol.iterator]();
        var result = iterator.next().value;
        chai_1.assert.equal(8, result.key);
        chai_1.assert.equal(1, result.length);
        result = iterator.next().value;
        chai_1.assert.equal(4, result.key);
        chai_1.assert.equal(3, result.length);
        result = iterator.next().value;
        chai_1.assert.equal(1, result.key);
        chai_1.assert.equal(1, result.length);
        chai_1.assert.isTrue(iterator.next().done);
        iterator = iterable[Symbol.iterator]();
        result = iterator.next().value;
        chai_1.assert.equal(8, result.key);
        chai_1.assert.equal(1, result.length);
        result = iterator.next().value;
        chai_1.assert.equal(4, result.key);
        chai_1.assert.equal(3, result.length);
        result = iterator.next().value;
        chai_1.assert.equal(1, result.key);
        chai_1.assert.equal(1, result.length);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('SelectMany()', function () {
        var iterable = linq_1.asEnumerable(data_1.jsn).SelectMany(function (a) { return a.ids; });
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(11, iterator.next().value);
        chai_1.assert.equal(21, iterator.next().value);
        chai_1.assert.equal(31, iterator.next().value);
        chai_1.assert.equal(12, iterator.next().value);
        chai_1.assert.equal(22, iterator.next().value);
        chai_1.assert.equal(32, iterator.next().value);
        chai_1.assert.equal(13, iterator.next().value);
        chai_1.assert.equal(23, iterator.next().value);
        chai_1.assert.equal(33, iterator.next().value);
        chai_1.assert.equal(14, iterator.next().value);
        chai_1.assert.equal(24, iterator.next().value);
        chai_1.assert.equal(34, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
        iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(11, iterator.next().value);
        chai_1.assert.equal(21, iterator.next().value);
        chai_1.assert.equal(31, iterator.next().value);
        chai_1.assert.equal(12, iterator.next().value);
        chai_1.assert.equal(22, iterator.next().value);
        chai_1.assert.equal(32, iterator.next().value);
        chai_1.assert.equal(13, iterator.next().value);
        chai_1.assert.equal(23, iterator.next().value);
        chai_1.assert.equal(33, iterator.next().value);
        chai_1.assert.equal(14, iterator.next().value);
        chai_1.assert.equal(24, iterator.next().value);
        chai_1.assert.equal(34, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('Concat()', function () {
        var iterable = linq_1.asEnumerable([0, 1, 2]).Concat([3, 4]);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(0, iterator.next().value);
        chai_1.assert.equal(1, iterator.next().value);
        chai_1.assert.equal(2, iterator.next().value);
        chai_1.assert.equal(3, iterator.next().value);
        chai_1.assert.equal(4, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
        iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(0, iterator.next().value);
        chai_1.assert.equal(1, iterator.next().value);
        chai_1.assert.equal(2, iterator.next().value);
        chai_1.assert.equal(3, iterator.next().value);
        chai_1.assert.equal(4, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
});
/** Copyright (c) ENikS.  All rights reserved. */
//# sourceMappingURL=reentrancy.js.map