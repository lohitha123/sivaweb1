"use strict";
///////////////////////////////////////////////////////////////////////////////
//
// Licensed under the Apache License, Version 2.0  ( the  "License" );  you may 
// not use this file except in compliance with the License.  You may  obtain  a 
// copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required  by  applicable  law  or  agreed  to  in  writing,  software 
// distributed under the License is distributed on an "AS  IS"  BASIS,  WITHOUT
// WARRANTIES OR CONDITIONS  OF  ANY  KIND, either express or implied.  See the 
// License for the specific  language  governing  permissions  and  limitations 
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
var data_1 = require("./data");
var chai_1 = require("chai");
var linq_1 = require("../lib/linq");
describe('Custom Iterator based -', function () {
    var comparator = function (a, b) {
        var a1 = a.charCodeAt(3);
        var b1 = b.charCodeAt(3);
        var a2 = a.charCodeAt(2);
        var b2 = b.charCodeAt(2);
        return a1 > b1 ? 1
            : a1 < b1 ? -1
                : a2 > b2 ? 1
                    : a2 < b2 ? -1 : 0;
    };
    var test = [
        { isControlled: true, no: 'C01', id: 1 },
        { isControlled: false, no: 'C01', id: 3 },
        { isControlled: true, no: 'C02', id: 2 },
        { isControlled: false, no: 'C02', id: 4 },
    ];
    it('Reverse()', function () {
        var array = linq_1.Range(1, 100).ToArray();
        var iterator = linq_1.asEnumerable(array).Reverse()[Symbol.iterator]();
        for (var i = 100; i > 0; i--) {
            chai_1.assert.equal(i, iterator.next().value);
        }
        chai_1.assert.isTrue(iterator.next().done);
        iterator = linq_1.Range(1, 100).Reverse()[Symbol.iterator]();
        for (i = 100; i > 0; i--) {
            chai_1.assert.equal(i, iterator.next().value);
        }
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('DefaultIfEmpty() - Not empty', function () {
        var iterable = linq_1.Range(0, 5).DefaultIfEmpty(0);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(iterator.next().value, 0);
        chai_1.assert.equal(iterator.next().value, 1);
        chai_1.assert.equal(iterator.next().value, 2);
        chai_1.assert.equal(iterator.next().value, 3);
        chai_1.assert.equal(iterator.next().value, 4);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('DefaultIfEmpty() - Default', function () {
        var iterable = linq_1.asEnumerable([]).DefaultIfEmpty(0);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(iterator.next().value, 0);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('DefaultIfEmpty() - No Default', function () {
        var iterable = linq_1.asEnumerable([]).DefaultIfEmpty();
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.isUndefined(iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('OrderBy() - Default', function () {
        var enumerable = linq_1.asEnumerable(data_1.unorderedStr);
        var iterable = enumerable.OrderBy();
        var iterator = iterable[Symbol.iterator]();
        for (var _i = 0, _a = enumerable.ToArray().sort(); _i < _a.length; _i++) {
            var exp = _a[_i];
            var actual = iterator.next().value;
            if (isNaN(exp) && isNaN(actual))
                continue;
            chai_1.assert.equal(actual, exp);
        }
    });
    it('OrderBy() - Default (String)', function () {
        var enumerable = linq_1.asEnumerable(data_1.unorderedStr);
        var iterable = enumerable.OrderBy();
        var iterator = iterable[Symbol.iterator]();
        for (var _i = 0, _a = enumerable.ToArray().sort(); _i < _a.length; _i++) {
            var exp = _a[_i];
            var actual = iterator.next().value;
            if (isNaN(exp) && isNaN(actual))
                continue;
            chai_1.assert.equal(actual, exp);
        }
    });
    it('OrderBy() - Selector', function () {
        var iterable = linq_1.asEnumerable(data_1.jsn).OrderBy(function (a) { return a.name; });
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal("a", iterator.next().value.name);
        chai_1.assert.equal("b", iterator.next().value.name);
        chai_1.assert.equal("c", iterator.next().value.name);
        chai_1.assert.equal("d", iterator.next().value.name);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('OrderBy() - Comparator', function () {
        var etalon = linq_1.asEnumerable(data_1.jsn).ToArray().sort(function (a, b) { return a.name.charCodeAt(0) - b.name.charCodeAt(0); });
        var iterable = linq_1.asEnumerable(data_1.jsn).OrderBy(undefined, function (b, c) { return b.name.charCodeAt(0) - c.name.charCodeAt(0); });
        var iterator = iterable[Symbol.iterator]();
        for (var _i = 0, etalon_1 = etalon; _i < etalon_1.length; _i++) {
            var exp = etalon_1[_i];
            chai_1.assert.equal(iterator.next().value, exp);
        }
    });
    it('OrderBy() - Comparator and Selector', function () {
        var etalon = linq_1.asEnumerable(data_1.jsn).ToArray().sort(function (a, b) { return a.name.charCodeAt(0) - b.name.charCodeAt(0); });
        var iterable = linq_1.asEnumerable(data_1.jsn).OrderBy(function (a) { return a.name; }, function (b, c) { return b.charCodeAt(0) - c.charCodeAt(0); });
        var iterator = iterable[Symbol.iterator]();
        for (var _i = 0, etalon_2 = etalon; _i < etalon_2.length; _i++) {
            var exp = etalon_2[_i];
            chai_1.assert.equal(iterator.next().value, exp);
        }
    });
    it('OrderByDescending() - Default', function () {
        var enumerable = linq_1.asEnumerable(data_1.unorderedStr);
        var iterable = enumerable.OrderByDescending();
        var etalon = enumerable.ToArray().sort();
        var iterator = iterable[Symbol.iterator]();
        for (var i = etalon.length - 1; i >= 0; i--) {
            var exp = etalon[i];
            var actual = iterator.next().value;
            if (isNaN(exp) && isNaN(actual))
                continue;
            chai_1.assert.equal(actual, exp);
        }
    });
    it('OrderByDescending() - Selector', function () {
        var citerable = linq_1.asEnumerable(data_1.jsn).OrderByDescending(function (a) { return a.name; });
        var citerator = citerable[Symbol.iterator]();
        chai_1.assert.equal("d", citerator.next().value.name);
        chai_1.assert.equal("c", citerator.next().value.name);
        chai_1.assert.equal("b", citerator.next().value.name);
        chai_1.assert.equal("a", citerator.next().value.name);
        chai_1.assert.isTrue(citerator.next().done);
    });
    it('OrderByDescending() - Key', function () {
        var iterable = linq_1.asEnumerable(data_1.unorderedStr).OrderByDescending(function (a) { return a; });
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(iterator.next().value, "zjgf");
        chai_1.assert.equal(iterator.next().value, "axgh");
        chai_1.assert.equal(iterator.next().value, "afgh");
        chai_1.assert.equal(iterator.next().value, "1324");
        chai_1.assert.equal(iterator.next().value, "1314");
        chai_1.assert.equal(iterator.next().value, "1234");
        chai_1.assert.equal(iterator.next().value, "1234");
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('OrderByDescending() - Comparator', function () {
        var etalon = linq_1.asEnumerable(data_1.unorderedStr).ToArray().sort(comparator);
        var iterable = linq_1.asEnumerable(data_1.unorderedStr).OrderByDescending(function (a) { return a; }, comparator);
        var iterator = iterable[Symbol.iterator]();
        for (var i = etalon.length - 1; i >= 0; i--) {
            var exp = etalon[i];
            var actual = iterator.next().value;
            chai_1.assert.equal(actual, exp);
        }
    });
    it('ThenBy() - Default', function () {
        var enumerable = linq_1.asEnumerable(data_1.unorderedStr);
        var iterable = enumerable.OrderBy().ThenBy();
        var iterator = iterable[Symbol.iterator]();
        for (var _i = 0, _a = enumerable.ToArray().sort(); _i < _a.length; _i++) {
            var exp = _a[_i];
            var actual = iterator.next().value;
            if (isNaN(exp) && isNaN(actual))
                continue;
            chai_1.assert.equal(actual, exp);
        }
    });
    it('ThenBy() - Selector', function () {
        var enumerable = linq_1.asEnumerable(data_1.unorderedStr);
        var iterable = enumerable.OrderBy(function (s) { return s.charCodeAt(3); }).ThenBy(function (s) { return s.charCodeAt(2); });
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(iterator.next().value, "1314");
        chai_1.assert.equal(iterator.next().value, "1324");
        chai_1.assert.equal(iterator.next().value, "1234");
        chai_1.assert.equal(iterator.next().value, "1234");
        chai_1.assert.equal(iterator.next().value, "zjgf");
        chai_1.assert.equal(iterator.next().value, "afgh");
        chai_1.assert.equal(iterator.next().value, "axgh");
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('ThenBy() - Default Key', function () {
        var enumerable = linq_1.asEnumerable(data_1.unorderedStr);
        var iterable = enumerable.OrderBy().ThenBy(undefined, comparator);
        var iterator = iterable[Symbol.iterator]();
        for (var _i = 0, _a = enumerable.ToArray().sort(comparator); _i < _a.length; _i++) {
            var exp = _a[_i];
            chai_1.assert.equal(iterator.next().value, exp);
        }
    });
    it('ThenBy() - Function', function () {
        var enumerable = linq_1.asEnumerable(data_1.unorderedStr);
        var iterable = enumerable.OrderBy().ThenBy(function (s) { return s; }, comparator);
        var iterator = iterable[Symbol.iterator]();
        for (var _i = 0, _a = enumerable.ToArray().sort(comparator); _i < _a.length; _i++) {
            var exp = _a[_i];
            chai_1.assert.equal(iterator.next().value, exp);
        }
    });
    it('ThenBy() - QJesus', function () {
        var iterable = linq_1.asEnumerable(test).OrderByDescending(function (x) { return x.isControlled; })
            .ThenBy(function (x) { return x.no; });
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(iterator.next().value.id, 1);
        chai_1.assert.equal(iterator.next().value.id, 2);
        chai_1.assert.equal(iterator.next().value.id, 3);
        chai_1.assert.equal(iterator.next().value.id, 4);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('ThenByDescending() - Default', function () {
        var enumerable = linq_1.asEnumerable(data_1.unorderedStr);
        var etalon = enumerable.ToArray().sort();
        var iterable = enumerable.OrderByDescending().ThenByDescending();
        var iterator = iterable[Symbol.iterator]();
        for (var i = etalon.length - 1; i >= 0; i--) {
            var exp = etalon[i];
            var actual = iterator.next().value;
            if (isNaN(exp) && isNaN(actual))
                continue;
            chai_1.assert.equal(actual, exp);
        }
    });
    it('ThenByDescending() - Selector', function () {
        var enumerable = linq_1.asEnumerable(data_1.unorderedStr);
        var etalon = enumerable.ToArray().sort(comparator);
        var iterable = enumerable.OrderByDescending(function (s) { return s.charCodeAt(3); }).ThenByDescending(function (s) { return s.charCodeAt(2); });
        var iterator = iterable[Symbol.iterator]();
        for (var i = etalon.length - 1; i >= 0; i--) {
            var exp = etalon[i];
            var actual = iterator.next().value;
            if (isNaN(exp) && isNaN(actual))
                continue;
            chai_1.assert.equal(actual, exp);
        }
    });
    it('ThenByDescending() - QJesus', function () {
        var iterable = linq_1.asEnumerable(test).OrderBy(function (x) { return x.isControlled; })
            .ThenByDescending(function (x) { return x.no; });
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(iterator.next().value.id, 4);
        chai_1.assert.equal(iterator.next().value.id, 3);
        chai_1.assert.equal(iterator.next().value.id, 2);
        chai_1.assert.equal(iterator.next().value.id, 1);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('Zip()', function () {
        var numbers = [1, 2, 3, 4];
        var words = ["one", "two", "three"];
        var numbersAndWords = linq_1.asEnumerable(numbers).Zip(words, function (first, second) { return first + " " + second; });
        var iterator = numbersAndWords[Symbol.iterator]();
        chai_1.assert.equal("1 one", iterator.next().value);
        chai_1.assert.equal("2 two", iterator.next().value);
        chai_1.assert.equal("3 three", iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
});
/** Copyright (c) ENikS.  All rights reserved. */
//# sourceMappingURL=nogen.js.map