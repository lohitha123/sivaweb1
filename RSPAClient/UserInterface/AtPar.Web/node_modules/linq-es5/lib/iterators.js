"use strict";
///////////////////////////////////////////////////////////////////////////////
/** Copyright (c) ENikS.  All rights reserved.                               */
//
// Licensed under the Apache License, Version 2.0  ( the  "License" );  you may 
// not use this file except in compliance with the License.  You may  obtain  a 
// copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required  by  applicable  law  or  agreed  to  in  writing,  software 
// distributed under the License is distributed on an "AS  IS"  BASIS,  WITHOUT
// WARRANTIES OR CONDITIONS  OF  ANY  KIND, either express or implied.  See the 
// License for the specific  language  governing  permissions  and  limitations 
// under the License.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
//-----------------------------------------------------------------------------
//  CSharp Enumerator implementation
//-----------------------------------------------------------------------------
//  Gets Iterator and turns it into CSharpEnumerator 
var CSharpEnumerator = (function () {
    function CSharpEnumerator(sourceIterator) {
        this._iterator = sourceIterator;
    }
    Object.defineProperty(CSharpEnumerator.prototype, "Current", {
        /** Gets the current element in the collection. */
        get: function () {
            return this._result.value;
        },
        enumerable: true,
        configurable: true
    });
    /** Advances the enumerator to the next element of the collection.*/
    CSharpEnumerator.prototype.MoveNext = function () {
        this._result = this._iterator.next();
        return !this._result.done;
    };
    /** Sets the enumerator to its initial position, which is before the first
    * element in the collection. */
    CSharpEnumerator.prototype.Reset = function () {
        throw "JavaScript iterators could not be Reset";
    };
    return CSharpEnumerator;
}());
exports.CSharpEnumerator = CSharpEnumerator;
//-----------------------------------------------------------------------------
//  Iterators implementation
//-----------------------------------------------------------------------------
var ArrayIterator = (function () {
    function ArrayIterator(_source, _current, _done, _increment) {
        if (_increment === void 0) { _increment = 1; }
        this._source = _source;
        this._current = _current;
        this._done = _done;
        this._increment = _increment;
    }
    ArrayIterator.prototype.next = function (value) {
        var result = { value: this._source[this._current], done: this._done(this._current) };
        this._current += this._increment;
        return result;
    };
    return ArrayIterator;
}());
exports.ArrayIterator = ArrayIterator;
var IteratorBase = (function () {
    function IteratorBase(_iterator) {
        this._iterator = _iterator;
        this._done = { value: undefined, done: true };
    }
    return IteratorBase;
}());
exports.IteratorBase = IteratorBase;
var Intersect = (function (_super) {
    __extends(Intersect, _super);
    function Intersect(iterator, _set, _switch, _keySelector) {
        if (_keySelector === void 0) { _keySelector = function (o) { return o; }; }
        var _this = _super.call(this, iterator) || this;
        _this._set = _set;
        _this._switch = _switch;
        _this._keySelector = _keySelector;
        return _this;
    }
    Intersect.prototype.next = function (value) {
        var result;
        while (!(result = this._iterator.next()).done && (this._switch == this._set.has(this._keySelector(result.value)))) { }
        if (!result.done && !this._switch)
            this._set.add(this._keySelector(result.value));
        return result;
    };
    return Intersect;
}(IteratorBase));
exports.Intersect = Intersect;
var Generator = (function (_super) {
    __extends(Generator, _super);
    function Generator(_current, _count, _increment) {
        if (_increment === void 0) { _increment = false; }
        var _this = _super.call(this, null) || this;
        _this._current = _current;
        _this._count = _count;
        _this._increment = _increment;
        return _this;
    }
    Generator.prototype.next = function (value) {
        var result = (0 < this._count) ? { value: this._current, done: 0 >= this._count-- } : this._done;
        if (this._increment)
            this._current++;
        return result;
    };
    return Generator;
}(IteratorBase));
exports.Generator = Generator;
var Repeat = (function (_super) {
    __extends(Repeat, _super);
    function Repeat(_current, _count) {
        var _this = _super.call(this, null) || this;
        _this._current = _current;
        _this._count = _count;
        return _this;
    }
    Repeat.prototype.next = function (value) {
        var result = (0 < this._count) ? { value: this._current, done: 0 >= this._count-- } : this._done;
        return result;
    };
    return Repeat;
}(IteratorBase));
exports.Repeat = Repeat;
var DefaultIfEmpty = (function (_super) {
    __extends(DefaultIfEmpty, _super);
    function DefaultIfEmpty(sourceIterator, _default) {
        var _this = _super.call(this, sourceIterator) || this;
        _this._default = _default;
        return _this;
    }
    DefaultIfEmpty.prototype.next = function (value) {
        return this.check(this._iterator.next());
    };
    DefaultIfEmpty.prototype.check = function (result) {
        if (result.done) {
            result.value = this._default;
        }
        else {
            this.check = function (a) { return a; };
        }
        return result;
    };
    return DefaultIfEmpty;
}(IteratorBase));
exports.DefaultIfEmpty = DefaultIfEmpty;
var ChunkBy = (function (_super) {
    __extends(ChunkBy, _super);
    function ChunkBy(target, keySelect, elementSelector, resultSelector) {
        var _this = _super.call(this, target) || this;
        _this.keySelect = keySelect;
        _this.elementSelector = elementSelector;
        _this.resultSelector = resultSelector;
        _this.index = 0;
        return _this;
    }
    ;
    ChunkBy.prototype.next = function (value) {
        var result;
        do {
            result = this._iterator.next();
            if (result.done) {
                if (this.box) {
                    result.done = false;
                    result.value = this.box;
                    this.box = undefined;
                    return result;
                }
                else
                    return this._done;
            }
            var newKey = this.keySelect(result.value, this.index++);
            if (this.key !== newKey && this.box) {
                var ret = { done: false, value: this.resultSelector(this.key, this.box) };
                this.key = newKey;
                this.box = new Array();
                this.box.push(this.elementSelector(result.value));
                return ret;
            }
            if (!this.box) {
                this.box = new Array();
            }
            this.key = newKey;
            this.box.push(this.elementSelector(result.value));
        } while (!result.done);
        return this._done;
    };
    return ChunkBy;
}(IteratorBase));
exports.ChunkBy = ChunkBy;
var OfType = (function (_super) {
    __extends(OfType, _super);
    function OfType(target, obj) {
        var _this = _super.call(this, target) || this;
        _this.obj = obj;
        return _this;
    }
    OfType.prototype.next = function (value) {
        var result;
        do {
            result = this._iterator.next();
        } while (!result.done && !(result.value instanceof this.obj));
        return result;
    };
    return OfType;
}(IteratorBase));
exports.OfType = OfType;
var OfValueType = (function (_super) {
    __extends(OfValueType, _super);
    function OfValueType(target, obj, typeName) {
        var _this = _super.call(this, target, obj) || this;
        _this.typeName = typeName;
        return _this;
    }
    OfValueType.prototype.next = function (value) {
        var result;
        do {
            result = this._iterator.next();
        } while (!result.done &&
            this.typeName !== typeof (result.value) &&
            !(result.value instanceof this.obj));
        return result;
    };
    return OfValueType;
}(OfType));
exports.OfValueType = OfValueType;
var MethodIteratror = (function (_super) {
    __extends(MethodIteratror, _super);
    function MethodIteratror(iterator, _method, _index) {
        if (_method === void 0) { _method = null; }
        if (_index === void 0) { _index = 0; }
        var _this = _super.call(this, iterator) || this;
        _this._method = _method;
        _this._index = _index;
        return _this;
    }
    return MethodIteratror;
}(IteratorBase));
exports.MethodIteratror = MethodIteratror;
var Distinct = (function (_super) {
    __extends(Distinct, _super);
    function Distinct() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._set = new Set();
        return _this;
    }
    Distinct.prototype.next = function (value) {
        var result, key;
        while (!(result = this._iterator.next()).done) {
            key = this._method(result.value);
            if (!this._set.has(key))
                break;
        }
        this._set.add(key);
        return result;
    };
    return Distinct;
}(MethodIteratror));
exports.Distinct = Distinct;
var Where = (function (_super) {
    __extends(Where, _super);
    function Where() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Where.prototype.next = function (value) {
        var result;
        do {
            result = this._iterator.next();
        } while (!result.done && !this._method(result.value, this._index++));
        return result;
    };
    return Where;
}(MethodIteratror));
exports.Where = Where;
var Skip = (function (_super) {
    __extends(Skip, _super);
    function Skip() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._hasSkipped = false;
        return _this;
    }
    Skip.prototype.next = function (value) {
        var result;
        if (this._hasSkipped)
            return this._iterator.next();
        while (!(result = this._iterator.next()).done && this._method(result.value, this._index++)) { }
        this._hasSkipped = true;
        return result;
    };
    return Skip;
}(MethodIteratror));
exports.Skip = Skip;
var Take = (function (_super) {
    __extends(Take, _super);
    function Take() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Take.prototype.next = function (value) {
        var result = this._iterator.next();
        if (result.done || !this._method(result.value, this._index++)) {
            return this._done;
        }
        return result;
    };
    return Take;
}(MethodIteratror));
exports.Take = Take;
var Zip = (function (_super) {
    __extends(Zip, _super);
    function Zip(first, _second, func) {
        var _this = _super.call(this, first, func) || this;
        _this._second = _second;
        return _this;
    }
    Zip.prototype.next = function (value) {
        var first = this._iterator.next();
        var second = this._second.next();
        if (first.done || second.done) {
            return this._done;
        }
        return { done: false, value: this._method(first.value, second.value) };
    };
    return Zip;
}(MethodIteratror));
exports.Zip = Zip;
var Select = (function (_super) {
    __extends(Select, _super);
    function Select() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Select.prototype.next = function (value) {
        var result = this._iterator.next();
        if (result.done)
            return result;
        result.value = this._method(result.value, this._index++);
        return result;
    };
    return Select;
}(MethodIteratror));
exports.Select = Select;
var SelectMany = (function (_super) {
    __extends(SelectMany, _super);
    function SelectMany(sourceIterator, selector, transform) {
        if (transform === void 0) { transform = function (t, s) { return s; }; }
        var _this = _super.call(this, sourceIterator, selector) || this;
        _this._collectionState = _this._done;
        _this._resultState = _this._done;
        _this._resultSelector = transform;
        return _this;
    }
    SelectMany.prototype.next = function (value) {
        do {
            if (this._resultState.done) {
                this._collectionState = this._iterator.next();
                if (this._collectionState.done)
                    return this._done;
                this._collection = this._method(this._collectionState.value)[Symbol.iterator]();
            }
            this._resultState = this._collection.next();
            if (!this._resultState.done) {
                this._resultState.value = this._resultSelector(this._collectionState.value, this._resultState.value);
            }
        } while (this._resultState.done);
        return this._resultState;
    };
    return SelectMany;
}(MethodIteratror));
exports.SelectMany = SelectMany;
var Join = (function (_super) {
    __extends(Join, _super);
    function Join(outer, inner, oKeySelect, iKeySelect, transform) {
        var _this = _super.call(this, outer, null) || this;
        _this._method = oKeySelect;
        var result;
        _this._map = new Map();
        while (!(result = inner.next()).done) {
            var key = iKeySelect(result.value);
            var group = _this._map.get(key);
            if ('undefined' === typeof group) {
                group = [];
                _this._map.set(key, group);
            }
            group.push(result.value);
        }
        _this._resultSelector = transform;
        return _this;
    }
    Join.prototype.next = function (value) {
        do {
            if (this._resultState.done) {
                this._collectionState = this._iterator.next();
                if (this._collectionState.done)
                    return this._done;
                var key = this._method(this._collectionState.value);
                var innerSet = this._map.get(key);
                if ('undefined' === typeof innerSet)
                    continue;
                this._collection = innerSet[Symbol.iterator]();
            }
            this._resultState = this._collection.next();
            if (!this._resultState.done) {
                this._resultState.value = this._resultSelector(this._collectionState.value, this._resultState.value);
            }
        } while (this._resultState.done);
        return this._resultState;
    };
    return Join;
}(SelectMany));
exports.Join = Join;
var Union = (function (_super) {
    __extends(Union, _super);
    function Union(sourceIterator, _keySelector) {
        var _this = _super.call(this, sourceIterator, function (o) { return o; }) || this;
        _this._keySelector = _keySelector;
        _this._set = new Set();
        return _this;
    }
    Union.prototype.next = function (value) {
        var result, key;
        while (!(result = _super.prototype.next.call(this)).done) {
            key = this._keySelector(result.value);
            if (!this._set.has(key))
                break;
        }
        this._set.add(key);
        return result;
    };
    return Union;
}(SelectMany));
exports.Union = Union;
var GroupBy = (function (_super) {
    __extends(GroupBy, _super);
    function GroupBy(iterator, resultSelect, _map) {
        var _this = _super.call(this, iterator, resultSelect) || this;
        _this._map = _map;
        return _this;
    }
    GroupBy.prototype.next = function (value) {
        var result = this._iterator.next();
        if (result.done)
            return this._done;
        var iterable = this._map.get(result.value);
        return { value: this._method(result.value, iterable), done: false };
    };
    return GroupBy;
}(MethodIteratror));
exports.GroupBy = GroupBy;
var GroupJoin = (function (_super) {
    __extends(GroupJoin, _super);
    function GroupJoin(iterator, oKeySelect, _transform, _map) {
        var _this = _super.call(this, iterator, oKeySelect) || this;
        _this._transform = _transform;
        _this._map = _map;
        return _this;
    }
    GroupJoin.prototype.next = function (value) {
        var innerSet;
        var result;
        result = this._iterator.next();
        if (result.done)
            return this._done;
        var key = this._method(result.value);
        innerSet = this._map.get(key);
        return { value: this._transform(result.value, innerSet), done: false };
    };
    return GroupJoin;
}(MethodIteratror));
exports.GroupJoin = GroupJoin;
//# sourceMappingURL=iterators.js.map