/** Copyright (c) ENikS.  All rights reserved.                               */
import "es6-shim";
import { Enumerable, IEnumerable } from "./enumerable";
/**
* Converts any Iterable<T> object into LINQ-able object
* @param TSource An Array, Map, Set, String or other Iterable object.
* @example
*     import {asEnumerable} from "linq-ts";
*
*     var enumerable = asEnumerable([0, 1, 2, 3, 4, 5, 6, 7]).Take(3);
*     var sum = enumerable.Sum();
*
*/
declare function getEnumerable<T>(TSource?: Iterable<T> | IEnumerable<T> | string): Enumerable<T>;
/**
* Generates <count> of <T> elements starting with <start>. T is any
* type which could be cast to number: number, enum, etc.
* @param start First value in sequence.
* @param count Number of elements to iteratel.
* @example
*     var sum = Range(0, 7).Sum();
*/
declare function getRange<T>(start: T, count: number): Enumerable<T>;
/**
* Repeat element <start> of type T <count> of times.
* @param start First value in sequence.
* @param count Number of elements to iteratel.
* @example
*     var sum = Repeat("v", 7);
*/
declare function getRepeat<T>(start: T, count: number): Enumerable<T>;
export { getEnumerable as default, getEnumerable as AsEnumerable, getEnumerable as asEnumerable, getEnumerable as From, getEnumerable as from, getRange as Range, getRange as range, getRepeat as Repeat, getRepeat as repeat };
