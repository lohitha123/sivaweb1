"use strict";
///////////////////////////////////////////////////////////////////////////////
/** Copyright (c) ENikS.  All rights reserved.                               */
//
// Licensed under the Apache License, Version 2.0  ( the  "License" );  you may 
// not use this file except in compliance with the License.  You may  obtain  a 
// copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required  by  applicable  law  or  agreed  to  in  writing,  software 
// distributed under the License is distributed on an "AS  IS"  BASIS,  WITHOUT
// WARRANTIES OR CONDITIONS  OF  ANY  KIND, either express or implied.  See the 
// License for the specific  language  governing  permissions  and  limitations 
// under the License.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
require("es6-shim");
var Iterator = require("./iterators");
var Constant = require("./utilities");
/**
* Converts any Iterable<T> object into LINQ-able object
* @param TSource An Array, Map, Set, String or other Iterable object.
* @example
*     import {asEnumerable} from "linq-ts";
*
*     var enumerable = asEnumerable([0, 1, 2, 3, 4, 5, 6, 7]).Take(3);
*     var sum = enumerable.Sum();
*
*/
function getEnumerable(TSource) {
    if (TSource === void 0) { TSource = null; }
    return new EnumerableImpl(TSource);
}
exports.default = getEnumerable;
exports.AsEnumerable = getEnumerable;
exports.asEnumerable = getEnumerable;
exports.From = getEnumerable;
exports.from = getEnumerable;
/**
* Generates <count> of <T> elements starting with <start>. T is any
* type which could be cast to number: number, enum, etc.
* @param start First value in sequence.
* @param count Number of elements to iteratel.
* @example
*     var sum = Range(0, 7).Sum();
*/
function getRange(start, count) {
    return new EnumerableImpl(null, function () { return new Iterator.Generator(start, count, true); });
}
exports.Range = getRange;
exports.range = getRange;
/**
* Repeat element <start> of type T <count> of times.
* @param start First value in sequence.
* @param count Number of elements to iteratel.
* @example
*     var sum = Repeat("v", 7);
*/
function getRepeat(start, count) {
    return new EnumerableImpl(null, function () { return new Iterator.Generator(start, count); });
}
exports.Repeat = getRepeat;
exports.repeat = getRepeat;
//-----------------------------------------------------------------------------
//  Enumerable Implementation
//-----------------------------------------------------------------------------
var EnumerableImpl = (function () {
    ///////////////////////////////////////////////////////////////////////////
    function EnumerableImpl(target, factory, arg) {
        this._target = target;
        this._factory = factory;
        this._factoryArg = arg;
        // JavaScript naming convention
        this['aggregate'] = this.Aggregate;
        this['all'] = this.All;
        this['any'] = this.Any;
        this['average'] = this.Average;
        this['contains'] = this.Contains;
        this['count'] = this.Count;
        this['max'] = this.Max;
        this['min'] = this.Min;
        this['elementAt'] = this.ElementAt;
        this['elementAtOrDefault'] = this.ElementAtOrDefault;
        this['first'] = this.First;
        this['firstOrDefault'] = this.FirstOrDefault;
        this['last'] = this.Last;
        this['lastOrDefault'] = this.LastOrDefault;
        this['sequenceEqual'] = this.SequenceEqual;
        this['single'] = this.Single;
        this['singleOrDefault'] = this.SingleOrDefault;
        this['sum'] = this.Sum;
        this['toArray'] = this.ToArray;
        this['toMap'] = this.ToMap;
        this['toDictionary'] = this.ToDictionary;
        this['defaultIfEmpty'] = this.DefaultIfEmpty;
        this['concat'] = this.Concat;
        this['distinct'] = this.Distinct;
        this['except'] = this.Except;
        this['groupBy'] = this.GroupBy;
        this['groupJoin'] = this.GroupJoin;
        this['intersect'] = this.Intersect;
        this['ofType'] = this.OfType;
        this['join'] = this.Join;
        this['orderBy'] = this.OrderBy;
        this['orderByDescend'] = this.OrderByDescending;
        this['range'] = this.Range;
        this['repeat'] = this.Repeat;
        this['reverse'] = this.Reverse;
        this['select'] = this.Select;
        this['selectMany'] = this.SelectMany;
        this['skip'] = this.Skip;
        this['skipWhile'] = this.SkipWhile;
        this['take'] = this.Take;
        this['takeWhile'] = this.TakeWhile;
        this['union'] = this.Union;
        this['where'] = this.Where;
        this['zip'] = this.Zip;
    }
    ///////////////////////////////////////////////////////////////////////////
    /** Returns JavaScript iterator */
    EnumerableImpl.prototype[Symbol.iterator] = function () {
        return (this._factory) ? this._factory(this._factoryArg)
            : (null != this._target) ? this._target[Symbol.iterator]()
                : { next: function () { return { done: true, value: undefined }; } };
    };
    /** Returns C# style enumerator */
    EnumerableImpl.prototype.GetEnumerator = function () {
        return new Iterator.CSharpEnumerator(this[Symbol.iterator]());
    };
    EnumerableImpl.prototype.Aggregate = function (alpha, beta, gamma) {
        if (beta === void 0) { beta = Constant.selfFn; }
        if (gamma === void 0) { gamma = Constant.selfFn; }
        var zero;
        var method;
        var selector;
        if ("function" === typeof alpha) {
            method = alpha;
            selector = beta;
        }
        else {
            zero = alpha;
            method = beta;
            selector = gamma;
        }
        var result = zero;
        var res, iterator = this[Symbol.iterator]();
        while (!(res = iterator.next()).done) {
            if (!result)
                result = Constant.getDefaultVal(typeof (res.value));
            result = method(result, res.value);
        }
        return selector(result);
    };
    EnumerableImpl.prototype.All = function (predicate) {
        if (predicate === void 0) { predicate = Constant.trueFn; }
        var result, iterator = this[Symbol.iterator]();
        while (!(result = iterator.next()).done) {
            if (!predicate(result.value)) {
                return false;
            }
        }
        return true;
    };
    EnumerableImpl.prototype.Any = function (predicate) {
        var result, iterator = this[Symbol.iterator]();
        // Check if at least one exist
        if (null == predicate) {
            return !iterator.next().done;
        }
        // Check if any satisfy the criteria
        while (!(result = iterator.next()).done) {
            if (predicate(result.value)) {
                return true;
            }
        }
        return false;
    };
    EnumerableImpl.prototype.Average = function (func) {
        if (func === void 0) { func = Constant.selfFn; }
        var result, sum = 0, count = 0;
        var iterator = this[Symbol.iterator]();
        while (!(result = iterator.next()).done) {
            sum += func(result.value);
            count++;
        }
        return sum / count;
    };
    EnumerableImpl.prototype.Contains = function (value, equal) {
        if (equal === void 0) { equal = function (a, b) { return a === b; }; }
        var result, iterator = this[Symbol.iterator]();
        while (!(result = iterator.next()).done) {
            if (equal(value, result.value)) {
                return true;
            }
        }
        return false;
    };
    EnumerableImpl.prototype.Count = function (predicate) {
        if (predicate === void 0) { predicate = Constant.trueFn; }
        var result, count = 0;
        var iterator = this[Symbol.iterator]();
        while (!(result = iterator.next()).done) {
            if (predicate(result.value)) {
                count++;
            }
        }
        return count;
    };
    EnumerableImpl.prototype.Max = function (transform) {
        if (transform === void 0) { transform = Constant.selfFn; }
        var result, value, max, hasValue = false;
        var iterator = this[Symbol.iterator]();
        while (!(result = iterator.next()).done) {
            value = transform(result.value);
            if (hasValue) {
                if (max < value)
                    max = value;
            }
            else {
                max = value;
                hasValue = true;
            }
        }
        if (!hasValue)
            throw Constant.CONST_NO_ELEMENTS;
        return max;
    };
    EnumerableImpl.prototype.Min = function (transform) {
        if (transform === void 0) { transform = Constant.selfFn; }
        var result, value, min, hasValue = false;
        var iterator = this[Symbol.iterator]();
        while (!(result = iterator.next()).done) {
            value = transform(result.value);
            if (hasValue) {
                if (min > value)
                    min = value;
            }
            else {
                min = value;
                hasValue = true;
            }
        }
        if (!hasValue)
            throw Constant.CONST_NO_ELEMENTS;
        return min;
    };
    EnumerableImpl.prototype.ElementAt = function (index) {
        var result, count = 0;
        var iterator = this[Symbol.iterator]();
        while (!(result = iterator.next()).done) {
            if (index === count++) {
                return result.value;
            }
        }
        throw "Argument Out Of Range";
    };
    EnumerableImpl.prototype.ElementAtOrDefault = function (index) {
        var result, value, count = 0;
        var iterator = this[Symbol.iterator]();
        while (!(result = iterator.next()).done) {
            if (index === count++) {
                return result.value;
            }
            value = result.value;
        }
        return Constant.getDefaultVal(typeof value, value); // Last good value
    };
    EnumerableImpl.prototype.First = function (predicate) {
        if (predicate === void 0) { predicate = Constant.trueFn; }
        var result;
        var iterator = this[Symbol.iterator]();
        while (!(result = iterator.next()).done) {
            if (predicate(result.value)) {
                return result.value;
            }
        }
        throw Constant.CONST_NOTHING_FOUND;
    };
    EnumerableImpl.prototype.FirstOrDefault = function (predicate) {
        if (predicate === void 0) { predicate = Constant.trueFn; }
        var result, value;
        var iterator = this[Symbol.iterator]();
        while (!(result = iterator.next()).done) {
            value = result.value;
            if (predicate(value)) {
                return result.value;
            }
        }
        return Constant.getDefaultVal(typeof value); // Last good value
    };
    EnumerableImpl.prototype.Last = function (predicate) {
        if (predicate === void 0) { predicate = Constant.trueFn; }
        var result, value, found = false;
        var iterator = this[Symbol.iterator]();
        while (!(result = iterator.next()).done) {
            if (predicate(result.value)) {
                value = result.value;
                found = true;
            }
        }
        if (!found) {
            throw Constant.CONST_NOTHING_FOUND;
        }
        return value;
    };
    EnumerableImpl.prototype.LastOrDefault = function (predicate) {
        if (predicate === void 0) { predicate = Constant.trueFn; }
        var result, value, lastKnown, found = false;
        var iterator = this[Symbol.iterator]();
        while (!(result = iterator.next()).done) {
            if (predicate(result.value)) {
                value = result.value;
                found = true;
            }
            lastKnown = result.value;
        }
        return (found) ? value : Constant.getDefaultVal(typeof lastKnown);
    };
    EnumerableImpl.prototype.SequenceEqual = function (other, equal) {
        if (equal === void 0) { equal = function (a, b) { return a === b; }; }
        var res1, res2;
        var it1 = this[Symbol.iterator]();
        var it2 = other[Symbol.iterator]();
        do {
            res1 = it1.next();
            res2 = it2.next();
            if (res1.done && res2.done)
                return true;
            if ((res1.done != res2.done) || !equal(res1.value, res2.value)) {
                return false;
            }
        } while (true);
    };
    EnumerableImpl.prototype.Single = function (predicate) {
        if (predicate === void 0) { predicate = Constant.trueFn; }
        var value, hasValue = false;
        var result, iterator = this[Symbol.iterator]();
        while (!(result = iterator.next()).done) {
            if (predicate(result.value)) {
                if (!hasValue) {
                    value = result.value;
                    hasValue = true;
                }
                else {
                    throw Constant.CONST_TOO_MANY;
                }
            }
        }
        if (hasValue)
            return value;
        throw Constant.CONST_NOTHING_FOUND;
    };
    EnumerableImpl.prototype.SingleOrDefault = function (predicate) {
        if (predicate === void 0) { predicate = Constant.trueFn; }
        var value, lastKnown, hasValue = false;
        var result, iterator = this[Symbol.iterator]();
        while (!(result = iterator.next()).done) {
            if (predicate(result.value)) {
                if (!hasValue) {
                    value = result.value;
                    hasValue = true;
                }
                else {
                    throw Constant.CONST_TOO_MANY;
                }
            }
            lastKnown = result.value;
        }
        return (hasValue) ? value : Constant.getDefaultVal(typeof lastKnown);
    };
    EnumerableImpl.prototype.Sum = function (transform) {
        if (transform === void 0) { transform = Constant.selfFn; }
        var result, sum = 0;
        var iterator = this[Symbol.iterator]();
        while (!(result = iterator.next()).done) {
            sum += transform(result.value);
        }
        return sum;
    };
    EnumerableImpl.prototype.ToArray = function () {
        var result, array = [];
        var iterator = this[Symbol.iterator]();
        while (!(result = iterator.next()).done) {
            array.push(result.value);
        }
        return array;
    };
    EnumerableImpl.prototype.ToMap = function (keySelector, elementSelector) {
        if (elementSelector === void 0) { elementSelector = Constant.selfFn; }
        var dictionary = new Map();
        var result, iterator = this[Symbol.iterator]();
        while (!(result = iterator.next()).done) {
            dictionary.set(keySelector(result.value), elementSelector(result.value));
        }
        return dictionary;
    };
    EnumerableImpl.prototype.ToDictionary = function (keySelector, elementSelector) {
        if (elementSelector === void 0) { elementSelector = Constant.selfFn; }
        var dictionary = new Map();
        var result, iterator = this[Symbol.iterator]();
        while (!(result = iterator.next()).done) {
            dictionary.set(keySelector(result.value), elementSelector(result.value));
        }
        return dictionary;
    };
    //-------------------------------------------------------------------------
    //  Deferred execution methods
    //-------------------------------------------------------------------------
    EnumerableImpl.prototype.DefaultIfEmpty = function (defaultValue) {
        var _this = this;
        if (defaultValue === void 0) { defaultValue = undefined; }
        return new EnumerableImpl(this, function () { return new Iterator.DefaultIfEmpty(_this[Symbol.iterator](), defaultValue); });
    };
    EnumerableImpl.prototype.Cast = function () {
        return this; // TODO: Remove any once TypeScript 2.0 out
    };
    EnumerableImpl.prototype.Concat = function (second) {
        var aggregate = [this._target, second];
        return new EnumerableImpl(this, function () { return new Iterator.SelectMany(aggregate[Symbol.iterator](), Constant.selfFn); });
    };
    EnumerableImpl.prototype.ChunkBy = function (keySelect, elementSelector, resultSelector) {
        var _this = this;
        if (elementSelector === void 0) { elementSelector = Constant.selfFn; }
        if (resultSelector === void 0) { resultSelector = function (a, b) { return b; }; }
        return new EnumerableImpl(this, function () { return new Iterator.ChunkBy(_this[Symbol.iterator](), keySelect, elementSelector, resultSelector); });
    };
    EnumerableImpl.prototype.Distinct = function (keySelector) {
        var _this = this;
        if (keySelector === void 0) { keySelector = Constant.selfFn; }
        return new EnumerableImpl(this, function () { return new Iterator.Distinct(_this[Symbol.iterator](), keySelector); });
    };
    EnumerableImpl.prototype.Except = function (other, keySelector) {
        var _this = this;
        return new EnumerableImpl(this, function () { return new Iterator.Intersect(_this[Symbol.iterator](), Constant.getKeys(other, keySelector), true, keySelector); });
    };
    EnumerableImpl.prototype.GroupBy = function (selKey, selElement, selResult) {
        if (selElement === void 0) { selElement = Constant.selfFn; }
        if (selResult === void 0) { selResult = Constant.defGrouping; }
        var result;
        var iterator = this[Symbol.iterator]();
        var _map = new Map();
        while (!(result = iterator.next()).done) {
            var key = selKey(result.value);
            var group = _map.get(key);
            if ('undefined' === typeof group) {
                group = [];
                _map.set(key, group);
            }
            group.push(selElement(result.value));
        }
        var factory = function () { return new Iterator.GroupBy(_map.keys(), selResult, _map); };
        var tst = factory();
        return new EnumerableImpl(this, function () { return new Iterator.GroupBy(_map.keys(), selResult, _map); });
    };
    EnumerableImpl.prototype.GroupJoin = function (inner, oKeySelect, iKeySelect, resultSelector) {
        var _this = this;
        if (resultSelector === void 0) { resultSelector = Constant.defGrouping; }
        var _map = new Map();
        var _inner = inner[Symbol.iterator]();
        var result;
        while (!(result = _inner.next()).done) {
            var key = iKeySelect(result.value);
            if ('undefined' === typeof key)
                throw "Inner Key selector returned undefined Key";
            var group = _map.get(key);
            if ('undefined' === typeof group) {
                group = [];
                _map.set(key, group);
            }
            group.push(result.value);
        }
        return new EnumerableImpl(this, function () { return new Iterator.GroupJoin(_this[Symbol.iterator](), oKeySelect, resultSelector, _map); });
    };
    EnumerableImpl.prototype.Intersect = function (other, kesSelector) {
        var _this = this;
        return new EnumerableImpl(this, function () { return new Iterator.Intersect(_this[Symbol.iterator](), Constant.getKeys(other, kesSelector), false, kesSelector); });
    };
    EnumerableImpl.prototype.Join = function (inner, oSelector, iSelector, transform) {
        var _this = this;
        return new EnumerableImpl(this, function () { return new Iterator.Join(_this[Symbol.iterator](), inner[Symbol.iterator](), oSelector, iSelector, transform); });
    };
    EnumerableImpl.prototype.OfType = function (obj) {
        var _this = this;
        var typeName;
        switch (obj) {
            case Number:
                return new EnumerableImpl(this, function () { return new Iterator.OfValueType(_this[Symbol.iterator](), obj, Constant.CONST_NUMBER); });
            case Boolean:
                return new EnumerableImpl(this, function () { return new Iterator.OfValueType(_this[Symbol.iterator](), obj, Constant.CONST_BOOLEAN); });
            case String:
                return new EnumerableImpl(this, function () { return new Iterator.OfValueType(_this[Symbol.iterator](), obj, Constant.CONST_STRING); });
            case Symbol:
                return new EnumerableImpl(this, function () { return new Iterator.OfValueType(_this[Symbol.iterator](), obj, Constant.CONST_SYMBOL); });
        }
        return new EnumerableImpl(this, function () { return new Iterator.OfType(_this[Symbol.iterator](), obj); });
    };
    EnumerableImpl.prototype.OrderBy = function (keySelect, equal) {
        var comparer = equal ? equal : Constant.defCompare;
        var compare = !keySelect && !equal ? undefined
            : keySelect ? function (a, b) { return comparer(keySelect(a), keySelect(b)); } : function (a, b) { return comparer(a, b); };
        return new OrderedLinq(this, function (array) { return new Iterator.ArrayIterator(array, 0, function (i) { return i >= array.length; }); }, compare);
    };
    EnumerableImpl.prototype.OrderByDescending = function (keySelect, equal) {
        var comparer = equal ? equal : Constant.defCompare;
        var compare = !keySelect && !equal ? undefined
            : keySelect ? function (a, b) { return comparer(keySelect(a), keySelect(b)); } : function (a, b) { return comparer(a, b); };
        return new OrderedLinq(this, function (array) { return new Iterator.ArrayIterator(array, array.length - 1, function (i) { return 0 > i; }, -1); }, compare, true);
    };
    EnumerableImpl.prototype.Range = function (start, count) {
        return new EnumerableImpl(null, function () { return new Iterator.Generator(start, count, true); });
    };
    EnumerableImpl.prototype.Repeat = function (element, count) {
        return new EnumerableImpl(null, function () { return new Iterator.Repeat(element, count); });
    };
    EnumerableImpl.prototype.Reverse = function () {
        var array = Array.isArray(this._target) ? this._target : this.ToArray();
        return new EnumerableImpl(null, function () { return new Iterator.ArrayIterator(array, array.length - 1, function (i) { return 0 > i; }, -1); });
    };
    EnumerableImpl.prototype.Select = function (transform) {
        var _this = this;
        return new EnumerableImpl(this, function () { return new Iterator.Select(_this[Symbol.iterator](), transform); });
    };
    EnumerableImpl.prototype.SelectMany = function (selector, result) {
        var _this = this;
        if (selector === void 0) { selector = Constant.selfFn; }
        if (result === void 0) { result = function (x, s) { return s; }; }
        return new EnumerableImpl(this, function () { return new Iterator.SelectMany(_this[Symbol.iterator](), selector, result); });
    };
    EnumerableImpl.prototype.Skip = function (skip) {
        var _this = this;
        return new EnumerableImpl(this, function () {
            var iterator = _this[Symbol.iterator]();
            var i = 0;
            while (i < skip && !(iterator.next().done)) {
                i++;
            }
            return new Iterator.Where(iterator, Constant.trueFn);
        });
    };
    EnumerableImpl.prototype.SkipWhile = function (predicate) {
        var _this = this;
        return new EnumerableImpl(this, function () { return new Iterator.Skip(_this[Symbol.iterator](), predicate); });
    };
    EnumerableImpl.prototype.Take = function (take) {
        var _this = this;
        return new EnumerableImpl(this, function () { return new Iterator.Take(_this[Symbol.iterator](), function (a, n) { return take > n; }); });
    };
    EnumerableImpl.prototype.TakeWhile = function (predicate) {
        var _this = this;
        return new EnumerableImpl(this, function () { return new Iterator.Take(_this[Symbol.iterator](), predicate); });
    };
    EnumerableImpl.prototype.Union = function (second, keySelector) {
        if (keySelector === void 0) { keySelector = Constant.selfFn; }
        var aggregate = [this._target, second];
        return new EnumerableImpl(this, function () { return new Iterator.Union(aggregate[Symbol.iterator](), keySelector); });
    };
    EnumerableImpl.prototype.Where = function (predicate) {
        var _this = this;
        if (predicate === void 0) { predicate = Constant.trueFn; }
        return new EnumerableImpl(this, function () { return new Iterator.Where(_this[Symbol.iterator](), predicate); });
    };
    EnumerableImpl.prototype.Zip = function (second, func) {
        var _this = this;
        return new EnumerableImpl(this, function () { return new Iterator.Zip(_this[Symbol.iterator](), second[Symbol.iterator](), func); });
    };
    return EnumerableImpl;
}());
var OrderedLinq = (function (_super) {
    __extends(OrderedLinq, _super);
    function OrderedLinq(target, factory, equal, reversed) {
        if (reversed === void 0) { reversed = false; }
        var _this = _super.call(this, target, factory) || this;
        _this.equal = equal;
        _this.reversed = reversed;
        _this['thenBy'] = _this.ThenBy;
        _this['thenByDescending'] = _this.ThenByDescending;
        return _this;
    }
    OrderedLinq.prototype[Symbol.iterator] = function () {
        if (!this._factoryArg) {
            this._factoryArg = this._target.ToArray();
            if (this.equal) {
                this._factoryArg.sort(this.equal);
            }
            else {
                this._factoryArg.sort();
            }
        }
        return this._factory(this._factoryArg);
    };
    OrderedLinq.prototype.ThenBy = function (keySelect, equal) {
        var _this = this;
        var comparer = equal ? equal : Constant.defCompare;
        var compare = !keySelect && !equal ? undefined
            : keySelect ? function (a, b) { return comparer(keySelect(a), keySelect(b)); } : function (a, b) { return comparer(a, b); };
        if (this instanceof OrderedLinq) {
            if (!compare)
                return this;
            if (!this.equal) {
                this.equal = compare;
            }
            else {
                var superEqual_1 = this.equal;
                this.equal = function (a, b) {
                    var result = superEqual_1(a, b);
                    return (0 != result) ? result : _this.reversed ? -compare(a, b) : compare(a, b);
                };
            }
            return this;
        }
        else {
            return new OrderedLinq(this, function (array) { return new Iterator.ArrayIterator(array, 0, function (i) { return i >= array.length; }); }, function (a, b) { return equal(keySelect(a), keySelect(b)); });
        }
    };
    OrderedLinq.prototype.ThenByDescending = function (keySelect, equal) {
        var _this = this;
        var comparer = equal ? equal : Constant.defCompareRev;
        var compare = !keySelect && !equal ? undefined
            : keySelect ? function (a, b) { return comparer(keySelect(a), keySelect(b)); } : function (a, b) { return comparer(a, b); };
        if (this instanceof OrderedLinq) {
            if (!compare)
                return this;
            if (!this.equal) {
                this.equal = compare;
            }
            else {
                var superEqual_2 = this.equal;
                this.equal = function (a, b) {
                    var result = superEqual_2(a, b);
                    return (0 != result) ? result : _this.reversed ? -compare(a, b) : compare(a, b);
                };
            }
            return this;
        }
        else {
            return new OrderedLinq(this, function (array) { return new Iterator.ArrayIterator(array, array.length - 1, function (i) { return 0 > i; }, -1); }, function (a, b) { return equal(keySelect(a), keySelect(b)); });
        }
    };
    return OrderedLinq;
}(EnumerableImpl));
//# sourceMappingURL=linq.js.map