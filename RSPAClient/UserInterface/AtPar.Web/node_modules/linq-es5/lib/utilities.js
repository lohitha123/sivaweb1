"use strict";
///////////////////////////////////////////////////////////////////////////////
/** Copyright (c) ENikS.  All rights reserved.                               */
//
// Licensed under the Apache License, Version 2.0  ( the  "License" );  you may 
// not use this file except in compliance with the License.  You may  obtain  a 
// copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required  by  applicable  law  or  agreed  to  in  writing,  software 
// distributed under the License is distributed on an "AS  IS"  BASIS,  WITHOUT
// WARRANTIES OR CONDITIONS  OF  ANY  KIND, either express or implied.  See the 
// License for the specific  language  governing  permissions  and  limitations 
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
//-----------------------------------------------------------------------------
// Utility Functions
//-----------------------------------------------------------------------------
/** Default predicate, always true */
exports.trueFn = function () { return true; };
/** Default transformer, returns self */
exports.selfFn = function (o) { return o; };
/** Default Grouping */
exports.defGrouping = function (a, b) {
    if (!b[exports.CONST_KEY]) {
        b[exports.CONST_KEY] = a;
    }
    return b;
};
exports.defCompare = function (a, b) {
    return a == b ? 0 : a > b ? 1 : -1;
};
exports.defCompareRev = function (a, b) {
    return -exports.defCompare(a, b);
};
/** Returns default value for the type */
function getDefaultVal(type, value) {
    if (value === void 0) { value = undefined; }
    if (typeof type !== exports.CONST_STRING)
        throw new TypeError(exports.CONST_NO_STRING);
    // Handle simple types (primitives and plain function/object)
    switch (type) {
        case exports.CONST_BOOLEAN: return false;
        case exports.CONST_NUMBER: return 0;
        case exports.CONST_OBJECT: return null === value ? null : undefined;
        case exports.CONST_STRING: return exports.CONST_EMPTY_STRING;
        case exports.CONST_FUNCTION: return ("Symbol" === value['name']) ? Symbol() : void 0;
    }
    return undefined;
}
exports.getDefaultVal = getDefaultVal;
/** Returns a map of element bsed on extracted keys  **/
function getKeyedMap(iterable, keySelector, selElement) {
    if (selElement === void 0) { selElement = exports.selfFn; }
    var map = new Map();
    var result, iterator = iterable[Symbol.iterator]();
    while (!(result = iterator.next()).done) {
        var key = keySelector(result.value);
        if (!key)
            continue;
        var group = map.get(key);
        if (!group) {
            group = [];
            map.set(key, group);
        }
        group.push(selElement(result.value));
    }
    return map;
}
exports.getKeyedMap = getKeyedMap;
function getKeyedMapFast(iterable, keySelector) {
    var map = new Map();
    var result, iterator = iterable[Symbol.iterator]();
    while (!(result = iterator.next()).done) {
        var key = keySelector(result.value);
        if (!key)
            continue;
        var group = map.get(key);
        if (!group) {
            group = [];
            map.set(key, group);
        }
        group.push(result.value);
    }
    return map;
}
exports.getKeyedMapFast = getKeyedMapFast;
function getKeys(iterable, keySelector) {
    var set = new Set();
    var otherIterator = iterable[Symbol.iterator]();
    var result;
    if (keySelector) {
        while (!(result = otherIterator.next()).done) {
            var key = keySelector(result.value);
            if (key)
                set.add(key);
        }
    }
    else {
        while (!(result = otherIterator.next()).done) {
            if (result.value)
                set.add(result.value);
        }
    }
    return set;
}
exports.getKeys = getKeys;
//-----------------------------------------------------------------------------
//  Constants
//-----------------------------------------------------------------------------
exports.CONST_INVALID_KEY = "Key selector returned undefined Key";
exports.CONST_NO_STRING = "Type must be a string.";
exports.CONST_DUPLICATE = "Object already has property [key]";
exports.CONST_NOTHING_FOUND = "No element satisfies the condition in predicate";
exports.CONST_NO_ELEMENTS = "The source sequence is empty.";
exports.CONST_TOO_MANY = "More than one element satisfies the condition in predicate.";
exports.CONST_OUTOFRANGE = "Argument Out Of Range";
exports.CONST_KEY = "key";
exports.CONST_UNDEFINED = "undefined";
exports.CONST_LENGTH = "length";
exports.CONST_FUNCTION = "function";
exports.CONST_BOOLEAN = "boolean";
exports.CONST_NUMBER = "number";
exports.CONST_OBJECT = "object";
exports.CONST_STRING = "string";
exports.CONST_SYMBOL = "symbol";
exports.CONST_EMPTY_STRING = "";
//# sourceMappingURL=utilities.js.map